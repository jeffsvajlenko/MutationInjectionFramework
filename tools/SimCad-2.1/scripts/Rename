#!/bin/bash 
# Generic renaming script
#
# Usage:  Rename granularity language pcfile.xml renaming 
#           where  granularity is one of:  { functions blocks }
#           and    language    is one of:  { c java cs py }
#           and    pcfile.xml is an edtracted potential clones file
#           and    renaming    is one of:  { blind, consistent }

ulimit -s hard


debug_mode="false"

# Find our installation
lib="${0%%/scripts/Rename}"
if [ ! -d ${lib} ]
then
echo "*** Error:  cannot find simCad installation ${lib}"
echo ""
exit 99
fi

# check granularity
if [ "$1" = "functions" ] || [ "$1" = "blocks" ]
then
granularity=$1
shift
else
echo "error in granularity parameter"
echo "Usage:  Rename granularity language pcfile.xml renaming "
echo "          where  granularity is one of:  { functions blocks }"
echo "          and    language    is one of:  { c java cs py }"
echo "          and    pcfile.xml is an edtracted potential clones file"
echo "          and    renaming    is one of:  { blind, consistent }"
exit 99
fi

# check language
if [ "$1" = "c" ] || [ "$1" = "java" ] || [ "$1" = "cs" ] || [ "$1" = "py" ] || [ "$1" = "wsdl" ]
then
language=$1
shift
else
echo "error in language parameter"
echo "Usage:  Rename granularity language pcfile.xml renaming "
echo "          where  granularity is one of:  { functions blocks }"
echo "          and    language    is one of:  { c java cs py }"
echo "          and    pcfile.xml is an edtracted potential clones file"
echo "          and    renaming    is one of:  { blind, consistent }"
exit 99
fi

# check we have a potential clones file
if [ "$1" != "" ]
then
pcfile=${1%%.xml}
shift
else
pcfile=""
fi

if [ ! -s "${pcfile}.xml" ]
then
echo "clone file ${pcfile}.xml not exist"
echo "Usage:  Rename granularity language pcfile.xml renaming "
echo "          where  granularity is one of:  { functions blocks }"
echo "          and    language    is one of:  { c java cs py }"
echo "          and    pcfile.xml is an edtracted potential clones file"
echo "          and    renaming    is one of:  { blind, consistent }"
exit 99
fi

# check renaming
if [ "$1" = "blind" ] || [ "$1" = "consistent" ]
then
renaming=$1
shift
else
echo "error in renaming parameter"
echo "Usage:  Rename granularity language pcfile.xml renaming "
echo "          where  granularity is one of:  { functions blocks }"
echo "          and    language    is one of:  { c java cs py }"
echo "          and    pcfile.xml is an edtracted potential clones file"
echo "          and    renaming    is one of:  { blind, consistent }"
exit 99
fi

# check we have the renamer we need
if [ ! -s ${lib}/txl/${language}-rename-${renaming}-${granularity}.txl ]
then
echo "*** ERROR: ${renaming} renaming not supported for ${language} ${granularity}"
exit 99
fi



if [ ${debug_mode} = "true" ]
then
echo "system      =${system}"
echo "pcfile      =${pcfile}"
echo "granularity =${granularity}"
echo "language    =${language}"
echo "rename      =${renaming}"
echo ""
fi


# Clean up any previous results
/bin/rm -f "${pcfile}-${renaming}.xml"


# Rename potential clones
date

if [ -x ${lib}/txl/${language}-rename-${renaming}-${granularity}.x ]
then
echo "${lib}/tools/streamprocess.x '${lib}/txl/${language}-rename-${renaming}-${granularity}.x stdin' < ${pcfile}.xml > ${pcfile}-${renaming}.xml"
#time 
${lib}/tools/streamprocess.x "${lib}/txl/${language}-rename-${renaming}-${granularity}.x stdin" < "${pcfile}.xml" > "${pcfile}-${renaming}.xml"
else
echo "${lib}/tools/streamprocess.x 'txl -q -s 400 stdin ${lib}/txl/${language}-rename-${renaming}-${granularity}.txl' < ${pcfile}.xml > ${pcfile}-${renaming}.xml"
#time 
${lib}/tools/streamprocess.x "txl -q -s 400 stdin ${lib}/txl/${language}-rename-${renaming}-${granularity}.txl" < "${pcfile}.xml" > "${pcfile}-${renaming}.xml"
fi

result=$?

echo ""
date
echo ""

exit $result
