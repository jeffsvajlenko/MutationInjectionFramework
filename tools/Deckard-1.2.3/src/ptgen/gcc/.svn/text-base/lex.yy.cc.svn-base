#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 76
#define YY_END_OF_BUFFER 77
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[426] =
    {   0,
        0,    0,    0,    0,   77,   75,   74,   74,   63,   75,
       69,   62,   75,   56,   57,   67,   66,   54,   65,   61,
       68,   34,   34,   60,   51,   70,   55,   70,   73,   31,
       31,   58,   59,   71,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       52,   72,   53,   64,    3,   76,   50,    0,   39,    0,
       41,   53,   47,    0,    0,   44,   45,   46,    0,   37,
        1,    2,   38,   33,    0,   34,    0,   34,   59,   52,
       58,   43,   49,   42,   31,   31,    0,    0,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    8,   31,   31,

       31,   31,   31,   31,   14,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   48,   35,   40,    0,
       37,   37,    0,   38,   33,    0,   36,   32,   29,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   29,   31,   31,   31,   31,   24,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       12,   31,   31,   21,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
        0,   37,    0,   37,    0,   38,   36,   32,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   11,   31,    5,   31,   31,   31,   31,
        9,   10,   31,   31,   13,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
        0,   37,   31,   31,   31,   24,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
        4,   22,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   20,   31,   31,
       23,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   30,   31,   31,   30,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   15,   16,   17,   18,   19,   31,   25,
       31,   31,   31,   31,   31,   24,   31,   22,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    7,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   11,   31,   31,   31,   31,   25,
       31,    6,   31,   26,   31,   31,   22,   31,   31,   31,
       31,   31,   31,   31,   31,   30,   31,   31,   31,   31,

       31,   11,   22,   25,   22,   26,   31,   27,   31,   31,
       31,   31,   31,   31,   31,   31,   27,   31,   28,   31,
       31,   31,   31,   31,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   26,   26,   26,   27,   28,
       29,   29,   30,   29,   29,   31,   29,   32,   29,   29,
       29,   29,   29,   29,   33,   29,   29,   34,   29,   29,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   29,   49,   50,   51,   52,
       53,   54,   29,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    1,    4,    3,
        3,    3,    3,    3,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[431] =
    {   0,
        0,  947,    0,    0,  952,  954,  954,  954,  928,   63,
       46,   63,  914,  954,  954,  926,   59,  954,   60,   58,
       68,   84,   77,  924,  954,  100,  924,   55,  954,  907,
       85,  954,  954,  922,  905,   58,   34,   66,   86,   94,
       59,   87,   98,   99,   92,  109,  102,   49,  108,  112,
      954,  106,  954,  954,  954,  954,  954,  127,  954,  940,
      954,  954,  954,  140,  151,  954,  954,  954,  926,  154,
      954,  954,  156,  161,  178,  176,    0,  194,  954,  954,
      954,  918,  954,  917,  900,  129,  153,  902,  235,  114,
      151,  163,  123,  139,  175,  178,  179,  164,  181,  184,

      189,  190,  192,  193,  898,  201,  196,  260,  202,  210,
      263,  197,  218,  265,  261,  262,  954,  954,  954,  307,
      954,  296,  315,  954,  298,  241,  319,  312,  897,  273,
      303,  312,  300,  293,  296,  319,  313,  322,  324,  268,
      334,  335,  337,  340,  341,  342,  343,  896,  344,   42,
      231,  346,  348,  349,  361,  354,  363,  359,  365,  372,
      895,  369,  375,  894,  374,  376,  377,  297,  378,  379,
      382,  380,  386,  388,  391,  389,  390,  393,  400,  402,
      428,  430,  438,  954,  436,  441,  954,  431,  432,  426,
      428,  427,  411,  431,  434,  440,  445,  443,  456,  446,

      448,  466,  449,  462,  451,  470,  457,  472,  474,  475,
      477,  481,  476,  893,  479,  892,  483,  485,  484,  486,
      891,  890,  490,  492,  889,  495,  496,  498,  499,  500,
      502,  505,  511,  509,  521,  522,  504,  516,  525,  527,
      549,  555,  539,  531,  537,  888,  533,  541,  545,  546,
      548,  542,  551,  552,  559,  563,  564,  565,  568,  567,
      570,  571,  575,  576,  582,  573,  584,  585,  588,  592,
      887,  886,  593,  594,  596,  597,  599,  595,  602,  603,
      614,  194,  609,  607,  615,  617,  620,  885,  619,  621,
      884,  631,  627,  629,  628,  634,  635,  636,  637,  639,

      638,  641,  879,  642,  647,  645,  648,  651,  657,  656,
      664,  665,  666,  667,  672,  670,  675,  668,  676,  678,
      681,  683,  687,  868,  867,  866,  865,  864,  679,  863,
      689,  691,  704,  693,  695,  696,  701,  862,  706,  708,
      709,  710,  711,  705,  723,  713,  716,  725,  726,  727,
      728,  729,  730,  731,  732,  734,  738,  861,  739,  740,
      747,  748,  859,  750,  752,  749,  757,  759,  760,  761,
      763,  764,  765,  766,  858,  769,  767,  771,  770,  857,
      772,  831,  776,  698,  779,  787,  788,  789,  790,  791,
      793,  796,  795,  797,  803,  800,  801,  802,  812,  816,

      810,  814,  574,  820,  438,  822,  824,  404,  825,  350,
      826,  827,  828,  830,  834,  837,  835,  839,  836,  842,
      850,  843,  269,  851,  954,  908,  912,  916,  918,  167
    } ;

static yyconst flex_int16_t yy_def[431] =
    {   0,
      425,    1,  426,  426,  425,  425,  425,  425,  425,  427,
      425,  425,  428,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  429,
      429,  425,  425,  425,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      425,  425,  425,  425,  425,  425,  425,  427,  425,  427,
      425,  425,  425,  428,  428,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  430,  425,  425,  425,
      425,  425,  425,  425,  429,  429,  427,  428,  425,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  430,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      425,  425,  425,  425,  425,  425,  425,  425,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      425,  425,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,    0,  425,  425,  425,  425,  425
    } ;

static yyconst flex_int16_t yy_nxt[1022] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   30,   30,   30,   30,
       31,   30,   30,   30,   32,    6,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   30,   43,   30,   44,
       30,   30,   30,   30,   45,   46,   47,   48,   49,   50,
       30,   30,   30,   51,   52,   53,   54,   59,   61,   62,
       63,   66,   86,   69,   67,   70,   70,   83,   84,   71,
       86,   61,   61,   68,   72,   61,   92,   86,   93,   87,
       61,  164,   73,   88,   78,   78,   86,   86,   60,   73,

      114,   74,   74,   75,   86,   94,   80,   76,  102,   76,
       75,  103,   95,   90,   76,   91,   76,   77,   96,   81,
       75,   82,   83,   86,   86,   86,   76,   75,   61,   97,
       86,   59,   86,   76,   76,  108,   86,   86,   98,  104,
       86,   76,  105,   99,   77,  100,   86,   86,  118,  106,
       86,  107,   86,  425,  101,  109,  110,   59,  116,   64,
      115,   86,   60,  113,  148,  111,  151,   86,  112,  128,
      117,   70,   70,  122,  122,   65,   73,   86,   74,   74,
      120,  121,  123,  124,  121,  129,  124,   75,   60,   86,
      126,  125,  126,  125,  152,  127,  127,  120,  121,  123,

      124,   86,   86,  121,   75,  124,   76,  149,   76,   73,
      125,   78,   78,   86,  153,  150,   86,   86,  125,   86,
       75,  156,   86,  155,   76,   76,   76,   86,   86,  154,
       86,   86,   86,   76,   86,   86,  157,   75,  325,   86,
       86,  158,  160,   76,  174,  159,  161,  165,   86,  162,
      163,   76,   85,   85,  169,  170,   86,  164,  127,  127,
       85,   85,   85,   85,  130,   85,   85,   85,   85,   86,
      215,  175,  171,   86,  131,   85,  132,  133,  134,  135,
       85,   85,  136,  137,  138,  139,   85,   85,  140,  141,
      142,  143,  144,  145,  146,  147,   85,   85,   86,   86,

       86,   86,  172,   86,  189,  166,   86,  424,  178,  180,
      179,   86,  176,  122,  122,  167,  168,  173,  204,  181,
      177,  181,  183,  184,  182,  182,  184,  185,  125,  185,
      125,   86,  186,  186,   86,   86,  127,  127,   86,  183,
      184,   86,  188,  196,  188,  184,  187,  125,  198,  187,
       86,   86,  190,  197,  229,  125,  191,   86,  192,  193,
       86,  188,   86,  187,  194,  195,  201,  203,  187,  188,
      199,  200,   86,   86,  202,   86,  206,  205,   86,   86,
       86,   86,   86,  207,   86,  212,   86,   86,  415,  216,
      213,  209,   86,  211,  220,  210,  214,   86,  208,   86,

      219,   86,  164,   86,  217,  218,  221,   86,  223,  222,
       86,  224,   86,   86,   86,   86,   86,   86,   86,  164,
       86,  225,  226,  227,   86,  232,   86,   86,   86,   86,
      231,   86,  230,  228,  236,  164,  233,  238,   86,  239,
       86,  237,  414,  234,  235,  182,  182,  182,  182,   86,
      241,  240,  241,  186,  186,  242,  242,  121,  186,  186,
      121,  188,  243,  188,   86,   86,   86,  247,  124,   86,
       86,  124,   86,  244,  121,  245,  412,  246,   86,  121,
      188,   86,  248,   86,   86,  124,   86,   86,  188,   86,
      124,  249,  252,  250,   86,   86,  257,  254,  251,  260,

       86,  253,  258,  255,   86,  256,  262,  259,   86,  261,
       86,  264,   86,   86,   86,   86,  263,   86,  267,   86,
      269,   86,   86,   86,   86,  265,  268,  271,   86,  270,
       86,  266,  273,   86,   86,  275,   86,   86,   86,  272,
       86,  274,   86,   86,  276,  281,  277,   86,  164,   86,
      284,  278,  279,  280,   86,  288,  164,  282,  283,   86,
       86,  289,  285,   86,  286,   86,  242,  242,  292,   86,
      291,   86,  242,  242,  287,   86,  293,   86,  294,   86,
       86,  290,  184,   86,   86,  184,   86,  296,  298,   86,
       86,  301,  299,  305,  304,  302,  297,   86,  303,  184,

      300,   86,   86,   86,  184,   86,   86,  308,   86,   86,
      307,   86,  411,   86,   86,  306,  310,  309,  314,  315,
       86,  312,   86,   86,  318,  316,   86,  313,  317,  311,
       86,   86,   86,   86,   86,   86,  303,   86,  303,  164,
       86,   86,  214,  321,  320,   86,  319,   86,  214,  323,
      326,  322,   86,   86,  324,   86,  164,   86,   86,   86,
      329,  328,  333,  327,  330,   86,  336,   86,  332,   86,
      331,  335,   86,   86,   86,   86,   86,   86,  334,   86,
       86,  337,  341,   86,  129,   86,   86,  345,  340,   86,
      303,  338,  343,  344,   86,   86,  339,  347,  342,  346,

      348,  303,   86,   86,   86,   86,   86,  349,   86,  303,
       86,  352,  350,   86,   86,  356,   86,   86,  354,   86,
      351,   86,  353,  214,  355,   86,  359,   86,  360,   86,
      363,   86,  361,   86,   86,  357,  397,  358,  365,   86,
      362,  366,   86,   86,   86,  364,   86,   86,   86,   86,
      370,   86,  129,  368,   86,  369,  375,  371,  372,  376,
      373,   86,  374,   86,   86,   86,   86,   86,   86,   86,
       86,  214,   86,  303,  380,  379,   86,   86,   86,  381,
      378,  382,  377,  303,  303,   86,   86,   86,   86,  164,
       86,  272,  385,  214,  384,  387,  272,   86,   86,   86,

      388,   86,   86,   86,   86,   86,  386,   86,   86,   86,
       86,  393,  389,  129,  396,  303,  303,   86,  392,  303,
      303,  395,  390,  303,  303,   86,   86,   86,   86,   86,
      303,  402,  129,   86,   86,  404,  398,  303,   86,  406,
       86,   86,  401,  399,  129,  400,  405,  407,   86,  129,
       86,  403,   86,  129,   86,  408,  129,  129,   86,  409,
       86,  410,   86,   86,  387,  387,   86,  303,  417,   86,
      129,  413,  419,   86,   86,   86,  129,   86,  129,  416,
       86,   86,  129,  129,  420,  423,  129,  418,   86,  396,
      129,  129,  129,  422,  421,  394,  391,  383,  303,   86,

      367,   86,   86,   86,   86,   86,   86,  129,   56,   56,
       56,   56,   58,   58,   58,   58,   64,   86,   64,   64,
       85,   85,   86,   86,   86,   86,  295,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   65,   86,   61,
       61,  119,  425,   89,   61,   86,   57,   79,   61,   65,
       57,  425,   55,    5,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425
    } ;

static yyconst flex_int16_t yy_chk[1022] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   10,   11,   11,
       12,   17,   37,   20,   19,   20,   20,   28,   28,   21,
      150,   17,   19,   19,   21,   12,   37,   48,   37,   31,
       21,  150,   23,   31,   23,   23,   36,   41,   10,   22,

       48,   22,   22,   23,   38,   38,   26,   23,   41,   23,
       22,   41,   38,   36,   22,   36,   22,   22,   38,   26,
       23,   26,   26,   31,   39,   42,   23,   22,   52,   39,
       45,   58,   40,   22,   23,   45,   43,   44,   39,   42,
       47,   22,   43,   40,   22,   40,   49,   46,   64,   43,
       50,   44,   90,   65,   40,   46,   46,   87,   50,   65,
       49,   93,   58,   47,   90,   46,   93,   86,   46,  430,
       52,   70,   70,   73,   73,   64,   74,   94,   74,   74,
       70,   70,   73,   73,   70,   86,   73,   74,   87,   91,
       75,   74,   75,   74,   94,   75,   75,   70,   70,   73,

       73,   92,   98,   70,   74,   73,   76,   91,   76,   78,
       74,   78,   78,   95,   95,   92,   96,   97,   74,   99,
       78,   98,  100,   97,   78,   76,   78,  101,  102,   96,
      103,  104,  282,   76,  107,  112,   99,   78,  282,  106,
      109,  100,  102,   78,  112,  101,  103,  107,  110,  104,
      106,   78,   89,   89,  109,  110,  113,  106,  126,  126,
       89,   89,   89,   89,   89,   89,   89,   89,   89,  151,
      151,  113,  110,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,  108,  115,

      116,  111,  111,  114,  130,  108,  140,  423,  115,  116,
      115,  130,  114,  122,  122,  108,  108,  111,  140,  120,
      114,  120,  122,  122,  120,  120,  122,  123,  125,  123,
      125,  134,  123,  123,  135,  168,  127,  127,  133,  122,
      122,  131,  128,  133,  128,  122,  127,  125,  135,  127,
      132,  137,  131,  134,  168,  125,  131,  136,  131,  131,
      138,  128,  139,  127,  132,  132,  137,  139,  127,  128,
      136,  136,  141,  142,  138,  143,  142,  141,  144,  145,
      146,  147,  149,  143,  152,  146,  153,  154,  410,  152,
      147,  144,  156,  145,  156,  144,  149,  158,  143,  155,

      155,  157,  153,  159,  154,  154,  157,  162,  159,  158,
      160,  160,  165,  163,  166,  167,  169,  170,  172,  165,
      171,  162,  163,  166,  173,  171,  174,  176,  177,  175,
      170,  178,  169,  167,  175,  178,  172,  177,  179,  179,
      180,  176,  408,  173,  174,  181,  181,  182,  182,  193,
      183,  180,  183,  185,  185,  183,  183,  182,  186,  186,
      182,  188,  189,  188,  190,  192,  191,  193,  186,  194,
      189,  186,  195,  190,  182,  191,  405,  192,  196,  182,
      188,  198,  194,  197,  200,  186,  201,  203,  188,  205,
      186,  195,  197,  196,  199,  207,  200,  198,  196,  203,

      204,  197,  201,  199,  202,  199,  205,  202,  206,  204,
      208,  207,  209,  210,  213,  211,  206,  215,  210,  212,
      212,  217,  219,  218,  220,  208,  211,  215,  223,  213,
      224,  209,  218,  226,  227,  220,  228,  229,  230,  217,
      231,  219,  237,  232,  223,  231,  226,  234,  224,  233,
      234,  227,  228,  229,  238,  237,  230,  232,  233,  235,
      236,  238,  235,  239,  236,  240,  241,  241,  243,  244,
      240,  247,  242,  242,  236,  245,  244,  243,  245,  248,
      252,  239,  242,  249,  250,  242,  251,  247,  249,  253,
      254,  251,  249,  254,  253,  251,  248,  255,  252,  242,

      250,  256,  257,  258,  242,  260,  259,  257,  261,  262,
      256,  266,  403,  263,  264,  255,  259,  258,  263,  264,
      265,  261,  267,  268,  268,  265,  269,  262,  266,  260,
      270,  273,  274,  278,  275,  276,  269,  277,  267,  275,
      279,  280,  277,  274,  273,  284,  270,  283,  276,  279,
      283,  278,  281,  285,  280,  286,  281,  289,  287,  290,
      286,  285,  292,  284,  287,  293,  295,  294,  290,  292,
      289,  294,  296,  297,  298,  299,  301,  300,  293,  302,
      304,  296,  300,  306,  295,  305,  307,  306,  299,  308,
      305,  297,  302,  304,  310,  309,  298,  309,  301,  307,

      310,  308,  311,  312,  313,  314,  318,  311,  316,  314,
      315,  315,  312,  317,  319,  319,  320,  329,  317,  321,
      313,  322,  316,  329,  318,  323,  322,  331,  323,  332,
      333,  334,  331,  335,  336,  320,  384,  321,  335,  337,
      332,  337,  333,  344,  339,  334,  340,  341,  342,  343,
      341,  346,  336,  339,  347,  340,  346,  342,  343,  347,
      344,  345,  345,  348,  349,  350,  351,  352,  353,  354,
      355,  352,  356,  354,  353,  351,  357,  359,  360,  355,
      349,  357,  348,  350,  356,  361,  362,  366,  364,  361,
      365,  362,  365,  359,  364,  367,  360,  368,  369,  370,

      370,  371,  372,  373,  374,  377,  366,  376,  379,  378,
      381,  379,  373,  367,  383,  368,  369,  385,  377,  371,
      372,  381,  374,  378,  376,  386,  387,  388,  389,  390,
      390,  391,  383,  393,  392,  394,  385,  392,  396,  397,
      398,  395,  389,  386,  387,  388,  395,  398,  401,  391,
      399,  393,  402,  394,  400,  399,  396,  397,  404,  400,
      406,  401,  407,  409,  411,  412,  413,  409,  414,  382,
      402,  407,  415,  417,  419,  416,  404,  418,  406,  413,
      420,  422,  411,  412,  416,  422,  414,  414,  421,  424,
      415,  417,  419,  421,  418,  380,  375,  363,  420,  358,

      338,  330,  328,  327,  326,  325,  324,  424,  426,  426,
      426,  426,  427,  427,  427,  427,  428,  303,  428,  428,
      429,  429,  291,  288,  272,  271,  246,  225,  222,  221,
      216,  214,  164,  161,  148,  129,  105,   88,   85,   84,
       82,   69,   60,   35,   34,   30,   27,   24,   16,   13,
        9,    5,    2,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "c.l"
#line 9 "c.l"
#include <stdio.h>
#include <ptree.h>
#include "pt_c.tab.hh"
#include <map>
#include <string>
using namespace std;

extern map<string,int> name2id;
void count();
void comment();
void cpp_comment();
void macro();

// The global variables are not good for reentrance.
// But for now, the wrong line number doesn't hurt our bug finding because
// we rely on terminal IDs instead of line numbers.
int column = 0;
int line = 1;

#define YY_DECL int yylex(YYSTYPE *yylvalp)


#line 850 "lex.yy.cc"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 34 "c.l"


#line 1044 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 426 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 954 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 36 "c.l"
{ count(); comment();}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 37 "c.l"
{ count(); cpp_comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "c.l"
{count(); macro();}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 40 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["BREAK"],yytext,line);
		return(BREAK); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 44 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CASE"],yytext,line);
		return(CASE); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONTINUE"],yytext,line);
		return(CONTINUE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["DEFAULT"],yytext,line);
		return(DEFAULT); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 56 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["DO"],yytext,line);
		return(DO); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 60 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ELSE"],yytext,line);
		return(ELSE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ENUM"],yytext,line);
		return(ENUM); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["SCSPEC"],yytext,line);
		return(SCSPEC); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["FOR"],yytext,line);
		return(FOR); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 76 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["GOTO"],yytext,line);
		return(GOTO); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 80 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["IF"],yytext,line);
		return(IF); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["RETURN"],yytext,line);
		return(RETURN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 88 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["SIZEOF"],yytext,line);
		return(SIZEOF); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["STATIC"],yytext,line);
		return(STATIC); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 96 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["STRUCT"],yytext,line);
		return(STRUCT); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 100 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["SWITCH"],yytext,line);
		return(SWITCH); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["UNION"],yytext,line);
		return(UNION); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 108 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["TYPESPEC"],yytext,line);
		return(TYPESPEC);
		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["TYPE_QUAL"],yytext,line);
		return(TYPE_QUAL); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 117 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["WHILE"],yytext,line);
		return(WHILE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 121 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ASM_KEYWORD"],yytext,line);
		return(ASM_KEYWORD); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["TYPEOF"],yytext,line);
		return(TYPEOF); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 130 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ALIGNOF"],yytext,line);
		return(ALIGNOF); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 135 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ATTRIBUTE"],yytext,line);
		return(ATTRIBUTE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 140 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["EXTENSION"],yytext,line);
		return(EXTENSION); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 144 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["TYPENAME"],yytext,line);
		return(TYPENAME); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 148 "c.l"
{count();}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 150 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["IDENTIFIER"],yytext,line);
		return(IDENTIFIER); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 154 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 158 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 162 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 166 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 171 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 175 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 179 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["CONSTANT"],yytext,line);
		return(CONSTANT); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 184 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["STRING"],yytext,line);
		return(STRING); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 188 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ELLIPSIS"],yytext,line);
		return(ELLIPSIS); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 192 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ASSIGN"],yytext,line);
		return(ASSIGN); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 196 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["RSHIFT"],yytext,line);
		return(RSHIFT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 200 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["LSHIFT"],yytext,line);
		return(LSHIFT); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 204 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["PLUSPLUS"],yytext,line);
		return(PLUSPLUS); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 208 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["MINUSMINUS"],yytext,line);
		return(MINUSMINUS); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 212 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["POINTSAT"],yytext,line);
		return(POINTSAT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 216 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ANDAND"],yytext,line);
		return(ANDAND); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 220 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["OROR"],yytext,line);
		return(OROR); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 224 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ARITHCOMPARE"],yytext,line);
		return(ARITHCOMPARE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 228 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["EOCOMPARE"],yytext,line);
		return(EQCOMPARE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 232 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["';'"],yytext,line);
		return(';'); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 236 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'{'"],yytext,line);
		return('{'); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 240 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'}'"],yytext,line);
		return('}'); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["','"],yytext,line);
		return(','); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 248 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'='"],yytext,line);
		return('='); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 252 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'('"],yytext,line);
		return('('); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 256 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["')'"],yytext,line);
		return(')'); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'['"],yytext,line);
		return('['); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 264 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["']'"],yytext,line);
		return(']'); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 268 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["':'"],yytext,line);
		return(':'); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 272 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'.'"],yytext,line);
		return('.'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 276 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'&'"],yytext,line);
		return('&'); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'!'"],yytext,line);
		return('!'); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 284 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'~'"],yytext,line);
		return('~'); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 288 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'-'"],yytext,line);
		return('-'); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 292 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'+'"],yytext,line);
		return('+'); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 296 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'*'"],yytext,line);
		return('*'); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 300 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'/'"],yytext,line);
		return('/'); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 304 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'%'"],yytext,line);
		return('%'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 308 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["ARITHCOMPARE"],yytext,line);
		return(ARITHCOMPARE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 312 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'^'"],yytext,line);
		return('^'); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 316 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'|'"],yytext,line);
		return('|'); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 320 "c.l"
{
		count();
		yylvalp->t = new Terminal(name2id["'?'"],yytext,line);
		return('?'); }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 325 "c.l"
{
		count();
		 }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 328 "c.l"
{count();}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 330 "c.l"
ECHO;
	YY_BREAK
#line 1721 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 426 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 426 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 425);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 330 "c.l"



int yywrap()
{
	return(1);
}



void comment()
{
	int c;

	for (;;) {
		while ( (c = yyinput()) != '*' && c != EOF ) {
			if (c=='\n') {
				line++;column=0;
			} else {
				column++;
			}
		}

                if ( c == '*' ) {
			while ( (c = yyinput()) == '*' )
				column++;
			column++;
			if (c =='\n') {line++;column=0;}
			if ( c == '/' )
				break;
		}

                if ( c == EOF ) {
			break;	
		}
            }
}

void cpp_comment()
{
	int c;
	while ((c = yyinput()) != '\n' && c != 0 && c!=EOF)
		column++;
	line++;
	column= 0;
}

void macro()
{
	int c,last=0;
	again:
	last= 0;
	while ((c = yyinput()) != '\n' && c != 0 && c!=EOF) {
		last= c;
	}
	if (c == '\n' && last == '\\')  {
		line++;
		goto again;
	}

	line++;
	column= 0;
}

void count()
{
	int i;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n') {
			column = 0;
			line++;
		} else if (yytext[i] == '\t')
			column += 4;
		else
			column++;

	//ECHO;
}


