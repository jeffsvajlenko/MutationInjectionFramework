#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1437] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  164,  112,  112,  162,  120,   97,  138,  121,
       97,   97,   97,  141,   97,   97,   97,   97,   97,   97,
       97,  103,  103,   97,   97,   97,   97,   97,   97,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   97,
      118,  140,   98,   97,  100,  143,  159,  148,  143,  105,
      105,  119,  148,  162,  145,  148,  144,  161,  162,  146,
      162,  160,  158,  143,  162,  119,   38,   37,  102,  101,

      128,  131,  131,  123,  123,  123,  122,  122,  122,  112,
        0,  112,  115,  113,  112,  120,   76,    0,  136,    0,
      117,   84,  134,   91,   87,    0,  137,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   81,   71,
       79,   72,   80,   36,  106,   83,  127,  121,   82,  106,
      103,    0,    0,   39,    0,    0,    0,    0,   95,   77,
       76,   75,   68,   78,   96,  133,  118,  118,  118,  118,
       23,  138,  141,    0,  118,  118,  118,  118,  118,  118,
       15,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,    9,  118,  118,  118,  118,  118,   92,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       89,  118,   88,   90,  143,  147,   99,   36,  105,    0,
      119,  157,  153,  155,  157,  149,  145,  150,  144,    0,
      151,  152,  146,  154,  158,  143,  142,  142,  119,    0,
       37,  101,  128,  130,  129,  123,  123,  124,  125,  112,
        0,  114,    0,    0,   74,  117,  134,  134,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  106,
        0,  106,  104,  135,  132,    0,    0,   85,   73,   86,
      133,  133,  118,   93,  118,    0,  118,  118,  118,  118,
      118,  118,  118,  118,    2,  118,  118,  118,  118,  118,

      118,  118,  118,   16,  118,  118,  118,  118,  118,  118,
      118,  118,   40,  118,  118,  118,  118,  118,  118,  118,
      118,    6,  118,   56,   42,  118,   94,  118,  118,  118,
      118,  118,  105,  155,  156,  112,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
      135,  135,  132,  132,    0,    0,    0,  118,  118,  118,
       26,  118,  118,  118,  118,  118,  118,  118,   30,   12,
      118,  118,  118,  118,  118,  118,   51,    1,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   69,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  155,  156,  112,    0,
      116,    0,    0,    0,    0,    0,    0,    0,   43,    0,
        0,    0,    0,    0,    0,  139,  139,    0,  118,   70,
       28,    7,   32,   41,    4,  118,  118,  118,  118,   59,
      118,  118,   11,  118,  118,  118,   63,  118,  118,  118,
      118,  118,  118,  118,   58,   31,  118,  118,  118,  118,
      118,  118,  118,    8,   67,   13,  118,  118,  118,  118,
      118,  118,  112,    0,  116,  116,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,   44,    0,    0,
        0,  118,  118,  118,  118,   10,  118,   17,  118,  118,

      118,  118,  118,   57,  118,  118,  118,  118,  118,  118,
       66,  118,    5,   61,   24,  118,  118,  118,  118,  118,
      118,  112,    0,    0,    0,   47,    0,    0,    0,    0,
        0,    0,    0,   50,    0,  118,  118,   20,   27,  118,
      118,  118,  118,   34,   18,  118,  118,   52,  118,  118,
       64,  118,   54,  118,  118,  118,  118,  118,  118,  112,
        0,    0,    0,   46,    0,    0,    0,   48,    0,   45,
        0,   62,   29,  118,  118,  118,   14,    3,  118,  118,
      118,  118,  118,  118,  118,  111,  118,  118,  110,  118,
      112,    0,    0,    0,  132,  118,  118,   25,  118,  118,

      118,   33,   65,  118,  107,  118,  118,  118,  112,    0,
        0,  132,  132,   21,   19,   35,  118,   22,  118,  118,
      118,  109,  112,    0,    0,  118,  118,  118,  118,  112,
        0,    0,   53,   55,  108,  118,  112,    0,    0,  118,
      112,    0,    0,  118,  112,    0,    0,   60,  112,    0,
        0,  112,    0,    0,    0,  112,    0,    0,    0,    0,
        0,  112,    0,    0,    0,    0,  112,    0,    0,    0,
        0,  112,    0,    0,    0,    0,  113,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,

        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,  112,    0,  112,    0,  112,
        0,  112,    0,  112,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   16,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   55,   57,   58,   59,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   54,   85,   86,   87,   16,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54
    } ;

static yyconst flex_int32_t yy_meta[88] =
    {   0,
        1,    2,    3,    3,    4,    1,    4,    5,    4,    4,
        6,    4,    4,    7,    4,    4,    4,    4,    4,    8,
        8,    8,    4,    9,   10,    4,    4,    4,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    1,    1,    4,   12,    1,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    1,    4,    1
    } ;

static yyconst flex_int16_t yy_base[1861] =
    {   0,
     3538, 3537,    0,    0,   87,    0,  164,  165,  171,  172,
      173,  232,  319,    0,  406,    0, 3545, 3544, 3543, 3530,
      177,  179, 3539, 3513,  485, 9105,  187, 3509,  489, 9105,
        0,  166,  175,  485,  562, 9105, 3508,  172,  182,  174,
      196,  479,  484, 3510,  505,  192,  176,  186, 3503,  473,
      510,  497,  485,  548,  487,  458,    0,  603,  474,  490,
      481,  498,  505,  522,  530,  539,  523,  536,  539, 3499,
     3463, 9105, 9105,  499, 9105,    0, 9105,  681, 3484,  594,
      203,    0, 9105,  627, 3434, 3484, 3425, 9105,  528, 3473,
      693, 9105,  652,  656,  696,  631, 9105,    0, 9105,    0,

        0, 3457, 3454,  715, 9105, 3469, 3441, 9105, 3439, 3436,
      716, 3416, 3414,  551,  562,  649, 3410,  504, 9105,  635,
        0, 9105,  653, 9105, 9105,  617, 9105, 3429,    0,  572,
      683,  598,  682,  681,  697,  695,  681,  688, 9105, 9105,
     9105, 9105, 9105, 9105,  713, 9105, 3415, 9105, 9105,  749,
      765,  644,    0, 9105,  771, 3400, 3395,  684,  644, 9105,
     9105, 3390, 9105, 9105, 3389,  746,    0,  717,  733,  726,
        0,  665,  728, 3387,  755,  742,  762,  750,  766,  760,
        0,  765,  755,  760,  774,  778,  777,  766,  763,  768,
      768,    0,  768,  799,  770,  771,  775,    0,  807,  797,

      806,  805,  815,  807,  802,  812,  827,  816,  826,  818,
     9105,  865, 9105, 9105,    0, 9105, 9105,    0,  846,    0,
        0, 9105, 9105,  735,    0, 9105, 3352, 9105, 3354, 3341,
     9105, 9105, 3386, 9105,  863,  865, 9105, 3388,  876,  812,
        0,    0,    0, 9105, 9105,  906, 9105, 9105, 9105, 3363,
      864, 9105,  836,  841, 9105,    0, 9105, 3384,  842,  855,
      855,  855,  864,  860,  874,  884,  868,  869,  946,  931,
      934,  937,    0,  917,  922,  900, 3384, 9105, 9105, 9105,
     9105, 3380,  892,    0,  912, 3353,  917,  927,  930,  916,
      923,  919,  928,  940,    0,  927,  940,  926,  956,  935,

      930,  946,  951,  948,  951,  953,  944,  945,  938,  954,
      956,  954,    0,  980,  960,  983,  976,  977,  979,  980,
      986,    0,  998,    0,    0,  992,    0,  995,  999, 1008,
     1003, 1008,    0, 1022,    0, 3349, 1055, 1000, 1008, 1017,
     1018, 1010, 1021, 1026, 1071, 1032, 1029, 1033, 1041, 1085,
     9105, 3361, 9105, 3343, 1039, 3343, 1087, 1046, 1040, 1055,
        0, 1059, 1050, 1065, 1051, 1066, 1077, 1058,    0, 1071,
     1056, 1077, 1068, 1078, 1062, 1078,    0,    0, 1073, 1077,
     1089, 1071, 1091, 1088, 1073, 1098, 1085, 1084,    0, 1088,
     1118, 1121, 1118, 1119, 1111, 1122, 1129, 1110, 1116, 1132,

     1137, 1128, 1127, 1130, 1129, 1124, 9105, 9105, 3309, 1180,
     1171, 1132, 1126, 1134, 1180, 1141, 1135, 1196, 9105, 1149,
     1163, 1204, 1162, 1168, 1181, 9105, 3329, 1216, 1192,    0,
        0,    0,    0,    0,    0, 1180, 1177, 1184, 1192,    0,
     1197, 1183,    0, 1193, 1194, 1200,    0, 1202, 1197, 1196,
     1196, 1206, 1197, 1206,    0,    0, 1193, 1211, 1212, 1199,
     1204, 1217, 1214,    0,    0,    0, 1204, 1223, 1235, 1227,
     1245, 1244, 3304, 1274, 9105, 3323, 1236, 1283, 1233, 1287,
     9105, 1259, 1258, 1288, 1259, 1245, 1292, 9105, 1260, 1301,
     1254, 1273, 1258, 1275, 1262,    0, 1272, 1280, 1268, 1278,

     1273, 1289, 1284,    0, 1295, 1297, 1300, 1303, 1300, 1286,
        0, 1303,    0,    0,    0, 1290, 3267, 1292, 3263, 3261,
     1299, 3289, 1341, 1351, 1344, 9105, 1368, 1303, 1370, 1302,
     1372, 1373, 1376, 9105, 1312, 1329, 1347,    0,    0, 1353,
     1355, 1356, 1357,    0,    0, 1350, 1351, 3236, 1361, 1364,
        0, 1363, 3235, 3231, 3227, 1360, 1367, 3224, 1367, 3255,
     1392, 1400, 1403, 9105, 1420, 1429, 1430, 9105, 1432, 9105,
     1433,    0,    0, 1361, 1379, 1408,    0,    0, 1398, 1404,
     1405, 1416, 1418, 1408, 3217,    0, 1409, 1410,    0, 3211,
     3243, 1448, 1425, 1459, 1452, 1425, 1423,    0, 1418, 1424,

     1433,    0,    0, 1426,    0, 1427, 1431, 3207, 3239, 1482,
     1432, 9105, 3260,    0,    0,    0, 1456,    0, 1457, 3192,
     1448,    0, 3220, 1484, 1459, 1468, 1469, 3186, 1467, 3216,
     1499, 1457,    0,    0,    0, 1471, 3215, 1511, 1484, 1481,
     3214, 1525, 1481, 1471, 3211, 1529, 1488,    0, 3206, 1531,
     1561, 3202, 1546, 1564, 1577, 3192, 1566, 1593, 1486, 1507,
     1533, 3174, 1583, 1534, 1548, 1541, 3173, 1589, 1558, 1566,
     1616, 3162, 1603, 3179, 3171, 1636, 9105, 3154, 1617, 3153,
     1623, 3149, 1637, 3147, 1644, 3142, 1646, 3122, 1650, 3121,
     1651, 3117, 1657, 3113, 1664, 3110, 1671, 3108, 1678, 3103,

     1685, 3097, 1691, 3096, 1698, 3093, 1705, 3092, 1711, 3091,
     1712, 3078, 1718, 3073, 1725, 3072, 1732, 3069, 1739, 3068,
     1745, 3067, 1746, 3064, 1752, 3059, 1753, 3055, 1757, 3045,
     1759, 3027, 1766, 3026, 1786, 3015, 1793, 3013, 1800, 3010,
     1811, 3007, 1813, 3006, 1818, 3002, 1820, 3000, 1825, 2995,
     1845, 2975, 1852, 2974, 1854, 2970, 1859, 2966, 1860, 2963,
     1865, 2961, 1872, 2956, 1877, 2950, 1886, 2949, 1900, 2946,
     1901, 2945, 1906, 2944, 1911, 2931, 1926, 2926, 1935, 2925,
     1940, 2922, 1947, 2921, 1952, 2920, 1958, 2917, 1960, 2912,
     1965, 2908, 1967, 2898, 1972, 2880, 1992, 2879, 1999, 2868,

     2001, 2866, 2006, 2863, 2007, 2860, 2012, 2859, 2019, 2855,
     2024, 2853, 2033, 2848, 2047, 2828, 2048, 2827, 2053, 2823,
     2058, 2819, 2073, 2816, 2082, 2814, 2087, 2809, 2094, 2803,
     2099, 2802, 2105, 2799, 2107, 2798, 2112, 2797, 2114, 2784,
     2119, 2779, 2139, 2778, 2146, 2775, 2148, 2774, 2153, 2773,
     2154, 2770, 2159, 2765, 2166, 2761, 2171, 2751, 2180, 2733,
     2194, 2732, 2195, 2721, 2200, 2719, 2205, 2716, 2220, 2713,
     2229, 2712, 2234, 2708, 2241, 2706, 2246, 2701, 2252, 2681,
     2254, 2680, 2259, 2676, 2261, 2672, 2266, 2669, 2286, 2667,
     2293, 2662, 2295, 2656, 2300, 2655, 2301, 2652, 2306, 2651,

     2313, 2650, 2318, 2637, 2327, 2632, 2341, 2631, 2342, 2628,
     2347, 2627, 2352, 2626, 2367, 2623, 2376, 2618, 2381, 2614,
     2388, 2604, 2393, 2586, 2399, 2585, 2401, 2574, 2406, 2572,
     2408, 2569, 2413, 2566, 2433, 2565, 2440, 2561, 2442, 2559,
     2447, 2554, 2448, 2534, 2453, 2533, 2460, 2529, 2465, 2525,
     2474, 2522, 2488, 2520, 2489, 2515, 2494, 2509, 2499, 2508,
     2514, 2505, 2523, 2504, 2528, 2503, 2535, 2490, 2540, 2485,
     2546, 2484, 2548, 2481, 2553, 2480, 2555, 2479, 2560, 2476,
     2580, 2471, 2587, 2467, 2589, 2457, 2594, 2439, 2595, 2438,
     2600, 2427, 2607, 2425, 2612, 2422, 2621, 2419, 2635, 2418,

     2636, 2414, 2641, 2412, 2646, 2407, 2661, 2387, 2670, 2386,
     2675, 2382, 2682, 2378, 2687, 2375, 2693, 2373, 2695, 2368,
     2700, 2362, 2702, 2361, 2707, 2358, 2727, 2357, 2734, 2356,
     2736, 2343, 2741, 2338, 2742, 2337, 2747, 2334, 2754, 2333,
     2759, 2332, 2768, 2329, 2782, 2324, 2783, 2320, 2788, 2310,
     2793, 2292, 2808, 2291, 2817, 2280, 2822, 2278, 2829, 2275,
     2834, 2272, 2840, 2271, 2842, 2267, 2847, 2265, 2849, 2260,
     2854, 2240, 2874, 2239, 2881, 2235, 2883, 2231, 2888, 2228,
     2889, 2226, 2894, 2221, 2901, 2215, 2906, 2214, 2915, 2211,
     2929, 2210, 2930, 2209, 2935, 2196, 2940, 2191, 2955, 2190,

     2964, 2187, 2969, 2186, 2976, 2185, 2981, 2182, 2987, 2177,
     2989, 2173, 2994, 2163, 2996, 2145, 3001, 2144, 3021, 2133,
     3028, 2131, 3030, 2128, 3035, 2125, 3036, 2124, 3041, 2120,
     3048, 2118, 3053, 2113, 3062, 2093, 3076, 2092, 3077, 2088,
     3082, 2084, 3087, 2081, 3102, 2079, 3111, 2074, 3116, 2068,
     3123, 2067, 3128, 2064, 3134, 2063, 3136, 2062, 3141, 2049,
     3143, 2044, 3148, 2043, 3168, 2040, 3175, 2039, 3177, 2038,
     3182, 2035, 3183, 2030, 3188, 2026, 3195, 2016, 3200, 1998,
     3209, 1997, 3223, 1986, 3224, 1984, 3229, 1981, 3234, 1978,
     3249, 1977, 3258, 1973, 3263, 1971, 3270, 1966, 3275, 1946,

     3281, 1945, 3283, 1941, 3288, 1937, 3290, 1934, 3295, 1932,
     3315, 1927, 3322, 1921, 3324, 1920, 3329, 1917, 3330, 1916,
     3335, 1915, 3342, 1902, 3347, 1897, 3356, 1896, 3370, 1893,
     3371, 1892, 3376, 1891, 3381, 1888, 3396, 1883, 3405, 1879,
     3410, 1869, 3417, 1858, 3422, 1851, 3428, 1850, 3430, 1841,
     3435, 1837, 3437, 1834, 3442, 1832, 3462, 1831, 3469, 1830,
     3471, 1827, 3476, 1826, 3477, 1824, 3482, 1817, 3489, 1807,
     3494, 1801, 3503, 1794, 3517, 1791, 3518, 1790, 3523, 1787,
     3528, 1783, 3543, 1782, 3552, 1780, 3557, 1776, 3564, 1773,
     3569, 1772, 3575, 1763, 3577, 1726, 3582, 1722, 3584, 1719,

     3589, 1706, 3609, 1692, 3616, 1687, 3618, 1684, 3623, 1683,
     3624, 1680, 3629, 1677, 3636, 1665, 3641, 1663, 3650, 1661,
     3664, 1658, 3665, 1652, 3670, 1633, 3675, 1632, 3690, 1631,
     3699, 1629, 3704, 1624, 3711, 1622, 3716, 1610, 3722, 1609,
     3724, 1604, 3729, 1602, 3731, 1600, 3736, 1598, 3756, 1597,
     3763, 1581, 3765, 1580, 3770, 1561, 3771, 1548, 3776, 1524,
     3783, 1518, 3788, 1516, 3797, 1503, 3811, 1497, 3812, 1490,
     3817, 1439, 3822, 1389, 3837, 1387, 3846, 1384, 3851, 1381,
     3858, 1375, 3863, 1152, 3869, 1027, 3871, 1024, 3876,  951,
     3878,  898, 3883,  892, 3903,  877, 3910,  845, 3912,  722,

     3917,  707, 3918,  655, 3923,  653, 3930,  649, 3935,  635,
     3944,  629, 3958,  607, 3959,  581, 3964,  577, 3969,  555,
     3984,  549, 3993,  540, 3998,  201, 4005,  191, 4010,  189,
     4016,  172, 4018, 9105, 4023, 9105, 4101, 4113, 4125, 4137,
     4149, 4161, 4173, 4175, 4187, 4192, 4203, 4206, 4218, 4230,
     4240, 4245, 4250, 4262, 4274, 4286, 4291, 4296, 4300, 4304,
     4315, 4326, 4331, 4342, 4352, 4364, 4376, 4388, 4400, 4412,
     4424, 4436, 4448, 4460, 4472, 4484, 4496, 4508, 4520, 4532,
     4544, 4556, 4568, 4580, 4592, 4604, 4616, 4628, 4640, 4652,
     4664, 4676, 4688, 4700, 4712, 4724, 4736, 4748, 4760, 4772,

     4784, 4796, 4808, 4820, 4832, 4844, 4856, 4868, 4880, 4892,
     4904, 4916, 4928, 4940, 4952, 4964, 4976, 4988, 5000, 5012,
     5024, 5036, 5048, 5060, 5072, 5084, 5096, 5108, 5120, 5132,
     5144, 5156, 5168, 5180, 5192, 5204, 5216, 5228, 5240, 5252,
     5264, 5276, 5288, 5300, 5312, 5324, 5336, 5348, 5360, 5372,
     5384, 5396, 5408, 5420, 5432, 5444, 5456, 5468, 5480, 5492,
     5504, 5516, 5528, 5540, 5552, 5564, 5576, 5588, 5600, 5612,
     5624, 5636, 5648, 5660, 5672, 5684, 5696, 5708, 5720, 5732,
     5744, 5756, 5768, 5780, 5792, 5804, 5816, 5828, 5840, 5852,
     5864, 5876, 5888, 5900, 5912, 5924, 5936, 5948, 5960, 5972,

     5984, 5996, 6008, 6020, 6032, 6044, 6056, 6068, 6080, 6092,
     6104, 6116, 6128, 6140, 6152, 6164, 6176, 6188, 6200, 6212,
     6224, 6236, 6248, 6260, 6272, 6284, 6296, 6308, 6320, 6332,
     6344, 6356, 6368, 6380, 6392, 6404, 6416, 6428, 6440, 6452,
     6464, 6476, 6488, 6500, 6512, 6524, 6536, 6548, 6560, 6572,
     6584, 6596, 6608, 6620, 6632, 6644, 6656, 6668, 6680, 6692,
     6704, 6716, 6728, 6740, 6752, 6764, 6776, 6788, 6800, 6812,
     6824, 6836, 6848, 6860, 6872, 6884, 6896, 6908, 6920, 6932,
     6944, 6956, 6968, 6980, 6992, 7004, 7016, 7028, 7040, 7052,
     7064, 7076, 7088, 7100, 7112, 7124, 7136, 7148, 7160, 7172,

     7184, 7196, 7208, 7220, 7232, 7244, 7256, 7268, 7280, 7292,
     7304, 7316, 7328, 7340, 7352, 7364, 7376, 7388, 7400, 7412,
     7424, 7436, 7448, 7460, 7472, 7484, 7496, 7508, 7520, 7532,
     7544, 7556, 7568, 7580, 7592, 7604, 7616, 7628, 7640, 7652,
     7664, 7676, 7688, 7700, 7712, 7724, 7736, 7748, 7760, 7772,
     7784, 7796, 7808, 7820, 7832, 7844, 7856, 7868, 7880, 7892,
     7904, 7916, 7928, 7940, 7952, 7964, 7976, 7988, 8000, 8012,
     8024, 8036, 8048, 8060, 8072, 8084, 8096, 8108, 8120, 8132,
     8144, 8156, 8168, 8180, 8192, 8204, 8216, 8228, 8240, 8252,
     8264, 8276, 8288, 8300, 8312, 8324, 8336, 8348, 8360, 8372,

     8384, 8396, 8408, 8420, 8432, 8444, 8456, 8468, 8480, 8492,
     8504, 8516, 8528, 8540, 8552, 8564, 8576, 8588, 8600, 8612,
     8624, 8636, 8648, 8660, 8672, 8684, 8696, 8708, 8720, 8732,
     8744, 8756, 8768, 8780, 8792, 8804, 8816, 8828, 8840, 8852,
     8864, 8876, 8888, 8900, 8912, 8924, 8936, 8948, 8960, 8972,
     8984, 8996, 9008, 9020, 9032, 9044, 9056, 9068, 9080, 9092
    } ;

static yyconst flex_int16_t yy_def[1861] =
    {   0,
     1437, 1437, 1436,    3, 1436,    5, 1438, 1438,    5,    5,
        5, 1436, 1436,   13, 1436,   15, 1439, 1439, 1439, 1439,
     1440, 1440, 1436, 1441, 1442, 1436, 1436, 1436, 1443, 1436,
     1444, 1436, 1436, 1445, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1436,
     1446, 1436, 1436, 1436, 1436, 1447, 1436, 1444, 1447, 1436,
     1436, 1448, 1436, 1449, 1436, 1436, 1450, 1436, 1450, 1436,
     1449, 1436, 1436, 1447, 1449, 1451, 1436, 1452, 1436, 1453,

     1454, 1436, 1436, 1455, 1436, 1436, 1436, 1436, 1436, 1456,
     1441, 1441, 1436, 1436, 1436, 1436, 1436, 1443, 1436, 1443,
     1457, 1436, 1436, 1436, 1436, 1445, 1436, 1445,   35, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1458, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1446, 1446, 1446, 1446,
     1446, 1443, 1445, 1436, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1436, 1446, 1436, 1436, 1447, 1436, 1436, 1447, 1436, 1459,
     1448, 1436, 1436, 1436, 1460, 1436, 1436, 1436, 1450, 1450,
     1436, 1436, 1436, 1436, 1436, 1447, 1436, 1436, 1451, 1436,
     1452, 1453, 1454, 1436, 1436, 1455, 1436, 1436, 1436, 1461,
     1456, 1436, 1436, 1436, 1436, 1457, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1458, 1436, 1436, 1436, 1462, 1436, 1436, 1436,
     1436, 1436, 1446, 1446, 1446, 1436, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1459, 1436, 1463, 1464, 1461, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1462, 1465, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1436, 1436, 1466, 1464,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1465, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1467, 1466, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1468, 1467, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1469,
     1468, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1470, 1469, 1436, 1436, 1436, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1471, 1470,
     1436, 1436, 1436, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1472, 1471, 1436, 1446, 1446, 1446, 1446, 1473,
     1472, 1436, 1446, 1446, 1446, 1446, 1474, 1473, 1436, 1446,
     1475, 1474, 1436, 1446, 1476, 1475, 1436, 1446, 1477, 1476,
     1436, 1478, 1477, 1436, 1436, 1479, 1478, 1436, 1436, 1436,
     1436, 1480, 1479, 1436, 1436, 1436, 1481, 1480, 1436, 1436,
     1436, 1482, 1481, 1436, 1436, 1436, 1436, 1483, 1482, 1484,
     1483, 1485, 1484, 1486, 1485, 1487, 1486, 1488, 1487, 1489,
     1488, 1490, 1489, 1491, 1490, 1492, 1491, 1493, 1492, 1494,

     1493, 1495, 1494, 1496, 1495, 1497, 1496, 1498, 1497, 1499,
     1498, 1500, 1499, 1501, 1500, 1502, 1501, 1503, 1502, 1504,
     1503, 1505, 1504, 1506, 1505, 1507, 1506, 1508, 1507, 1509,
     1508, 1510, 1509, 1511, 1510, 1512, 1511, 1513, 1512, 1514,
     1513, 1515, 1514, 1516, 1515, 1517, 1516, 1518, 1517, 1519,
     1518, 1520, 1519, 1521, 1520, 1522, 1521, 1523, 1522, 1524,
     1523, 1525, 1524, 1526, 1525, 1527, 1526, 1528, 1527, 1529,
     1528, 1530, 1529, 1531, 1530, 1532, 1531, 1533, 1532, 1534,
     1533, 1535, 1534, 1536, 1535, 1537, 1536, 1538, 1537, 1539,
     1538, 1540, 1539, 1541, 1540, 1542, 1541, 1543, 1542, 1544,

     1543, 1545, 1544, 1546, 1545, 1547, 1546, 1548, 1547, 1549,
     1548, 1550, 1549, 1551, 1550, 1552, 1551, 1553, 1552, 1554,
     1553, 1555, 1554, 1556, 1555, 1557, 1556, 1558, 1557, 1559,
     1558, 1560, 1559, 1561, 1560, 1562, 1561, 1563, 1562, 1564,
     1563, 1565, 1564, 1566, 1565, 1567, 1566, 1568, 1567, 1569,
     1568, 1570, 1569, 1571, 1570, 1572, 1571, 1573, 1572, 1574,
     1573, 1575, 1574, 1576, 1575, 1577, 1576, 1578, 1577, 1579,
     1578, 1580, 1579, 1581, 1580, 1582, 1581, 1583, 1582, 1584,
     1583, 1585, 1584, 1586, 1585, 1587, 1586, 1588, 1587, 1589,
     1588, 1590, 1589, 1591, 1590, 1592, 1591, 1593, 1592, 1594,

     1593, 1595, 1594, 1596, 1595, 1597, 1596, 1598, 1597, 1599,
     1598, 1600, 1599, 1601, 1600, 1602, 1601, 1603, 1602, 1604,
     1603, 1605, 1604, 1606, 1605, 1607, 1606, 1608, 1607, 1609,
     1608, 1610, 1609, 1611, 1610, 1612, 1611, 1613, 1612, 1614,
     1613, 1615, 1614, 1616, 1615, 1617, 1616, 1618, 1617, 1619,
     1618, 1620, 1619, 1621, 1620, 1622, 1621, 1623, 1622, 1624,
     1623, 1625, 1624, 1626, 1625, 1627, 1626, 1628, 1627, 1629,
     1628, 1630, 1629, 1631, 1630, 1632, 1631, 1633, 1632, 1634,
     1633, 1635, 1634, 1636, 1635, 1637, 1636, 1638, 1637, 1639,
     1638, 1640, 1639, 1641, 1640, 1642, 1641, 1643, 1642, 1644,

     1643, 1645, 1644, 1646, 1645, 1647, 1646, 1648, 1647, 1649,
     1648, 1650, 1649, 1651, 1650, 1652, 1651, 1653, 1652, 1654,
     1653, 1655, 1654, 1656, 1655, 1657, 1656, 1658, 1657, 1659,
     1658, 1660, 1659, 1661, 1660, 1662, 1661, 1663, 1662, 1664,
     1663, 1665, 1664, 1666, 1665, 1667, 1666, 1668, 1667, 1669,
     1668, 1670, 1669, 1671, 1670, 1672, 1671, 1673, 1672, 1674,
     1673, 1675, 1674, 1676, 1675, 1677, 1676, 1678, 1677, 1679,
     1678, 1680, 1679, 1681, 1680, 1682, 1681, 1683, 1682, 1684,
     1683, 1685, 1684, 1686, 1685, 1687, 1686, 1688, 1687, 1689,
     1688, 1690, 1689, 1691, 1690, 1692, 1691, 1693, 1692, 1694,

     1693, 1695, 1694, 1696, 1695, 1697, 1696, 1698, 1697, 1699,
     1698, 1700, 1699, 1701, 1700, 1702, 1701, 1703, 1702, 1704,
     1703, 1705, 1704, 1706, 1705, 1707, 1706, 1708, 1707, 1709,
     1708, 1710, 1709, 1711, 1710, 1712, 1711, 1713, 1712, 1714,
     1713, 1715, 1714, 1716, 1715, 1717, 1716, 1718, 1717, 1719,
     1718, 1720, 1719, 1721, 1720, 1722, 1721, 1723, 1722, 1724,
     1723, 1725, 1724, 1726, 1725, 1727, 1726, 1728, 1727, 1729,
     1728, 1730, 1729, 1731, 1730, 1732, 1731, 1733, 1732, 1734,
     1733, 1735, 1734, 1736, 1735, 1737, 1736, 1738, 1737, 1739,
     1738, 1740, 1739, 1741, 1740, 1742, 1741, 1743, 1742, 1744,

     1743, 1745, 1744, 1746, 1745, 1747, 1746, 1748, 1747, 1749,
     1748, 1750, 1749, 1751, 1750, 1752, 1751, 1753, 1752, 1754,
     1753, 1755, 1754, 1756, 1755, 1757, 1756, 1758, 1757, 1759,
     1758, 1760, 1759, 1761, 1760, 1762, 1761, 1763, 1762, 1764,
     1763, 1765, 1764, 1766, 1765, 1767, 1766, 1768, 1767, 1769,
     1768, 1770, 1769, 1771, 1770, 1772, 1771, 1773, 1772, 1774,
     1773, 1775, 1774, 1776, 1775, 1777, 1776, 1778, 1777, 1779,
     1778, 1780, 1779, 1781, 1780, 1782, 1781, 1783, 1782, 1784,
     1783, 1785, 1784, 1786, 1785, 1787, 1786, 1788, 1787, 1789,
     1788, 1790, 1789, 1791, 1790, 1792, 1791, 1793, 1792, 1794,

     1793, 1795, 1794, 1796, 1795, 1797, 1796, 1798, 1797, 1799,
     1798, 1800, 1799, 1801, 1800, 1802, 1801, 1803, 1802, 1804,
     1803, 1805, 1804, 1806, 1805, 1807, 1806, 1808, 1807, 1809,
     1808, 1810, 1809, 1811, 1810, 1812, 1811, 1813, 1812, 1814,
     1813, 1815, 1814, 1816, 1815, 1817, 1816, 1818, 1817, 1819,
     1818, 1820, 1819, 1821, 1820, 1822, 1821, 1823, 1822, 1824,
     1823, 1825, 1824, 1826, 1825, 1827, 1826, 1828, 1827, 1829,
     1828, 1830, 1829, 1831, 1830, 1832, 1831, 1833, 1832, 1834,
     1833, 1835, 1834, 1836, 1835, 1837, 1836, 1838, 1837, 1839,
     1838, 1840, 1839, 1841, 1840, 1842, 1841, 1843, 1842, 1844,

     1843, 1845, 1844, 1846, 1845, 1847, 1846, 1848, 1847, 1849,
     1848, 1850, 1849, 1851, 1850, 1852, 1851, 1853, 1852, 1854,
     1853, 1855, 1854, 1856, 1855, 1857, 1856, 1858, 1857, 1859,
     1858, 1860, 1859, 1436, 1860,    0, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436
    } ;

static yyconst flex_int16_t yy_nxt[9193] =
    {   0,
       26,   27,   27,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   36,   39,   40,   41,   42,
       43,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   57,   57,   59,
       57,   60,   61,   62,   57,   63,   64,   65,   66,   67,
       68,   69,   57,   57,   36,   26,   70,   71,   72,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   57,   57,
       59,   57,   60,   61,   62,   57,   63,   64,   65,   66,
       67,   68,   69,   57,   73,   74,   75,   26,   76,   76,
       76,   76,   77,   76,   78,   76,   76,   76,   76,   76,

       76,   76,   76,   79,   76,   76,   80,   81,   81,   76,
       76,   76,   76,   76,   76,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   83,   84,   76,   82,   85,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   86,   76,   83,   88,   88,   90,   90,   93,  105,
      106,  105,  106,   94,  124,  107,  140,  107,  116,  116,
      116,  122,  123,  145,  145,  145, 1435,  141,  142,  146,

      125,  162,  163,  108,  109,  108,  109,  143,  144,  147,
      158,  164,  165, 1433,  148, 1431,  159,  160,  161,   89,
       89,  149,  219,  219,  219, 1429,   91,   91,   95,   92,
       92,   93,   26,   76,   76,   76,   76,   93,   76,   78,
       76,   76,   94,   76,   76,   76,   76,   76,   79,   76,
       76,   80,   81,   81,   76,   76,   76,   76,   76,   76,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   83,   95,   76,   96,
       93,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   86,   76,   83,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   97,   97,   97,   98,   97,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   97,   97,   97,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       99,   99,   99,  100,   99,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       99,   99,   99,  113,  119,  127,  150,  191,  151,  151,

      151,  150,  168,  151,  151,  151,  155,  155,  155,  119,
      196,  152,  114,  156,  169,  172,  152,  179,  170,  171,
      173,  180,  197,  188,  213,  176,  198,  181,  191,  189,
      153,  115,  157,  168,  174,  190,  177,  201,  231,  178,
      128,  196,  152,  199,  120,  169,  200,  152,  179,  170,
      171,  208,  180,  197,  188,  175,  176,  198,  181,  120,
      189,  153,  115,  129, 1427,  204,  190,  177,  201,  202,
      178,  209,  203, 1425,  199,  205,  252,  200,  182, 1423,
      206,  210,  208,  232,  214,  207,  175,  183,  184,  185,
      130,  131,  254,  132,  253,  133,  204,  186,  134,  187,

      202, 1421,  209,  203,  135, 1419,  205,  136,  137,  182,
      138,  206,  210,  219,  219,  219,  207,  259,  183,  184,
      185,  130,  131,  254,  132,  253,  133,  127,  186,  134,
      187, 1417,  223,  237,  238,  135,  192, 1436,  136,  137,
      262,  138,  118,  193,  194,  220,  224,  224,  259,  195,
      116,  116,  116, 1415,  240,  257,  258,  235,  271, 1413,
      271,  235,  235,  272,  272,  272,  236,  192,  277,  278,
      119,  262,  128, 1411,  193,  194,  220, 1409,  225, 1407,
      195,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  225,
      235,  226,  224,  224,  235,  224,  224,  247,  247,  260,
      120,  263,  264,  247, 1436,  261,  265,  266,  267,  268,
      276, 1405,  145,  145,  145,  216,  216,  216,  127,  216,
     1436,  247,  247, 1436,  225,  152, 1403,  225,  281,  282,
      260,  234,  263,  264,  334,  334,  261,  265,  266,  267,
      268,  276, 1436,  283,  284,  217,  216,  216,  270,  270,
      270,  285,  155,  155,  155,  225,  152,  226,  225,  156,
      226,  152,  150,  128,  151,  151,  151,  287,  288,  289,
      290,  292,  295, 1436,  283,  284,  293,  152,  157,  294,

      296,  297,  285,  298,  291,  299,  300,  303,  304,  305,
      306,  307,  152,  301,  237,  238,  311,  312,  287,  288,
      289,  290,  292,  295,  302,  313,  316,  293,  152,  308,
      294,  296,  297,  319,  298,  291,  299,  300,  303,  304,
      305,  306,  307,  314,  301,  309,  310,  311,  312,  315,
      317,  320,  321,  318,  322,  302,  313,  316,  323,  324,
      308,  325,  326,  327,  319,  219,  219,  219,  235, 1401,
      235,  338, 1436,  235,  314,  236,  309,  310,  237,  238,
      315,  317,  320,  321,  318,  322,  339,  340, 1436,  323,
      324, 1436,  325,  326,  327,  328,  341,  342,  329,  240,

      330, 1399,  338,  343,  331,  332,  344,  345,  247,  247,
     1436,  346,  347,  348,  247,  349, 1397,  339,  340,  351,
      352,  235, 1395,  235,  353,  354,  328,  341,  342,  329,
      355,  330,  247,  247,  343,  331,  332,  344,  345,  358,
      359, 1436,  346,  347,  348,  360,  349,  350,  350,  350,
      270,  270,  270,  272,  272,  272,  272,  272,  272,  361,
      362,  355,  363,  152,  364,  365,  366,  367,  368,  369,
      358,  359,  370,  371,  377, 1393,  360,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  372,  388,  373,
      361,  362,  374,  363,  152,  364,  365,  366,  367,  368,

      369,  389,  375,  370,  371,  377,  376,  392,  378,  379,
      380,  381,  382,  383,  384,  385,  386,  387,  372,  388,
      373,  390,  393,  374,  394,  395,  396,  397,  398,  391,
      399,  400,  389,  375,  401,  402,  404,  376,  392,  405,
      406,  407,  407,  411,  412,  413,  414,  403, 1391,  415,
      416, 1389,  390,  393,  417,  394,  395,  396,  397,  398,
      391,  399,  400, 1436,  421,  401,  402,  404,  422,  423,
      405,  406,  418,  424,  411,  412,  413,  414,  403, 1436,
      415,  416, 1436,  419,  425,  417,  350,  350,  350,  426,
      427,  429,  430,  431,  432,  421,  433,  434,  435,  422,

      423, 1436,  436,  420,  424,  437,  438,  439,  440,  441,
      442,  443,  444,  445,  446,  425,  447,  448,  449,  450,
      451,  452,  429,  430,  431,  432,  453,  433,  434,  435,
      454,  455, 1436,  436,  420,  456,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  457,  447,  448,  449,
      450,  451,  452,  458,  459,  460,  461,  453,  462,  463,
      464,  454,  455,  465,  466,  467,  456,  468,  469,  470,
      471,  472,  475,  475,  476,  477, 1387,  457,  478,  479,
      483,  480,  484,  485,  458,  459,  460,  461, 1436,  462,
      463,  464,  481,  486,  465,  466,  467,  418,  468,  469,

      470,  471,  472,  489, 1436,  487,  477, 1436,  419,  478,
      479,  483,  482,  484,  485,  490,  488,  491,  426,  427,
      492,  493,  494,  495,  486,  496, 1436,  497,  498,  499,
      500,  501,  502,  503,  489,  504,  505,  506,  507,  508,
      509,  510,  511,  482,  512,  513,  490,  514,  491,  515,
      516,  492,  493,  494,  495,  517,  496, 1436,  497,  498,
      499,  500,  501,  502,  503,  518,  504,  505,  506,  507,
      508,  509,  510,  511,  519,  512,  513,  520,  514,  521,
      515,  516, 1436,  524,  525,  527,  517,  528,  480,  487,
      529,  530,  531,  487,  532,  526,  518,  535, 1436,  481,

      488, 1436,  533,  536,  488,  519,  537,  538,  520,  539,
      521,  540,  541,  534,  524,  542,  527,  543,  528,  544,
     1436,  529,  530,  531,  545,  532,  546,  547,  535,  548,
      549,  550,  551,  552,  536,  553,  554,  537,  538,  556,
      539,  559,  540,  541,  565,  525,  542,  566,  543, 1436,
      544, 1436,  562,  562,  562,  545,  526,  546,  547,  571,
      548,  549,  550,  551,  552, 1436,  553,  554, 1436,  563,
      556,  487,  559,  567,  569,  565,  572,  533,  566,  573,
      564,  574,  488,  575,  568,  570,  576, 1436,  534,  577,
      571,  578,  579,  581,  582,  583,  587,  588,  590, 1385,

     1436,  562,  562,  562,  563, 1383,  596,  572, 1381,  597,
      573, 1379,  574, 1377,  575,  564, 1436,  576, 1436, 1436,
      577,  480,  578,  579,  581,  582,  583,  587,  588,  590,
      418,  567,  481,  569,  594,  594,  594,  596, 1436,  593,
      597,  419,  568,  598,  570,  599,  600,  601,  602,  603,
      604,  606,  607,  611,  612,  613, 1436,  614,  615,  595,
      594,  594,  594, 1375,  616,  617,  618,  619,  620, 1436,
      593,  621, 1436,  625,  598, 1436,  599,  600,  601,  602,
      603,  604,  606,  607,  611,  595,  626,  627,  614,  615,
     1436,  629, 1436,  632, 1436,  616,  617,  618,  619,  620,

      633,  634,  621,  636,  625,  639, 1436, 1436, 1436, 1436,
      640, 1436,  643,  644, 1373,  647,  648,  626,  627, 1436,
      651, 1371,  629, 1436,  632, 1436, 1436, 1369, 1436,  664,
     1436,  633,  634, 1436,  636, 1436,  639, 1436, 1436, 1436,
     1367,  640, 1365,  643,  644, 1436,  647,  648, 1363, 1436,
      665,  651, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
      664, 1436,  654,  654,  654,  654,  654,  654,  666,  669,
     1436, 1436, 1361, 1436, 1436, 1436, 1436, 1436,  658,  658,
      658,  665,  659,  670,  671, 1359,  655,  660, 1436,  655,
     1436, 1436, 1436, 1436,  658,  658,  658, 1436,  659,  666,

      669,  674, 1436,  660, 1357, 1355, 1436, 1436, 1436,  675,
     1436, 1436, 1436, 1436,  670,  671, 1436,  676,  676,  676,
      661, 1353, 1351, 1436, 1349, 1436, 1347, 1436, 1345, 1436,
     1436, 1436,  674, 1343, 1341, 1436,  661,  676,  676,  676,
      675, 1436,  677, 1436, 1436, 1436, 1339, 1436, 1337, 1436,
     1436,  661, 1436, 1335, 1436, 1333, 1331, 1329, 1436, 1436,
     1436, 1436,  677, 1436, 1436, 1436, 1436,  661, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1327, 1436, 1436, 1436,
     1436, 1436, 1325, 1436, 1436, 1323, 1436, 1321, 1436, 1319,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1317, 1436, 1436, 1315, 1436, 1436, 1313, 1311, 1436,
     1436, 1309, 1436, 1436, 1436, 1436, 1307, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1305, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1303, 1436, 1436, 1301, 1436, 1436, 1436,
     1299, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1297, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1295, 1293, 1436, 1436,

     1291, 1436, 1436, 1436, 1289, 1436, 1287, 1285, 1436, 1436,
     1436, 1283, 1436, 1436, 1281, 1279, 1436, 1436, 1277, 1436,
     1436, 1436, 1436, 1436, 1436, 1275, 1436, 1436, 1436, 1436,
     1436, 1273, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1271, 1436, 1436, 1436, 1436, 1436, 1436, 1269, 1436,
     1267, 1265, 1436, 1436, 1263, 1261, 1259, 1436, 1257, 1436,
     1436, 1255, 1436, 1436, 1436, 1253, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1251, 1249, 1436, 1436, 1436, 1436,
     1436, 1436, 1247, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1245, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1243, 1436, 1436, 1436, 1241, 1436, 1436,
     1436, 1436, 1239, 1436, 1436, 1237, 1235, 1233, 1436, 1436,
     1231, 1229, 1436, 1436, 1436, 1436, 1227, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1225,
     1223, 1221, 1436, 1436, 1219, 1217, 1436, 1436, 1436, 1436,
     1436, 1215, 1436, 1436, 1436, 1436, 1213, 1436, 1211, 1436,
     1436, 1209, 1436, 1436, 1436, 1207, 1436, 1436, 1436, 1205,
     1203, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1201, 1436, 1436, 1436, 1436, 1199, 1436, 1197, 1436, 1436,

     1436, 1195, 1193, 1436, 1436, 1191, 1436, 1436, 1189, 1436,
     1187, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1185, 1183, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1181, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1179, 1436, 1436, 1436, 1177, 1436, 1436, 1436, 1436, 1175,
     1436, 1436, 1173, 1171, 1169, 1436, 1436, 1167, 1165, 1436,
     1436, 1436, 1436, 1163, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1161, 1159, 1157, 1436,
     1436, 1155, 1153, 1436, 1436, 1436, 1436, 1436, 1151, 1436,

     1436, 1436, 1436, 1149, 1436, 1147, 1436, 1436, 1145, 1436,
     1436, 1436, 1143, 1436, 1436, 1436, 1141, 1139, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1137, 1436, 1436,
     1436, 1436, 1135, 1436, 1133, 1436, 1436, 1436, 1131, 1129,
     1436, 1436, 1127, 1436, 1436, 1125, 1436, 1123, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1121, 1119,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1117, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1115, 1436, 1436,

     1436, 1113, 1436, 1436, 1436, 1436, 1111, 1436, 1436, 1109,
     1107, 1105, 1436, 1436, 1103, 1101, 1436, 1436, 1436, 1436,
     1099, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1097, 1095, 1093, 1436, 1436, 1091, 1089,
     1436, 1436, 1436, 1436, 1436, 1087, 1436, 1436, 1436, 1436,
     1085, 1436, 1083, 1436, 1436, 1081, 1436, 1436, 1436, 1079,
     1436, 1436, 1436, 1077, 1075, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1073, 1436, 1436, 1436, 1436, 1071,
     1436, 1069, 1436, 1436, 1436, 1067, 1065, 1436, 1436, 1063,

     1436, 1436, 1061, 1436, 1059, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1057, 1055, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1053, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1051, 1436, 1436, 1436, 1049, 1436,
     1436, 1436, 1436, 1047, 1436, 1436, 1045, 1043, 1041, 1436,
     1436, 1039, 1037, 1436, 1436, 1436, 1436, 1035, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1033, 1031, 1029, 1436, 1436, 1027, 1025, 1436, 1436, 1436,
     1436, 1436, 1023, 1436, 1436, 1436, 1436, 1021, 1436, 1019,

     1436, 1436, 1017, 1436, 1436, 1436, 1015, 1436, 1436, 1436,
     1013, 1011, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1009, 1436, 1436, 1436, 1436, 1007, 1436, 1005, 1436,
     1436, 1436, 1003, 1001, 1436, 1436,  999, 1436, 1436,  997,
     1436,  995, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436,  993,  991, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436,  989, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436,  987, 1436, 1436, 1436,  985, 1436, 1436, 1436, 1436,

      983, 1436, 1436,  981,  979,  977, 1436, 1436,  975,  973,
     1436, 1436, 1436, 1436,  971, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436,  969,  967,  965,
     1436, 1436,  963,  961, 1436, 1436, 1436, 1436, 1436,  959,
     1436, 1436, 1436, 1436,  957, 1436,  955, 1436, 1436,  953,
     1436, 1436, 1436,  951, 1436, 1436, 1436,  949,  947, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  945, 1436,
     1436, 1436, 1436,  943, 1436,  941, 1436, 1436, 1436,  939,
      937, 1436, 1436,  935, 1436, 1436,  933, 1436,  931, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  929,
      927, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  925, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  923, 1436,
     1436, 1436,  921, 1436, 1436, 1436, 1436,  919, 1436, 1436,
      917,  915,  913, 1436, 1436,  911,  909, 1436, 1436, 1436,
     1436,  907, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436,  905,  903,  901, 1436, 1436,  899,
      897, 1436, 1436, 1436, 1436, 1436,  895, 1436, 1436, 1436,
     1436,  893, 1436,  891, 1436, 1436,  889, 1436, 1436, 1436,

      887, 1436, 1436, 1436,  885,  883, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436,  881, 1436, 1436, 1436, 1436,
      879, 1436,  877, 1436, 1436, 1436,  875,  873, 1436, 1436,
      871, 1436, 1436,  869, 1436,  867, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436,  865,  863, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436,  861, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436,  859, 1436, 1436, 1436,  857,
     1436, 1436, 1436, 1436,  855, 1436, 1436,  853,  851,  849,

     1436, 1436,  847,  845, 1436, 1436, 1436, 1436,  843, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436,  841,  839,  837, 1436, 1436,  835,  833, 1436, 1436,
     1436, 1436, 1436,  831, 1436, 1436, 1436, 1436,  829, 1436,
      827, 1436, 1436,  825, 1436, 1436, 1436,  823, 1436, 1436,
     1436,  821,  819, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436,  817, 1436, 1436, 1436, 1436,  815, 1436,  813,
     1436, 1436, 1436,  811,  809, 1436, 1436,  807, 1436, 1436,
      805, 1436,  803, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436,  801,  799, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436,  797, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436,  795, 1436, 1436, 1436,  793, 1436, 1436, 1436,
     1436,  791, 1436, 1436,  789,  787,  785, 1436, 1436,  783,
      781, 1436, 1436, 1436, 1436,  779, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  777,  775,
      773, 1436, 1436,  771,  769, 1436, 1436, 1436, 1436, 1436,
      767, 1436, 1436, 1436, 1436,  765, 1436,  763, 1436, 1436,
      761, 1436, 1436, 1436,  759, 1436, 1436, 1436,  757,  755,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  753,
     1436, 1436, 1436, 1436,  751, 1436,  749, 1436, 1436, 1436,
      747,  745, 1436, 1436,  743, 1436, 1436,  741, 1436,  739,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
      737,  735, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  733,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  731,
     1436, 1436, 1436,  729, 1436, 1436, 1436, 1436,  727, 1436,
     1436,  725,  723,  721, 1436, 1436,  719,  717, 1436, 1436,

     1436, 1436,  715, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436,  713,  711,  709, 1436, 1436,
      707,  705, 1436, 1436, 1436, 1436, 1436,  703, 1436, 1436,
     1436, 1436,  701, 1436,  699, 1436, 1436,  697, 1436, 1436,
     1436,  695, 1436, 1436, 1436,  693,  691, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436,  689, 1436, 1436, 1436,
     1436,  687, 1436,  685, 1436, 1436, 1436,  683,  681, 1436,
     1436,  671, 1436, 1436,  671, 1436,  679, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436,  673,  668, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436,  663, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436,  657, 1436, 1436, 1436,
      653, 1436, 1436, 1436, 1436,  650, 1436, 1436,  646,  642,
      638, 1436, 1436,  635,  631, 1436, 1436, 1436, 1436,  628,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436,  612,  624,  622, 1436, 1436,  610,  608, 1436,
     1436, 1436, 1436, 1436,  605, 1436, 1436, 1436, 1436,  592,
     1436,  589, 1436, 1436,  586, 1436, 1436, 1436,  585, 1436,
     1436, 1436,  584,  580, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436,  561, 1436, 1436, 1436, 1436,  558, 1436,
      557, 1436, 1436, 1436,  555,  475, 1436, 1436,  523, 1436,
     1436,  426, 1436,  474, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436,  356,  353, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436,  351, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436,  410, 1436, 1436, 1436,  277, 1436, 1436,
     1436, 1436,  281, 1436, 1436,  356,  257,  337, 1436, 1436,
      237,  233, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,  230,
      227,  286, 1436, 1436,  280,  279, 1436, 1436, 1436, 1436,
     1436,  275, 1436, 1436, 1436, 1436,  274, 1436,  269, 1436,
     1436, 1436, 1436, 1436, 1436,  255, 1436, 1436, 1436,  252,
      111, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
      251, 1436, 1436, 1436, 1436,  249, 1436,  249, 1436, 1436,
     1436,  248,  245, 1436, 1436,  244, 1436, 1436,  233, 1436,
      230, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436,  228,  227, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
      218, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
      212, 1436, 1436, 1436,  211, 1436, 1436, 1436, 1436,  166,
     1436, 1436,  154,  139,  117, 1436, 1436,  111, 1436, 1436,
     1436, 1436, 1436,  103, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436,  103,  102,  102, 1436,
     1436,   25,   25, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  112,  112,  112,  112,  112,  112,  112,  112,  112,
     1436,  112,  112,  118,  118,  118,  118, 1436,  118,  118,
      118,  118,  118,  118,  118,  121,  121,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  167,

     1436, 1436,  167,  167,  215,  215,  215, 1436,  215,  215,
     1436,  215,  215,  221, 1436, 1436,  221,  221,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      229,  229,  229,  229,  229, 1436,  229,  229,  229,  229,
      229,  229,  239, 1436, 1436, 1436, 1436,  239,  239, 1436,
      239,  239,  241, 1436, 1436,  241,  241,  242, 1436, 1436,
      242,  242,  243,  243,  243,  243,  243,  243, 1436,  243,
      243,  243,  243,  243,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  256, 1436,

     1436,  256,  256,  273, 1436, 1436,  273,  333, 1436, 1436,
      333,  335, 1436, 1436,  335,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  357, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436,  357,  357,  408, 1436,
     1436,  408,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  428, 1436, 1436, 1436, 1436,  428,
     1436, 1436,  428,  428,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,

      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  868,  868,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  884,  884,  884,  884,  884,  884,  884,  884,

      884,  884,  884,  884,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  968,  968,  968,  968,

      968,  968,  968,  968,  968,  968,  968,  968,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  984,  984,  984,  984,  984,  984,  984,  984,

      984,  984,  984,  984,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,

     1034, 1034, 1034, 1034, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,

     1134, 1134, 1134, 1134, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1168, 1168, 1168, 1168,

     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,

     1184, 1184, 1184, 1184, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1218, 1218, 1218, 1218,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,

     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1318, 1318, 1318, 1318,

     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,

     1384, 1384, 1384, 1384, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434,   23, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436

    } ;

static yyconst flex_int16_t yy_chk[9193] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    8,    9,   10,   11,   21,
       21,   22,   22,   11,   33,   21,   38,   22,   27,   27,
       27,   32,   32,   40,   40,   40, 1432,   38,   39,   40,

       33,   47,   47,   21,   21,   22,   22,   39,   39,   41,
       46,   48,   48, 1430,   41, 1428,   46,   46,   46,    7,
        8,   41,   81,   81,   81, 1426,    9,   10,   11,    9,
       10,   11,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   25,   29,   34,   42,   56,   42,   42,

       42,   43,   50,   43,   43,   43,   45,   45,   45,  118,
       59,   42,   25,   45,   50,   51,   43,   53,   50,   50,
       51,   53,   60,   55,   74,   52,   61,   53,   56,   55,
       42,   25,   45,   50,   51,   55,   52,   63,   89,   52,
       34,   59,   42,   62,   29,   50,   62,   43,   53,   50,
       50,   67,   53,   60,   55,   51,   52,   61,   53,  118,
       55,   42,   25,   35, 1424,   65,   55,   52,   63,   64,
       52,   68,   64, 1422,   62,   65,  114,   62,   54, 1420,
       66,   69,   67,   89,   74,   66,   51,   54,   54,   54,
       35,   35,  115,   35,  114,   35,   65,   54,   35,   54,

       64, 1418,   68,   64,   35, 1416,   65,   35,   35,   54,
       35,   66,   69,   80,   80,   80,   66,  130,   54,   54,
       54,   35,   35,  115,   35,  114,   35,  126,   54,   35,
       54, 1414,   84,   96,   96,   35,   58,  120,   35,   35,
      132,   35,  120,   58,   58,   80,   84,   84,  130,   58,
      116,  116,  116, 1412,   96,  123,  123,   93,  152, 1410,
      152,   94,   93,  152,  152,  152,   94,   58,  159,  159,
      172,  132,  126, 1408,   58,   58,   80, 1406,   84, 1404,
       58,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   84,
       93,   84,   91,   91,   94,   95,   95,  104,  104,  131,
      172,  133,  134,  104,  111,  131,  135,  136,  137,  138,
      158, 1402,  145,  145,  145,   78,   78,   78,  173,   78,
      111,  104,  104,  111,   91,  145, 1400,   95,  166,  166,
      131,   91,  133,  134,  224,  224,  131,  135,  136,  137,
      138,  158,  111,  168,  169,   78,   78,   78,  150,  150,
      150,  170,  155,  155,  155,   91,  145,   91,   95,  155,
       95,  150,  151,  173,  151,  151,  151,  175,  176,  176,
      177,  178,  180,  111,  168,  169,  179,  151,  155,  179,

      182,  183,  170,  184,  177,  185,  186,  188,  189,  190,
      191,  193,  150,  187,  240,  240,  195,  196,  175,  176,
      176,  177,  178,  180,  187,  197,  200,  179,  151,  194,
      179,  182,  183,  202,  184,  177,  185,  186,  188,  189,
      190,  191,  193,  199,  187,  194,  194,  195,  196,  199,
      201,  203,  204,  201,  205,  187,  197,  200,  206,  207,
      194,  208,  209,  210,  202,  219,  219,  219,  235, 1398,
      236,  253,  251,  235,  199,  236,  194,  194,  239,  239,
      199,  201,  203,  204,  201,  205,  254,  259,  251,  206,
      207,  251,  208,  209,  210,  212,  260,  261,  212,  239,

      212, 1396,  253,  262,  212,  212,  263,  264,  246,  246,
      251,  265,  266,  267,  246,  268, 1394,  254,  259,  274,
      274,  235, 1392,  236,  275,  275,  212,  260,  261,  212,
      276,  212,  246,  246,  262,  212,  212,  263,  264,  283,
      285,  251,  265,  266,  267,  287,  268,  269,  269,  269,
      270,  270,  270,  271,  271,  271,  272,  272,  272,  288,
      289,  276,  290,  270,  291,  292,  292,  293,  294,  296,
      283,  285,  297,  298,  300, 1390,  287,  301,  302,  303,
      304,  305,  306,  307,  308,  309,  310,  299,  311,  299,
      288,  289,  299,  290,  270,  291,  292,  292,  293,  294,

      296,  312,  299,  297,  298,  300,  299,  315,  301,  302,
      303,  304,  305,  306,  307,  308,  309,  310,  299,  311,
      299,  314,  316,  299,  317,  318,  319,  320,  321,  314,
      323,  326,  312,  299,  328,  329,  330,  299,  315,  331,
      332,  334,  334,  338,  339,  340,  341,  329, 1388,  342,
      343, 1386,  314,  316,  344,  317,  318,  319,  320,  321,
      314,  323,  326,  337,  346,  328,  329,  330,  347,  348,
      331,  332,  345,  349,  338,  339,  340,  341,  329,  337,
      342,  343,  337,  345,  355,  344,  350,  350,  350,  357,
      357,  358,  359,  360,  362,  346,  363,  364,  365,  347,

      348,  337,  366,  345,  349,  367,  368,  370,  371,  372,
      373,  374,  375,  376,  379,  355,  380,  381,  382,  383,
      384,  385,  358,  359,  360,  362,  386,  363,  364,  365,
      387,  388,  337,  366,  345,  390,  367,  368,  370,  371,
      372,  373,  374,  375,  376,  379,  391,  380,  381,  382,
      383,  384,  385,  392,  393,  394,  395,  386,  396,  397,
      398,  387,  388,  399,  400,  401,  390,  402,  403,  404,
      405,  406,  411,  411,  411,  412, 1384,  391,  413,  414,
      416,  415,  417,  420,  392,  393,  394,  395,  410,  396,
      397,  398,  415,  421,  399,  400,  401,  418,  402,  403,

      404,  405,  406,  423,  410,  422,  412,  410,  418,  413,
      414,  416,  415,  417,  420,  424,  422,  425,  428,  428,
      429,  436,  437,  438,  421,  439,  410,  441,  442,  444,
      445,  446,  448,  449,  423,  450,  451,  452,  453,  454,
      457,  458,  459,  415,  460,  461,  424,  462,  425,  463,
      467,  429,  436,  437,  438,  468,  439,  410,  441,  442,
      444,  445,  446,  448,  449,  469,  450,  451,  452,  453,
      454,  457,  458,  459,  470,  460,  461,  471,  462,  472,
      463,  467,  474,  477,  478,  479,  468,  482,  480,  484,
      483,  485,  486,  487,  489,  478,  469,  491,  474,  480,

      484,  474,  490,  492,  487,  470,  493,  494,  471,  495,
      472,  497,  498,  490,  477,  499,  479,  500,  482,  501,
      474,  483,  485,  486,  502,  489,  503,  505,  491,  506,
      507,  508,  509,  510,  492,  512,  516,  493,  494,  518,
      495,  521,  497,  498,  528,  525,  499,  530,  500,  523,
      501,  474,  524,  524,  524,  502,  525,  503,  505,  535,
      506,  507,  508,  509,  510,  523,  512,  516,  523,  527,
      518,  529,  521,  531,  532,  528,  536,  533,  530,  537,
      527,  540,  529,  541,  531,  532,  542,  523,  533,  543,
      535,  546,  547,  549,  550,  552,  556,  557,  559, 1382,

      561,  562,  562,  562,  563, 1380,  574,  536, 1378,  575,
      537, 1376,  540, 1374,  541,  563,  561,  542,  523,  561,
      543,  565,  546,  547,  549,  550,  552,  556,  557,  559,
      566,  567,  565,  569,  571,  571,  571,  574,  561,  562,
      575,  566,  567,  576,  569,  579,  580,  581,  582,  583,
      584,  587,  588,  593,  595,  595,  592,  596,  597,  571,
      594,  594,  594, 1372,  599,  600,  601,  604,  606,  561,
      562,  607,  592,  611,  576,  592,  579,  580,  581,  582,
      583,  584,  587,  588,  593,  594,  617,  619,  596,  597,
      610,  621,  624,  625,  592,  599,  600,  601,  604,  606,

      626,  627,  607,  629,  611,  632,  610,  631,  624,  610,
      636,  624,  639,  640, 1370,  643,  644,  617,  619,  638,
      647, 1368,  621,  631,  625,  592,  631, 1366,  610,  659,
      624,  626,  627,  642,  629,  638,  632,  646,  638,  650,
     1364,  636, 1362,  639,  640,  631,  643,  644, 1360,  642,
      660,  647,  642,  646,  653,  650,  646,  638,  650,  610,
      659,  624,  651,  651,  651,  654,  654,  654,  661,  664,
      653,  642, 1358,  653,  657,  646,  631,  650,  655,  655,
      655,  660,  655,  665,  666, 1356,  651,  655,  638,  654,
      657,  663,  653,  657,  658,  658,  658,  668,  658,  661,

      664,  669,  642,  658, 1354, 1352,  646,  663,  650,  670,
      663,  673,  657,  668,  665,  666,  668,  671,  671,  671,
      655, 1350, 1348,  653, 1346,  679, 1344,  673, 1342,  663,
      673,  681,  669, 1340, 1338,  668,  658,  676,  676,  676,
      670,  679,  671,  657,  679,  683, 1336,  681, 1334,  673,
      681,  655,  685, 1332,  687, 1330, 1328, 1326,  689,  691,
      663,  683,  676,  679,  683,  693,  668,  658,  685,  681,
      687,  685,  695,  687,  689,  691, 1324,  689,  691,  697,
      673,  693, 1322,  683,  693, 1320,  699, 1318,  695, 1316,
      685,  695,  687,  701,  679,  697,  689,  691,  697,  703,

      681, 1314,  699,  693, 1312,  699,  705, 1310, 1308,  701,
      695, 1306,  701,  707,  683,  703, 1304,  697,  703,  709,
      711,  685,  705,  687,  699,  705,  713,  689,  691,  707,
     1302,  701,  707,  715,  693,  709,  711,  703,  709,  711,
      717,  695,  713, 1300,  705,  713, 1298,  719,  697,  715,
     1296,  707,  715,  721,  723,  699,  717,  709,  711,  717,
      725,  727,  701,  719,  713,  729,  719,  731,  703,  721,
      723,  715,  721,  723,  733,  705,  725,  727,  717,  725,
      727,  729,  707,  731,  729,  719,  731, 1294,  709,  711,
      733,  721,  723,  733,  735,  713, 1292, 1290,  725,  727,

     1288,  737,  715,  729, 1286,  731, 1284, 1282,  739,  717,
      735, 1280,  733,  735, 1278, 1276,  719,  737, 1274,  741,
      737,  743,  721,  723,  739, 1272,  745,  739,  747,  725,
      727, 1270,  735,  749,  729,  741,  731,  743,  741,  737,
      743, 1268,  745,  733,  747,  745,  739,  747, 1266,  749,
     1264, 1262,  749,  751, 1260, 1258, 1256,  741, 1254,  743,
      753, 1252,  755,  735,  745, 1250,  747,  757,  759,  751,
      737,  749,  751,  761, 1248, 1246,  753,  739,  755,  753,
      763,  755, 1244,  757,  759,  765,  757,  759,  741,  761,
      743,  751,  761, 1242,  767,  745,  763,  747,  753,  763,

      755,  765,  749, 1240,  765,  757,  759, 1238,  769,  771,
      767,  761, 1236,  767,  773, 1234, 1232, 1230,  763,  775,
     1228, 1226,  751,  765,  769,  771, 1224,  769,  771,  753,
      773,  755,  767,  773,  777,  775,  757,  759,  775, 1222,
     1220, 1218,  761,  779, 1216, 1214,  769,  771,  781,  763,
      777, 1212,  773,  777,  765,  783, 1210,  775, 1208,  779,
      785, 1206,  779,  767,  781, 1204,  787,  781,  789, 1202,
     1200,  783,  777,  791,  783,  793,  785,  769,  771,  785,
      795,  779,  787,  773,  789,  787,  781,  789,  775,  791,
     1198,  793,  791,  783,  793, 1196,  795, 1194,  785,  795,

      797, 1192, 1190,  777,  787, 1188,  789,  799, 1186,  801,
     1184,  791,  779,  793,  803,  805,  797,  781,  795,  797,
      807, 1182, 1180,  799,  783,  801,  799,  809,  801,  785,
      803,  805,  811,  803,  805,  787,  807,  789,  797,  807,
     1178,  813,  791,  809,  793,  799,  809,  801,  811,  795,
     1176,  811,  803,  805, 1174,  815,  817,  813,  807, 1172,
      813,  819, 1170, 1168, 1166,  809,  821, 1164, 1162,  797,
      811,  815,  817, 1160,  815,  817,  799,  819,  801,  813,
      819,  823,  821,  803,  805,  821, 1158, 1156, 1154,  807,
      825, 1152, 1150,  815,  817,  827,  809,  823, 1148,  819,

      823,  811,  829, 1146,  821, 1144,  825,  831, 1142,  825,
      813,  827, 1140,  833,  827,  835, 1138, 1136,  829,  823,
      837,  829,  839,  831,  815,  817,  831,  841,  825,  833,
      819,  835,  833,  827,  835,  821,  837, 1134,  839,  837,
      829,  839, 1132,  841, 1130,  831,  841,  843, 1128, 1126,
      823,  833, 1124,  835,  845, 1122,  847, 1120,  837,  825,
      839,  849,  851,  843,  827,  841,  843,  853, 1118, 1116,
      845,  829,  847,  845,  855,  847,  831,  849,  851,  857,
      849,  851,  833,  853,  835,  843,  853, 1114,  859,  837,
      855,  839,  845,  855,  847,  857,  841, 1112,  857,  849,

      851, 1110,  861,  863,  859,  853, 1108,  859,  865, 1106,
     1104, 1102,  855,  867, 1100, 1098,  843,  857,  861,  863,
     1096,  861,  863,  845,  865,  847,  859,  865,  869,  867,
      849,  851,  867, 1094, 1092, 1090,  853,  871, 1088, 1086,
      861,  863,  873,  855,  869, 1084,  865,  869,  857,  875,
     1082,  867, 1080,  871,  877, 1078,  871,  859,  873, 1076,
      879,  873,  881, 1074, 1072,  875,  869,  883,  875,  885,
      877,  861,  863,  877,  887,  871,  879,  865,  881,  879,
      873,  881,  867,  883, 1070,  885,  883,  875,  885, 1068,
      887, 1066,  877,  887,  889, 1064, 1062,  869,  879, 1060,

      881,  891, 1058,  893, 1056,  883,  871,  885,  895,  897,
      889,  873,  887,  889,  899, 1054, 1052,  891,  875,  893,
      891,  901,  893,  877,  895,  897,  903,  895,  897,  879,
      899,  881,  889,  899, 1050,  905,  883,  901,  885,  891,
      901,  893,  903,  887, 1048,  903,  895,  897, 1046,  907,
      909,  905,  899, 1044,  905,  911, 1042, 1040, 1038,  901,
      913, 1036, 1034,  889,  903,  907,  909, 1032,  907,  909,
      891,  911,  893,  905,  911,  915,  913,  895,  897,  913,
     1030, 1028, 1026,  899,  917, 1024, 1022,  907,  909,  919,
      901,  915, 1020,  911,  915,  903,  921, 1018,  913, 1016,

      917,  923, 1014,  917,  905,  919, 1012,  925,  919,  927,
     1010, 1008,  921,  915,  929,  921,  931,  923,  907,  909,
      923,  933,  917,  925,  911,  927,  925,  919,  927,  913,
      929, 1006,  931,  929,  921,  931, 1004,  933, 1002,  923,
      933,  935, 1000,  998,  915,  925,  996,  927,  937,  994,
      939,  992,  929,  917,  931,  941,  943,  935,  919,  933,
      935,  945,  990,  988,  937,  921,  939,  937,  947,  939,
      923,  941,  943,  949,  941,  943,  925,  945,  927,  935,
      945,  986,  951,  929,  947,  931,  937,  947,  939,  949,
      933,  984,  949,  941,  943,  982,  953,  955,  951,  945,

      980,  951,  957,  978,  976,  974,  947,  959,  972,  970,
      935,  949,  953,  955,  968,  953,  955,  937,  957,  939,
      951,  957,  961,  959,  941,  943,  959,  966,  964,  962,
      945,  963,  960,  958,  953,  955,  965,  947,  961,  956,
      957,  961,  949,  967,  954,  959,  952,  963,  969,  950,
      963,  951,  965,  948,  971,  965,  973,  946,  944,  967,
      961,  975,  967,  977,  969,  953,  955,  969,  979,  963,
      971,  957,  973,  971,  965,  973,  959,  975,  942,  977,
      975,  967,  977,  940,  979,  938,  969,  979,  981,  936,
      934,  961,  971,  932,  973,  983,  930,  985,  928,  975,

      963,  977,  987,  989,  981,  965,  979,  981,  991,  926,
      924,  983,  967,  985,  983,  993,  985,  969,  987,  989,
      995,  987,  989,  971,  991,  973,  981,  991,  922,  997,
      975,  993,  977,  983,  993,  985,  995,  979,  920,  995,
      987,  989,  918,  999, 1001,  997,  991,  916,  997, 1003,
      914,  912,  910,  993, 1005,  908,  906,  981,  995,  999,
     1001,  904,  999, 1001,  983, 1003,  985,  997, 1003, 1007,
     1005,  987,  989, 1005,  902,  900,  898,  991, 1009,  896,
      894,  999, 1001, 1011,  993, 1007,  892, 1003, 1007,  995,
     1013,  890, 1005,  888, 1009, 1015,  886, 1009,  997, 1011,

      884, 1017, 1011, 1019,  882,  880, 1013, 1007, 1021, 1013,
     1023, 1015,  999, 1001, 1015, 1025, 1009, 1017, 1003, 1019,
     1017, 1011, 1019, 1005, 1021,  878, 1023, 1021, 1013, 1023,
      876, 1025,  874, 1015, 1025, 1027,  872,  870, 1007, 1017,
      868, 1019, 1029,  866, 1031,  864, 1021, 1009, 1023, 1033,
     1035, 1027, 1011, 1025, 1027, 1037,  862,  860, 1029, 1013,
     1031, 1029, 1039, 1031, 1015, 1033, 1035, 1041, 1033, 1035,
     1017, 1037, 1019, 1027, 1037,  858, 1043, 1021, 1039, 1023,
     1029, 1039, 1031, 1041, 1025,  856, 1041, 1033, 1035,  854,
     1045, 1047, 1043, 1037,  852, 1043, 1049,  850,  848,  846,

     1039, 1051,  844,  842, 1027, 1041, 1045, 1047,  840, 1045,
     1047, 1029, 1049, 1031, 1043, 1049, 1053, 1051, 1033, 1035,
     1051,  838,  836,  834, 1037, 1055,  832,  830, 1045, 1047,
     1057, 1039, 1053,  828, 1049, 1053, 1041, 1059,  826, 1051,
      824, 1055, 1061,  822, 1055, 1043, 1057,  820, 1063, 1057,
     1065,  818,  816, 1059, 1053, 1067, 1059, 1069, 1061, 1045,
     1047, 1061, 1071, 1055, 1063, 1049, 1065, 1063, 1057, 1065,
     1051, 1067,  814, 1069, 1067, 1059, 1069,  812, 1071,  810,
     1061, 1071, 1073,  808,  806, 1053, 1063,  804, 1065, 1075,
      802, 1077,  800, 1067, 1055, 1069, 1079, 1081, 1073, 1057,

     1071, 1073, 1083,  798,  796, 1075, 1059, 1077, 1075, 1085,
     1077, 1061, 1079, 1081, 1087, 1079, 1081, 1063, 1083, 1065,
     1073, 1083,  794, 1089, 1067, 1085, 1069, 1075, 1085, 1077,
     1087, 1071,  792, 1087, 1079, 1081,  790, 1091, 1093, 1089,
     1083,  788, 1089, 1095,  786,  784,  782, 1085, 1097,  780,
      778, 1073, 1087, 1091, 1093,  776, 1091, 1093, 1075, 1095,
     1077, 1089, 1095, 1099, 1097, 1079, 1081, 1097,  774,  772,
      770, 1083, 1101,  768,  766, 1091, 1093, 1103, 1085, 1099,
      764, 1095, 1099, 1087, 1105,  762, 1097,  760, 1101, 1107,
      758, 1101, 1089, 1103,  756, 1109, 1103, 1111,  754,  752,

     1105, 1099, 1113, 1105, 1115, 1107, 1091, 1093, 1107, 1117,
     1101, 1109, 1095, 1111, 1109, 1103, 1111, 1097, 1113,  750,
     1115, 1113, 1105, 1115,  748, 1117,  746, 1107, 1117, 1119,
      744,  742, 1099, 1109,  740, 1111, 1121,  738, 1123,  736,
     1113, 1101, 1115, 1125, 1127, 1119, 1103, 1117, 1119, 1129,
      734,  732, 1121, 1105, 1123, 1121, 1131, 1123, 1107, 1125,
     1127, 1133, 1125, 1127, 1109, 1129, 1111, 1119, 1129,  730,
     1135, 1113, 1131, 1115, 1121, 1131, 1123, 1133, 1117,  728,
     1133, 1125, 1127,  726, 1137, 1139, 1135, 1129,  724, 1135,
     1141,  722,  720,  718, 1131, 1143,  716,  714, 1119, 1133,

     1137, 1139,  712, 1137, 1139, 1121, 1141, 1123, 1135, 1141,
     1145, 1143, 1125, 1127, 1143,  710,  708,  706, 1129, 1147,
      704,  702, 1137, 1139, 1149, 1131, 1145,  700, 1141, 1145,
     1133, 1151,  698, 1143,  696, 1147, 1153,  694, 1147, 1135,
     1149,  692, 1155, 1149, 1157,  690,  688, 1151, 1145, 1159,
     1151, 1161, 1153, 1137, 1139, 1153, 1163, 1147, 1155, 1141,
     1157, 1155, 1149, 1157, 1143, 1159,  686, 1161, 1159, 1151,
     1161,  684, 1163,  682, 1153, 1163, 1165,  680,  678, 1145,
     1155,  675, 1157, 1167,  674, 1169,  672, 1159, 1147, 1161,
     1171, 1173, 1165, 1149, 1163, 1165, 1175,  667,  662, 1167,

     1151, 1169, 1167, 1177, 1169, 1153, 1171, 1173, 1179, 1171,
     1173, 1155, 1175, 1157, 1165, 1175,  656, 1181, 1159, 1177,
     1161, 1167, 1177, 1169, 1179, 1163,  652, 1179, 1171, 1173,
      649, 1183, 1185, 1181, 1175,  645, 1181, 1187,  641,  637,
      630, 1177, 1189,  628,  623, 1165, 1179, 1183, 1185,  620,
     1183, 1185, 1167, 1187, 1169, 1181, 1187, 1191, 1189, 1171,
     1173, 1189,  613,  609,  608, 1175, 1193,  591,  590, 1183,
     1185, 1195, 1177, 1191,  585, 1187, 1191, 1179, 1197,  560,
     1189,  558, 1193, 1199,  555, 1193, 1181, 1195,  554, 1201,
     1195, 1203,  553,  548, 1197, 1191, 1205, 1197, 1207, 1199,

     1183, 1185, 1199, 1209, 1193, 1201, 1187, 1203, 1201, 1195,
     1203, 1189, 1205,  522, 1207, 1205, 1197, 1207,  520, 1209,
      519, 1199, 1209, 1211,  517,  476, 1191, 1201,  473, 1203,
     1213,  427, 1215,  409, 1205, 1193, 1207, 1217, 1219, 1211,
     1195, 1209, 1211, 1221,  356,  354, 1213, 1197, 1215, 1213,
     1223, 1215, 1199, 1217, 1219, 1225, 1217, 1219, 1201, 1221,
     1203, 1211, 1221,  352, 1227, 1205, 1223, 1207, 1213, 1223,
     1215, 1225, 1209,  336, 1225, 1217, 1219,  286, 1229, 1231,
     1227, 1221,  282, 1227, 1233,  277,  258,  250, 1223, 1235,
      238,  233, 1211, 1225, 1229, 1231,  230, 1229, 1231, 1213,

     1233, 1215, 1227, 1233, 1237, 1235, 1217, 1219, 1235,  229,
      227,  174, 1221, 1239,  165,  162, 1229, 1231, 1241, 1223,
     1237,  157, 1233, 1237, 1225, 1243,  156, 1235,  147, 1239,
     1245,  128, 1239, 1227, 1241,  117, 1247, 1241, 1249,  113,
      112, 1243, 1237, 1251, 1243, 1253, 1245, 1229, 1231, 1245,
     1255, 1239, 1247, 1233, 1249, 1247, 1241, 1249, 1235, 1251,
      110, 1253, 1251, 1243, 1253,  109, 1255,  107, 1245, 1255,
     1257,  106,  103, 1237, 1247,  102, 1249, 1259,   90, 1261,
       87, 1251, 1239, 1253, 1263, 1265, 1257, 1241, 1255, 1257,
     1267,   86,   85, 1259, 1243, 1261, 1259, 1269, 1261, 1245,

     1263, 1265, 1271, 1263, 1265, 1247, 1267, 1249, 1257, 1267,
       79, 1273, 1251, 1269, 1253, 1259, 1269, 1261, 1271, 1255,
       71, 1271, 1263, 1265,   70, 1275, 1277, 1273, 1267,   49,
     1273, 1279,   44,   37,   28, 1269, 1281,   24,   23, 1257,
     1271, 1275, 1277,   20, 1275, 1277, 1259, 1279, 1261, 1273,
     1279, 1283, 1281, 1263, 1265, 1281,   19,   18,   17, 1267,
     1285,    2,    1, 1275, 1277, 1287, 1269, 1283,    0, 1279,
     1283, 1271, 1289,    0, 1281,    0, 1285, 1291,    0, 1285,
     1273, 1287,    0, 1293, 1287, 1295,    0,    0, 1289, 1283,
     1297, 1289, 1299, 1291, 1275, 1277, 1291, 1301, 1285, 1293,

     1279, 1295, 1293, 1287, 1295, 1281, 1297,    0, 1299, 1297,
     1289, 1299,    0, 1301,    0, 1291, 1301, 1303,    0,    0,
     1283, 1293,    0, 1295, 1305,    0, 1307,    0, 1297, 1285,
     1299, 1309, 1311, 1303, 1287, 1301, 1303, 1313,    0,    0,
     1305, 1289, 1307, 1305, 1315, 1307, 1291, 1309, 1311, 1317,
     1309, 1311, 1293, 1313, 1295, 1303, 1313,    0, 1319, 1297,
     1315, 1299, 1305, 1315, 1307, 1317, 1301,    0, 1317, 1309,
     1311,    0, 1321, 1323, 1319, 1313,    0, 1319, 1325,    0,
        0,    0, 1315, 1327,    0,    0, 1303, 1317, 1321, 1323,
        0, 1321, 1323, 1305, 1325, 1307, 1319, 1325, 1329, 1327,

     1309, 1311, 1327,    0,    0,    0, 1313, 1331,    0,    0,
     1321, 1323, 1333, 1315, 1329,    0, 1325, 1329, 1317, 1335,
        0, 1327,    0, 1331, 1337,    0, 1331, 1319, 1333,    0,
     1339, 1333, 1341,    0,    0, 1335, 1329, 1343, 1335, 1345,
     1337, 1321, 1323, 1337, 1347, 1331, 1339, 1325, 1341, 1339,
     1333, 1341, 1327, 1343,    0, 1345, 1343, 1335, 1345,    0,
     1347,    0, 1337, 1347, 1349,    0,    0, 1329, 1339,    0,
     1341, 1351,    0, 1353,    0, 1343, 1331, 1345, 1355, 1357,
     1349, 1333, 1347, 1349, 1359,    0,    0, 1351, 1335, 1353,
     1351, 1361, 1353, 1337, 1355, 1357, 1363, 1355, 1357, 1339,

     1359, 1341, 1349, 1359,    0, 1365, 1343, 1361, 1345, 1351,
     1361, 1353, 1363, 1347,    0, 1363, 1355, 1357,    0, 1367,
     1369, 1365, 1359,    0, 1365, 1371,    0,    0,    0, 1361,
     1373,    0,    0, 1349, 1363, 1367, 1369,    0, 1367, 1369,
     1351, 1371, 1353, 1365, 1371, 1375, 1373, 1355, 1357, 1373,
        0,    0,    0, 1359, 1377,    0,    0, 1367, 1369, 1379,
     1361, 1375,    0, 1371, 1375, 1363, 1381,    0, 1373,    0,
     1377, 1383,    0, 1377, 1365, 1379,    0, 1385, 1379, 1387,
        0,    0, 1381, 1375, 1389, 1381, 1391, 1383, 1367, 1369,
     1383, 1393, 1377, 1385, 1371, 1387, 1385, 1379, 1387, 1373,

     1389,    0, 1391, 1389, 1381, 1391,    0, 1393,    0, 1383,
     1393, 1395,    0,    0, 1375, 1385,    0, 1387, 1397,    0,
     1399,    0, 1389, 1377, 1391, 1401, 1403, 1395, 1379, 1393,
     1395, 1405,    0,    0, 1397, 1381, 1399, 1397, 1407, 1399,
     1383, 1401, 1403, 1409, 1401, 1403, 1385, 1405, 1387, 1395,
     1405,    0, 1411, 1389, 1407, 1391, 1397, 1407, 1399, 1409,
     1393,    0, 1409, 1401, 1403,    0, 1413, 1415, 1411, 1405,
        0, 1411, 1417,    0,    0,    0, 1407, 1419,    0,    0,
     1395, 1409, 1413, 1415,    0, 1413, 1415, 1397, 1417, 1399,
     1411, 1417, 1421, 1419, 1401, 1403, 1419,    0,    0,    0,

     1405, 1423,    0,    0, 1413, 1415, 1425, 1407, 1421,    0,
     1417, 1421, 1409, 1427,    0, 1419,    0, 1423, 1429,    0,
     1423, 1411, 1425,    0, 1431, 1425, 1433,    0,    0, 1427,
     1421, 1435, 1427,    0, 1429, 1413, 1415, 1429,    0, 1423,
     1431, 1417, 1433, 1431, 1425, 1433, 1419, 1435,    0,    0,
     1435, 1427,    0,    0,    0,    0, 1429,    0,    0,    0,
        0, 1421, 1431,    0, 1433,    0,    0,    0,    0, 1435,
     1423,    0,    0,    0,    0, 1425,    0,    0,    0,    0,
        0,    0, 1427,    0,    0,    0,    0, 1429,    0,    0,
        0,    0,    0, 1431,    0, 1433,    0,    0,    0,    0,

     1435, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
        0, 1442, 1442, 1443, 1443, 1443, 1443,    0, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446,

        0,    0, 1446, 1446, 1447, 1447, 1447,    0, 1447, 1447,
        0, 1447, 1447, 1448,    0,    0, 1448, 1448, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1450, 1450, 1450, 1450, 1450,    0, 1450, 1450, 1450, 1450,
     1450, 1450, 1451,    0,    0,    0,    0, 1451, 1451,    0,
     1451, 1451, 1452,    0,    0, 1452, 1452, 1453,    0,    0,
     1453, 1453, 1454, 1454, 1454, 1454, 1454, 1454,    0, 1454,
     1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457,    0,

        0, 1457, 1457, 1458,    0,    0, 1458, 1459,    0,    0,
     1459, 1460,    0,    0, 1460, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1462,    0,    0,
        0,    0,    0,    0,    0,    0, 1462, 1462, 1463,    0,
        0, 1463, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1465,    0,    0,    0,    0, 1465,
        0,    0, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,

     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477, 1477,

     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,

     1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,

     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502,

     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1508, 1508,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,

     1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,

     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525, 1525, 1525, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527, 1527,

     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1532, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534,
     1534, 1534, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,

     1535, 1535, 1535, 1535, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1542, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552,

     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,

     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577,

     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,

     1585, 1585, 1585, 1585, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602, 1602,

     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,

     1610, 1610, 1610, 1610, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,

     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1627, 1627, 1627, 1627,

     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1640, 1640, 1640, 1641, 1641, 1641, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,

     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652, 1652, 1652,

     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,

     1660, 1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,

     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1677, 1677, 1677, 1677,

     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1681,
     1681, 1681, 1681, 1681, 1681, 1681, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1683, 1683,
     1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,

     1685, 1685, 1685, 1685, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1688, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1691, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,

     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1695, 1695, 1695, 1695, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1701, 1701, 1701, 1702, 1702, 1702, 1702,

     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706, 1706, 1706, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1709, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,

     1710, 1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1711, 1711, 1711, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,

     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1719, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725, 1726, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1726, 1726, 1726, 1726, 1727, 1727, 1727, 1727,

     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1729, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1731, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1733, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,

     1735, 1735, 1735, 1735, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1742, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1743, 1743,
     1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743,

     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
     1744, 1744, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1745, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1750, 1750, 1750, 1751, 1751, 1751, 1751, 1751, 1751,
     1751, 1751, 1751, 1751, 1751, 1751, 1752, 1752, 1752, 1752,

     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1756, 1756, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,
     1759, 1759, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,

     1760, 1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1766, 1766, 1766, 1766, 1766, 1766,
     1766, 1766, 1766, 1766, 1766, 1766, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1768, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,

     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
     1769, 1769, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1770, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1775, 1776, 1776, 1776, 1776, 1776, 1776,
     1776, 1776, 1776, 1776, 1776, 1776, 1777, 1777, 1777, 1777,

     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779,
     1779, 1779, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1781, 1781, 1781, 1781, 1781, 1781,
     1781, 1781, 1781, 1781, 1781, 1781, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,

     1785, 1785, 1785, 1785, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1786, 1786, 1787, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790,
     1790, 1790, 1790, 1790, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1793, 1793,
     1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793,

     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
     1794, 1794, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1796, 1796, 1796, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1797, 1797, 1797, 1797,
     1797, 1797, 1797, 1797, 1797, 1797, 1797, 1797, 1798, 1798,
     1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799,
     1799, 1799, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1800, 1800, 1800, 1800, 1801, 1801, 1801, 1801, 1801, 1801,
     1801, 1801, 1801, 1801, 1801, 1801, 1802, 1802, 1802, 1802,

     1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1803, 1803,
     1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,
     1804, 1804, 1805, 1805, 1805, 1805, 1805, 1805, 1805, 1805,
     1805, 1805, 1805, 1805, 1806, 1806, 1806, 1806, 1806, 1806,
     1806, 1806, 1806, 1806, 1806, 1806, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1807, 1807, 1807, 1807, 1808, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808,
     1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809, 1809,
     1809, 1809, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,

     1810, 1810, 1810, 1810, 1811, 1811, 1811, 1811, 1811, 1811,
     1811, 1811, 1811, 1811, 1811, 1811, 1812, 1812, 1812, 1812,
     1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1813, 1813,
     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
     1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
     1814, 1814, 1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1817, 1817, 1817, 1817,
     1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820,
     1820, 1820, 1820, 1820, 1821, 1821, 1821, 1821, 1821, 1821,
     1821, 1821, 1821, 1821, 1821, 1821, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1823, 1823,
     1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823, 1823,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
     1825, 1825, 1825, 1825, 1826, 1826, 1826, 1826, 1826, 1826,
     1826, 1826, 1826, 1826, 1826, 1826, 1827, 1827, 1827, 1827,

     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1828, 1828,
     1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828,
     1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829,
     1829, 1829, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830,
     1830, 1830, 1830, 1830, 1831, 1831, 1831, 1831, 1831, 1831,
     1831, 1831, 1831, 1831, 1831, 1831, 1832, 1832, 1832, 1832,
     1832, 1832, 1832, 1832, 1832, 1832, 1832, 1832, 1833, 1833,
     1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833,
     1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834, 1834,
     1834, 1834, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,

     1835, 1835, 1835, 1835, 1836, 1836, 1836, 1836, 1836, 1836,
     1836, 1836, 1836, 1836, 1836, 1836, 1837, 1837, 1837, 1837,
     1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1838, 1838,
     1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838, 1838,
     1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,
     1839, 1839, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1841, 1841, 1841, 1841, 1841, 1841,
     1841, 1841, 1841, 1841, 1841, 1841, 1842, 1842, 1842, 1842,
     1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,

     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
     1845, 1845, 1845, 1845, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1847, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1847, 1847, 1848, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848,
     1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849, 1849,
     1849, 1849, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850,
     1850, 1850, 1850, 1850, 1851, 1851, 1851, 1851, 1851, 1851,
     1851, 1851, 1851, 1851, 1851, 1851, 1852, 1852, 1852, 1852,

     1852, 1852, 1852, 1852, 1852, 1852, 1852, 1852, 1853, 1853,
     1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853, 1853,
     1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1856, 1856, 1856, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1857, 1857, 1857, 1857,
     1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1858, 1858,
     1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858, 1858,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
     1859, 1859, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,

     1860, 1860, 1860, 1860, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "zend_language_scanner.l"
#line 2 "zend_language_scanner.l"

/*
   +----------------------------------------------------------------------+
   | Zend Engine                                                          |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2006 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   +----------------------------------------------------------------------+
*/

/* $Id: zend_language_scanner.l,v 1.131.2.11.2.7 2007/01/18 23:28:08 iliaa Exp $ */

#include <stdio.h>
#include <ptree.h>
#include "pt_zend_language_parser.tab.hh"
#include <map>
#include <string>
using namespace std;

extern map<string,int> name2id;
void count();

// TODO: potential troublesome global variables; better to have encapsulated states...
/* NOTE: yylineno is expensive, so disable it */
int column = 0;
int line = 1;
// handle heredoc:
int heredoc_len = 0;
char * heredoc = NULL;

#define YY_DECL int yylex(YYSTYPE *yylvalp)
#define YY_FATAL_ERROR zend_fatal_scanner_error

void zend_fatal_scanner_error(char *message)
{
	fprintf(stderr, "%s", message);
}











#line 3114 "lex.yy.cc"

#define INITIAL 0
#define ST_IN_SCRIPTING 1
#define ST_DOUBLE_QUOTES 2
#define ST_SINGLE_QUOTE 3
#define ST_BACKQUOTE 4
#define ST_HEREDOC 5
#define ST_LOOKING_FOR_PROPERTY 6
#define ST_LOOKING_FOR_VARNAME 7
#define ST_COMMENT 8
#define ST_DOC_COMMENT 9
#define ST_ONE_LINE_COMMENT 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 80 "zend_language_scanner.l"


#line 3327 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1437 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9105 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_EXIT"],yytext,line); return T_EXIT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 86 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_EXIT"],yytext,line); return T_EXIT;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 90 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_FUNCTION"],yytext,line); return T_FUNCTION;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 94 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CONST"],yytext,line); return T_CONST;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 98 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_RETURN"],yytext,line); return T_RETURN;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_TRY"],yytext,line); return T_TRY;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CATCH"],yytext,line); return T_CATCH;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 110 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_THROW"],yytext,line); return T_THROW;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 114 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IF"],yytext,line); return T_IF;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 118 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ELSEIF"],yytext,line); return T_ELSEIF;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENDIF"],yytext,line); return T_ENDIF;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 126 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ELSE"],yytext,line); return T_ELSE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 130 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_WHILE"],yytext,line); return T_WHILE;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENDWHILE"],yytext,line); return T_ENDWHILE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 138 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DO"],yytext,line); return T_DO;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 142 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_FOR"],yytext,line); return T_FOR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 146 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENDFOR"],yytext,line); return T_ENDFOR;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 150 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_FOREACH"],yytext,line); return T_FOREACH;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 154 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENDFOREACH"],yytext,line); return T_ENDFOREACH;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DECLARE"],yytext,line); return T_DECLARE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENDDECLARE"],yytext,line); return T_ENDDECLARE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 166 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_INSTANCEOF"],yytext,line); return T_INSTANCEOF;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 170 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_AS"],yytext,line); return T_AS;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 174 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_SWITCH"],yytext,line); return T_SWITCH;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 178 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENDSWITCH"],yytext,line); return T_ENDSWITCH;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 182 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CASE"],yytext,line); return T_CASE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 186 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DEFAULT"],yytext,line); return T_DEFAULT;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 190 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_BREAK"],yytext,line); return T_BREAK;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 194 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CONTINUE"],yytext,line); return T_CONTINUE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 198 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ECHO"],yytext,line); return T_ECHO;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 202 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_PRINT"],yytext,line); return T_PRINT;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 206 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CLASS"],yytext,line); return T_CLASS;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 210 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_INTERFACE"],yytext,line); return T_INTERFACE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 214 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_EXTENDS"],yytext,line); return T_EXTENDS;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 218 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IMPLEMENTS"],yytext,line); return T_IMPLEMENTS;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 222 "zend_language_scanner.l"
{
	yy_push_state(ST_LOOKING_FOR_PROPERTY);
	count(); yylvalp->t=new Terminal(name2id["T_OBJECT_OPERATOR"],yytext,line); return T_OBJECT_OPERATOR;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 227 "zend_language_scanner.l"
{
	yy_pop_state();
	count(); yylvalp->t=new Terminal(name2id["T_STRING"],yytext,line); return T_STRING;
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 232 "zend_language_scanner.l"
{
	yyless(0);
	yy_pop_state();
        count();
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 238 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_PAAMAYIM_NEKUDOTAYIM"],yytext,line); return T_PAAMAYIM_NEKUDOTAYIM;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 242 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_NEW"],yytext,line); return T_NEW;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 246 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CLONE"],yytext,line); return T_CLONE;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 250 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_VAR"],yytext,line); return T_VAR;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 254 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_INT_CAST"],yytext,line); return T_INT_CAST;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 258 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DOUBLE_CAST"],yytext,line); return T_DOUBLE_CAST;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_STRING_CAST"],yytext,line); return T_STRING_CAST;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 266 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_STRING_CAST"],yytext,line); return T_STRING_CAST;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 270 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ARRAY_CAST"],yytext,line); return T_ARRAY_CAST;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 274 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_OBJECT_CAST"],yytext,line); return T_OBJECT_CAST;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 278 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_BOOL_CAST"],yytext,line); return T_BOOL_CAST;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 282 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_UNSET_CAST"],yytext,line); return T_UNSET_CAST;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 286 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_EVAL"],yytext,line); return T_EVAL;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 290 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_INCLUDE"],yytext,line); return T_INCLUDE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 294 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_INCLUDE_ONCE"],yytext,line); return T_INCLUDE_ONCE;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 298 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_REQUIRE"],yytext,line); return T_REQUIRE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 302 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_REQUIRE_ONCE"],yytext,line); return T_REQUIRE_ONCE;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 306 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_USE"],yytext,line); return T_USE;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 310 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_GLOBAL"],yytext,line); return T_GLOBAL;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 314 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ISSET"],yytext,line); return T_ISSET;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 318 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_EMPTY"],yytext,line); return T_EMPTY;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 322 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_HALT_COMPILER"],yytext,line); return T_HALT_COMPILER;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 326 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_STATIC"],yytext,line); return T_STATIC;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 330 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ABSTRACT"],yytext,line); return T_ABSTRACT;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 334 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_FINAL"],yytext,line); return T_FINAL;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 338 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_PRIVATE"],yytext,line); return T_PRIVATE;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 342 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_PROTECTED"],yytext,line); return T_PROTECTED;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 346 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_PUBLIC"],yytext,line); return T_PUBLIC;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 350 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_UNSET"],yytext,line); return T_UNSET;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 354 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DOUBLE_ARROW"],yytext,line); return T_DOUBLE_ARROW;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 358 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_LIST"],yytext,line); return T_LIST;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 362 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ARRAY"],yytext,line); return T_ARRAY;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 366 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_INC"],yytext,line); return T_INC;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 370 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DEC"],yytext,line); return T_DEC;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 374 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IS_IDENTICAL"],yytext,line); return T_IS_IDENTICAL;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 378 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IS_NOT_IDENTICAL"],yytext,line); return T_IS_NOT_IDENTICAL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 382 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IS_EQUAL"],yytext,line); return T_IS_EQUAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 386 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IS_NOT_EQUAL"],yytext,line); return T_IS_NOT_EQUAL;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 390 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IS_SMALLER_OR_EQUAL"],yytext,line); return T_IS_SMALLER_OR_EQUAL;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 394 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_IS_GREATER_OR_EQUAL"],yytext,line); return T_IS_GREATER_OR_EQUAL;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 398 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_PLUS_EQUAL"],yytext,line); return T_PLUS_EQUAL;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 402 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_MINUS_EQUAL"],yytext,line); return T_MINUS_EQUAL;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 406 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_MUL_EQUAL"],yytext,line); return T_MUL_EQUAL;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 410 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DIV_EQUAL"],yytext,line); return T_DIV_EQUAL;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 414 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CONCAT_EQUAL"],yytext,line); return T_CONCAT_EQUAL;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 418 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_MOD_EQUAL"],yytext,line); return T_MOD_EQUAL;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 422 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_SL_EQUAL"],yytext,line); return T_SL_EQUAL;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 426 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_SR_EQUAL"],yytext,line); return T_SR_EQUAL;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 430 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_AND_EQUAL"],yytext,line); return T_AND_EQUAL;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 434 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_OR_EQUAL"],yytext,line); return T_OR_EQUAL;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 438 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_XOR_EQUAL"],yytext,line); return T_XOR_EQUAL;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 442 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_BOOLEAN_OR"],yytext,line); return T_BOOLEAN_OR;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 446 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_BOOLEAN_AND"],yytext,line); return T_BOOLEAN_AND;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 450 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_LOGICAL_OR"],yytext,line); return T_LOGICAL_OR;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 454 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_LOGICAL_AND"],yytext,line); return T_LOGICAL_AND;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 458 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_LOGICAL_XOR"],yytext,line); return T_LOGICAL_XOR;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 462 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_SL"],yytext,line); return T_SL;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 466 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_SR"],yytext,line); return T_SR;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 470 "zend_language_scanner.l"
{
        char temp[4] = {'\'', yytext[0], '\'', 0};
	count(); yylvalp->t=new Terminal(name2id[temp],yytext,line); return yytext[0];
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 476 "zend_language_scanner.l"
{
	yy_push_state(ST_IN_SCRIPTING);
	count(); yylvalp->t=new Terminal(name2id["'{'"],yytext,line); return '{';
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 482 "zend_language_scanner.l"
{
	yy_push_state(ST_LOOKING_FOR_VARNAME);
	count(); yylvalp->t=new Terminal(name2id["T_DOLLAR_OPEN_CURLY_BRACES"],yytext,line); return T_DOLLAR_OPEN_CURLY_BRACES;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 488 "zend_language_scanner.l"
{
	//RESET_DOC_COMMENT();
	/* This is a temporary fix which is dependant on flex and it's implementation */
	if (yy_start_stack_ptr) { // prevent syntax errors in php source files to crash the parser...
		yy_pop_state();
	}
	count(); yylvalp->t=new Terminal(name2id["'}'"],yytext,line); return '}';
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 498 "zend_language_scanner.l"
{
	yy_pop_state();
	yy_push_state(ST_IN_SCRIPTING); // the push is used to reduce certain rules (e.g., <ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>"}"), but why need "ST_LOOKING_FOR_VARNAME" at first place?
	count(); yylvalp->t=new Terminal(name2id["T_STRING_VARNAME"],yytext,line); return T_STRING_VARNAME;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 505 "zend_language_scanner.l"
{
	yyless(0);
	yy_pop_state();
	yy_push_state(ST_IN_SCRIPTING);
        count();
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 513 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_LNUMBER"],yytext,line); return T_LNUMBER;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 517 "zend_language_scanner.l"
{
		count(); yylvalp->t=new Terminal(name2id["T_LNUMBER"],yytext,line); return T_LNUMBER;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 521 "zend_language_scanner.l"
{ /* treat numbers (almost) as strings inside encapsulated strings */
	count(); yylvalp->t=new Terminal(name2id["T_NUM_STRING"],yytext,line); return T_NUM_STRING;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 525 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_DNUMBER"],yytext,line); return T_DNUMBER;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 529 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CLASS_C"],yytext,line); return T_CLASS_C;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 533 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_FUNC_C"],yytext,line); return T_FUNC_C;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 537 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_METHOD_C"],yytext,line); return T_METHOD_C;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 541 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_LINE"],yytext,line); return T_LINE;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 545 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_FILE"],yytext,line); return T_FILE;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 549 "zend_language_scanner.l"
{
        //?? why "400" limit?
	count(); yylvalp->t=new Terminal(name2id["T_INLINE_HTML"],yytext,line); return T_INLINE_HTML;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 554 "zend_language_scanner.l"
{
    /* "<?" is the shorthand for "<?php" and requires some flags to be enabled on the server; but we enable it anyway. */
	if (1) { /* yyleng>2 means it's not <? but <script> */
		BEGIN(ST_IN_SCRIPTING);
                count(); //return T_OPEN_TAG;
	} else {
		count(); yylvalp->t=new Terminal(name2id["T_INLINE_HTML"],yytext,line); return T_INLINE_HTML;
	}
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 565 "zend_language_scanner.l"
{
	if (yytext[1]=='%' || yytext[1]=='?') {
		BEGIN(ST_IN_SCRIPTING);
                count(); //return T_OPEN_TAG; //return T_OPEN_TAG_WITH_ECHO;
	} else {
		count(); yylvalp->t=new Terminal(name2id["T_INLINE_HTML"],yytext,line); return T_INLINE_HTML;
	}
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 575 "zend_language_scanner.l"
{
	if (1) {
		BEGIN(ST_IN_SCRIPTING);
                count(); //return T_OPEN_TAG;
	} else {
		count(); yylvalp->t=new Terminal(name2id["T_INLINE_HTML"],yytext,line); return T_INLINE_HTML;
	}
}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 585 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
        count(); //return T_OPEN_TAG;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 590 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_VARIABLE"],yytext,line); return T_VARIABLE;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 594 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_STRING"],yytext,line); return T_STRING;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 598 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_STRING"],yytext,line); return T_STRING;
}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 603 "zend_language_scanner.l"
{
	count(); //return T_WHITESPACE;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 608 "zend_language_scanner.l"
{
	BEGIN(ST_ONE_LINE_COMMENT);
	//yymore();
        count();
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 614 "zend_language_scanner.l"
{
	yymore();
        //count(); caused wrong "line" and "column" numbers
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 619 "zend_language_scanner.l"
{
	switch (yytext[yyleng-1]) {
		case '?': case '%': case '>':
			yyless(yyleng-1);
			yymore();
                        //count();
			break; // why need yymore() and why not BEGIN(ST_IN_SCRIPTING) here? it depends on whether we need to use the info about the comments.
		default:
			BEGIN(ST_IN_SCRIPTING);
			count(); //return T_COMMENT;
	}
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 632 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
	count(); //return T_COMMENT;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 637 "zend_language_scanner.l"
{ /* one-line comments can also be ended by "?>" or "%>"? */
        if (yytext[yyleng-2] != '%') { /* asp comment? */
		yyless(yyleng-2);
		BEGIN(ST_IN_SCRIPTING);
		count(); //return T_COMMENT;
	} else {
		yymore();
                //count();
	}
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 648 "zend_language_scanner.l"
{
	//RESET_DOC_COMMENT();
	BEGIN(ST_DOC_COMMENT);
	//yymore();
        count();
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 655 "zend_language_scanner.l"
{
	BEGIN(ST_COMMENT);
	//yymore();
        count();
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 662 "zend_language_scanner.l"
{ /* TODO: input buffer of flex overflows when the comments are tooooooooo long */
	//yymore();
        count();
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 667 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
	count(); //return T_DOC_COMMENT;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 672 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
	count(); //return T_COMMENT;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 677 "zend_language_scanner.l"
{
	//yymore();
        count();
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 682 "zend_language_scanner.l"
{
	BEGIN(INITIAL);
	count(); yylvalp->t=new Terminal(name2id["T_CLOSE_TAG"],yytext,line); return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 687 "zend_language_scanner.l"
{
	BEGIN(INITIAL);
	count(); yylvalp->t=new Terminal(name2id["';'"],yytext,line); return ';';//return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 693 "zend_language_scanner.l"
{
	if (1) {
		BEGIN(INITIAL);
		count(); //return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
	} else {
		yyless(1); //??
		count(); //return yytext[0];
	}
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 703 "zend_language_scanner.l"
{
	if (1) {
		BEGIN(INITIAL);
		count(); yylvalp->t=new Terminal(name2id["T_CLOSE_TAG"],yytext,line); return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
	} else {
		yyless(1); //??
		count(); //return yytext[0];
	}
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 714 "zend_language_scanner.l"
{ //?? Does this handle multi-line strings?
	count(); yylvalp->t=new Terminal(name2id["T_CONSTANT_ENCAPSED_STRING"],yytext,line); return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 719 "zend_language_scanner.l"
{ //?? Does this handle multi-line strings?
	count(); yylvalp->t=new Terminal(name2id["T_CONSTANT_ENCAPSED_STRING"],yytext,line); return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 724 "zend_language_scanner.l"
{
	BEGIN(ST_DOUBLE_QUOTES);
	count(); yylvalp->t=new Terminal(name2id["'\"'"],yytext,line); return '\"';
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 730 "zend_language_scanner.l"
{
        char *s;
        int bprefix = (*yytext == 'b') ? 1 : 0;

        heredoc_len = yyleng-bprefix-3-1-(yytext[yyleng-2]=='\r'?1:0);
        s = yytext+bprefix+3;
        while ((*s == ' ') || (*s == '\t')) {
                s++;
                heredoc_len--;
        }
        heredoc = (char*)malloc(heredoc_len+1);
        if ( heredoc ) {
            memcpy(heredoc, s, heredoc_len);
            heredoc[heredoc_len] = 0;
        } else
            heredoc_len = 0;
	BEGIN(ST_HEREDOC);
	count(); yylvalp->t=new Terminal(name2id["T_START_HEREDOC"],yytext,line); return T_START_HEREDOC;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 751 "zend_language_scanner.l"
{
	BEGIN(ST_BACKQUOTE);
	count(); yylvalp->t=new Terminal(name2id["'`'"],yytext,line); return '`';
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 757 "zend_language_scanner.l"
{
	BEGIN(ST_SINGLE_QUOTE);
	count(); yylvalp->t=new Terminal(name2id["'\''"],yytext,line); return '\'';
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 763 "zend_language_scanner.l"
{
	int label_len;

	if (yytext[yyleng-2]=='\r') {
		label_len = yyleng-2;
	} else {
		label_len = yyleng-1;
	}

	if (yytext[label_len-1]==';') {
		label_len--;
	}

	if (label_len==heredoc_len && !memcmp(yytext, heredoc, label_len)) {
		yyless(yyleng - (yyleng - label_len));
		if ( heredoc ) {
                    free(heredoc);
		    heredoc=NULL;
                }
		heredoc_len=0;
		BEGIN(ST_IN_SCRIPTING);
		count(); yylvalp->t=new Terminal(name2id["T_END_HEREDOC"],yytext,line); return T_END_HEREDOC;
	} else {
		count(); yylvalp->t=new Terminal(name2id["T_STRING"],yytext,line); return T_STRING;
	}
}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 791 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENCAPSED_AND_WHITESPACE"],yytext,line); return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 795 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENCAPSED_AND_WHITESPACE"],yytext,line); return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 800 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENCAPSED_AND_WHITESPACE"],yytext,line); return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 805 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENCAPSED_AND_WHITESPACE"],yytext,line); return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 810 "zend_language_scanner.l"
{
	if (yyleng == 2) {
		yyless(1);
	}
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 818 "zend_language_scanner.l"
{
        char temp[4] = {'\'', yytext[0], '\'', 0};
	count(); yylvalp->t=new Terminal(name2id[temp],yytext,line); return yytext[0];
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 823 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_STRING"],yytext,line); return T_STRING;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 827 "zend_language_scanner.l"
{
	yy_push_state(ST_IN_SCRIPTING);
	yyless(1);
	count(); yylvalp->t=new Terminal(name2id["T_CURLY_OPEN"],yytext,line); return T_CURLY_OPEN;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 834 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 838 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 842 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 846 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 850 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 854 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 858 "zend_language_scanner.l"
{
	switch (yytext[1]) { //?? Is "\\\n" handled?
		case 'n':
			break;
		case 't':
			break;
		case 'r':
			break;
		case '\\':
			break;
		case '$':
			break;
		default:
			count(); yylvalp->t=new Terminal(name2id["T_BAD_CHARACTER"],yytext,line); return T_BAD_CHARACTER;
	}
	count(); yylvalp->t=new Terminal(name2id["T_CHARACTER"],yytext,line); return T_CHARACTER;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 877 "zend_language_scanner.l"
{
	count(); yylvalp->t=new Terminal(name2id["T_ENCAPSED_AND_WHITESPACE"],yytext,line); return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 882 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
	count(); yylvalp->t=new Terminal(name2id["'\"'"],yytext,line); return '\"';
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 888 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
	count(); yylvalp->t=new Terminal(name2id["'`'"],yytext,line); return '`';
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 894 "zend_language_scanner.l"
{
	BEGIN(ST_IN_SCRIPTING);
	count(); yylvalp->t=new Terminal(name2id["'\''"],yytext,line); return '\'';
}
	YY_BREAK
case YY_STATE_EOF(ST_DOUBLE_QUOTES):
case YY_STATE_EOF(ST_BACKQUOTE):
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST_IN_SCRIPTING):
case YY_STATE_EOF(ST_LOOKING_FOR_PROPERTY):
#line 900 "zend_language_scanner.l"
{
	BEGIN(INITIAL);
	yyterminate();
}
	YY_BREAK
case YY_STATE_EOF(ST_COMMENT):
case YY_STATE_EOF(ST_DOC_COMMENT):
#line 905 "zend_language_scanner.l"
{
	fprintf(stderr,"Unterminated comment: %s\nEOF at line %d\n", line);
	BEGIN(INITIAL);
	yyterminate();
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 913 "zend_language_scanner.l"
{
	fprintf(stderr,"Unexpected character in input:  '%c' (ASCII=%d) state=%d\n", yytext[0], yytext[0], YYSTATE);
        count();
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 918 "zend_language_scanner.l"
ECHO;
	YY_BREAK
#line 4743 "lex.yy.cc"
case YY_STATE_EOF(ST_SINGLE_QUOTE):
case YY_STATE_EOF(ST_HEREDOC):
case YY_STATE_EOF(ST_LOOKING_FOR_VARNAME):
case YY_STATE_EOF(ST_ONE_LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1437 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1437 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1436);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 918 "zend_language_scanner.l"



int yywrap()
{
	BEGIN(INITIAL);
	return(1);
}

void count()
{
/* because of yyless, unput, input, and etc, the following counting may not be appropriate: */
	int i;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n') {
			column = 0;
			line++;
		} else if (yytext[i] == '\t')
			column += 4;
		else
			column++;

}


