/*
 * Copyright 2004 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Generated By:JavaCC: Do not edit this line. Token.java Version 3.0 */
using System;
namespace Monodoc.Lucene.Net.Analysis.Standard
{

/// <summary> Describes the input token stream.</summary>

public class Token
{

    /// <summary> An integer that describes the kind of this token.  This numbering
    /// system is determined by JavaCCParser, and a table of these numbers is
    /// stored in the file ...Constants.java.
    /// </summary>
    public int kind;

    /// <summary> beginLine and beginColumn describe the position of the first character
    /// of this token; endLine and endColumn describe the position of the
    /// last character of this token.
    /// </summary>
    public int beginLine, beginColumn, endLine, endColumn;

    /// <summary> The string image of the token.</summary>
    public System.String image;

    /// <summary> A reference to the next regular (non-special) token from the input
    /// stream.  If this is the last token from the input stream, or if the
    /// token manager has not read tokens beyond this one, this Field is
    /// set to null.  This is true only if this token is also a regular
    /// token.  Otherwise, see below for a description of the contents of
    /// this Field.
    /// </summary>
    public Token next;

    /// <summary> This Field is used to access special tokens that occur prior to this
    /// token, but after the immediately preceding regular (non-special) token.
    /// If there are no such special tokens, this Field is set to null.
    /// When there are more than one such special token, this Field refers
    /// to the last of these special tokens, which in turn refers to the next
    /// previous special token through its specialToken Field, and so on
    /// until the first special token (whose specialToken Field is null).
    /// The next fields of special tokens refer to other special tokens that
    /// immediately follow it (without an intervening regular token).  If there
    /// is no such token, this Field is null.
    /// </summary>
    public Token specialToken;

    /// <summary> Returns the image.</summary>
    public override System.String ToString()
    {
        return image;
    }

    /// <summary> Returns a new Token object, by default. However, if you want, you
    /// can create and return subclass objects based on the value of ofKind.
    /// Simply add the cases to the switch for all those special cases.
    /// For example, if you have a subclass of Token called IDToken that
    /// you want to create if ofKind is ID, simlpy add something like :
    ///
    /// case MyParserConstants.ID : return new IDToken();
    ///
    /// to the following switch statement. Then you can cast matchedToken
    /// variable to the appropriate type and use it in your lexical actions.
    /// </summary>
    public static Token NewToken(int ofKind)
    {
        switch (ofKind)
        {

        default:
            return new Token();

        }
    }
}
}
