// This file is an automatically generated file, please do not edit this file, modify the WrapperGenerator.java file instead !

package sun.awt.X11;

import sun.misc.*;

import java.util.logging.*;
public class XWindowAttributes extends XWrapperBase
{
    private Unsafe unsafe = XlibWrapper.unsafe;
    private final boolean should_free_memory;
    public static int getSize()
    {
        return 92;
    }
    public int getDataSize()
    {
        return getSize();
    }

    long pData;

    public long getPData()
    {
        return pData;
    }


    public XWindowAttributes(long addr)
    {
        log.finest("Creating");
        pData=addr;
        should_free_memory = false;
    }


    public XWindowAttributes()
    {
        log.finest("Creating");
        pData = unsafe.allocateMemory(getSize());
        should_free_memory = true;
    }


    public void dispose()
    {
        log.finest("Disposing");
        if (should_free_memory)
        {
            log.finest("freeing memory");
            unsafe.freeMemory(pData);
        }
    }
    public int get_x()
    {
        log.finest("");
        return (Native.getInt(pData+0));
    }
    public void set_x(int v)
    {
        log.finest("");
        Native.putInt(pData+0, v);
    }
    public int get_y()
    {
        log.finest("");
        return (Native.getInt(pData+4));
    }
    public void set_y(int v)
    {
        log.finest("");
        Native.putInt(pData+4, v);
    }
    public int get_width()
    {
        log.finest("");
        return (Native.getInt(pData+8));
    }
    public void set_width(int v)
    {
        log.finest("");
        Native.putInt(pData+8, v);
    }
    public int get_height()
    {
        log.finest("");
        return (Native.getInt(pData+12));
    }
    public void set_height(int v)
    {
        log.finest("");
        Native.putInt(pData+12, v);
    }
    public int get_border_width()
    {
        log.finest("");
        return (Native.getInt(pData+16));
    }
    public void set_border_width(int v)
    {
        log.finest("");
        Native.putInt(pData+16, v);
    }
    public int get_depth()
    {
        log.finest("");
        return (Native.getInt(pData+20));
    }
    public void set_depth(int v)
    {
        log.finest("");
        Native.putInt(pData+20, v);
    }
    public Visual get_visual(int index)
    {
        log.finest("");
        return (Native.getLong(pData+24) != 0)?(new Visual(Native.getLong(pData+24)+index*32)):(null);
    }
    public long get_visual()
    {
        log.finest("");
        return Native.getLong(pData+24);
    }
    public void set_visual(long v)
    {
        log.finest("");
        Native.putLong(pData + 24, v);
    }
    public long get_root()
    {
        log.finest("");
        return (Native.getLong(pData+28));
    }
    public void set_root(long v)
    {
        log.finest("");
        Native.putLong(pData+28, v);
    }
    public int get_class()
    {
        log.finest("");
        return (Native.getInt(pData+32));
    }
    public void set_class(int v)
    {
        log.finest("");
        Native.putInt(pData+32, v);
    }
    public int get_bit_gravity()
    {
        log.finest("");
        return (Native.getInt(pData+36));
    }
    public void set_bit_gravity(int v)
    {
        log.finest("");
        Native.putInt(pData+36, v);
    }
    public int get_win_gravity()
    {
        log.finest("");
        return (Native.getInt(pData+40));
    }
    public void set_win_gravity(int v)
    {
        log.finest("");
        Native.putInt(pData+40, v);
    }
    public int get_backing_store()
    {
        log.finest("");
        return (Native.getInt(pData+44));
    }
    public void set_backing_store(int v)
    {
        log.finest("");
        Native.putInt(pData+44, v);
    }
    public long get_backing_planes()
    {
        log.finest("");
        return (Native.getLong(pData+48));
    }
    public void set_backing_planes(long v)
    {
        log.finest("");
        Native.putLong(pData+48, v);
    }
    public long get_backing_pixel()
    {
        log.finest("");
        return (Native.getLong(pData+52));
    }
    public void set_backing_pixel(long v)
    {
        log.finest("");
        Native.putLong(pData+52, v);
    }
    public boolean get_save_under()
    {
        log.finest("");
        return (Native.getBool(pData+56));
    }
    public void set_save_under(boolean v)
    {
        log.finest("");
        Native.putBool(pData+56, v);
    }
    public long get_colormap()
    {
        log.finest("");
        return (Native.getLong(pData+60));
    }
    public void set_colormap(long v)
    {
        log.finest("");
        Native.putLong(pData+60, v);
    }
    public boolean get_map_installed()
    {
        log.finest("");
        return (Native.getBool(pData+64));
    }
    public void set_map_installed(boolean v)
    {
        log.finest("");
        Native.putBool(pData+64, v);
    }
    public int get_map_state()
    {
        log.finest("");
        return (Native.getInt(pData+68));
    }
    public void set_map_state(int v)
    {
        log.finest("");
        Native.putInt(pData+68, v);
    }
    public long get_all_event_masks()
    {
        log.finest("");
        return (Native.getLong(pData+72));
    }
    public void set_all_event_masks(long v)
    {
        log.finest("");
        Native.putLong(pData+72, v);
    }
    public long get_your_event_mask()
    {
        log.finest("");
        return (Native.getLong(pData+76));
    }
    public void set_your_event_mask(long v)
    {
        log.finest("");
        Native.putLong(pData+76, v);
    }
    public long get_do_not_propagate_mask()
    {
        log.finest("");
        return (Native.getLong(pData+80));
    }
    public void set_do_not_propagate_mask(long v)
    {
        log.finest("");
        Native.putLong(pData+80, v);
    }
    public boolean get_override_redirect()
    {
        log.finest("");
        return (Native.getBool(pData+84));
    }
    public void set_override_redirect(boolean v)
    {
        log.finest("");
        Native.putBool(pData+84, v);
    }
    public Screen get_screen(int index)
    {
        log.finest("");
        return (Native.getLong(pData+88) != 0)?(new Screen(Native.getLong(pData+88)+index*80)):(null);
    }
    public long get_screen()
    {
        log.finest("");
        return Native.getLong(pData+88);
    }
    public void set_screen(long v)
    {
        log.finest("");
        Native.putLong(pData + 88, v);
    }


    String getName()
    {
        return "XWindowAttributes";
    }


    String getFieldsAsString()
    {
        String ret="";

        ret += ""+"x = " + get_x() +", ";
        ret += ""+"y = " + get_y() +", ";
        ret += ""+"width = " + get_width() +", ";
        ret += ""+"height = " + get_height() +", ";
        ret += ""+"border_width = " + get_border_width() +", ";
        ret += ""+"depth = " + get_depth() +", ";
        ret += ""+"visual = " + get_visual() +", ";
        ret += ""+"root = " + get_root() +", ";
        ret += ""+"class = " + get_class() +", ";
        ret += ""+"bit_gravity = " + get_bit_gravity() +", ";
        ret += ""+"win_gravity = " + get_win_gravity() +", ";
        ret += ""+"backing_store = " + get_backing_store() +", ";
        ret += ""+"backing_planes = " + get_backing_planes() +", ";
        ret += ""+"backing_pixel = " + get_backing_pixel() +", ";
        ret += ""+"save_under = " + get_save_under() +", ";
        ret += ""+"colormap = " + get_colormap() +", ";
        ret += ""+"map_installed = " + get_map_installed() +", ";
        ret += ""+"map_state = " + get_map_state() +", ";
        ret += ""+"all_event_masks = " + get_all_event_masks() +", ";
        ret += ""+"your_event_mask = " + get_your_event_mask() +", ";
        ret += ""+"do_not_propagate_mask = " + get_do_not_propagate_mask() +", ";
        ret += ""+"override_redirect = " + get_override_redirect() +", ";
        ret += ""+"screen = " + get_screen() +", ";
        return ret;
    }


}



