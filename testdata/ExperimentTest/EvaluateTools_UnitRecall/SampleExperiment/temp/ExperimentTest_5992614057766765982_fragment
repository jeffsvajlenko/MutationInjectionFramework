package org.savarese.vserv.tcpip;

public class UDPPacket extends IPPacket {
    public static final int OFFSET_SOURCE_PORT = 0;
    public static final int OFFSET_DESTINATION_PORT = 2;
    public static final int OFFSET_UDP_TOTAL_LENGTH = 4;
    public static final int OFFSET_UDP_CHECKSUM = 6;
    public static final int LENGTH_UDP_HEADER = 8;
    private int __offset;

    public UDPPacket (int size) {
        super (size);
        __offset = 0;
    }

    public UDPPacket (UDPPacket packet) {
        super (packet.size ());
        copy (packet);
        __offset = packet.__offset;
    }

    public final void copyData (UDPPacket packet) {
        if (_data_.length < packet._data_.length) {
            byte [] data = new byte [packet._data_.length];
            System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
            _data_ = data;
        }
        int length = packet.getUDPDataByteLength ();
        System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
        setUDPDataByteLength (length);
    }

    public void setData (byte [] data) {
        super.setData (data);
        __offset = getIPHeaderByteLength ();
    }

    public final void setSourcePort (int port) {
        _data_ [__offset + OFFSET_SOURCE_PORT] = (byte) ((port>> 8) & 0xff);
        _data_ [__offset + OFFSET_SOURCE_PORT + 1] = (byte) (port & 0xff);
    }

    public final void setDestinationPort (int port) {
        _data_ [__offset + OFFSET_DESTINATION_PORT] = (byte) ((port>> 8) & 0xff);
        _data_ [__offset + OFFSET_DESTINATION_PORT + 1] = (byte) (port & 0xff);
    }

    public final int getSourcePort () {
        return (((_data_ [__offset + OFFSET_SOURCE_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_SOURCE_PORT + 1] & 0xff));
    }

    public final int getDestinationPort () {
        return (((_data_ [__offset + OFFSET_DESTINATION_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_DESTINATION_PORT + 1] & 0xff));
    }

    public void setIPHeaderLength (int length) {
        super.setIPHeaderLength (length);
        __offset = getIPHeaderByteLength ();
    }

    @Test
    public void testBasic () throws IOException {
        Labels labels = Labels.getInstance ();
        exporter.start (outputStream, "feederstuff");
        exporter.setFetchers (new String [] {"fetcher1", labels.get (IPFetcher.ID), "mega long fetcher 2", labels.get (PortsFetcher.ID)});
        exporter.nextAdressResults (new Object [] {"", "123", "", new NumericRangeList (Arrays.asList (1, 23, 4, 5, 6, 78), true)});
        exporter.end ();
        assertContains ("123:1");
        assertContains ("123:23");
        assertContains ("123:4");
        assertContains ("123:5");
        assertContains ("123:6");
        assertContains ("123:78");
    }

    public void setUDPPacketLength (int length) {
        _data_ [__offset + OFFSET_UDP_TOTAL_LENGTH] = (byte) ((length>> 8) & 0xff);
        _data_ [__offset + OFFSET_UDP_TOTAL_LENGTH + 1] = (byte) (length & 0xff);
    }

    public final int getUDPPacketLength () {
        return (((_data_ [__offset + OFFSET_UDP_TOTAL_LENGTH] & 0xff) << 8) | (_data_ [__offset + OFFSET_UDP_TOTAL_LENGTH + 1] & 0xff));
    }

    public final int getUDPChecksum () {
        return (((_data_ [__offset + OFFSET_UDP_CHECKSUM] & 0xff) << 8) | (_data_ [__offset + OFFSET_UDP_CHECKSUM + 1] & 0xff));
    }

    public final int getUDPPacketByteLength () {
        return getIPPacketLength () - __offset;
    }

    public final int getCombinedHeaderByteLength () {
        return __offset + LENGTH_UDP_HEADER;
    }

    public final void setUDPDataByteLength (int length) {
        if (length < 0) length = 0;

        setIPPacketLength (getCombinedHeaderByteLength () + length);
    }

    public final int getUDPDataByteLength () {
        return getIPPacketLength () - getCombinedHeaderByteLength ();
    }

    private final int __getVirtualHeaderTotal () {
        int s1 = ((_data_ [OFFSET_SOURCE_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 1] & 0xff);
        int s2 = ((_data_ [OFFSET_SOURCE_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 3] & 0xff);
        int d1 = ((_data_ [OFFSET_DESTINATION_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 1] & 0xff);
        int d2 = ((_data_ [OFFSET_DESTINATION_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 3] & 0xff);
        return s1 + s2 + d1 + d2 + getProtocol () + getUDPPacketByteLength ();
    }

    public final int computeUDPChecksum (boolean update) {
        return _computeChecksum_ (__offset, __offset + OFFSET_UDP_CHECKSUM, getIPPacketLength (), __getVirtualHeaderTotal (), update);
    }

    public final int computeUDPChecksum () {
        return computeUDPChecksum (true);
    }

}

