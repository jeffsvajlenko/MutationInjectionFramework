    public static void launchInTerminal(String execString, File workingDir)
    {

        try
        {
            if (Platform.WINDOWS)
            {
                // generate a command file :-)
                File batFile = File.createTempFile("launch", ".cmd");
                batFile.deleteOnExit();
                FileWriter writer = new FileWriter(batFile);
                writer.write("@rem This is a temporary file generated by Angry IP Scanner\n" +
                             "@start cmd /k " + execString);
                writer.close();

                Runtime.getRuntime().exec(batFile.getAbsolutePath(), null, workingDir);
            }
            else if (Platform.MAC_OS)
            {
                Runtime.getRuntime().exec(new String[] {"osascript", "-e", "tell application \"Terminal\" to do script \"" + execString + "\""}, null, workingDir);
            }
            else   // assume Linux or other Unix
            {

                if (workingTerminal == UNKNOWN)
                {
                    detectWorkingTerminal();
                }

                // run detected terminal program
                switch (workingTerminal)
                {
                case GNOME:
                    Runtime.getRuntime().exec(new String[] {"gnome-terminal", "-x", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                case XFCE:
                    Runtime.getRuntime().exec(new String[] {"xfce4-terminal", "-x", "sh", "-c", execString + ";sh"}, null, workingDir);
                    break;
                case KDE:
                    Runtime.getRuntime().exec(new String[] {"konsole", "-e", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                default: // XTERM
                    Runtime.getRuntime().exec(new String[] {"xterm", "-e", "sh",  /* Comment */ "-c", execString + ";sh"}, null, workingDir);
                }
            }
        }
        catch (Exception e)
        {
            // log and display the error
            LOG.log(Level.WARNING, "openTerminal.failed", e);

            // if this is the first time, fall back to XTERM
            if (workingTerminal != XTERM)
            {
                workingTerminal = XTERM;
                launchInTerminal(execString, workingDir);
            }
            else
            {
                // even XTERM doesn't work...
                throw new UserErrorException("openTerminal.failed", execString);
            }
        }
    }
