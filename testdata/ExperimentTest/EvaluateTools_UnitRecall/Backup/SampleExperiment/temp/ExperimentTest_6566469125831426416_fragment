package net.azib.ipscan.config;

import static org.junit.Assert.*;

import static org.mockito.Mockito.*;

import java.util.Arrays;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import net.azib.ipscan.exporters.Exporter;

import net.azib.ipscan.exporters.ExporterRegistry;

import net.azib.ipscan.feeders.FeederCreator;

import net.azib.ipscan.feeders.FeederRegistry;

import org.junit.Before;

import org.junit.Test;

public class CommandLineProcessorTest {
    private CommandLineProcessor processor;
    private FeederCreator feederCreator;
    private ExporterRegistry exporters;

    @Before
    public void prepare () {
        feederCreator = mock (FeederCreator.class);
        exporters = mock (ExporterRegistry.class);
        processor = new CommandLineProcessor (new MockFeederRegistry (feederCreator), exporters);
    }

    @Test
    public void toStringGeneratesUsageHelp () throws Exception {
        when (feederCreator.getFeederId ()).thenReturn ("feeder.range");
        when (feederCreator.serializePartsLabels ()).thenReturn (new String [] {"feeder.range.to"});
        Exporter exporter = mock (Exporter.class);
        when (exporters.iterator ()).thenReturn (Collections.singleton (exporter).iterator ());
        when (exporter.getFilenameExtension ()).thenReturn ("pdf");
        when (exporter.getId ()).thenReturn ("exporter.txt");
        String usage = processor.toString ();
        assertTrue (usage.contains ("-f:range"));
        assertTrue (usage.contains (Labels.getLabel ("feeder.range.to")));
        assertTrue (usage.contains (".pdf"));
        assertTrue (usage.contains ("-q"));
        assertTrue (usage.contains ("-s"));
    }

    public ComponentRegistry () {
        MutablePicoContainer container = new DefaultPicoContainer ();
        this.container = container;
        ComponentParameter anyComponentParameter = new ComponentParameter ();
        Config globalConfig = Config.getConfig ();
        container.registerComponentInstance (globalConfig.getPreferences ());
        container.registerComponentInstance (globalConfig.forScanner ());
        container.registerComponentInstance (globalConfig.forGUI ());
        container.registerComponentInstance (globalConfig.forOpeners ());
        container.registerComponentInstance (globalConfig.forFavorites ());
        container.registerComponentInstance (Labels.getInstance ());
        container.registerComponentImplementation (CommentsConfig.class);
        container.registerComponentImplementation (ConfigDetector.class);
        container.registerComponentImplementation (ExporterRegistry.class);
        container.registerComponentImplementation (TXTExporter.class);
        container.registerComponentImplementation (CSVExporter.class);
        container.registerComponentImplementation (XMLExporter.class);
        container.registerComponentImplementation (IPListExporter.class);
        container.registerComponentImplementation (FetcherRegistry.class, FetcherRegistryImpl.class);
        container.registerComponentImplementation (IPFetcher.class);
        container.registerComponentImplementation (PingFetcher.class);
        container.registerComponentImplementation (PingTTLFetcher.class);
        container.registerComponentImplementation (HostnameFetcher.class);
        container.registerComponentImplementation (PortsFetcher.class);
        container.registerComponentImplementation (FilteredPortsFetcher.class);
        container.registerComponentImplementation (WebDetectFetcher.class);
        container.registerComponentImplementation (HTTPSenderFetcher.class);
        container.registerComponentImplementation (CommentFetcher.class);
        container.registerComponentImplementation (NetBIOSInfoFetcher.class);
        container.registerComponentImplementation (PingerRegistry.class, PingerRegistryImpl.class);
        container.registerComponentImplementation (ScanningResultList.class);
        container.registerComponentImplementation (Scanner.class);
        container.registerComponentImplementation (SWTAwareStateMachine.class);
        container.registerComponentImplementation (ScannerDispatcherThreadFactory.class);
        container.registerComponentImplementation (CommandLineProcessor.class);
        container.registerComponentInstance (Display.getDefault ());
        container.registerComponentImplementation ("mainShell", Shell.class);
        container.registerComponentImplementation ("mainMenu", Menu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.BAR))});
        container.registerComponentImplementation ("commandsMenu", CommandsMenu.class);
        container.registerComponentImplementation ("feederArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
        container.registerComponentImplementation ("controlsArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
        container.registerComponentImplementation ("startStopButton", Button.class, new Parameter [] {new ComponentParameter ("controlsArea"), new ConstantParameter (new Integer (SWT.NONE))});
        container.registerComponentImplementation ("feederSelectionCombo", FeederSelectionCombo.class, new Parameter [] {new ComponentParameter ("controlsArea")});
        container.registerComponentImplementation (FeederGUIRegistry.class);
        Parameter [] feederGUIParameters = new Parameter [] {new ComponentParameter ("feederArea")};
        container.registerComponentImplementation (RangeFeederGUI.class, RangeFeederGUI.class, feederGUIParameters);
        container.registerComponentImplementation (RandomFeederGUI.class, RandomFeederGUI.class, feederGUIParameters);
        container.registerComponentImplementation (FileFeederGUI.class, FileFeederGUI.class, feederGUIParameters);
        container.registerComponentImplementation (OpenerLauncher.class);
        container.registerComponentImplementation (MainWindow.class, MainWindow.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, new ComponentParameter ("feederArea"), new ComponentParameter ("controlsArea"), new ComponentParameter ("feederSelectionCombo"), new ComponentParameter ("startStopButton"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
        container.registerComponentImplementation (ResultTable.class, ResultTable.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
        container.registerComponentImplementation (StatusBar.class, StatusBar.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter});
        container.registerComponentImplementation (MainMenu.class, MainMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ComponentParameter ("mainMenu"), new ComponentParameter ("commandsMenu"), anyComponentParameter, new ConstantParameter (container)});
        container.registerComponentImplementation (MainMenu.ColumnsMenu.class, MainMenu.ColumnsMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter});
        container.registerComponentImplementation (AboutDialog.class);
        container.registerComponentImplementation (PreferencesDialog.class);
        container.registerComponentImplementation (ConfigDetectorDialog.class);
        container.registerComponentImplementation (SelectFetchersDialog.class);
        container.registerComponentImplementation (DetailsWindow.class);
        container.registerComponentImplementation (StatisticsDialog.class);
        container.registerComponentImplementation (StartStopScanningAction.class);
        container.registerComponentImplementation (ColumnsActions.SortBy.class);
        container.registerComponentImplementation (ColumnsActions.FetcherPreferences.class);
        container.registerComponentImplementation (ColumnsActions.AboutFetcher.class);
        container.registerComponentImplementation (ColumnsActions.ColumnClick.class);
        container.registerComponentImplementation (ColumnsActions.ColumnResize.class);
        container.registerComponentImplementation (CommandsMenuActions.Details.class);
        container.registerComponentImplementation (ToolsActions.Preferences.class);
        container.registerComponentImplementation (ToolsActions.ChooseFetchers.class);
        container.registerComponentImplementation (ToolsActions.TableSelection.class);
        container.registerComponentImplementation (HelpMenuActions.CheckVersion.class);
        if (Platform.MAC_OS) {
            try {
                container.registerComponentImplementation (Class.forName ("net.azib.ipscan.platform.mac.MacApplicationMenu"));
            } catch (Exception e) {
                Logger.getLogger (getClass ().getName ()).warning ("Cannot initialize MacApplicationMenu: " + e);
            }
        }
        new PluginLoader ().addTo (container);
    }

    @Test
    public void minimal () throws Exception {
        when (feederCreator.getFeederId ()).thenReturn ("feeder.feeder");
        when (feederCreator.serializePartsLabels ()).thenReturn (new String [] {"1st", "2nd"});
        Exporter txtExporter = mock (Exporter.class);
        when (exporters.createExporter ("file.txt")).thenReturn (txtExporter);
        processor.parse ("-f:feeder", "arg1", "arg2", "-o", "file.txt");
        assertEquals (feederCreator, processor.feederCreator);
        assertEquals ("file.txt", processor.outputFilename);
        assertEquals (txtExporter, processor.exporter);
        assertFalse (processor.autoQuit);
        assertFalse (processor.appendToFile);
        assertTrue ("specifying exporter should enable autoStart", processor.autoStart);
        verify (feederCreator).unserialize (new String [] {"arg1", "arg2"});
    }

    @Test
    public void options () throws Exception {
        when (feederCreator.getFeederId ()).thenReturn ("feeder.mega");
        when (feederCreator.serializePartsLabels ()).thenReturn (new String [0]);
        processor.parse ("-s", "-f:mega", "-aq");
        assertEquals (feederCreator, processor.feederCreator);
        assertTrue (processor.autoQuit);
        assertTrue (processor.autoStart);
        assertTrue (processor.appendToFile);
        verify (feederCreator).unserialize (new String [0]);
    }

    @Test(expected=IllegalArgumentException.class)
    public void missingRequiredFeeder () throws Exception {
        processor.parse ("-o", "exporter");
    }

    @Test(expected=IllegalArgumentException.class)
    public void inexistentExporter () throws Exception {
        processor.parse ("-o", "blah");
    }

    @Test(expected=IllegalArgumentException.class)
    public void inexistentFeeder () throws Exception {
        processor.parse ("-f:blah");
    }

    @Test(expected=IllegalArgumentException.class)
    public void extraExporter () throws Exception {
        processor.parse ("-f:feeder", "-o", "exporter.txt", "-o", "exporter.xml");
    }

    @Test(expected=IllegalArgumentException.class)
    public void extraFeeder () throws Exception {
        processor.parse ("-f:feeder", "-o", "exporter.xml", "-f:feeder");
    }

    public static class MockFeederRegistry implements FeederRegistry < FeederCreator > {
        private List < FeederCreator > list;

        public MockFeederRegistry (FeederCreator...creators) {
            list = Arrays.asList (creators);
        }

        public void select (String feederId) {
        }

        public Iterator < FeederCreator > iterator () {
            return list.iterator ();
        }

    }

}

