<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/Main.java" startline="55" endline="116">
public static void main (String...args) {
    long startTime = System.currentTimeMillis ();
    initSystemProperties ();
    Display display;
    try {
        Display.setAppName (Version.NAME);
        display = Display.getDefault ();
        LOG.finer ("SWT initialized after " + (System.currentTimeMillis () - startTime));
    } catch (UnsatisfiedLinkError e) {
        JOptionPane.showMessageDialog (null, "Failed to load native code. Probably you are using a binary built for wrong OS or CPU - try downloading both 32-bit and 64-bit binaries");
        return;
    }
    Labels.initialize (Locale.getDefault ());
    Config globalConfig = Config.getConfig ();
    LOG.finer ("Labels and Config initialized after " + (System.currentTimeMillis () - startTime));
    ComponentRegistry componentRegistry = new ComponentRegistry ();
    LOG.finer ("ComponentRegistry initialized after " + (System.currentTimeMillis () - startTime));
    processCommandLine (args, componentRegistry);
    MainWindow mainWindow = componentRegistry.getMainWindow ();
    LOG.fine ("Startup time: " + (System.currentTimeMillis () - startTime));
    while (! mainWindow.isDisposed ()) {
        try {
            if (! display.readAndDispatch ()) display.sleep ();

        } catch (Throwable e) {
            if (e instanceof SWTException && e.getCause () != null) e = e.getCause ();

            String localizedMessage = getLocalizedMessage (e);
            Shell parent = display.getActiveShell ();
            showMessage (parent != null ? parent : mainWindow.getShell (), e instanceof UserErrorException ? SWT.ICON_WARNING : SWT.ICON_ERROR, Labels.getLabel (e instanceof UserErrorException ? "text.userError" : "text.error"), localizedMessage);
        }
    }
    globalConfig.store ();
    display.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/Main.java" startline="118" endline="124">
private static void showMessage (Shell parent, int flags, String title, String localizedMessage) {
    MessageBox messageBox = new MessageBox (parent, SWT.OK | flags);
    messageBox.setText (title);
    messageBox.setMessage (localizedMessage);
    messageBox.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/Main.java" startline="126" endline="133">
private static void initSystemProperties () {
    System.setProperty ("java.net.preferIPv4Stack", "true");
    Security.setProperty ("networkaddress.cache.ttl", "0");
    Security.setProperty ("networkaddress.cache.negative.ttl", "0");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/Main.java" startline="135" endline="150">
private static void processCommandLine (String [] args, ComponentRegistry componentRegistry) {
    if (args.length != 0) {
        CommandLineProcessor cli = componentRegistry.getCommandLineProcessor ();
        try {
            cli.parse (args);
        } catch (Exception e) {
            showMessageToConsole (e.getMessage () + "\n\n" + cli);
            System.exit (1);
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/Main.java" startline="155" endline="180">
private static void showMessageToConsole (String usageText) {
    boolean haveConsole = ! Platform.WINDOWS;
    try {
        haveConsole = System.class.getMethod ("console").invoke (null) != null;
    } catch (Exception e) {
    }
    if (haveConsole) {
        System.err.println (usageText);
    } else {
        InfoDialog dialog = new InfoDialog (Version.NAME, Labels.getLabel ("title.commandline"));
        dialog.setMessage (usageText);
        dialog.open ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/Main.java" startline="186" endline="217">
static String getLocalizedMessage (Throwable e) {
    String localizedMessage;
    try {
        if (e instanceof UserErrorException) {
            localizedMessage = e.getMessage ();
        } else {
            String exceptionClassName = e.getClass ().getSimpleName ();
            String originalMessage = e.getMessage ();
            localizedMessage = Labels.getLabel ("exception." + exceptionClassName + (originalMessage != null ? "." + originalMessage : ""));
        }
        if (e.getCause () != null) {
            localizedMessage += "\n\n" + e.getCause ().toString ();
        }
        LOG.log (Level.FINE, "error", e);
    } catch (Exception e2) {
        localizedMessage = e.toString ();
        LOG.log (Level.SEVERE, "unexpected error", e);
    }
    return localizedMessage;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="44" endline="48">
CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters) {
    this.feederRegistry = feederCreators;
    this.exporters = exporters;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="50" endline="57">
public CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters, StateMachine stateMachine, ScanningResultList scanningResults) {
    this (feederCreators, exporters);
    this.stateMachine = stateMachine;
    this.scanningResults = scanningResults;
    if (stateMachine != null) stateMachine.addTransitionListener (this);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="59" endline="62">
public boolean shouldAutoQuit () {
    return autoQuit;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="64" endline="67">
public boolean shouldAutoStart () {
    return autoStart;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="69" endline="125">
public void parse (String...args) {
    for (int i = 0;
    i < args.length; i ++) {
        String arg = args [i];
        if (arg.startsWith ("-f:")) {
            if (feederCreator != null) throw new IllegalArgumentException ("Only one feeder is allowed");

            feederCreator = findFeederCreator ("feeder." + arg.substring (3));
            feederArgs = new String [feederCreator.serializePartsLabels ().length];
            for (int j = 0;
            j < feederArgs.length; j ++) {
                feederArgs [j] = args [++ i];
                if (feederArgs [j].startsWith ("-")) throw new IllegalArgumentException (feederCreator.getFeederName () + " requires " + feederArgs.length + " arguments");

            }
        } else if (arg.equals ("-o")) {
            if (outputFilename != null) throw new IllegalArgumentException ("Only one exporter is allowed");

            outputFilename = args [++ i];
            if (outputFilename.startsWith ("-")) throw new IllegalArgumentException ("Output filename missing");

            exporter = findExporter (outputFilename);
            autoStart = true;
        } else if (arg.startsWith ("-")) {
            for (char option : arg.substring (1).toCharArray ()) {
                switch (option) {
                    case 's' :
                        autoStart = true;
                        break;
                    case 'q' :
                        autoQuit = true;
                        break;
                    case 'a' :
                        appendToFile = true;
                        break;
                    default :
                        throw new IllegalArgumentException ("Unknown option: " + option);
                }
            }
        } else throw new IllegalArgumentException ("Unknown argument: " + arg);

    }
    if (feederCreator == null) throw new IllegalArgumentException ("Feeder missing");

    feederCreator.unserialize (feederArgs);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="127" endline="154">
@Override
public String toString () {
    StringBuilder usage = new StringBuilder ();
    usage.append ("Pass the following arguments:\n");
    usage.append ("[options] <feeder> <exporter>\n\n");
    usage.append ("Where <feeder> is one of:\n");
    for (FeederCreator creator : feederRegistry) {
        usage.append ("-f:").append (shortId (creator.getFeederId ()));
        for (String partLabel : creator.serializePartsLabels ()) {
            usage.append (" <").append (Labels.getLabel (partLabel)).append (">");
        }
        usage.append ('\n');
    }
    usage.append ("\n<exporter> is one of:\n");
    for (Exporter exporter : exporters) {
        usage.append ("-o filename.").append (shortId (exporter.getFilenameExtension ())).append ("\t\t").append (Labels.getLabel (exporter.getId ())).append ('\n');
    }
    usage.append ("\nAnd possible [options] are (grouping allowed):\n");
    usage.append ("-s\tstart scanning automatically\n");
    usage.append ("-q\tquit after exporting the results\n");
    usage.append ("-a\tappend to the file, do not overwrite\n");
    return usage.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="156" endline="159">
private String shortId (String longId) {
    return longId.substring (longId.lastIndexOf ('.') + 1);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="161" endline="171">
private FeederCreator findFeederCreator (String feederId) {
    for (FeederCreator creator : feederRegistry) {
        if (feederId.equals (creator.getFeederId ())) {
            return creator;
        }
    }
    throw new IllegalArgumentException ("Feeder unknown: " + shortId (feederId));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="173" endline="176">
private Exporter findExporter (String outputFilename) {
    return exporters.createExporter (outputFilename);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommandLineProcessor.java" startline="178" endline="201">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.INIT) {
        if (feederCreator != null) feederRegistry.select (feederCreator.getFeederId ());

        if (autoStart) stateMachine.transitionToNext ();

    } else if (transition == Transition.COMPLETE && state == ScanningState.IDLE && exporter != null) {
        ExportProcessor processor = new ExportProcessor (exporter, new File (outputFilename), appendToFile);
        processor.process (scanningResults, null);
        if (autoQuit) {
            System.err.println ("Saved results to " + outputFilename);
            System.exit (0);
        }
    }

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommentsConfig.java" startline="21" endline="25">
public CommentsConfig (Preferences preferences) {
    this.preferences = preferences.node ("comments");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommentsConfig.java" startline="27" endline="30">
public String getComment (InetAddress address) {
    return preferences.get (address.getHostAddress (), null);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/CommentsConfig.java" startline="32" endline="38">
public void setComment (InetAddress address, String comment) {
    if (comment == null || comment.length () == 0) preferences.remove (address.getHostAddress ());
    else preferences.put (address.getHostAddress (), comment);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ComponentRegistry.java" startline="82" endline="223">
public ComponentRegistry () {
    MutablePicoContainer container = new DefaultPicoContainer ();
    this.container = container;
    ComponentParameter anyComponentParameter = new ComponentParameter ();
    Config globalConfig = Config.getConfig ();
    container.registerComponentInstance (globalConfig.getPreferences ());
    container.registerComponentInstance (globalConfig.forScanner ());
    container.registerComponentInstance (globalConfig.forGUI ());
    container.registerComponentInstance (globalConfig.forOpeners ());
    container.registerComponentInstance (globalConfig.forFavorites ());
    container.registerComponentInstance (Labels.getInstance ());
    container.registerComponentImplementation (CommentsConfig.class);
    container.registerComponentImplementation (ConfigDetector.class);
    container.registerComponentImplementation (ExporterRegistry.class);
    container.registerComponentImplementation (TXTExporter.class);
    container.registerComponentImplementation (CSVExporter.class);
    container.registerComponentImplementation (XMLExporter.class);
    container.registerComponentImplementation (IPListExporter.class);
    container.registerComponentImplementation (FetcherRegistry.class, FetcherRegistryImpl.class);
    container.registerComponentImplementation (IPFetcher.class);
    container.registerComponentImplementation (PingFetcher.class);
    container.registerComponentImplementation (PingTTLFetcher.class);
    container.registerComponentImplementation (HostnameFetcher.class);
    container.registerComponentImplementation (PortsFetcher.class);
    container.registerComponentImplementation (FilteredPortsFetcher.class);
    container.registerComponentImplementation (WebDetectFetcher.class);
    container.registerComponentImplementation (HTTPSenderFetcher.class);
    container.registerComponentImplementation (CommentFetcher.class);
    container.registerComponentImplementation (NetBIOSInfoFetcher.class);
    container.registerComponentImplementation (PingerRegistry.class, PingerRegistryImpl.class);
    container.registerComponentImplementation (ScanningResultList.class);
    container.registerComponentImplementation (Scanner.class);
    container.registerComponentImplementation (SWTAwareStateMachine.class);
    container.registerComponentImplementation (ScannerDispatcherThreadFactory.class);
    container.registerComponentImplementation (CommandLineProcessor.class);
    container.registerComponentInstance (Display.getDefault ());
    container.registerComponentImplementation ("mainShell", Shell.class);
    container.registerComponentImplementation ("mainMenu", Menu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.BAR))});
    container.registerComponentImplementation ("commandsMenu", CommandsMenu.class);
    container.registerComponentImplementation ("feederArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("controlsArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("startStopButton", Button.class, new Parameter [] {new ComponentParameter ("controlsArea"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("feederSelectionCombo", FeederSelectionCombo.class, new Parameter [] {new ComponentParameter ("controlsArea")});
    container.registerComponentImplementation (FeederGUIRegistry.class);
    Parameter [] feederGUIParameters = new Parameter [] {new ComponentParameter ("feederArea")};
    container.registerComponentImplementation (RangeFeederGUI.class, RangeFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (RandomFeederGUI.class, RandomFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (FileFeederGUI.class, FileFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (OpenerLauncher.class);
    container.registerComponentImplementation (MainWindow.class, MainWindow.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, new ComponentParameter ("feederArea"), new ComponentParameter ("controlsArea"), new ComponentParameter ("feederSelectionCombo"), new ComponentParameter ("startStopButton"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (ResultTable.class, ResultTable.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (StatusBar.class, StatusBar.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (MainMenu.class, MainMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ComponentParameter ("mainMenu"), new ComponentParameter ("commandsMenu"), anyComponentParameter, new ConstantParameter (container)});
    container.registerComponentImplementation (MainMenu.ColumnsMenu.class, MainMenu.ColumnsMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (AboutDialog.class);
    container.registerComponentImplementation (PreferencesDialog.class);
    container.registerComponentImplementation (ConfigDetectorDialog.class);
    container.registerComponentImplementation (SelectFetchersDialog.class);
    container.registerComponentImplementation (DetailsWindow.class);
    container.registerComponentImplementation (StatisticsDialog.class);
    container.registerComponentImplementation (StartStopScanningAction.class);
    container.registerComponentImplementation (ColumnsActions.SortBy.class);
    container.registerComponentImplementation (ColumnsActions.FetcherPreferences.class);
    container.registerComponentImplementation (ColumnsActions.AboutFetcher.class);
    container.registerComponentImplementation (ColumnsActions.ColumnClick.class);
    container.registerComponentImplementation (ColumnsActions.ColumnResize.class);
    container.registerComponentImplementation (CommandsMenuActions.Details.class);
    container.registerComponentImplementation (ToolsActions.Preferences.class);
    container.registerComponentImplementation (ToolsActions.ChooseFetchers.class);
    container.registerComponentImplementation (ToolsActions.TableSelection.class);
    container.registerComponentImplementation (HelpMenuActions.CheckVersion.class);
    if (Platform.MAC_OS) {
        try {
            container.registerComponentImplementation (Class.forName ("net.azib.ipscan.platform.mac.MacApplicationMenu"));
        } catch (Exception e) {
            Logger.getLogger (getClass ().getName ()).warning ("Cannot initialize MacApplicationMenu: " + e);
        }
    }
    new PluginLoader ().addTo (container);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ComponentRegistry.java" startline="224" endline="250">
Point getOrigin () {
    Point outer = ((PolygonFigure) (owner ())).outermostPoint ();
    Point ctr = ((PolygonFigure) (owner ())).center ();
    double len = Geom.length (outer.x, outer.y, ctr.x, ctr.y);
    if (len == 0) {
        return new Point (outer.x - HANDLESIZE / 2, outer.y + HANDLESIZE / 2);
    }
    double u = HANDLESIZE / len;
    if (u > 1.0) {
        return new Point ((outer.x * 3 + ctr.x) / 4, (outer.y * 3 + ctr.y) / 4);
    } else {
        return new Point ((int) (outer.x * (1.0 - u) + ctr.x * u), (int) (outer.y * (1.0 - u) + ctr.y * u));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ComponentRegistry.java" startline="252" endline="259">
private void start () {
    if (! containerStarted) {
        containerStarted = true;
        container.start ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ComponentRegistry.java" startline="261" endline="267">
public MainWindow getMainWindow () {
    start ();
    return (MainWindow) container.getComponentInstance (MainWindow.class);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ComponentRegistry.java" startline="269" endline="273">
public CommandLineProcessor getCommandLineProcessor () {
    start ();
    return (CommandLineProcessor) container.getComponentInstance (CommandLineProcessor.class);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="31" endline="38">
private Config () {
    preferences = Preferences.userRoot ().node ("ipscan");
    scannerConfig = new ScannerConfig (preferences);
    guiConfig = new GUIConfig (preferences);
    favoritesConfig = new FavoritesConfig (preferences);
    openersConfig = new OpenersConfig (preferences);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="43" endline="50">
public static Config getConfig () {
    if (globalConfig == null) {
        globalConfig = new Config ();
    }
    return globalConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="52" endline="58">
public void store () {
    scannerConfig.store ();
    guiConfig.store ();
    favoritesConfig.store ();
    openersConfig.store ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="60" endline="63">
public Preferences getPreferences () {
    return preferences;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="68" endline="71">
public ScannerConfig forScanner () {
    return scannerConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="76" endline="79">
NamedListConfig forFavorites () {
    return favoritesConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="84" endline="87">
OpenersConfig forOpeners () {
    return openersConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Config.java" startline="92" endline="95">
public GUIConfig forGUI () {
    return guiConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="37" endline="40">
public ConfigDetector (ScannerConfig config) {
    this.config = config;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="42" endline="45">
public void setCallback (DetectorCallback callback) {
    this.callback = callback;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="47" endline="65">
public void detectMaxThreads (InetSocketAddress socketAddress) {
    logger = LoggerFactory.getLogger ();
    expectedConnects = new AtomicInteger ();
    actualConnects = new AtomicInteger ();
    List < Thread > threads = new LinkedList < Thread > ();
    for (int i = 0;
    i < config.maxThreads; i ++) {
        Thread t = new SocketThread (socketAddress);
        threads.add (t);
        t.start ();
    }
    join (threads);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="67" endline="80">
private void join (List < Thread > threads) {
    try {
        for (Thread t : threads) {
            t.join ();
        }
        threads.clear ();
    } catch (InterruptedException e) {
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="82" endline="85">
public int getInitialConnectCount () {
    return config.maxThreads * CONNECTS_PER_THREAD;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="87" endline="90">
public int getInitialSuccessCount () {
    return (int) (getInitialConnectCount () * SUCCESS_PROBABILITY);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="92" endline="95">
public int getExpectedSuccessfulConnectCount () {
    return expectedConnects.intValue ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="97" endline="100">
public int getActualSuccessfulConnectCount () {
    return actualConnects.intValue ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="112" endline="115">
public SocketThread (InetSocketAddress socketAddress) {
    this.socketAddress = socketAddress;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ConfigDetector.java" startline="117" endline="165">
public void run () {
    for (int i = 0;
    i < CONNECTS_PER_THREAD; i ++) {
        if (callback != null) callback.onDetectorTry ();

        Socket s = new Socket ();
        try {
            s.setSoTimeout (config.portTimeout);
            s.setTcpNoDelay (true);
            s.setSoLinger (true, 0);
            if (Math.random () > (1.0 - SUCCESS_PROBABILITY)) {
                expectedConnects.incrementAndGet ();
                s.connect (socketAddress, config.portTimeout);
            } else {
                s.connect (new InetSocketAddress (InetAddress.getByAddress (new byte [] {(byte) 192, (byte) 168, (byte) (Math.random () * 255), (byte) (Math.random () * 255)}), 61493 + (int) (Math.random () * 200)), config.portTimeout);
            }
            actualConnects.incrementAndGet ();
            if (callback != null) {
                callback.onDetectorSuccess ();
            }
            sleep (10000);
        } catch (SocketTimeoutException e) {
        } catch (Exception e) {
            logger.log (Level.FINE, "Failure: " + e);
        } finally {
            try {
                s.close ();
            } catch (IOException e) {
            }
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/FavoritesConfig.java" startline="20" endline="23">
public FavoritesConfig (Preferences preferences) {
    super (preferences, "favorites");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/FavoritesConfig.java" startline="25" endline="34">
public void add (String key, FeederCreator feederCreator) {
    StringBuilder serializedFeeder = new StringBuilder (feederCreator.getFeederId ());
    serializedFeeder.append ('\t');
    for (String part : feederCreator.serialize ()) {
        serializedFeeder.append (part).append (":::");
    }
    super.add (key, serializedFeeder.toString ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/FavoritesConfig.java" startline="36" endline="41">
public String getFeederId (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (0, indexOf);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/FavoritesConfig.java" startline="43" endline="48">
public String [] getSerializedParts (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (indexOf + 1).split (":::");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="43" endline="47">
GUIConfig (Preferences preferences) {
    this.preferences = preferences;
    load ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="49" endline="68">
private void load () {
    isFirstRun = preferences.getBoolean ("firstRun", true);
    activeFeeder = preferences.getInt ("activeFeeder", 0);
    displayMethod = DisplayMethod.valueOf (preferences.get ("displayMethod", DisplayMethod.ALL.toString ()));
    showScanStats = preferences.getBoolean ("showScanStats", true);
    askScanConfirmation = preferences.getBoolean ("askScanConfirmation", true);
    isMainWindowMaximized = preferences.getBoolean ("windowMaximized", false);
    Rectangle screen = Display.getDefault ().getBounds ();
    mainWindowBounds = new Rectangle (preferences.getInt ("windowLeft", screen.x + screen.width / 2 - 600 / 2), preferences.getInt ("windowTop", screen.y + screen.height / 2 - 360 / 2), preferences.getInt ("windowWidth", 600), preferences.getInt ("windowHeight", 360));
    detailsWindowSize = new Point (preferences.getInt ("detailsWidth", 300), preferences.getInt ("detailsHeight", 200));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="70" endline="89">
public void store () {
    preferences.putBoolean ("firstRun", isFirstRun);
    preferences.putInt ("activeFeeder", activeFeeder);
    preferences.put ("displayMethod", displayMethod.toString ());
    preferences.putBoolean ("showScanStats", showScanStats);
    preferences.putBoolean ("askScanConfirmation", askScanConfirmation);
    preferences.putBoolean ("windowMaximized", isMainWindowMaximized);
    if (! isMainWindowMaximized) {
        preferences.putInt ("windowLeft", mainWindowBounds.x);
        preferences.putInt ("windowTop", mainWindowBounds.y);
        preferences.putInt ("windowWidth", mainWindowBounds.width);
        preferences.putInt ("windowHeight", mainWindowBounds.height);
    }
    preferences.putInt ("detailsWidth", detailsWindowSize.x);
    preferences.putInt ("detailsHeight", detailsWindowSize.y);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="91" endline="94">
public Rectangle getMainWindowBounds () {
    return mainWindowBounds;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="100" endline="107">
public void setMainWindowBounds (Rectangle bounds, boolean isMaximized) {
    if (! isMaximized) {
        mainWindowBounds = bounds;
    }
    isMainWindowMaximized = isMaximized;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="113" endline="127">
public int getColumnWidth (Fetcher fetcher) {
    int width = preferences.getInt ("columnWidth." + fetcher.getId (), 0);
    if (width == 0) {
        if (fetcher instanceof IPFetcher || fetcher instanceof HostnameFetcher) width = 140;
        else if (fetcher instanceof PingFetcher) width = 60;
        else width = 90;

    }
    return width;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/GUIConfig.java" startline="134" endline="137">
public void setColumnWidth (Fetcher fetcher, int width) {
    preferences.putInt ("columnWidth." + fetcher.getId (), width);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Labels.java" startline="41" endline="44">
private Labels () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Labels.java" startline="46" endline="49">
public static final Labels getInstance () {
    return instance;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Labels.java" startline="56" endline="95">
public static void initialize (Locale locale) {
    if (instance != null && locale.equals (instance.locale)) {
        return;
    }
    instance = new Labels ();
    instance.locale = locale;
    InputStream labelsStream = null;
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages.properties");
        if (labelsStream == null) {
            throw new MissingResourceException ("Labels not found!", Labels.class.getName (), "messages");
        }
        instance.labelsFallback = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (IOException e) {
        throw new MissingResourceException (e.toString (), Labels.class.getName (), "messages");
    }
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages_" + locale.getLanguage () + ".properties");
        instance.labels = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (Exception e) {
        instance.labels = instance.labelsFallback;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Labels.java" startline="101" endline="105">
public InputStream getImageAsStream (String key) {
    String imagePath = get (key);
    return getClass ().getClassLoader ().getResourceAsStream (imagePath);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Labels.java" startline="111" endline="123">
public String get (String key) {
    try {
        return labels.getString (key);
    } catch (MissingResourceException e) {
        String text = labelsFallback.getString (key);
        LOG.warning ("Used fallback label for " + key);
        return text;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Labels.java" startline="128" endline="131">
public static String getLabel (String key) {
    return getInstance ().get (key);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/LoggerFactory.java" startline="21" endline="26">
public static Logger getLogger () {
    Throwable t = new Throwable ();
    StackTraceElement directCaller = t.getStackTrace () [1];
    return Logger.getLogger (directCaller.getClassName ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="28" endline="33">
NamedListConfig (Preferences preferences, String preferenceName) {
    this.preferenceName = preferenceName;
    this.preferences = preferences;
    load ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="38" endline="53">
public void load () {
    if (preferences == null) {
        return;
    }
    String [] namedListPrefs = preferences.get (preferenceName, "").split ("###");
    for (int i = 0;
    i < namedListPrefs.length; i += 2) {
        if (namedListPrefs [i].length () > 0) {
            namedList.put (namedListPrefs [i], serializeValue (namedListPrefs [i + 1]));
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="55" endline="58">
Object serializeValue (String value) {
    return value;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="63" endline="75">
public void store () {
    StringBuffer sb = new StringBuffer (32);
    for (Map.Entry < String, Object > e : namedList.entrySet ()) {
        sb.append (e.getKey ()).append ("###").append (e.getValue ()).append ("###");
    }
    if (sb.length () > 3) {
        sb.delete (sb.length () - 3, sb.length ());
    }
    preferences.put (preferenceName, sb.toString ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="81" endline="84">
public void add (String key, Object value) {
    namedList.put (key, value);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="90" endline="94">
public String get (String key) {
    Object value = namedList.get (key);
    return value != null ? value.toString () : null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="100" endline="103">
public String remove (String key) {
    return namedList.remove (key).toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="108" endline="111">
public Iterator < String > iterator () {
    return namedList.keySet ().iterator ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="113" endline="116">
public int size () {
    return namedList.size ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/NamedListConfig.java" startline="124" endline="133">
public void update (String [] keys) {
    Map < String, Object > newList = new LinkedHashMap < String, Object > ();
    for (int i = 0;
    i < keys.length; i ++) {
        newList.put (keys [i], namedList.get (keys [i]));
    }
    namedList = newList;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="22" endline="41">
public OpenersConfig (Preferences preferences) {
    super (preferences, "openers");
    if (size () == 0) {
        Labels labels = Labels.getInstance ();
        if (Platform.WINDOWS) add (labels.get ("opener.netbios"), new Opener ("\\\\${fetcher.ip}", false, null));

        add (labels.get ("opener.web"), new Opener ("http://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.ftp"), new Opener ("ftp://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.telnet"), new Opener ("telnet ${fetcher.ip}", true, null));
        add (labels.get ("opener.ping"), new Opener ("ping ${fetcher.ip}", true, null));
        add (labels.get ("opener.traceroute"), new Opener ((Platform.WINDOWS ? "tracert" : Platform.LINUX ? "tracepath" : "traceroute") + " ${fetcher.ip}", true, null));
        if (! Platform.WINDOWS) add (labels.get ("opener.ssh"), new Opener ("ssh ${fetcher.ip}", true, null));

        if (! Platform.WINDOWS) add (labels.get ("opener.whois"), new Opener ("whois ${fetcher.ip}", true, null));

        add (labels.get ("opener.geolocate"), new Opener ("http://www.angryip.org/iplocate.php?ip=${fetcher.ip}", false, null));
        add (labels.get ("opener.email"), new Opener ("mailto:somebody@example.com?subject=${fetcher.ip} (${fetcher.hostname})", true, null));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="43" endline="46">
Object serializeValue (String value) {
    return new Opener (value);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="48" endline="55">
public void add (String name, Object value) {
    if (value instanceof Opener) super.add (name, value);
    else throw new IllegalArgumentException ();

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="57" endline="60">
public Opener getOpener (String name) {
    return (Opener) namedList.get (name);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="68" endline="82">
Opener (String serialized) {
    try {
        String [] parts = serialized.split ("@@@");
        execString = parts [0];
        inTerminal = parts [1].charAt (0) == '1';
        workingDir = parts.length >= 3 && parts [2].length () > 0 ? new File (parts [2]) : null;
    } catch (ArrayIndexOutOfBoundsException e) {
        LOG.fine ("Broken opener config read: " + serialized);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="84" endline="89">
public Opener (String execString, boolean inTerminal, File workingDir) {
    this.execString = execString;
    this.inTerminal = inTerminal;
    this.workingDir = workingDir;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/OpenersConfig.java" startline="91" endline="94">
public String toString () {
    return execString + "@@@" + (inTerminal ? '1' : '0') + "@@@" + (workingDir != null ? workingDir.toString () : "");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ScannerConfig.java" startline="40" endline="58">
ScannerConfig (Preferences preferences) {
    this.preferences = preferences;
    maxThreads = preferences.getInt ("maxThreads", Platform.CRIPPLED_WINDOWS ? 10 : 100);
    threadDelay = preferences.getInt ("threadDelay", 20);
    scanDeadHosts = preferences.getBoolean ("scanDeadHosts", false);
    selectedPinger = preferences.get ("selectedPinger", Platform.WINDOWS && ! Platform.ARCH_64 ? "pinger.windows" : "pinger.icmp");
    pingTimeout = preferences.getInt ("pingTimeout", 2000);
    pingCount = preferences.getInt ("pingCount", 3);
    skipBroadcastAddresses = preferences.getBoolean ("skipBroadcastAddresses", true);
    portTimeout = preferences.getInt ("portTimeout", 2000);
    adaptPortTimeout = preferences.getBoolean ("adaptPortTimeout", ! Platform.CRIPPLED_WINDOWS);
    minPortTimeout = preferences.getInt ("minPortTimeout", 100);
    portString = preferences.get ("portString", "");
    useRequestedPorts = preferences.getBoolean ("useRequestedPorts", true);
    notAvailableText = preferences.get ("notAvailableText", Labels.getLabel ("fetcher.value.notAvailable"));
    notScannedText = preferences.get ("notScannedText", Labels.getLabel ("fetcher.value.notScanned"));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/ScannerConfig.java" startline="63" endline="79">
public void store () {
    preferences.putInt ("maxThreads", maxThreads);
    preferences.putInt ("threadDelay", threadDelay);
    preferences.putBoolean ("scanDeadHosts", scanDeadHosts);
    preferences.put ("selectedPinger", selectedPinger);
    preferences.putInt ("pingTimeout", pingTimeout);
    preferences.putInt ("pingCount", pingCount);
    preferences.putBoolean ("skipBroadcastAddresses", skipBroadcastAddresses);
    preferences.putInt ("portTimeout", portTimeout);
    preferences.putBoolean ("adaptPortTimeout", adaptPortTimeout);
    preferences.putInt ("minPortTimeout", minPortTimeout);
    preferences.put ("portString", portString);
    preferences.putBoolean ("useRequestedPorts", useRequestedPorts);
    preferences.put ("notAvailableText", notAvailableText);
    preferences.put ("notScannedText", notScannedText);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Version.java" startline="44" endline="51">
public static String getVersion () {
    if (version == null) {
        loadVersionFromJar ();
    }
    return version;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Version.java" startline="56" endline="63">
public static String getBuildDate () {
    if (buildDate == null) {
        loadVersionFromJar ();
    }
    return buildDate;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Version.java" startline="65" endline="86">
private static void loadVersionFromJar () {
    String path = Version.class.getClassLoader ().getResource (Version.class.getName ().replace ('.', '/') + ".class").toString ();
    if (path.startsWith ("jar:file:")) {
        path = path.substring (4, path.indexOf ('!'));
        try {
            JarFile jarFile = new JarFile (new URI (path).getPath ());
            Attributes attrs = jarFile.getManifest ().getMainAttributes ();
            version = attrs.getValue ("Version");
            buildDate = attrs.getValue ("Build-Date");
            return;
        } catch (Exception e) {
            LoggerFactory.getLogger ().log (Level.WARNING, "Cannot obtain version", e);
        }
    }
    version = "current";
    buildDate = "today";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/config/Version.java" startline="88" endline="91">
public static String getFullName () {
    return NAME + " " + getVersion ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/LibraryLoader.java" startline="23" endline="59">
public static void loadLibrary (String library) {
    String filename = System.mapLibraryName (library);
    String fullFilename = System.getProperty ("java.io.tmpdir") + System.getProperty ("file.separator") + filename;
    try {
        System.load (fullFilename);
    } catch (UnsatisfiedLinkError err2) {
        try {
            InputStream is = LibraryLoader.class.getClassLoader ().getResourceAsStream (filename);
            if (is == null) {
                throw new IOException (filename + " not found in the jar file (classpath)");
            }
            byte [] buffer = new byte [4096];
            OutputStream os = new FileOutputStream (fullFilename);
            int read;
            while ((read = is.read (buffer)) != - 1) {
                os.write (buffer, 0, read);
            }
            os.close ();
            is.close ();
            new File (fullFilename).setExecutable (true, false);
            System.load (fullFilename);
        } catch (IOException ioe) {
            throw new RuntimeException ("Unable to extract native library: " + library, ioe);
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/PortIterator.java" startline="33" endline="61">
public PortIterator (String portString) {
    if (portString != null && (portString = portString.trim ()).length () > 0) {
        String [] portRanges = portString.split ("[\\s\t\n\r,;]+");
        portRangeStart = new int [portRanges.length + 1];
        portRangeEnd = new int [portRanges.length];
        for (int i = 0;
        i < portRanges.length; i ++) {
            String range = portRanges [i];
            int dashPos = range.indexOf ('-') + 1;
            int endPort = Integer.parseInt (range.substring (dashPos));
            portRangeEnd [i] = endPort;
            portRangeStart [i] = dashPos == 0 ? endPort : Integer.parseInt (range.substring (0, dashPos - 1));
            if (endPort <= 0 || endPort >= 65536) {
                throw new NumberFormatException (endPort + " port is out of range");
            }
        }
        currentPort = portRangeStart [0];
        rangeCountMinus1 = portRanges.length - 1;
        hasNext = rangeCountMinus1 >= 0;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/PortIterator.java" startline="66" endline="69">
public boolean hasNext () {
    return hasNext;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/PortIterator.java" startline="74" endline="86">
public Integer next () {
    int returnPort = currentPort ++;
    if (currentPort > portRangeEnd [rangeIndex]) {
        hasNext = rangeIndex < rangeCountMinus1;
        rangeIndex ++;
        currentPort = portRangeStart [rangeIndex];
    }
    return returnPort;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/PortIterator.java" startline="88" endline="99">
public int size () {
    int size = 0;
    if (portRangeStart != null) {
        for (int i = 0;
        i <= rangeCountMinus1; i ++) {
            size += portRangeEnd [i] - portRangeStart [i] + 1;
        }
    }
    return size;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/PortIterator.java" startline="105" endline="116">
public PortIterator copy () {
    try {
        return (PortIterator) super.clone ();
    } catch (CloneNotSupportedException e) {
        assert false : "this should never happen";
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/PortIterator.java" startline="118" endline="121">
public void remove () {
    throw new UnsupportedOperationException ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/Scanner.java" startline="24" endline="27">
public Scanner (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/Scanner.java" startline="34" endline="57">
public void scan (ScanningSubject scanningSubject, ScanningResult result) {
    int fetcherIndex = 0;
    boolean isScanningInterrupted = false;
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        Object value = NotScanned.VALUE;
        if (! scanningSubject.isAddressAborted () && ! isScanningInterrupted) {
            value = fetcher.scan (scanningSubject);
            isScanningInterrupted = Thread.currentThread ().isInterrupted ();
            if (value == null) value = isScanningInterrupted ? NotScanned.VALUE : NotAvailable.VALUE;

        }
        result.setValue (fetcherIndex, value);
        fetcherIndex ++;
    }
    result.setType (scanningSubject.getResultType ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/Scanner.java" startline="62" endline="68">
public void init () {
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        fetcher.init ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/Scanner.java" startline="73" endline="79">
public void cleanup () {
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        fetcher.cleanup ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThread.java" startline="45" endline="75">
public ScannerDispatcherThread (Feeder feeder, Scanner scanner, StateMachine stateMachine, ScanningProgressCallback progressCallback, ScanningResultList scanningResults, ScannerConfig scannerConfig, ScanningResultCallback resultsCallback) {
    setName (getClass ().getSimpleName ());
    this.config = scannerConfig;
    this.stateMachine = stateMachine;
    this.progressCallback = progressCallback;
    this.resultsCallback = resultsCallback;
    this.threadGroup = new ThreadGroup (getName ());
    this.threadPool = Executors.newFixedThreadPool (config.maxThreads, this);
    setDaemon (true);
    this.feeder = feeder;
    this.scanner = scanner;
    this.scanningResultList = scanningResults;
    try {
        this.scanningResultList.initNewScan (feeder);
        scanner.init ();
    } catch (RuntimeException e) {
        stateMachine.reset ();
        throw e;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThread.java" startline="77" endline="157">
public void run () {
    try {
        stateMachine.addTransitionListener (this);
        long lastNotifyTime = 0;
        try {
            ScanningSubject subject = null;
            while (feeder.hasNext () && stateMachine.inState (ScanningState.SCANNING)) {
                Thread.sleep (config.threadDelay);
                if ((numActiveThreads.intValue () < config.maxThreads)) {
                    subject = feeder.next ();
                    if (config.skipBroadcastAddresses && InetAddressUtils.isLikelyBroadcast (subject.getAddress ())) {
                        continue;
                    }
                    ScanningResult result = scanningResultList.createResult (subject.getAddress ());
                    resultsCallback.prepareForResults (result);
                    AddressScannerTask scanningTask = new AddressScannerTask (subject, result);
                    threadPool.execute (scanningTask);
                }
                long now = System.currentTimeMillis ();
                if (now - lastNotifyTime >= UI_UPDATE_INTERVAL_MS) {
                    lastNotifyTime = now;
                    progressCallback.updateProgress (subject.getAddress (), numActiveThreads.intValue (), feeder.percentageComplete ());
                }
            }
        } catch (InterruptedException e) {
        }
        stateMachine.stop ();
        threadPool.shutdown ();
        try {
            while (! threadPool.awaitTermination (UI_UPDATE_INTERVAL_MS, TimeUnit.MILLISECONDS)) {
                progressCallback.updateProgress (null, numActiveThreads.intValue (), 100);
            }
        } catch (InterruptedException e) {
        }
        scanner.cleanup ();
        stateMachine.complete ();
    } finally {
        stateMachine.removeTransitionListener (this);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThread.java" startline="163" endline="170">
public void transitionTo (ScanningState state, Transition transition) {
    if (state == ScanningState.KILLING) {
        threadGroup.interrupt ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThread.java" startline="175" endline="183">
public Thread newThread (Runnable r) {
    Thread thread = new Thread (threadGroup, r);
    thread.setDaemon (true);
    return thread;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThread.java" startline="194" endline="199">
AddressScannerTask (ScanningSubject subject, ScanningResult result) {
    this.subject = subject;
    this.result = result;
    numActiveThreads.incrementAndGet ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThread.java" startline="201" endline="215">
public void run () {
    Thread.currentThread ().setName (getClass ().getSimpleName () + ": " + subject);
    try {
        scanner.scan (subject, result);
        resultsCallback.consumeResults (result);
    } finally {
        numActiveThreads.decrementAndGet ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThreadFactory.java" startline="27" endline="33">
public ScannerDispatcherThreadFactory (ScanningResultList scanningResults, Scanner scanner, StateMachine stateMachine, ScannerConfig scannerConfig) {
    this.scanningResults = scanningResults;
    this.scanner = scanner;
    this.stateMachine = stateMachine;
    this.scannerConfig = scannerConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScannerDispatcherThreadFactory.java" startline="35" endline="38">
public ScannerDispatcherThread createScannerThread (Feeder feeder, ScanningProgressCallback progressCallback, ScanningResultCallback resultsCallback) {
    return new ScannerDispatcherThread (feeder, scanner, stateMachine, progressCallback, scanningResults, scannerConfig, resultsCallback);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="27" endline="32">
public boolean matches (ResultType that) {
    if (this.ordinal () <= DEAD.ordinal ()) return that.ordinal () <= DEAD.ordinal ();

    return this.ordinal () <= that.ordinal ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="51" endline="57">
ScanningResult (InetAddress address, int numberOfFetchers) {
    this.address = address;
    values = new Object [numberOfFetchers];
    values [0] = address.getHostAddress ();
    type = ResultType.UNKNOWN;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="63" endline="68">
public void reset () {
    values = new Object [values.length];
    values [0] = address.getHostAddress ();
    type = ResultType.UNKNOWN;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="70" endline="73">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="78" endline="81">
public boolean isReady () {
    return type != ResultType.UNKNOWN;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="86" endline="89">
public List < Object > getValues () {
    return Arrays.asList (values);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="94" endline="97">
void setType (ResultType type) {
    this.type = type;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="102" endline="105">
public ResultType getType () {
    return type;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="112" endline="115">
public void setValue (int fetcherIndex, Object value) {
    values [fetcherIndex] = value;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResult.java" startline="124" endline="141">
public String toString () {
    String newLine = System.getProperty ("line.separator");
    StringBuffer details = new StringBuffer (1024);
    Iterator < ? > iterator = getValues ().iterator ();
    List < Fetcher > fetchers = resultList.getFetchers ();
    for (int i = 0;
    iterator.hasNext (); i ++) {
        String fetcherName = fetchers.get (i).getName ();
        details.append (fetcherName).append (":\t");
        Object value = iterator.next ();
        details.append (value != null ? value : "");
        details.append (newLine);
    }
    return details.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultComparator.java" startline="19" endline="60">
@SuppressWarnings("unchecked")
public int compare (ScanningResult r1, ScanningResult r2) {
    Object val1 = r1.getValues ().get (index);
    Object val2 = r2.getValues ().get (index);
    if (val1 == null) val1 = NotAvailable.VALUE;

    if (val2 == null) val2 = NotAvailable.VALUE;

    int result;
    if (val1 == val2) {
        result = 0;
    } else if (val1.getClass () == val2.getClass () && ! (val1 instanceof String) && val1 instanceof Comparable) {
        result = ((Comparable) val1).compareTo (val2);
    } else {
        if (val1 instanceof Empty) result = ((Empty) val1).compareTo (val2);
        else if (val2 instanceof Empty) result = - ((Empty) val2).compareTo (val1);
        else {
            result = val1.toString ().compareToIgnoreCase (val2.toString ());
        }

    }

    if (result == 0 && index != 0) {
        result = ((Comparable) r1.getValues ().get (0)).compareTo (r2.getValues ().get (0));
    }
    return result * (ascending ? 1 : - 1);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultComparator.java" startline="62" endline="69">
public void byIndex (int index, boolean ascending) {
    this.index = index;
    this.ascending = ascending;
    Empty.setSortDirection (ascending);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="53" endline="56">
public ScanningResultList (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="58" endline="62">
public ScanningResultList (FetcherRegistry fetcherRegistry, StateMachine stateMachine) {
    this (fetcherRegistry);
    stateMachine.addTransitionListener (new StopScanningListener ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="68" endline="71">
public List < Fetcher > getFetchers () {
    return selectedFetchers;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="76" endline="79">
public boolean areResultsAvailable () {
    return ! resultList.isEmpty ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="84" endline="87">
public boolean isInfoAvailable () {
    return info != null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="92" endline="95">
public String getFeederInfo () {
    return feederInfo;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="100" endline="103">
public String getFeederName () {
    return feederName;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="110" endline="119">
public synchronized ScanningResult createResult (InetAddress address) {
    info.numScanned ++;
    Integer index = resultIndexes.get (address);
    if (index == null) {
        return new ScanningResult (address, fetcherRegistry.getSelectedFetchers ().size ());
    }
    return resultList.get (index);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="128" endline="140">
public synchronized void registerAtIndex (int index, ScanningResult result) {
    if (resultIndexes.put (result.getAddress (), index) != null) throw new IllegalStateException (result.getAddress () + " is already registered in the list");

    result.resultList = this;
    resultList.add (index, result);
    if (result.isReady ()) updateStatistics (result);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="145" endline="148">
public synchronized boolean isRegistered (ScanningResult result) {
    return resultIndexes.containsKey (result.getAddress ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="154" endline="161">
public synchronized int update (ScanningResult result) {
    if (result.isReady ()) updateStatistics (result);

    return resultIndexes.get (result.getAddress ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="166" endline="172">
public synchronized void clear () {
    resultList.clear ();
    resultIndexes.clear ();
    selectedFetchers = null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="178" endline="187">
public synchronized void initNewScan (Feeder feeder) {
    selectedFetchers = new ArrayList < Fetcher > (fetcherRegistry.getSelectedFetchers ());
    this.feederInfo = feeder.getInfo ();
    this.feederName = feeder.getName ();
    this.info = new ScanInfo ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="192" endline="195">
public ScanInfo getScanInfo () {
    return info;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="202" endline="205">
public synchronized Iterator < ScanningResult > iterator () {
    return resultList.iterator ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="211" endline="214">
public synchronized ScanningResult getResult (int index) {
    return resultList.get (index);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="220" endline="236">
public synchronized void remove (int [] indices) {
    List < ScanningResult > newList = new ArrayList < ScanningResult > (RESULT_LIST_INITIAL_SIZE);
    Map < InetAddress, Integer > newMap = new HashMap < InetAddress, Integer > (RESULT_LIST_INITIAL_SIZE);
    for (int i = 0;
    i < resultList.size (); i ++) {
        if (Arrays.binarySearch (indices, i) < 0) {
            newList.add (resultList.get (i));
            newMap.put (resultList.get (i).getAddress (), newList.size () - 1);
        }
    }
    resultList = newList;
    resultIndexes = newMap;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="243" endline="255">
public synchronized void sort (int columnIndex, boolean ascending) {
    resultsComparator.byIndex (columnIndex, ascending);
    Collections.sort (resultList, resultsComparator);
    resultIndexes = new HashMap < InetAddress, Integer > (RESULT_LIST_INITIAL_SIZE);
    for (int i = 0;
    i < resultList.size (); i ++) {
        resultIndexes.put (resultList.get (i).getAddress (), i);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="263" endline="280">
public int findText (String text, int startIndex) {
    text = text.toLowerCase ();
    for (int i = startIndex;
    i < resultList.size (); i ++) {
        ScanningResult scanningResult = getResult (i);
        for (Object value : scanningResult.getValues ()) {
            if (value != null && value.toString ().toLowerCase ().contains (text)) {
                return i;
            }
        }
    }
    return - 1;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="282" endline="293">
private void updateStatistics (ScanningResult result) {
    if (result.getType () == ResultType.ALIVE) {
        info.numAlive ++;
    } else if (result.getType () == ResultType.WITH_PORTS) {
        info.numAlive ++;
        info.numWithPorts ++;
    }

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="314" endline="320">
public long getScanTime () {
    long endTime = this.endTime;
    if (endTime == 0) endTime = System.currentTimeMillis ();

    return endTime - startTime;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="325" endline="328">
public int getHostCount () {
    return numScanned;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="333" endline="336">
public int getAliveCount () {
    return numAlive;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="341" endline="344">
public int getWithPortsCount () {
    return numWithPorts;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="349" endline="352">
public boolean isCompletedNormally () {
    return scanFinished && ! scanAborted;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningResultList.java" startline="357" endline="371">
public void transitionTo (ScanningState state, Transition transition) {
    synchronized (ScanningResultList.this) {
        if (transition == Transition.COMPLETE && state == ScanningState.IDLE) {
            info.endTime = System.currentTimeMillis ();
            info.scanFinished = true;
        } else if (state == ScanningState.KILLING) {
            info.scanAborted = true;
        }

    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="51" endline="56">
public ScanningSubject (InetAddress address) {
    this.address = address;
    this.parameters = new HashMap < String, Object > ();
    this.config = Config.getConfig ().forScanner ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="58" endline="61">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="66" endline="69">
public void setParameter (String name, Object value) {
    parameters.put (name, value);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="75" endline="78">
public Object getParameter (String name) {
    return parameters.get (name);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="84" endline="87">
public boolean hasParameter (String name) {
    return parameters.containsKey (name);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="92" endline="95">
public ResultType getResultType () {
    return resultType;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="101" endline="104">
public void setResultType (ResultType resultType) {
    this.resultType = resultType;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="109" endline="112">
public boolean isAddressAborted () {
    return isAborted;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="117" endline="120">
public void abortAddressScanning () {
    this.isAborted = true;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="122" endline="125">
public boolean isAnyPortRequested () {
    return requestedPorts != null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="130" endline="133">
public Iterator < Integer > requestedPortsIterator () {
    return requestedPorts == null ? null : requestedPorts.iterator ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="138" endline="143">
public void addRequestedPort (Integer requestedPort) {
    if (requestedPorts == null) requestedPorts = new ArrayList < Integer > ();

    requestedPorts.add (requestedPort);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="148" endline="166">
public int getAdaptedPortTimeout () {
    if (adaptedPortTimeout > 0) return adaptedPortTimeout;

    PingResult pingResult = (PingResult) getParameter (PARAMETER_PING_RESULT);
    if (pingResult != null) {
        if (config.adaptPortTimeout && pingResult.isTimeoutAdaptationAllowed ()) {
            adaptedPortTimeout = Math.min (Math.max (pingResult.getLongestTime () * 3, config.minPortTimeout), config.portTimeout);
            return adaptedPortTimeout;
        }
    }
    return config.portTimeout;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/ScanningSubject.java" startline="168" endline="181">
@Override
public String toString () {
    StringBuilder sb = new StringBuilder (address.getHostAddress ());
    if (requestedPorts != null) {
        sb.append (':');
        for (Integer port : requestedPorts) sb.append (port).append (',');

        if (sb.charAt (sb.length () - 1) == ',') sb.deleteCharAt (sb.length () - 1);

    }
    return sb.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/UserErrorException.java" startline="21" endline="24">
public UserErrorException (String label) {
    super (Labels.getLabel ("exception.UserErrorException." + label));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/UserErrorException.java" startline="26" endline="30">
public UserErrorException (String label, Throwable cause) {
    this (label);
    initCause (cause);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/UserErrorException.java" startline="32" endline="35">
public UserErrorException (String label, String rawInfo) {
    super (Labels.getLabel ("exception.UserErrorException." + label) + rawInfo);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="25" endline="29">
public CombinedUnprivilegedPinger (int timeout) {
    udpPinger = new UDPPinger (timeout);
    tcpPinger = new TCPPinger (timeout);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="31" endline="41">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = udpPinger.ping (subject, count);
    if (! result.isAlive ()) {
        result = tcpPinger.ping (subject, count);
    }
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="43" endline="47">
public void close () throws IOException {
    udpPinger.close ();
    tcpPinger.close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPPinger.java" startline="35" endline="38">
public ICMPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPPinger.java" startline="40" endline="57">
private RawSocket createRawSocket () throws IOException {
    RawSocket socket = new RawSocket ();
    socket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    try {
        socket.setSendTimeout (timeout);
        socket.setReceiveTimeout (timeout);
    } catch (java.net.SocketException se) {
        socket.setUseSelectTimeout (true);
        socket.setSendTimeout (timeout);
        socket.setReceiveTimeout (timeout);
    }
    return socket;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPPinger.java" startline="59" endline="120">
private void sendReceiveEchoPacket (RawSocket socket, InetAddress address, int sequence, PingResult result) throws IOException {
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    packet.setType (ICMPPacket.TYPE_ECHO_REQUEST);
    packet.setCode (0);
    packet.setIdentifier (hashCode () & 0xFFFF);
    packet.setSequenceNumber (sequence);
    int offset = packet.getIPHeaderByteLength ();
    int dataOffset = offset + packet.getICMPHeaderByteLength ();
    int length = packet.getICMPPacketByteLength ();
    OctetConverter.longToOctets (System.currentTimeMillis (), data, dataOffset);
    packet.computeICMPChecksum ();
    socket.write (address, data, offset, length);
    try {
        int skippedCount = 0;
        do {
            socket.read (address, data);
            skippedCount ++;
        } while (packet.getType () != ICMPPacket.TYPE_ECHO_REPLY || packet.getIdentifier () != (hashCode () & 0xFFFF) || packet.getSequenceNumber () != sequence);
        if (packet.getSourceAsInetAddress ().equals (address)) {
            long end = System.currentTimeMillis ();
            long start = OctetConverter.octetsToLong (data, dataOffset);
            long time = end - start;
            result.addReply (time);
            result.setTTL (packet.getTTL () & 0xFF);
        }
    } catch (InterruptedIOException e) {
        LOG.finer ("Receive timeout");
    } catch (UnknownHostException e) {
        LOG.log (Level.WARNING, "Cannot retrieve the source address of an ICMP packet", e);
    } catch (IOException e) {
        LOG.log (Level.WARNING, "Unable to read from the socket", e);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPPinger.java" startline="129" endline="156">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    RawSocket socket = createRawSocket ();
    try {
        for (int i = 0;
        i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
            try {
                sendReceiveEchoPacket (socket, subject.getAddress (), i, result);
            } catch (InterruptedIOException e) {
            }
        }
    } finally {
        socket.close ();
    }
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPPinger.java" startline="158" endline="160">
public void close () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="48" endline="75">
public ICMPSharedPinger (int timeout) throws IOException {
    sendingSocket = new RawSocket ();
    sendingSocket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    receivingSocket = new RawSocket ();
    receivingSocket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    this.timeout = timeout;
    try {
        sendingSocket.setSendTimeout (timeout);
        receivingSocket.setReceiveTimeout (timeout);
    } catch (java.net.SocketException se) {
        sendingSocket.setUseSelectTimeout (true);
        receivingSocket.setUseSelectTimeout (true);
        sendingSocket.setSendTimeout (timeout);
        receivingSocket.setReceiveTimeout (timeout);
    }
    receiverThread = new PacketReceiverThread ();
    receiverThread.start ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="77" endline="84">
public void close () throws IOException {
    synchronized (sendingSocket) {
        sendingSocket.close ();
    }
    receiverThread.interrupt ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="86" endline="166">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    InetAddress address = subject.getAddress ();
    PingResult result = new PingResult (address);
    results.put (address, result);
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    packet.setType (ICMPPacket.TYPE_ECHO_REQUEST);
    packet.setCode (0);
    packet.setIdentifier (hashCode () & 0xFFFF);
    try {
        for (int i = 1;
        i <= count && ! Thread.currentThread ().isInterrupted (); i ++) {
            packet.setSequenceNumber (i);
            int offset = packet.getIPHeaderByteLength ();
            timeOffsetInPacket = offset + packet.getICMPHeaderByteLength ();
            int length = packet.getICMPPacketByteLength ();
            OctetConverter.longToOctets (System.currentTimeMillis (), data, timeOffsetInPacket);
            packet.computeICMPChecksum ();
            if (LOG.isLoggable (Level.FINEST)) {
                LOG.finest ("Pinging " + i + result.address);
            }
            synchronized (sendingSocket) {
                sendingSocket.write (result.address, data, offset, length);
            }
            try {
                Thread.sleep (15);
            } catch (InterruptedException e) {
                Thread.currentThread ().interrupt ();
            }
        }
        int totalTimeout = timeout * count;
        while (totalTimeout > 0 && result.getReplyCount () < count) {
            if (LOG.isLoggable (Level.FINEST)) {
                LOG.finest ("Waiting for response " + address + ": " + totalTimeout);
            }
            synchronized (result) {
                try {
                    result.wait (timeout);
                } catch (InterruptedException e) {
                }
            }
            totalTimeout -= timeout;
        }
        return result;
    } finally {
        results.remove (address);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="174" endline="179">
public PacketReceiverThread () {
    super ("Ping packet receiver");
    setDaemon (true);
    setPriority (Thread.MAX_PRIORITY);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="181" endline="279">
public void run () {
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    InetAddress tmpAddress = null;
    try {
        tmpAddress = InetAddress.getLocalHost ();
    } catch (UnknownHostException e) {
        LOG.log (Level.SEVERE, null, e);
    }
    try {
        receivingSocket.write (tmpAddress, data);
    } catch (IOException e) {
        LOG.log (Level.WARNING, "Sending of test packet failed", e);
    }
    do {
        try {
            receivingSocket.read (tmpAddress, data);
            if (packet.getType () == ICMPPacket.TYPE_ECHO_REPLY && packet.getIdentifier () == (ICMPSharedPinger.this.hashCode () & 0xFFFF) && packet.getSequenceNumber () > 0) {
                long endTime = System.currentTimeMillis ();
                PingResult result = results.get (packet.getSourceAsInetAddress ());
                if (result == null) {
                    LOG.warning ("ICMP packet received from an unknown address: " + packet.getSourceAsInetAddress ());
                    continue;
                }
                long startTime = OctetConverter.octetsToLong (data, timeOffsetInPacket);
                long time = endTime - startTime;
                if (LOG.isLoggable (Level.FINEST)) {
                    LOG.finest ("Received " + packet.getSequenceNumber () + packet.getSourceAsInetAddress () + ": " + time);
                }
                result.addReply (time);
                result.setTTL (packet.getTTL () & 0xFF);
                synchronized (result) {
                    result.notifyAll ();
                }
            } else if (packet.getType () == ICMPPacket.TYPE_HOST_UNREACHABLE) {
            }

        } catch (InterruptedIOException e) {
            LOG.finer ("Receive timeout");
        } catch (UnknownHostException e) {
            LOG.log (Level.WARNING, "Cannot retrieve the source address of an ICMP packet", e);
        } catch (IOException e) {
            LOG.log (Level.WARNING, "Unable to read from the socket", e);
        }
    } while (! interrupted ());
    try {
        receivingSocket.close ();
    } catch (IOException e) {
    }
    LOG.fine ("Terminated");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="26" endline="29">
public PingResult (InetAddress address) {
    this.address = address;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="31" endline="39">
public void addReply (long time) {
    replyCount ++;
    if (time > longestTime) longestTime = time;

    totalTime += time;
    timeoutAdaptationAllowed = replyCount > 2;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="41" endline="44">
public int getTTL () {
    return ttl;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="46" endline="49">
public void setTTL (int ttl) {
    this.ttl = ttl;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="51" endline="54">
public int getAverageTime () {
    return (int) (totalTime / replyCount);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="56" endline="59">
public int getLongestTime () {
    return (int) longestTime;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="61" endline="64">
public int getReplyCount () {
    return replyCount;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="69" endline="72">
public boolean isAlive () {
    return replyCount > 0;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="74" endline="78">
public void enableTimeoutAdaptation () {
    if (isAlive ()) timeoutAdaptationAllowed = true;

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingResult.java" startline="80" endline="83">
public boolean isTimeoutAdaptationAllowed () {
    return timeoutAdaptationAllowed;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="36" endline="51">
public PingerRegistryImpl (ScannerConfig scannerConfig) {
    this.scannerConfig = scannerConfig;
    pingers = new LinkedHashMap < String, Class < ? extends Pinger > > ();
    if (Platform.WINDOWS && ! Platform.ARCH_64) {
        pingers.put ("pinger.windows", WindowsPinger.class);
    }
    pingers.put ("pinger.icmp", ICMPSharedPinger.class);
    pingers.put ("pinger.icmp2", ICMPPinger.class);
    pingers.put ("pinger.udp", UDPPinger.class);
    pingers.put ("pinger.tcp", TCPPinger.class);
    pingers.put ("pinger.combined", CombinedUnprivilegedPinger.class);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="53" endline="56">
public String [] getRegisteredNames () {
    return pingers.keySet ().toArray (new String [pingers.size ()]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="61" endline="64">
public Pinger createPinger () throws FetcherException {
    return createPinger (scannerConfig.selectedPinger, scannerConfig.pingTimeout);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="69" endline="87">
Pinger createPinger (String pingerName, int timeout) throws FetcherException {
    Class < ? extends Pinger > pingerClass = pingers.get (pingerName);
    Constructor < ? extends Pinger > constructor;
    try {
        constructor = pingerClass.getConstructor (new Class [] {int.class});
        return constructor.newInstance (new Object [] {new Integer (timeout)});
    } catch (Exception e) {
        Throwable t = e instanceof InvocationTargetException ? e.getCause () : e;
        String message = "Unable to create pinger: " + pingerName;
        LOG.log (Level.SEVERE, message, t);
        if (t instanceof RuntimeException) throw (RuntimeException) t;

        throw new FetcherException ("pingerCreateFailure");
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="89" endline="109">
public boolean checkSelectedPinger () {
    if (scannerConfig.selectedPinger.startsWith ("pinger.icmp")) {
        try {
            Pinger icmpPinger = createPinger (scannerConfig.selectedPinger, 250);
            icmpPinger.ping (new ScanningSubject (InetAddress.getLocalHost ()), 1);
        } catch (Exception e) {
            LOG.info ("ICMP pinger failed: " + e);
            scannerConfig.selectedPinger = Platform.WINDOWS && ! Platform.ARCH_64 ? "pinger.windows" : "pinger.combined";
            return false;
        }
    }
    return true;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/TCPPinger.java" startline="33" endline="37">
public TCPPinger (int timeout) {
    this.timeout = timeout + timeout / 2;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/TCPPinger.java" startline="39" endline="112">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    int workingPort = - 1;
    for (int i = 0;
    i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
        Socket socket = new Socket ();
        long startTime = System.currentTimeMillis ();
        try {
            int probePort = workingPort >= 0 ? workingPort : PROBE_TCP_PORTS [i % PROBE_TCP_PORTS.length];
            if (i == 0 && subject.isAnyPortRequested ()) {
                probePort = subject.requestedPortsIterator ().next ();
            }
            socket.setReuseAddress (true);
            socket.setReceiveBufferSize (32);
            socket.connect (new InetSocketAddress (subject.getAddress (), probePort), timeout);
            if (socket.isConnected ()) {
                success (result, startTime);
                workingPort = probePort;
            }
        } catch (SocketTimeoutException e) {
        } catch (NoRouteToHostException e) {
            break;
        } catch (IOException e) {
            String msg = e.getMessage ();
            if (msg.contains ("refused")) {
                success (result, startTime);
            } else if (msg.contains ("route to host") || msg.contains ("down")) {
                break;
            } else {
                LOG.log (Level.FINER, subject.toString (), e);
            }

        } finally {
            try {
                socket.close ();
            } catch (Exception e) {
            }
        }
    }
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/TCPPinger.java" startline="114" endline="119">
private void success (PingResult result, long startTime) {
    result.addReply (System.currentTimeMillis () - startTime);
    result.enableTimeoutAdaptation ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/TCPPinger.java" startline="121" endline="124">
public void close () throws IOException {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/UDPPinger.java" startline="34" endline="37">
public UDPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/UDPPinger.java" startline="39" endline="85">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    DatagramSocket socket = new DatagramSocket ();
    socket.setSoTimeout (timeout);
    socket.connect (subject.getAddress (), PROBE_UDP_PORT);
    for (int i = 0;
    i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
        DatagramPacket packet = new DatagramPacket (new byte [] {}, 0);
        long startTime = System.currentTimeMillis ();
        try {
            socket.send (packet);
            socket.receive (packet);
        } catch (PortUnreachableException e) {
            result.addReply (System.currentTimeMillis () - startTime);
        } catch (SocketTimeoutException e) {
        } catch (NoRouteToHostException e) {
            break;
        } catch (SocketException e) {
            if (e.getMessage ().contains ("route to host")) {
                break;
            }
        } catch (IOException e) {
            LOG.log (Level.FINER, subject.toString (), e);
        }
    }
    socket.close ();
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/UDPPinger.java" startline="87" endline="90">
public void close () throws IOException {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/WindowsPinger.java" startline="28" endline="35">
public WindowsPinger (int timeout) {
    this.timeout = timeout;
    if (! libraryLoaded) {
        LibraryLoader.loadLibrary ("winping");
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/WindowsPinger.java" startline="37" endline="75">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    byte [] pingData = new byte [56];
    byte [] replyData = new byte [56 + 100];
    int handle = nativeIcmpCreateFile ();
    if (handle < 0) {
        throw new IOException ("Unable to create Windows native ICMP handle");
    }
    try {
        for (int i = 1;
        i <= count && ! Thread.currentThread ().isInterrupted (); i ++) {
            if (nativeIcmpSendEcho (handle, subject.getAddress ().getAddress (), pingData, replyData, timeout) > 0) {
                int status = replyData [4] + (replyData [5] << 8) + (replyData [6] << 16) + (replyData [7] << 24);
                if (status == 0) {
                    int roundTripTime = replyData [8] + (replyData [9] << 8) + (replyData [10] << 16) + (replyData [11] << 24);
                    int timeToLive = replyData [20] & 0xFF;
                    result.addReply (roundTripTime);
                    result.setTTL (timeToLive);
                }
            }
        }
    } finally {
        nativeIcmpCloseHandle (handle);
    }
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/net/WindowsPinger.java" startline="95" endline="98">
public void close () throws IOException {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/plugins/PluginLoader.java" startline="12" endline="31">
public void addTo (MutablePicoContainer container) {
    String plugins = System.getProperty ("ipscan.plugins");
    if (plugins != null) {
        String [] classes = plugins.split ("\\s*,\\s*");
        for (String className : classes) {
            try {
                Class clazz = Class.forName (className);
                container.registerComponentImplementation (clazz);
            } catch (ClassNotFoundException e) {
                LOG.warning ("Unable to load plugin: " + className);
            }
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/ScanningState.java" startline="29" endline="46">
ScanningState next () {
    switch (this) {
        case IDLE :
            return STARTING;
        case STARTING :
            return SCANNING;
        case SCANNING :
            return STOPPING;
        case STOPPING :
            return KILLING;
        case RESTARTING :
            return SCANNING;
        default :
            return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="35" endline="38">
public boolean inState (ScanningState state) {
    return this.state == state;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="43" endline="46">
public ScanningState getState () {
    return state;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="52" endline="63">
public void addTransitionListener (StateTransitionListener listener) {
    try {
        listenersLock.writeLock ().lock ();
        transitionListeners.add (listener);
    } finally {
        listenersLock.writeLock ().unlock ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="69" endline="80">
public void removeTransitionListener (StateTransitionListener listener) {
    try {
        listenersLock.writeLock ().lock ();
        transitionListeners.remove (listener);
    } finally {
        listenersLock.writeLock ().unlock ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="87" endline="94">
void transitionTo (ScanningState newState, Transition transition) {
    if (state != newState) {
        state = newState;
        notifyAboutTransition (transition);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="96" endline="110">
protected void notifyAboutTransition (Transition transition) {
    try {
        listenersLock.readLock ().lock ();
        for (StateTransitionListener listener : transitionListeners) {
            listener.transitionTo (state, transition);
        }
    } finally {
        listenersLock.readLock ().unlock ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="116" endline="123">
public void transitionToNext () {
    if (state != ScanningState.KILLING) {
        transitionTo (state.next (), Transition.NEXT);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="128" endline="143">
public void stop () {
    if (state == ScanningState.SCANNING) {
        transitionTo (ScanningState.STOPPING, Transition.STOP);
    } else if (state == ScanningState.STOPPING) {
        notifyAboutTransition (Transition.STOP);
    } else {
        throw new IllegalStateException ("Attempt to stop from " + state);
    }

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="148" endline="158">
public void complete () {
    if (state == ScanningState.STOPPING || state == ScanningState.KILLING) {
        transitionTo (ScanningState.IDLE, Transition.COMPLETE);
    } else {
        throw new IllegalStateException ("Attempt to complete from " + state);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="163" endline="173">
public void rescan () {
    if (state == ScanningState.IDLE) {
        transitionTo (ScanningState.RESTARTING, Transition.RESCAN);
    } else {
        throw new IllegalStateException ("Attempt to rescan from " + state);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="178" endline="188">
public void startScanning () {
    if (state == ScanningState.STARTING || state == ScanningState.RESTARTING) {
        transitionTo (ScanningState.SCANNING, Transition.START);
    } else {
        throw new IllegalStateException ("Attempt to go scanning from " + state);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="193" endline="197">
public void init () {
    state = ScanningState.IDLE;
    notifyAboutTransition (Transition.INIT);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/state/StateMachine.java" startline="202" endline="206">
public void reset () {
    state = ScanningState.IDLE;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/Empty.java" startline="25" endline="28">
public static void setSortDirection (boolean ascending) {
    Empty.sortDirection = ascending ? 1 : - 1;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/Empty.java" startline="30" endline="36">
public int compareTo (Object that) {
    if (this == that) return 0;

    return sortDirection;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/InetAddressHolder.java" startline="22" endline="26">
public InetAddressHolder (InetAddress address) {
    s = address.getHostAddress ();
    a = address.getAddress ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/InetAddressHolder.java" startline="28" endline="45">
public int compareTo (InetAddressHolder that) {
    byte [] b1 = this.a;
    byte [] b2 = that.a;
    for (int i = 0;
    i < b1.length; i ++) {
        if (b1 [i] == b2 [i]) continue;
        else if ((b1 [i] & 0xFF) > (b2 [i] & 0xFF)) return 1;
        else return - 1;

    }
    return 0;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/InetAddressHolder.java" startline="47" endline="51">
@Override
public String toString () {
    return s;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/InetAddressHolder.java" startline="53" endline="57">
@Override
public int hashCode () {
    return s.hashCode ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/InetAddressHolder.java" startline="59" endline="77">
@Override
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    final InetAddressHolder other = (InetAddressHolder) obj;
    if (s == null) {
        if (other.s != null) return false;

    } else if (! s.equals (other.s)) return false;

    return true;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/IntegerWithUnit.java" startline="22" endline="26">
public IntegerWithUnit (int value, String unitLabel) {
    this.value = value;
    this.unitLabel = unitLabel;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/IntegerWithUnit.java" startline="28" endline="31">
public int intValue () {
    return value;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/IntegerWithUnit.java" startline="33" endline="36">
public String toString () {
    return value + Labels.getLabel ("unit." + unitLabel);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/IntegerWithUnit.java" startline="38" endline="41">
public int hashCode () {
    return value;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/IntegerWithUnit.java" startline="43" endline="52">
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (obj instanceof IntegerWithUnit) return value == ((IntegerWithUnit) obj).value;

    return false;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/IntegerWithUnit.java" startline="54" endline="61">
public int compareTo (IntegerWithUnit n) {
    if (this == n) return 0;

    if (n == null) return 1;

    return value == n.value ? 0 : value > n.value ? 1 : - 1;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NotAvailable.java" startline="18" endline="18">
private NotAvailable () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NotAvailable.java" startline="23" endline="26">
public String toString () {
    return Config.getConfig ().forScanner ().notAvailableText;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NotAvailable.java" startline="28" endline="35">
@Override
public int compareTo (Object that) {
    if (that == NotScanned.VALUE) return - sortDirection;

    return super.compareTo (that);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NotScanned.java" startline="18" endline="18">
private NotScanned () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NotScanned.java" startline="23" endline="26">
public String toString () {
    return Config.getConfig ().forScanner ().notScannedText;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NotScanned.java" startline="28" endline="35">
@Override
public int compareTo (Object that) {
    if (that == NotAvailable.VALUE) return sortDirection;

    return super.compareTo (that);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NumericRangeList.java" startline="32" endline="43">
public NumericRangeList (Collection < Integer > numbers, boolean displayAsRanges) {
    this.numbers = new int [numbers.size ()];
    int c = 0;
    for (Number n : numbers) {
        this.numbers [c ++] = n.intValue ();
    }
    this.displayAsRanges = displayAsRanges;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NumericRangeList.java" startline="48" endline="94">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    int prevNumber = Integer.MAX_VALUE;
    int rangeStartNumber = 0;
    boolean isRange = false;
    int i = 0;
    if (numbers.length > 0) {
        prevNumber = numbers [0];
        sb.append (prevNumber);
    }
    while (++ i < numbers.length) {
        int curNumber = numbers [i];
        if (displayAsRanges && prevNumber + 1 == curNumber) {
            if (! isRange) {
                isRange = true;
                rangeStartNumber = prevNumber;
            }
        } else {
            if (isRange) {
                sb.append (rangeStartNumber + 1 == prevNumber ? ',' : '-').append (prevNumber);
                isRange = false;
            }
            sb.append (',').append (curNumber);
        }
        prevNumber = curNumber;
    }
    if (isRange) {
        sb.append (rangeStartNumber + 1 == prevNumber ? ',' : '-').append (prevNumber);
    }
    return sb.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/core/values/NumericRangeList.java" startline="96" endline="109">
public int compareTo (NumericRangeList that) {
    int result = this.numbers.length - that.numbers.length;
    if (result == 0) {
        for (int i = 0;
        i < this.numbers.length && result == 0; i ++) {
            result = this.numbers [i] - that.numbers [i];
        }
    }
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/AbstractExporter.java" startline="28" endline="31">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/AbstractExporter.java" startline="33" endline="36">
public void shouldAppendTo (File file) {
    this.append = true;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/AbstractExporter.java" startline="38" endline="41">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    output = new PrintWriter (new OutputStreamWriter (outputStream));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/AbstractExporter.java" startline="43" endline="48">
public void end () throws IOException {
    if (output.checkError ()) throw new IOException ();

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/AbstractExporter.java" startline="50" endline="61">
public Exporter clone () {
    try {
        return (Exporter) super.clone ();
    } catch (CloneNotSupportedException e) {
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/CSVExporter.java" startline="21" endline="24">
public String getId () {
    return "exporter.csv";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/CSVExporter.java" startline="26" endline="29">
public String getFilenameExtension () {
    return "csv";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/CSVExporter.java" startline="31" endline="43">
public void setFetchers (String [] fetcherNames) throws IOException {
    if (! append) {
        output.write (csvSafeString (fetcherNames [0]));
        for (int i = 1;
        i < fetcherNames.length; i ++) {
            output.write (DELIMETER);
            output.write (csvSafeString (fetcherNames [i]));
        }
        output.println ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/CSVExporter.java" startline="45" endline="55">
public void nextAdressResults (Object [] results) throws IOException {
    output.write (csvSafeString (results [0]));
    for (int i = 1;
    i < results.length; i ++) {
        Object result = results [i];
        output.write (DELIMETER);
        output.write (csvSafeString (result));
    }
    output.println ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/CSVExporter.java" startline="60" endline="65">
String csvSafeString (Object o) {
    if (o == null) return "";

    return o.toString ().replace (DELIMETER, DELIMETER_ESCAPED);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExportProcessor.java" startline="28" endline="33">
public ExportProcessor (Exporter exporter, File file, boolean append) {
    this.exporter = exporter;
    this.file = file;
    this.append = append;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExportProcessor.java" startline="40" endline="94">
public void process (ScanningResultList scanningResults, ScanningResultFilter filter) {
    FileOutputStream outputStream = null;
    try {
        if (append) {
            exporter.shouldAppendTo (file);
        }
        outputStream = new FileOutputStream (file, append);
        exporter.start (outputStream, scanningResults.getFeederInfo ());
        List < Fetcher > fetchers = scanningResults.getFetchers ();
        String [] fetcherNames = new String [fetchers.size ()];
        int i = 0;
        for (Fetcher fetcher : fetchers) {
            fetcherNames [i ++] = fetcher.getName ();
        }
        exporter.setFetchers (fetcherNames);
        int index = 0;
        for (ScanningResult scanningResult : scanningResults) {
            if (filter == null || filter.isResultSelected (index, scanningResult)) {
                exporter.nextAdressResults (scanningResult.getValues ().toArray ());
            }
        }
        exporter.end ();
    } catch (ExporterException e) {
        throw e;
    } catch (Exception e) {
        throw new ExporterException ("exporting failed", e);
    } finally {
        if (outputStream != null) {
            try {
                outputStream.close ();
            } catch (Exception e) {
            }
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExporterException.java" startline="18" endline="21">
public ExporterException (String message) {
    super (message);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExporterException.java" startline="23" endline="27">
public ExporterException (String message, Throwable cause) {
    super (message);
    initCause (cause);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExporterRegistry.java" startline="24" endline="32">
public ExporterRegistry (Exporter [] registeredExporters) {
    exporters = new LinkedHashMap < String, Exporter > ();
    for (int i = 0;
    i < registeredExporters.length; i ++) {
        exporters.put (registeredExporters [i].getFilenameExtension (), registeredExporters [i]);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExporterRegistry.java" startline="37" endline="40">
public Iterator < Exporter > iterator () {
    return exporters.values ().iterator ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/ExporterRegistry.java" startline="47" endline="67">
public Exporter createExporter (String fileName) throws ExporterException {
    int extensionPos = fileName.lastIndexOf ('.') + 1;
    String extension = fileName.substring (extensionPos);
    Exporter prototype = exporters.get (extension);
    if (prototype == null) {
        throw new ExporterException ("exporter.unknown");
    }
    try {
        return (Exporter) prototype.clone ();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/IPListExporter.java" startline="29" endline="32">
public String getId () {
    return "exporter.ipList";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/IPListExporter.java" startline="34" endline="37">
public String getFilenameExtension () {
    return "lst";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/IPListExporter.java" startline="39" endline="43">
public void setFetchers (String [] fetcherNames) throws IOException {
    ipFetcherIndex = findFetcherById (IPFetcher.ID, fetcherNames);
    portsFetcherIndex = findFetcherById (PortsFetcher.ID, fetcherNames);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/IPListExporter.java" startline="53" endline="64">
static int findFetcherById (String fetcherId, String [] fetcherNames) {
    String fetcherName = Labels.getLabel (fetcherId);
    for (int i = 0;
    i < fetcherNames.length; i ++) {
        if (fetcherName.equals (fetcherNames [i])) {
            return i;
        }
    }
    throw new ExporterException ("fetcher.notFound");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/IPListExporter.java" startline="66" endline="78">
public void nextAdressResults (Object [] results) throws IOException {
    String address = results [ipFetcherIndex].toString ();
    Object ports = results [portsFetcherIndex];
    if (ports != null && ports instanceof NumericRangeList) {
        for (PortIterator i = new PortIterator (ports.toString ());
        i.hasNext ();) {
            output.println (address + DELIMETER + i.next ());
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/SQLExporter.java" startline="22" endline="25">
public String getId () {
    return "exporter.sql";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/SQLExporter.java" startline="27" endline="30">
public String getFilenameExtension () {
    return "sql";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/SQLExporter.java" startline="32" endline="34">
public void setFetchers (String [] fetcherNames) throws IOException {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/SQLExporter.java" startline="36" endline="39">
public void nextAdressResults (Object [] results) throws IOException {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/TXTExporter.java" startline="24" endline="27">
public String getId () {
    return "exporter.txt";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/TXTExporter.java" startline="29" endline="32">
public String getFilenameExtension () {
    return "txt";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/TXTExporter.java" startline="34" endline="51">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    super.start (outputStream, feederInfo);
    if (! append) {
        output.write (Labels.getLabel ("exporter.txt.generated"));
        output.println (Version.getFullName ());
        output.println (Version.WEBSITE);
        output.println ();
        String scanned = Labels.getLabel ("exporter.txt.scanned");
        scanned = scanned.replaceFirst ("%INFO", feederInfo);
        output.println (scanned);
        output.println (DateFormat.getDateTimeInstance ().format (new Date ()));
        output.println ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/TXTExporter.java" startline="53" endline="68">
public void setFetchers (String [] fetcherNames) throws IOException {
    padLengths = new int [fetcherNames.length];
    for (int i = 0;
    i < fetcherNames.length; i ++) {
        padLengths [i] = fetcherNames [i].length () * 3;
        if (! append) {
            output.write (pad (fetcherNames [i], padLengths [i]));
        }
    }
    if (! append) {
        output.println ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/TXTExporter.java" startline="70" endline="79">
public void nextAdressResults (Object [] results) throws IOException {
    output.write (pad (results [0], padLengths [0]));
    for (int i = 1;
    i < results.length; i ++) {
        Object result = results [i];
        output.write (pad (result, padLengths [i]));
    }
    output.println ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/TXTExporter.java" startline="86" endline="103">
String pad (Object o, int length) {
    if (length < 16) length = 16;

    String s;
    if (o == null) s = "";
    else s = o.toString ();

    if (s.length () >= length) {
        return s;
    }
    return s + "                                                                       ".substring (0, length - s.length ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="31" endline="34">
public String getId () {
    return "exporter.xml";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="36" endline="39">
public String getFilenameExtension () {
    return "xml";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="41" endline="46">
@Override
public void shouldAppendTo (File file) {
    throw new ExporterException ("xml.noAppend");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="48" endline="73">
@Override
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    output = new PrintWriter (new OutputStreamWriter (outputStream, ENCODING));
    output.println ("<?xml version=\"1.0\" encoding=\"" + ENCODING + "\" standalone=\"yes\"?>");
    output.println ("<!-- This file has been generated by " + Version.getFullName () + " -->");
    output.println ("<!-- Visit the website at " + Version.WEBSITE + " -->");
    SimpleDateFormat sdf = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
    output.println ("<scanning_report time=\"" + sdf.format (new Date ()) + "\">");
    int colonPos = feederInfo.indexOf (':');
    String feederName = null;
    if (colonPos >= 0) {
        feederName = feederInfo.substring (0, colonPos);
        feederInfo = feederInfo.substring (colonPos + 1);
    }
    output.print ("\t<feeder" + (feederName != null ? " name=\"" + feederName.trim () + "\"" : "") + ">");
    output.print ("<![CDATA[" + feederInfo.trim () + "]]>");
    output.println ("</feeder>");
    output.println ("\t<hosts>");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="75" endline="84">
@Override
public void end () throws IOException {
    output.println ("\t</hosts>");
    output.println ("</scanning_report>");
    if (output.checkError ()) {
        throw new IOException ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="86" endline="90">
public void setFetchers (String [] fetcherNames) throws IOException {
    ipFetcherIndex = IPListExporter.findFetcherById ("fetcher.ip", fetcherNames);
    this.fetcherNames = fetcherNames;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/exporters/XMLExporter.java" startline="92" endline="105">
public void nextAdressResults (Object [] results) throws IOException {
    output.println ("\t\t<host address=\"" + results [ipFetcherIndex] + "\">");
    for (int i = 0;
    i < results.length; i ++) {
        if (results [i] != null) {
            output.println ("\t\t\t<result name=\"" + fetcherNames [i] + "\"><![CDATA[" + results [i] + "]]></result>");
        }
    }
    output.println ("\t\t</host>");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/AbstractFeeder.java" startline="19" endline="22">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/AbstractFeeder.java" startline="24" endline="28">
@Override
public String toString () {
    return getName () + ": " + getInfo ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FeederException.java" startline="18" endline="21">
public FeederException (String message) {
    super (message);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FeederException.java" startline="23" endline="27">
public FeederException (String message, Throwable cause) {
    super (message);
    initCause (cause);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="46" endline="49">
public String getId () {
    return "feeder.file";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="51" endline="53">
public FileFeeder () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="55" endline="65">
public FileFeeder (String fileName) {
    try {
        readAddresses (new FileReader (fileName));
    } catch (FileNotFoundException e) {
        throw new FeederException ("file.notExists");
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="67" endline="70">
public FileFeeder (Reader reader) {
    readAddresses (reader);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="72" endline="130">
private void readAddresses (Reader reader) {
    BufferedReader fileReader = new BufferedReader (reader);
    currentIndex = 0;
    foundIPAddresses = new LinkedHashMap < String, ScanningSubject > ();
    try {
        String fileLine;
        while ((fileLine = fileReader.readLine ()) != null) {
            Matcher matcher = InetAddressUtils.IP_ADDRESS_REGEX.matcher (fileLine);
            while (matcher.find ()) {
                try {
                    String address = matcher.group ();
                    ScanningSubject subject = foundIPAddresses.get (address);
                    if (subject == null) subject = new ScanningSubject (InetAddress.getByName (address));

                    if (! matcher.hitEnd () && fileLine.charAt (matcher.end ()) == ':') {
                        Matcher portMatcher = PORT_REGEX.matcher (fileLine.substring (matcher.end () + 1));
                        if (portMatcher.lookingAt ()) {
                            subject.addRequestedPort (Integer.valueOf (portMatcher.group ()));
                        }
                    }
                    foundIPAddresses.put (address, subject);
                } catch (UnknownHostException e) {
                    LOG.log (Level.WARNING, "malformedIP", e);
                }
            }
        }
        if (foundIPAddresses.isEmpty ()) {
            throw new FeederException ("file.nothingFound");
        }
    } catch (IOException e) {
        throw new FeederException ("file.errorWhileReading");
    } finally {
        try {
            fileReader.close ();
        } catch (IOException e) {
        }
    }
    foundIPAddressesIterator = foundIPAddresses.values ().iterator ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="132" endline="135">
public int percentageComplete () {
    return Math.round ((float) currentIndex * 100 / foundIPAddresses.size ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="137" endline="140">
public boolean hasNext () {
    return foundIPAddressesIterator.hasNext ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="142" endline="146">
public ScanningSubject next () {
    currentIndex ++;
    return foundIPAddressesIterator.next ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/FileFeeder.java" startline="148" endline="152">
public String getInfo () {
    return Integer.toString (foundIPAddresses.size ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="36" endline="39">
public String getId () {
    return "feeder.random";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="41" endline="43">
public RandomFeeder () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="45" endline="73">
public RandomFeeder (String prototypeIP, String mask, int count) {
    try {
        this.prototypeBytes = InetAddress.getByName (prototypeIP).getAddress ();
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    try {
        this.maskBytes = InetAddressUtils.parseNetmask (mask).getAddress ();
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidNetmask");
    }
    if (count <= 0) {
        throw new FeederException ("random.invalidCount");
    }
    this.currentNumber = 0;
    this.addressCount = count;
    this.currentBytes = new byte [prototypeBytes.length];
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="75" endline="78">
public int percentageComplete () {
    return Math.round ((float) currentNumber * 100 / addressCount);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="80" endline="83">
public boolean hasNext () {
    return currentNumber < addressCount;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="85" endline="99">
public ScanningSubject next () {
    currentNumber ++;
    random.nextBytes (currentBytes);
    try {
        InetAddressUtils.maskPrototypeAddressBytes (currentBytes, maskBytes, prototypeBytes);
        return new ScanningSubject (InetAddress.getByAddress (currentBytes));
    } catch (UnknownHostException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RandomFeeder.java" startline="101" endline="112">
public String getInfo () {
    try {
        return addressCount + ": " + InetAddress.getByAddress (prototypeBytes).getHostAddress () + " / " + InetAddress.getByAddress (maskBytes).getHostAddress ();
    } catch (UnknownHostException e) {
        assert false : e;
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="37" endline="40">
public String getId () {
    return "feeder.range";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="42" endline="44">
public RangeFeeder () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="46" endline="63">
public RangeFeeder (String startIP, String endIP) {
    try {
        this.startIP = this.currentIP = InetAddress.getByName (startIP);
        this.endIP = this.originalEndIP = InetAddress.getByName (endIP);
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    if (InetAddressUtils.greaterThan (this.startIP, this.endIP)) {
        throw new FeederException ("range.greaterThan");
    }
    initPercentageIncrement ();
    this.endIP = InetAddressUtils.increment (this.endIP);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="68" endline="79">
private void initPercentageIncrement () {
    long rawEndIP = OctetConverter.octetsToInt (this.endIP.getAddress ());
    long rawStartIP = OctetConverter.octetsToInt (this.startIP.getAddress ());
    rawEndIP = rawEndIP >= 0 ? rawEndIP : rawEndIP + Integer.MAX_VALUE;
    rawStartIP = rawStartIP >= 0 ? rawStartIP : rawStartIP + Integer.MAX_VALUE;
    percentageIncrement = 100.0 / (rawEndIP - rawStartIP + 1);
    percentageComplete = 0;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="81" endline="85">
public boolean hasNext () {
    return ! currentIP.equals (endIP);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="87" endline="93">
public ScanningSubject next () {
    percentageComplete += percentageIncrement;
    InetAddress prevIP = this.currentIP;
    this.currentIP = InetAddressUtils.increment (prevIP);
    return new ScanningSubject (prevIP);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="95" endline="98">
public int percentageComplete () {
    return (int) Math.round (percentageComplete);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RangeFeeder.java" startline="100" endline="104">
public String getInfo () {
    return startIP.getHostAddress () + " - " + originalEndIP.getHostAddress ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="33" endline="37">
public RescanFeeder (Feeder oldFeeder, String...ips) {
    this.originalFeeder = oldFeeder;
    initAddresses (ips);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="42" endline="45">
public String getId () {
    return originalFeeder.getId ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="47" endline="51">
@Override
public String getName () {
    return Labels.getLabel ("feeder.rescan.of") + originalFeeder.getName ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="58" endline="76">
private int initAddresses (String...ips) {
    if (ips.length == 0) throw new IllegalArgumentException ("no IP addresses specified");

    try {
        addresses = new ArrayList < InetAddress > (ips.length);
        for (String s : ips) {
            addresses.add (InetAddress.getByName (s));
        }
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    return ips.length;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="78" endline="81">
public boolean hasNext () {
    return current < addresses.size ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="83" endline="86">
public ScanningSubject next () {
    return new ScanningSubject (addresses.get (current ++));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="88" endline="91">
public int percentageComplete () {
    return current * 100 / addresses.size ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/RescanFeeder.java" startline="96" endline="99">
public String getInfo () {
    return originalFeeder.getInfo ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/SmartTextFeeder.java" startline="25" endline="28">
public String getId () {
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/SmartTextFeeder.java" startline="30" endline="45">
public SmartTextFeeder (String text) {
    text = text.replaceAll ("\\w+", "");
    int slashPos = text.indexOf ('/');
    if (slashPos >= 0) {
        text = text.substring (0, slashPos);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/SmartTextFeeder.java" startline="47" endline="50">
public boolean hasNext () {
    return false;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/SmartTextFeeder.java" startline="52" endline="55">
public ScanningSubject next () {
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/SmartTextFeeder.java" startline="57" endline="60">
public int percentageComplete () {
    return 0;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/feeders/SmartTextFeeder.java" startline="62" endline="65">
public String getInfo () {
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/AbstractFetcher.java" startline="20" endline="23">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/AbstractFetcher.java" startline="25" endline="28">
public String getFullName () {
    return getName ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/AbstractFetcher.java" startline="30" endline="40">
public String getInfo () {
    try {
        return Labels.getLabel (getId () + ".info");
    } catch (MissingResourceException e) {
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/AbstractFetcher.java" startline="42" endline="46">
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/AbstractFetcher.java" startline="48" endline="51">
public void init () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/AbstractFetcher.java" startline="53" endline="56">
public void cleanup () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/CommentFetcher.java" startline="22" endline="25">
public CommentFetcher (CommentsConfig commentsConfig) {
    this.commentsConfig = commentsConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/CommentFetcher.java" startline="27" endline="30">
public String getId () {
    return ID;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/CommentFetcher.java" startline="32" endline="35">
public Object scan (ScanningSubject subject) {
    return commentsConfig.getComment (subject.getAddress ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherException.java" startline="18" endline="21">
public FetcherException (Throwable cause) {
    super (cause);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherException.java" startline="23" endline="26">
public FetcherException (String label, Throwable cause) {
    super (label, cause);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherException.java" startline="28" endline="31">
public FetcherException (String label) {
    super (label);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="44" endline="62">
public FetcherRegistryImpl (Fetcher [] registeredFetchers, Preferences preferences, PicoContainer parentContainer) {
    this.preferences = preferences;
    MutablePicoContainer prefsContainer = new DefaultPicoContainer (parentContainer);
    this.registeredFetchers = new LinkedHashMap < String, Fetcher > (registeredFetchers.length);
    for (Fetcher fetcher : registeredFetchers) {
        this.registeredFetchers.put (fetcher.getId (), fetcher);
        Class < ? extends FetcherPrefs > prefsClass = fetcher.getPreferencesClass ();
        if (prefsClass != null && prefsContainer.getComponentAdapterOfType (prefsClass) == null) prefsContainer.registerComponentImplementation (prefsClass);

    }
    this.registeredFetchers = Collections.unmodifiableMap (this.registeredFetchers);
    this.prefsContainer = prefsContainer;
    loadSelectedFetchers (preferences);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="64" endline="91">
private void loadSelectedFetchers (Preferences preferences) {
    String fetcherPrefValue = preferences.get (PREFERENCE_SELECTED_FETCHERS, null);
    if (fetcherPrefValue == null) {
        selectedFetchers = new LinkedHashMap < String, Fetcher > ();
        selectedFetchers.put (IPFetcher.ID, registeredFetchers.get (IPFetcher.ID));
        selectedFetchers.put (PingFetcher.ID, registeredFetchers.get (PingFetcher.ID));
        selectedFetchers.put (HostnameFetcher.ID, registeredFetchers.get (HostnameFetcher.ID));
        selectedFetchers.put (PortsFetcher.ID, registeredFetchers.get (PortsFetcher.ID));
    } else {
        String [] fetcherPrefs = fetcherPrefValue.split ("###");
        selectedFetchers = new LinkedHashMap < String, Fetcher > (registeredFetchers.size ());
        for (int i = 0;
        i < fetcherPrefs.length; i ++) {
            Fetcher fetcher = registeredFetchers.get (fetcherPrefs [i]);
            if (fetcher != null) {
                selectedFetchers.put (fetcherPrefs [i], fetcher);
            }
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="93" endline="105">
private void saveSelectedFetchers (Preferences preferences) {
    StringBuffer sb = new StringBuffer ();
    for (String fetcherName : selectedFetchers.keySet ()) {
        sb.append (fetcherName).append ("###");
    }
    String value = sb.toString ();
    if (value.endsWith ("###")) value = value.substring (0, value.length () - 3);

    preferences.put (PREFERENCE_SELECTED_FETCHERS, value);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="106" endline="132">
Point getOrigin () {
    Point outer = ((PolygonFigure) (owner ())).outermostPoint ();
    Point ctr = ((PolygonFigure) (owner ())).center ();
    double len = Geom.length (outer.x, outer.y, ctr.x, ctr.y);
    if (len == 0) {
        return new Point (outer.x - HANDLESIZE / 2, outer.y + HANDLESIZE / 2);
    }
    double u = HANDLESIZE / len;
    if (u > 1.0) {
        return new Point ((outer.x * 3 + ctr.x) / 4, (outer.y * 3 + ctr.y) / 4);
    } else {
        return new Point ((int) (outer.x * (1.0 - u) + ctr.x * u), (int) (outer.y * (1.0 - u) + ctr.y * u));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="134" endline="137">
public void addListener (FetcherRegistryUpdateListener listener) {
    updateListeners.add (listener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="139" endline="142">
public Collection < Fetcher > getRegisteredFetchers () {
    return registeredFetchers.values ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="144" endline="147">
public Collection < Fetcher > getSelectedFetchers () {
    return selectedFetchers.values ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="149" endline="161">
public int getSelectedFetcherIndex (String id) {
    int index = 0;
    for (Fetcher fetcher : selectedFetchers.values ()) {
        if (id.equals (fetcher.getId ())) {
            return index;
        }
        index ++;
    }
    return - 1;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="163" endline="181">
public void updateSelectedFetchers (String [] labels) {
    Map < String, Fetcher > newList = new LinkedHashMap < String, Fetcher > ();
    for (int i = 0;
    i < labels.length; i ++) {
        newList.put (labels [i], registeredFetchers.get (labels [i]));
    }
    selectedFetchers = newList;
    for (FetcherRegistryUpdateListener listener : updateListeners) {
        listener.handleUpdateOfSelectedFetchers (this);
    }
    saveSelectedFetchers (preferences);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="183" endline="191">
public void openPreferencesEditor (Fetcher fetcher) throws FetcherException {
    Class < ? extends FetcherPrefs > prefsClass = fetcher.getPreferencesClass ();
    if (prefsClass == null) throw new FetcherException ("preferences.notAvailable");

    FetcherPrefs prefs = (FetcherPrefs) prefsContainer.getComponentInstanceOfType (prefsClass);
    prefs.openFor (fetcher);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="23" endline="26">
public FilteredPortsFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="28" endline="31">
public String getId () {
    return "fetcher.ports.filtered";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="33" endline="41">
public Object scan (ScanningSubject subject) {
    boolean portsScanned = scanPorts (subject);
    if (! portsScanned) return NotScanned.VALUE;

    SortedSet < Integer > filteredPorts = getFilteredPorts (subject);
    return filteredPorts.size () > 0 ? new NumericRangeList (filteredPorts, displayAsRanges) : null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/HTTPSenderFetcher.java" startline="19" endline="23">
public HTTPSenderFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig, 3128, "GET http://www.urbandplayground.com/?f=vote&band_id=150 HTTP/1.0\r\n\r\n", "\">([^>]+?VOT[^<]+?)</");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/HTTPSenderFetcher.java" startline="25" endline="28">
public String getId () {
    return "fetcher.httpSender";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/HostnameFetcher.java" startline="19" endline="22">
public String getId () {
    return ID;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/HostnameFetcher.java" startline="24" endline="29">
public Object scan (ScanningSubject subject) {
    String hostname = subject.getAddress ().getCanonicalHostName ();
    return subject.getAddress ().getHostAddress ().equals (hostname) ? null : hostname;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/IPFetcher.java" startline="21" endline="24">
public String getId () {
    return ID;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/IPFetcher.java" startline="26" endline="29">
public Object scan (ScanningSubject subject) {
    return new InetAddressHolder (subject.getAddress ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/LastAliveTimeFetcher.java" startline="21" endline="25">
public String getId () {
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/LastAliveTimeFetcher.java" startline="27" endline="31">
public Object scan (ScanningSubject subject) {
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="44" endline="47">
public NetBIOSInfoFetcher (ScannerConfig config) {
    this.config = config;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="49" endline="52">
public String getId () {
    return "fetcher.netbios";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="54" endline="107">
public Object scan (ScanningSubject subject) {
    DatagramSocket socket = null;
    try {
        socket = new DatagramSocket ();
        socket.setSoTimeout (config.pingTimeout);
        socket.connect (subject.getAddress (), NETBIOS_UDP_PORT);
        socket.send (new DatagramPacket (REQUEST_DATA, REQUEST_DATA.length));
        byte [] response = new byte [1024];
        DatagramPacket responsePacket = new DatagramPacket (response, response.length);
        socket.receive (responsePacket);
        if (responsePacket.getLength () < RESPONSE_BASE_LEN) {
            return null;
        }
        int nameCount = response [RESPONSE_BASE_LEN - 1] & 0xFF;
        if (responsePacket.getLength () < RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * (nameCount - 1)) {
            return null;
        }
        return extractNames (response, nameCount);
    } catch (SocketTimeoutException e) {
        return null;
    } catch (SocketException e) {
        return null;
    } catch (Exception e) {
        LOG.log (Level.WARNING, null, e);
        return null;
    } finally {
        if (socket != null) {
            socket.close ();
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="109" endline="141">
static String extractNames (byte [] response, int nameCount) {
    String computerName = name (response, 0);
    String groupName = null;
    for (int i = 1;
    i < nameCount; i ++) {
        if (nameType (response, i) == NAME_TYPE_DOMAIN && (nameFlag (response, i) & GROUP_NAME_FLAG) > 0) {
            groupName = name (response, i);
            break;
        }
    }
    String userName = null;
    for (int i = nameCount - 1;
    i > 0; i --) {
        if (nameType (response, i) == NAME_TYPE_MESSENGER) {
            userName = name (response, i);
            break;
        }
    }
    String macAddress = String.format ("%02X-%02X-%02X-%02X-%02X-%02X", nameByte (response, nameCount, 0), nameByte (response, nameCount, 1), nameByte (response, nameCount, 2), nameByte (response, nameCount, 3), nameByte (response, nameCount, 4), nameByte (response, nameCount, 5));
    return (groupName != null ? groupName + "\\" : "") + (userName != null ? userName + "@" : "") + computerName + " [" + macAddress + "]";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="143" endline="148">
private static String name (byte [] response, int i) {
    return new String (response, RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i, RESPONSE_NAME_LEN).trim ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="150" endline="153">
private static int nameByte (byte [] response, int i, int n) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + n] & 0xFF;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="155" endline="159">
private static int nameFlag (byte [] response, int i) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN + 1] & 0xFF + (response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN + 2] & 0xFF) * 0xFF;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="161" endline="164">
private static int nameType (byte [] response, int i) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN] & 0xFF;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PacketLossFetcher.java" startline="19" endline="22">
public PacketLossFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    super (pingerRegistry, scannerConfig);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="42" endline="46">
public PingFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    this.pingerRegistry = pingerRegistry;
    this.config = scannerConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="48" endline="51">
public String getId () {
    return ID;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="53" endline="57">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PingFetcherPrefs.class;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="59" endline="85">
protected PingResult executePing (ScanningSubject subject) {
    PingResult result = null;
    if (subject.hasParameter (ScanningSubject.PARAMETER_PING_RESULT)) {
        result = (PingResult) subject.getParameter (ScanningSubject.PARAMETER_PING_RESULT);
    } else {
        try {
            result = pinger.ping (subject, config.pingCount);
        } catch (IOException e) {
            LOG.log (Level.WARNING, "Pinging failed", e);
            result = new PingResult (subject.getAddress ());
        }
        subject.setParameter (ScanningSubject.PARAMETER_PING_RESULT, result);
    }
    return result;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="87" endline="99">
public Object scan (ScanningSubject subject) {
    PingResult result = executePing (subject);
    subject.setResultType (result.isAlive () ? ResultType.ALIVE : ResultType.DEAD);
    if (! result.isAlive () && ! config.scanDeadHosts) {
        subject.abortAddressScanning ();
    }
    return result.isAlive () ? new IntegerWithUnit (result.getAverageTime (), "ms") : null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="101" endline="107">
public void init () {
    if (pinger == null) {
        pinger = pingerRegistry.createPinger ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingFetcher.java" startline="109" endline="123">
public void cleanup () {
    try {
        if (pinger != null) {
            pinger.close ();
        }
    } catch (IOException e) {
        throw new FetcherException (e);
    }
    pinger = null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="22" endline="25">
public PingTTLFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    super (pingerRegistry, scannerConfig);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="27" endline="30">
public String getId () {
    return "fetcher.ping.ttl";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="32" endline="37">
public Object scan (ScanningSubject subject) {
    PingResult result = executePing (subject);
    subject.setResultType (result.isAlive () ? ResultType.ALIVE : ResultType.DEAD);
    return result.isAlive () && result.getTTL () > 0 ? new Integer (result.getTTL ()) : null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="44" endline="50">
public PortTextFetcher (ScannerConfig scannerConfig, int defaultPort, String textToSend, String matchingRegexp) {
    this.scannerConfig = scannerConfig;
    this.defaultPort = defaultPort;
    this.textToSend = textToSend;
    this.matchingRegexp = Pattern.compile (matchingRegexp);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="52" endline="108">
public Object scan (ScanningSubject subject) {
    Iterator < Integer > portIterator = subject.isAnyPortRequested () ? subject.requestedPortsIterator () : Collections.singleton (defaultPort).iterator ();
    while (portIterator.hasNext () && ! Thread.currentThread ().isInterrupted ()) {
        Socket socket = new Socket ();
        try {
            socket.connect (new InetSocketAddress (subject.getAddress (), portIterator.next ()), subject.getAdaptedPortTimeout ());
            socket.setTcpNoDelay (true);
            socket.setSoTimeout (scannerConfig.portTimeout * 2);
            socket.setSoLinger (true, 0);
            socket.getOutputStream ().write (textToSend.getBytes ());
            BufferedReader in = new BufferedReader (new InputStreamReader (socket.getInputStream ()));
            String line;
            while ((line = in.readLine ()) != null) {
                Matcher matcher = matchingRegexp.matcher (line);
                if (matcher.find ()) {
                    subject.setResultType (ResultType.WITH_PORTS);
                    return matcher.group (1);
                }
            }
        } catch (ConnectException e) {
        } catch (SocketTimeoutException e) {
        } catch (SocketException e) {
        } catch (IOException e) {
            LOG.log (Level.FINE, subject.getAddress ().toString (), e);
        } finally {
            try {
                socket.close ();
            } catch (IOException e) {
            }
        }
    }
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="110" endline="114">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PortTextFetcherPrefs.class;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="116" endline="119">
public String getTextToSend () {
    return textToSend;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="121" endline="124">
public void setTextToSend (String textToSend) {
    this.textToSend = textToSend;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="126" endline="129">
public Pattern getMatchingRegexp () {
    return matchingRegexp;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortTextFetcher.java" startline="131" endline="134">
public void setMatchingRegexp (Pattern matchingRegexp) {
    this.matchingRegexp = matchingRegexp;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="46" endline="49">
public PortsFetcher (ScannerConfig scannerConfig) {
    this.config = scannerConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="51" endline="54">
public String getId () {
    return ID;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="56" endline="61">
@Override
public String getFullName () {
    int numPorts = new PortIterator (config.portString).size ();
    return getName () + " [" + numPorts + (config.useRequestedPorts ? "+" : "") + "]";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="63" endline="67">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PortsFetcherPrefs.class;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="75" endline="147">
@SuppressWarnings("unchecked")
protected boolean scanPorts (ScanningSubject subject) {
    SortedSet < Integer > openPorts = getOpenPorts (subject);
    if (openPorts == null) {
        openPorts = new TreeSet < Integer > ();
        SortedSet < Integer > filteredPorts = new TreeSet < Integer > ();
        subject.setParameter (PARAMETER_OPEN_PORTS, openPorts);
        subject.setParameter (PARAMETER_FILTERED_PORTS, filteredPorts);
        int portTimeout = subject.getAdaptedPortTimeout ();
        Socket socket = null;
        Iterator < Integer > portsIterator = portIteratorPrototype.copy ();
        if (config.useRequestedPorts && subject.isAnyPortRequested ()) {
            portsIterator = new SequenceIterator < Integer > (portsIterator, subject.requestedPortsIterator ());
        }
        if (! portsIterator.hasNext ()) {
            return false;
        }
        while (portsIterator.hasNext () && ! Thread.currentThread ().isInterrupted ()) {
            socket = new Socket ();
            int port = portsIterator.next ();
            try {
                socket.setReuseAddress (true);
                socket.setReceiveBufferSize (32);
                socket.connect (new InetSocketAddress (subject.getAddress (), port), portTimeout);
                socket.setSoLinger (true, 0);
                socket.setSendBufferSize (16);
                socket.setTcpNoDelay (true);
                if (socket.isConnected ()) {
                    openPorts.add (port);
                }
            } catch (SocketTimeoutException e) {
                filteredPorts.add (port);
            } catch (IOException e) {
                assert e instanceof ConnectException : e;
            } finally {
                try {
                    socket.close ();
                } catch (IOException e) {
                }
            }
        }
    }
    return true;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="153" endline="157">
@SuppressWarnings("unchecked")
protected SortedSet < Integer > getFilteredPorts (ScanningSubject subject) {
    return (SortedSet < Integer >) subject.getParameter (PARAMETER_FILTERED_PORTS);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="163" endline="167">
@SuppressWarnings("unchecked")
protected SortedSet < Integer > getOpenPorts (ScanningSubject subject) {
    return (SortedSet < Integer >) subject.getParameter (PARAMETER_OPEN_PORTS);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="172" endline="185">
public Object scan (ScanningSubject subject) {
    boolean portsScanned = scanPorts (subject);
    if (! portsScanned) return NotScanned.VALUE;

    SortedSet < Integer > openPorts = getOpenPorts (subject);
    boolean portsFound = openPorts.size () > 0;
    if (portsFound) {
        subject.setResultType (ResultType.WITH_PORTS);
    }
    return portsFound ? new NumericRangeList (openPorts, displayAsRanges) : null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/PortsFetcher.java" startline="187" endline="191">
public void init () {
    this.portIteratorPrototype = new PortIterator (config.portString);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/WebDetectFetcher.java" startline="19" endline="22">
public WebDetectFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig, 80, "HEAD /robots.txt HTTP/1.0\r\n\r\n", "^[Ss]erver:\\s+(.*)$");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/fetchers/WebDetectFetcher.java" startline="24" endline="27">
public String getId () {
    return "fetcher.webDetect";
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AboutDialog.java" startline="27" endline="95">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.about"));
    shell.setSize (new Point (400, 373));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLocation (10, 10);
    if (shell.getImage () != null) {
        iconLabel.setImage (shell.getImage ());
    }
    iconLabel.pack ();
    int leftBound = iconLabel.getBounds ().width + 20;
    String aboutText = Labels.getLabel ("text.about");
    aboutText = aboutText.replaceAll ("%NAME", Version.NAME);
    aboutText = aboutText.replaceAll ("%VERSION", Version.getVersion ());
    aboutText = aboutText.replaceAll ("%DATE", Version.getBuildDate ());
    aboutText = aboutText.replaceAll ("%COPYLEFT", Version.COPYLEFT);
    Label aboutLabel = new Label (shell, SWT.NONE);
    aboutLabel.setText (aboutText);
    aboutLabel.setLocation (leftBound, 10);
    aboutLabel.pack ();
    final Label websiteLabel = new Label (shell, SWT.NONE);
    websiteLabel.setForeground (new Color (null, 0, 0, 0xCC));
    websiteLabel.setCursor (shell.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    websiteLabel.setText (Version.WEBSITE);
    websiteLabel.setLocation (leftBound, 10 + aboutLabel.getBounds ().height);
    websiteLabel.addListener (SWT.MouseUp, new Listener () {
        public void handleEvent (Event event) {
            BrowserLauncher.openURL (Version.WEBSITE);
            websiteLabel.setForeground (new Color (null, 0x88, 0, 0xAA));
        }}

    );
    websiteLabel.pack ();
    String systemText = Labels.getLabel ("text.about.system");
    systemText = systemText.replaceAll ("%JAVA", System.getProperty ("java.vm.vendor") + " " + System.getProperty ("java.runtime.version"));
    systemText = systemText.replaceAll ("%OS", System.getProperty ("os.name") + " " + System.getProperty ("os.version") + " (" + System.getProperty ("os.arch") + ")");
    Label systemLabel = new Label (shell, SWT.NONE);
    systemLabel.setText (systemText);
    systemLabel.setLocation (leftBound, 20 + aboutLabel.getBounds ().height + websiteLabel.getBounds ().height);
    systemLabel.pack ();
    Button button = createCloseButton ();
    Text licenseText = new Text (shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.WRAP);
    licenseText.setBounds (leftBound, systemLabel.getBounds ().y + systemLabel.getBounds ().height + 10, shell.getClientArea ().width - leftBound - 10, button.getLocation ().y - systemLabel.getBounds ().y - systemLabel.getBounds ().height - 20);
    licenseText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    licenseText.setText ("Licensed under the GNU General Public License Version 2\n\n" + Version.NAME + " is free software; you can redistribute it and/or " + "modify it under the terms of the GNU General Public License " + "as published by the Free Software Foundation; either version 2 " + "of the License, or (at your option) any later version.\n\n" + Version.NAME + " is distributed in the hope that it will be useful, " + "but WITHOUT ANY WARRANTY; without even the implied warranty of " + "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the " + "GNU General Public License for more details.\n\n" + "You should have received a copy of the GNU General Public License " + "along with this program; if not, write to the Free Software " + "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA " + "02110-1301, USA, or visit http://www.fsf.org/");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AboutDialog.java" startline="59" endline="63">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.WEBSITE);
    websiteLabel.setForeground (new Color (null, 0x88, 0, 0xAA));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="35" endline="64">
public void open () {
    if (shell == null || shell.isDisposed ()) {
        createShell ();
    }
    if (shell.getParent () != null) {
        Rectangle parentBounds = shell.getParent ().getBounds ();
        Rectangle childBounds = shell.getBounds ();
        int x = parentBounds.x + (parentBounds.width - childBounds.width) / 2;
        int y = parentBounds.y + (parentBounds.height - childBounds.height) / 2;
        shell.setLocation (x, y);
    }
    shell.open ();
    Display display = Display.getCurrent ();
    while (shell != null && ! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) display.sleep ();

    }
    shell = null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="71" endline="96">
protected final void createShell () {
    Shell parent = null;
    try {
        parent = Display.getCurrent ().getShells () [0];
    } catch (Exception e) {
    }
    shell = new Shell (parent, getShellStyle ());
    Image icon = null;
    if (parent != null) {
        icon = parent.getImage ();
    }
    if (icon == null) {
        icon = new Image (shell.getDisplay (), Labels.getInstance ().getImageAsStream ("icon"));
    }
    shell.setImage (icon);
    populateShell ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="101" endline="104">
protected int getShellStyle () {
    return SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="112" endline="141">
protected void positionButtons (Button okButton, Button cancelButton) {
    shell.setDefaultButton (okButton);
    Rectangle clientArea = shell.getClientArea ();
    Point size = okButton.computeSize (85, SWT.DEFAULT);
    okButton.setSize (size);
    if (cancelButton != null) {
        cancelButton.setSize (size);
        if (Platform.MAC_OS || Platform.LINUX) {
            Button fooButton = okButton;
            okButton = cancelButton;
            cancelButton = fooButton;
        }
        int distance = size.y / 3;
        cancelButton.setLocation (clientArea.width - size.x - 10, clientArea.height - size.y - 10);
        okButton.setLocation (clientArea.width - size.x * 2 - 10 - distance, clientArea.height - size.y - 10);
    } else {
        okButton.setLocation (clientArea.width - size.x - 10, clientArea.height - size.y - 10);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="150" endline="167">
protected void positionButtonsInFormLayout (Button okButton, Button cancelButton, Control control) {
    shell.setDefaultButton (okButton);
    if (Platform.MAC_OS || Platform.LINUX) {
        Button fooButton = okButton;
        okButton = cancelButton;
        cancelButton = fooButton;
    }
    cancelButton.pack ();
    cancelButton.setLayoutData (LayoutHelper.formData (Math.max (85, cancelButton.getSize ().x), SWT.DEFAULT, null, new FormAttachment (control, 0, SWT.RIGHT), new FormAttachment (control, 8), null));
    okButton.pack ();
    Point okSize = okButton.getSize ();
    okButton.setLayoutData (LayoutHelper.formData (Math.max (85, okSize.x), SWT.DEFAULT, null, new FormAttachment (cancelButton, - okSize.y / 3), new FormAttachment (control, 8), null));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="172" endline="199">
protected Button createCloseButton () {
    Button button = new Button (shell, SWT.NONE);
    button.setText (Labels.getLabel ("button.close"));
    positionButtons (button, null);
    button.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
            shell.dispose ();
        }}

    );
    if (Platform.MAC_OS) {
        Point size = shell.getSize ();
        shell.setSize (size.x, size.y - button.getSize ().y);
        button.setVisible (false);
    } else {
        button.setFocus ();
    }
    return button;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="180" endline="184">
public void handleEvent (Event event) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="208" endline="211">
public UpButtonListener (List list) {
    this.list = list;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="213" endline="239">
public void handleEvent (Event event) {
    if (list.getSelectionCount () == 0 || list.isSelected (0)) {
        return;
    }
    int [] selectedItems = list.getSelectionIndices ();
    for (int i = 0;
    i < selectedItems.length; i ++) {
        int index = selectedItems [i];
        list.deselect (index);
        String oldItem = list.getItem (index - 1);
        list.setItem (index - 1, list.getItem (index));
        list.setItem (index, oldItem);
        list.select (index - 1);
    }
    if (! Platform.MAC_OS) {
        list.setTopIndex (selectedItems [0] - 2);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="247" endline="250">
public DownButtonListener (List list) {
    this.list = list;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/AbstractModalDialog.java" startline="252" endline="278">
public void handleEvent (Event event) {
    if (list.getSelectionCount () == 0 || list.isSelected (list.getItemCount () - 1)) {
        return;
    }
    int [] selectedItems = list.getSelectionIndices ();
    for (int i = selectedItems.length - 1;
    i >= 0; i --) {
        int index = selectedItems [i];
        list.deselect (index);
        String oldItem = list.getItem (index + 1);
        list.setItem (index + 1, list.getItem (index));
        list.setItem (index, oldItem);
        list.select (index + 1);
    }
    if (! Platform.MAC_OS) {
        list.setTopIndex (selectedItems [0]);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="47" endline="52">
public ConfigDetectorDialog (ScannerConfig config, ConfigDetector configDetector) {
    this.config = config;
    this.configDetector = configDetector;
    this.configDetector.setCallback (this);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="54" endline="110">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.configDetect"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 10));
    Label infoLabel = new Label (shell, SWT.WRAP);
    infoLabel.setText (Labels.getLabel ("text.configDetect"));
    infoLabel.setLayoutData (LayoutHelper.formData (340, SWT.DEFAULT, new FormAttachment (0), new FormAttachment (100), new FormAttachment (0), null));
    Label hostLabel = new Label (shell, SWT.WRAP);
    hostLabel.setText (Labels.getLabel ("text.configDetect.host"));
    hostLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (infoLabel), null));
    hostText = new Text (shell, SWT.BORDER);
    hostText.setText ("www");
    hostText.setLayoutData (LayoutHelper.formData (100, SWT.DEFAULT, new FormAttachment (hostLabel), null, new FormAttachment (hostLabel, 0, SWT.CENTER), null));
    Label portLabel = new Label (shell, SWT.WRAP);
    portLabel.setText (Labels.getLabel ("text.configDetect.port"));
    portLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (hostText, 10), null, new FormAttachment (infoLabel), null));
    portText = new Text (shell, SWT.BORDER);
    portText.setText ("80");
    portText.setLayoutData (LayoutHelper.formData (30, SWT.DEFAULT, new FormAttachment (portLabel), null, new FormAttachment (portLabel, 0, SWT.CENTER), null));
    Label tryLabel = new Label (shell, SWT.NONE);
    tryLabel.setText (Labels.getLabel ("text.configDetect.tries"));
    tryLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (hostLabel, 10), null));
    tryCountLabel = new Label (shell, SWT.NONE);
    tryCountLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (tryLabel, - 5), new FormAttachment (100), new FormAttachment (hostLabel, 10), null));
    tryProgressBar = new ProgressBar (shell, SWT.NONE);
    tryProgressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (tryLabel), null));
    Label successLabel = new Label (shell, SWT.NONE);
    successLabel.setText (Labels.getLabel ("text.configDetect.successes"));
    successLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (tryProgressBar, 10), null));
    successCountLabel = new Label (shell, SWT.NONE);
    successCountLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (successLabel, - 5), new FormAttachment (100), new FormAttachment (tryProgressBar, 10), null));
    successProgressBar = new ProgressBar (shell, SWT.NONE);
    successProgressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (successLabel), null));
    startButton = new Button (shell, SWT.NONE);
    startButton.setText (Labels.getLabel ("button.start"));
    startButton.addListener (SWT.Selection, new StartButtonListener ());
    closeButton = new Button (shell, SWT.NONE);
    closeButton.setText (Labels.getLabel ("button.close"));
    closeButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
        }}

    );
    positionButtonsInFormLayout (startButton, closeButton, successProgressBar);
    shell.pack ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="101" endline="104">
public void handleEvent (Event event) {
    shell.close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="112" endline="123">
public void onDetectorTry () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            tryCount ++;
            tryCountLabel.setText (Integer.toString (tryCount));
            tryProgressBar.setSelection (tryCount);
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="116" endline="121">
public void run () {
    tryCount ++;
    tryCountLabel.setText (Integer.toString (tryCount));
    tryProgressBar.setSelection (tryCount);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="125" endline="136">
public void onDetectorSuccess () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            successCount ++;
            successCountLabel.setText (Integer.toString (successCount));
            successProgressBar.setSelection (successCount);
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="129" endline="134">
public void run () {
    successCount ++;
    successCountLabel.setText (Integer.toString (successCount));
    successProgressBar.setSelection (successCount);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="138" endline="150">
private void onStart () {
    startButton.setEnabled (false);
    closeButton.setEnabled (false);
    tryCount = 0;
    tryCountLabel.setText ("0");
    tryProgressBar.setMaximum (configDetector.getInitialConnectCount ());
    tryProgressBar.setSelection (0);
    successCount = 0;
    successCountLabel.setText ("0");
    successProgressBar.setMaximum (configDetector.getInitialSuccessCount ());
    successProgressBar.setSelection (0);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="152" endline="179">
private void onFinish () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            successProgressBar.setMaximum (configDetector.getExpectedSuccessfulConnectCount ());
            startButton.setEnabled (true);
            closeButton.setEnabled (true);
            if (configDetector.getExpectedSuccessfulConnectCount () > configDetector.getActualSuccessfulConnectCount ()) {
                MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_ERROR);
                box.setText (Labels.getLabel ("title.configDetect"));
                box.setMessage (String.format (Labels.getLabel ("text.configDetect.failed"), configDetector.getInitialConnectCount (), configDetector.getExpectedSuccessfulConnectCount (), configDetector.getActualSuccessfulConnectCount ()));
                box.open ();
            } else {
                MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_INFORMATION);
                box.setText (Labels.getLabel ("title.configDetect"));
                box.setMessage (String.format (Labels.getLabel ("text.configDetect.success"), config.maxThreads));
                box.open ();
            }
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="156" endline="177">
public void run () {
    successProgressBar.setMaximum (configDetector.getExpectedSuccessfulConnectCount ());
    startButton.setEnabled (true);
    closeButton.setEnabled (true);
    if (configDetector.getExpectedSuccessfulConnectCount () > configDetector.getActualSuccessfulConnectCount ()) {
        MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_ERROR);
        box.setText (Labels.getLabel ("title.configDetect"));
        box.setMessage (String.format (Labels.getLabel ("text.configDetect.failed"), configDetector.getInitialConnectCount (), configDetector.getExpectedSuccessfulConnectCount (), configDetector.getActualSuccessfulConnectCount ()));
        box.open ();
    } else {
        MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_INFORMATION);
        box.setText (Labels.getLabel ("title.configDetect"));
        box.setMessage (String.format (Labels.getLabel ("text.configDetect.success"), config.maxThreads));
        box.open ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="183" endline="198">
public void handleEvent (Event event) {
    final InetSocketAddress socketAddress = new InetSocketAddress (hostText.getText (), Integer.parseInt (portText.getText ()));
    onStart ();
    new Thread () {
        public void run () {
            configDetector.detectMaxThreads (socketAddress);
            onFinish ();
        }}

    .start ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="192" endline="196">
public void run () {
    configDetector.detectMaxThreads (socketAddress);
    onFinish ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="37" endline="42">
public DetailsWindow (GUIConfig guiConfig, CommentsConfig commentsConfig, ResultTable resultTable) {
    this.guiConfig = guiConfig;
    this.commentsConfig = commentsConfig;
    this.resultTable = resultTable;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="44" endline="48">
@Override
protected int getShellStyle () {
    return SWT.TOOL | SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="50" endline="87">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.details"));
    shell.setLayout (LayoutHelper.formLayout (3, 3, 3));
    shell.setSize (guiConfig.detailsWindowSize);
    ScanningResult result = resultTable.getSelectedResult ();
    commentsText = new Text (shell, SWT.BORDER);
    commentsText.pack ();
    commentsText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), null, new FormAttachment (100)));
    CommentsTextListener commentsTextListener = new CommentsTextListener ();
    commentsText.addFocusListener (commentsTextListener);
    commentsText.addModifyListener (commentsTextListener);
    String comment = commentsConfig.getComment (result.getAddress ());
    if (comment != null) {
        commentsText.setText (comment);
    } else {
        commentsTextListener.focusLost (null);
    }
    Text detailsText = new Text (shell, SWT.BORDER | SWT.READ_ONLY | SWT.MULTI | SWT.V_SCROLL | SWT.WRAP);
    detailsText.setText (result.toString ());
    detailsText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    detailsText.setTabs (32);
    detailsText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (0), new FormAttachment (commentsText)));
    Listener traverseListener = new TraverseListener ();
    detailsText.addListener (SWT.Traverse, traverseListener);
    commentsText.addListener (SWT.Traverse, traverseListener);
    shell.layout ();
    detailsText.forceFocus ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="93" endline="100">
public void focusGained (FocusEvent e) {
    if (commentsText.getText ().equals (defaultText)) {
        commentsText.setText ("");
        commentsText.setForeground (commentsText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_FOREGROUND));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="102" endline="109">
public void focusLost (FocusEvent e) {
    if (commentsText.getText ().length () == 0) {
        commentsText.setText (defaultText);
        commentsText.setForeground (commentsText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="111" endline="121">
public void modifyText (ModifyEvent e) {
    String newComment = commentsText.getText ();
    if (! defaultText.equals (newComment)) {
        commentsConfig.setComment (resultTable.getSelectedResult ().getAddress (), newComment);
        resultTable.updateResult (resultTable.getSelectionIndex (), CommentFetcher.ID, newComment);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/DetailsWindow.java" startline="126" endline="134">
public void handleEvent (Event e) {
    if (e.detail == SWT.TRAVERSE_RETURN) {
        guiConfig.detailsWindowSize = shell.getSize ();
        shell.close ();
        shell.dispose ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="31" endline="34">
public EditFavoritesDialog (FavoritesConfig favoritesConfig) {
    this.favoritesConfig = favoritesConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="36" endline="104">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.favorite.edit"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setText (Labels.getLabel ("text.favorite.edit"));
    favoritesList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    favoritesList.setLayoutData (LayoutHelper.formData (330, 200, new FormAttachment (0), null, new FormAttachment (messageLabel), null));
    for (String name : favoritesConfig) {
        favoritesList.add (name);
    }
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    upButton.addListener (SWT.Selection, new UpButtonListener (favoritesList));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    downButton.addListener (SWT.Selection, new DownButtonListener (favoritesList));
    Button renameButton = new Button (shell, SWT.NONE);
    renameButton.setText (Labels.getLabel ("button.rename"));
    Listener renameListener = new RenameListener ();
    renameButton.addListener (SWT.Selection, renameListener);
    favoritesList.addListener (SWT.MouseDoubleClick, renameListener);
    Button deleteButton = new Button (shell, SWT.NONE);
    deleteButton.setText (Labels.getLabel ("button.delete"));
    deleteButton.addListener (SWT.Selection, new DeleteListener ());
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (messageLabel), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (upButton), null));
    renameButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), null, new FormAttachment (downButton, 10), null));
    deleteButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (renameButton), null));
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, favoritesList);
    shell.pack ();
    okButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            saveFavorites ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            shell.close ();
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="91" endline="95">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    saveFavorites ();
    shell.close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="99" endline="102">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="106" endline="110">
private void saveFavorites () {
    favoritesConfig.update (favoritesList.getItems ());
    favoritesConfig.store ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="114" endline="117">
public void handleEvent (Event event) {
    favoritesList.remove (favoritesList.getSelectionIndices ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditFavoritesDialog.java" startline="122" endline="135">
public void handleEvent (Event event) {
    int index = favoritesList.getSelectionIndex ();
    InputDialog prompt = new InputDialog (Labels.getLabel ("title.rename"), "");
    String oldName = favoritesList.getItem (index);
    String newName = prompt.open (oldName);
    if (newName != null) {
        favoritesConfig.add (newName, favoritesConfig.remove (oldName));
        favoritesList.setItem (index, newName);
    }
    favoritesList.forceFocus ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="48" endline="52">
public EditOpenersDialog (FetcherRegistry fetcherRegistry, OpenersConfig openersConfig) {
    this.fetcherRegistry = fetcherRegistry;
    this.openersConfig = openersConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="54" endline="150">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.openers.edit"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setText (Labels.getLabel ("text.openers.edit"));
    openersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    editFieldsGroup = new Group (shell, SWT.NONE);
    openersList.setLayoutData (LayoutHelper.formData (135, 200, null, null, new FormAttachment (messageLabel, 10), new FormAttachment (editFieldsGroup, 0, SWT.BOTTOM)));
    for (String name : openersConfig) {
        openersList.add (name);
    }
    openersList.addListener (SWT.Selection, new ItemSelectListener ());
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    upButton.addListener (SWT.Selection, new UpButtonListener (openersList));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    downButton.addListener (SWT.Selection, new DownButtonListener (openersList));
    Button addButton = new Button (shell, SWT.NONE);
    addButton.setText (Labels.getLabel ("button.add"));
    addButton.addListener (SWT.Selection, new AddButtonListener ());
    Button deleteButton = new Button (shell, SWT.NONE);
    deleteButton.setText (Labels.getLabel ("button.delete"));
    deleteButton.addListener (SWT.Selection, new DeleteButtonListener ());
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (messageLabel, 10), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (upButton), null));
    addButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (downButton, 16), null));
    deleteButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), null, new FormAttachment (addButton), null));
    editFieldsGroup.setLayoutData (LayoutHelper.formData (new FormAttachment (upButton, 10), null, new FormAttachment (messageLabel, 10), null));
    RowLayout rowLayout = new RowLayout (SWT.VERTICAL);
    rowLayout.fill = true;
    rowLayout.justify = true;
    rowLayout.marginTop = 13;
    editFieldsGroup.setLayout (rowLayout);
    Label openerNameLabel = new Label (editFieldsGroup, SWT.NONE);
    openerNameLabel.setText (Labels.getLabel ("text.openers.name"));
    openerNameLabel.setSize (SWT.DEFAULT, 18);
    openerNameText = new Text (editFieldsGroup, SWT.BORDER);
    openerNameText.setSize (SWT.DEFAULT, 22);
    openerNameText.addListener (SWT.KeyUp, new OpenerNameChange ());
    isInTerminalCheckbox = new Button (editFieldsGroup, SWT.CHECK);
    isInTerminalCheckbox.setText (Labels.getLabel ("text.openers.inTerminal"));
    isInTerminalCheckbox.setSize (SWT.DEFAULT, 18);
    Label openerStringLabel = new Label (editFieldsGroup, SWT.NONE);
    openerStringLabel.setText (Labels.getLabel ("text.openers.string"));
    openerStringLabel.setSize (SWT.DEFAULT, 18);
    openerStringText = new Text (editFieldsGroup, SWT.BORDER);
    openerStringText.setSize (SWT.DEFAULT, 22);
    Button hintButton = new Button (editFieldsGroup, SWT.NONE);
    hintButton.setText (Labels.getLabel ("text.openers.hint"));
    hintButton.addListener (SWT.Selection, new HintButtonListener ());
    Label openerDirLabel = new Label (editFieldsGroup, SWT.NONE);
    openerDirLabel.setText (Labels.getLabel ("text.openers.directory"));
    openerDirLabel.setSize (SWT.DEFAULT, 18);
    workingDirText = new Text (editFieldsGroup, SWT.BORDER);
    workingDirText.setSize (SWT.DEFAULT, 22);
    editFieldsGroup.layout ();
    editFieldsGroup.pack ();
    Button closeButton = createCloseButton ();
    closeButton.setLayoutData (LayoutHelper.formData (85, SWT.DEFAULT, null, new FormAttachment (editFieldsGroup, 0, SWT.RIGHT), new FormAttachment (editFieldsGroup, 6), null));
    shell.pack ();
    openersList.select (0);
    loadFieldsForSelection ();
    shell.addListener (SWT.Close, new Listener () {
        public void handleEvent (Event e) {
            saveOpeners ();
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="145" endline="148">
public void handleEvent (Event e) {
    saveOpeners ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="152" endline="160">
private void saveOpeners () {
    saveCurrentFields ();
    openersConfig.update (openersList.getItems ());
    openersConfig.store ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="162" endline="172">
private void saveCurrentFields () {
    String openerName = openerNameText.getText ();
    if (openerName.length () == 0 || openersList.getItemCount () == 0) return;

    currentSelectionIndex = openersList.getSelectionIndex ();
    File workingDir = workingDirText.getText ().length () > 0 ? new File (workingDirText.getText ()) : null;
    openersConfig.add (openerName, new OpenersConfig.Opener (openerStringText.getText (), isInTerminalCheckbox.getSelection (), workingDir));
    openersList.setItem (currentSelectionIndex, openerName);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="174" endline="187">
private void loadFieldsForSelection () {
    currentSelectionIndex = openersList.getSelectionIndex ();
    if (currentSelectionIndex < 0) return;

    String openerName = openersList.getItem (currentSelectionIndex);
    editFieldsGroup.setText (openerName);
    Opener opener = openersConfig.getOpener (openerName);
    openerNameText.setText (openerName);
    openerStringText.setText (opener.execString);
    workingDirText.setText (opener.workingDir != null ? opener.workingDir.toString () : "");
    isInTerminalCheckbox.setSelection (opener.inTerminal);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="192" endline="205">
public void handleEvent (Event event) {
    StringBuilder message = new StringBuilder (Labels.getLabel ("text.openers.hintText"));
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        message.append ("${").append (fetcher.getId ()).append ("}   - ").append (fetcher.getName ()).append ('\n');
    }
    MessageBox mb = new MessageBox (shell, SWT.ICON_INFORMATION | SWT.OK);
    mb.setText (Labels.getLabel ("title.openers.edit"));
    mb.setMessage (message.toString ());
    mb.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="211" endline="217">
public void handleEvent (Event event) {
    int firstIndex = openersList.getSelectionIndex ();
    openersList.remove (openersList.getSelectionIndices ());
    openersList.setSelection (firstIndex);
    loadFieldsForSelection ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="223" endline="245">
public void handleEvent (Event event) {
    saveCurrentFields ();
    currentSelectionIndex = openersList.getSelectionIndex ();
    if (currentSelectionIndex < 0) {
        currentSelectionIndex = openersList.getItemCount ();
    }
    String newName = Labels.getLabel ("text.openers.new");
    openersList.add (newName, currentSelectionIndex);
    openersList.setSelection (currentSelectionIndex);
    editFieldsGroup.setText (newName);
    openerNameText.setText (newName);
    openerStringText.setText ("${fetcher.ip}");
    workingDirText.setText ("");
    isInTerminalCheckbox.setSelection (false);
    openerNameText.forceFocus ();
    openerNameText.setSelection (0, newName.length ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="251" endline="258">
public void handleEvent (Event event) {
    if (openersList.getSelectionCount () == 0) return;

    saveCurrentFields ();
    loadFieldsForSelection ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/EditOpenersDialog.java" startline="264" endline="269">
public void handleEvent (Event event) {
    String name = openerNameText.getText ();
    editFieldsGroup.setText (name);
    openersList.setItem (currentSelectionIndex, name);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/GettingStartedDialog.java" startline="31" endline="83">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.gettingStarted"));
    shell.setSize (new Point (400, 240));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLocation (10, 10);
    if (parent != null) {
        iconLabel.setImage (parent.getImage ());
        shell.setImage (parent.getImage ());
    }
    iconLabel.pack ();
    int leftBound = iconLabel.getBounds ().width + 20;
    closeButton = new Button (shell, SWT.NONE);
    closeButton.setText (Labels.getLabel ("button.close"));
    nextButton = new Button (shell, SWT.NONE);
    nextButton.setText (Labels.getLabel ("button.next"));
    nextButton.setFocus ();
    positionButtons (nextButton, closeButton);
    gettingStartedText = new Text (shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.WRAP);
    gettingStartedText.setBounds (leftBound, 10, shell.getClientArea ().width - leftBound - 10, closeButton.getLocation ().y - 20);
    gettingStartedText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    closeButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
            shell.dispose ();
        }}

    );
    nextButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            activePage ++;
            displayActivePage ();
        }}

    );
    displayActivePage ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/GettingStartedDialog.java" startline="67" endline="71">
public void handleEvent (Event event) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/GettingStartedDialog.java" startline="75" endline="79">
public void handleEvent (Event event) {
    activePage ++;
    displayActivePage ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/GettingStartedDialog.java" startline="85" endline="102">
void displayActivePage () {
    String text = Labels.getLabel ("text.gettingStarted" + activePage);
    gettingStartedText.setText (text);
    try {
        Labels.getLabel ("text.gettingStarted" + (activePage + 1));
    } catch (Exception e) {
        nextButton.setEnabled (false);
        shell.setDefaultButton (closeButton);
        closeButton.setFocus ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InfoDialog.java" startline="32" endline="36">
public InfoDialog (String title, String title2) {
    this.title = title;
    this.title2 = title2;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InfoDialog.java" startline="38" endline="65">
@Override
protected void populateShell () {
    shell.setText (title);
    shell.setLayout (LayoutHelper.formLayout (10, 10, 15));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    iconLabel.setImage (shell.getImage ());
    Label titleLabel = new Label (shell, SWT.NONE);
    FontData sysFontData = shell.getDisplay ().getSystemFont ().getFontData () [0];
    titleLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (iconLabel), null, new FormAttachment (0), null));
    titleLabel.setFont (new Font (null, sysFontData.getName (), sysFontData.getHeight () + 3, sysFontData.getStyle () | SWT.BOLD));
    titleLabel.setText (title2);
    Text statsText = new Text (shell, SWT.MULTI | SWT.READ_ONLY);
    statsText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_BACKGROUND));
    statsText.setLayoutData (LayoutHelper.formData (new FormAttachment (iconLabel), null, new FormAttachment (titleLabel), null));
    statsText.setText (message);
    statsText.pack ();
    Button button = createCloseButton ();
    Point buttonSize = button.getSize ();
    button.setLayoutData (LayoutHelper.formData (buttonSize.x, buttonSize.y, null, new FormAttachment (statsText, 30, SWT.RIGHT), new FormAttachment (statsText), null));
    shell.pack ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InfoDialog.java" startline="70" endline="73">
public String getMessage () {
    return message;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InfoDialog.java" startline="78" endline="81">
public void setMessage (String message) {
    this.message = message;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="34" endline="40">
public InputDialog (String title, String message) {
    populateShell ();
    shell.setText (title);
    messageLabel.setText (message);
    messageLabel.pack ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="42" endline="78">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    text = new Text (shell, SWT.BORDER);
    okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    okButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            message = text.getText ();
            shell.dispose ();
        }}

    );
    cancelButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            message = null;
            shell.dispose ();
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="64" endline="68">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    message = text.getText ();
    shell.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="72" endline="76">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    message = null;
    shell.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="80" endline="87">
private void setText (String text) {
    this.text.setText (text != null ? text : "");
    this.text.setSelection (0, - 1);
    this.text.pack ();
    this.text.setLayoutData (LayoutHelper.formData (Math.max (this.text.getSize ().x, 310), SWT.DEFAULT, new FormAttachment (0), null, new FormAttachment (messageLabel), null));
    this.text.setFocus ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="94" endline="105">
public String open (String text, String okButtonText) {
    okButton.setText (okButtonText);
    setText (text);
    positionButtonsInFormLayout (okButton, cancelButton, this.text);
    shell.pack ();
    open ();
    return message;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/InputDialog.java" startline="111" endline="114">
public String open (String text) {
    return open (text, Labels.getLabel ("button.OK"));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="45" endline="71">
public MainMenu (Shell shell, Menu mainMenu, CommandsMenu resultsContextMenu, StateMachine stateMachine, PicoContainer parentContainer) {
    container = new DefaultPicoContainer (parentContainer);
    container.registerComponentImplementation (FavoritesMenu.class);
    container.registerComponentImplementation (FavoritesMenuActions.ShowMenu.class);
    container.registerComponentImplementation (FavoritesMenuActions.Select.class);
    container.registerComponentImplementation (FavoritesMenuActions.Add.class);
    container.registerComponentImplementation (FavoritesMenuActions.Edit.class);
    container.registerComponentImplementation (CommandsMenuActions.EditOpeners.class);
    container.registerComponentImplementation (CommandsMenuActions.SelectOpener.class);
    container.registerComponentImplementation (CommandsMenuActions.ShowOpenersMenu.class);
    container.registerComponent (new ConstructorInjectionComponentAdapter (OpenersMenu.class, OpenersMenu.class));
    shell.setMenuBar (mainMenu);
    createMainMenuItems (mainMenu);
    createCommandsMenuItems (resultsContextMenu);
    stateMachine.addTransitionListener (new MenuEnablerDisabler (mainMenu));
    stateMachine.addTransitionListener (new MenuEnablerDisabler (resultsContextMenu));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="73" endline="76">
public void start () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="78" endline="80">
public void stop () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="82" endline="146">
private void createMainMenuItems (Menu menu) {
    Menu subMenu = initMenu (menu, "menu.scan");
    initMenuItem (subMenu, "menu.scan.exportAll", "Ctrl+S", new Integer (SWT.MOD1 | 'S'), initListener (ScanMenuActions.SaveAll.class), false);
    initMenuItem (subMenu, "menu.scan.exportSelection", null, null, initListener (ScanMenuActions.SaveSelection.class), false);
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.scan.exportPreferences", null, null, null);
    initMenuItem (subMenu, "menu.scan.importPreferences", null, null, null);
    if (! Platform.MAC_OS) {
        initMenuItem (subMenu, null, null, null, null);
        initMenuItem (subMenu, "menu.scan.quit", "Ctrl+Q", new Integer (SWT.MOD1 | 'Q'), initListener (ScanMenuActions.Quit.class));
    }
    subMenu = initMenu (menu, "menu.goto");
    initMenuItem (subMenu, "menu.goto.next.aliveHost", "Ctrl+H", new Integer (SWT.MOD1 | 'H'), initListener (GotoMenuActions.NextAliveHost.class));
    initMenuItem (subMenu, "menu.goto.next.openPort", "Ctrl+J", new Integer (SWT.MOD1 | 'J'), initListener (GotoMenuActions.NextHostWithInfo.class));
    initMenuItem (subMenu, "menu.goto.next.deadHost", "Ctrl+K", new Integer (SWT.MOD1 | 'K'), initListener (GotoMenuActions.NextDeadHost.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.goto.prev.aliveHost", "Ctrl+Shift+H", new Integer (SWT.MOD1 | SWT.MOD2 | 'H'), initListener (GotoMenuActions.PrevAliveHost.class));
    initMenuItem (subMenu, "menu.goto.prev.openPort", "Ctrl+Shift+J", new Integer (SWT.MOD1 | SWT.MOD2 | 'J'), initListener (GotoMenuActions.PrevHostWithInfo.class));
    initMenuItem (subMenu, "menu.goto.prev.deadHost", "Ctrl+Shift+K", new Integer (SWT.MOD1 | SWT.MOD2 | 'K'), initListener (GotoMenuActions.PrevDeadHost.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.goto.find", "Ctrl+F", new Integer (SWT.MOD1 | 'F'), initListener (GotoMenuActions.Find.class));
    subMenu = initMenu (menu, "menu.commands");
    createCommandsMenuItems (subMenu);
    createFavoritesMenu (menu);
    subMenu = initMenu (menu, "menu.tools");
    initMenuItem (subMenu, "menu.tools.preferences", "Ctrl+O", new Integer (SWT.MOD1 | (Platform.MAC_OS ? ',' : 'O')), initListener (ToolsActions.Preferences.class), true);
    initMenuItem (subMenu, "menu.tools.fetchers", "Ctrl+Shift+O", new Integer (SWT.MOD1 | SWT.MOD2 | (Platform.MAC_OS ? ',' : 'O')), initListener (ToolsActions.ChooseFetchers.class), true);
    initMenuItem (subMenu, null, null, null, null);
    Menu selectMenu = initMenu (subMenu, "menu.tools.select");
    initMenuItem (subMenu, "menu.tools.scanStatistics", "Ctrl+T", new Integer (SWT.MOD1 | 'T'), initListener (ToolsActions.ScanStatistics.class));
    initMenuItem (selectMenu, "menu.tools.select.alive", null, null, initListener (ToolsActions.SelectAlive.class), true);
    initMenuItem (selectMenu, "menu.tools.select.dead", null, null, initListener (ToolsActions.SelectDead.class), true);
    initMenuItem (selectMenu, "menu.tools.select.withPorts", null, null, initListener (ToolsActions.SelectWithPorts.class), true);
    initMenuItem (selectMenu, "menu.tools.select.withoutPorts", null, null, initListener (ToolsActions.SelectWithoutPorts.class), true);
    initMenuItem (selectMenu, null, null, null, null);
    initMenuItem (selectMenu, "menu.tools.select.invert", "Ctrl+I", new Integer (SWT.MOD1 | 'I'), initListener (ToolsActions.SelectInvert.class), true);
    subMenu = initMenu (menu, "menu.help");
    initMenuItem (subMenu, "menu.help.gettingStarted", ! Platform.MAC_OS ? "F1" : null, new Integer (Platform.MAC_OS ? SWT.HELP : SWT.F1), initListener (HelpMenuActions.GettingStarted.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.help.website", null, null, initListener (HelpMenuActions.Website.class));
    initMenuItem (subMenu, "menu.help.faq", null, null, initListener (HelpMenuActions.FAQ.class));
    initMenuItem (subMenu, "menu.help.plugins", null, null, initListener (HelpMenuActions.Plugins.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.help.cmdLine", null, null, initListener (HelpMenuActions.CommandLineUsage.class));
    if (! Platform.MAC_OS) {
        initMenuItem (subMenu, null, null, null, null);
        initMenuItem (subMenu, "menu.help.checkVersion", null, null, initListener (HelpMenuActions.CheckVersion.class));
        initMenuItem (subMenu, null, null, null, null);
        initMenuItem (subMenu, "menu.help.about", null, null, initListener (HelpMenuActions.About.class));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="148" endline="160">
private void createCommandsMenuItems (Menu menu) {
    initMenuItem (menu, "menu.commands.details", null, null, initListener (CommandsMenuActions.Details.class));
    initMenuItem (menu, null, null, null, null);
    initMenuItem (menu, "menu.commands.rescan", "Ctrl+R", new Integer (SWT.MOD1 | 'R'), initListener (CommandsMenuActions.Rescan.class), true);
    initMenuItem (menu, "menu.commands.delete", Platform.MAC_OS ? "⌦" : "Del", null, initListener (CommandsMenuActions.Delete.class), true);
    initMenuItem (menu, null, null, null, null);
    initMenuItem (menu, "menu.commands.copy", Platform.MAC_OS ? "⌘C" : "Ctrl+C", null, initListener (CommandsMenuActions.CopyIP.class));
    initMenuItem (menu, "menu.commands.copyDetails", null, null, initListener (CommandsMenuActions.CopyIPDetails.class));
    initMenuItem (menu, null, null, null, null);
    createOpenersMenu (menu);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="162" endline="168">
private void createOpenersMenu (Menu parentMenu) {
    OpenersMenu openersMenu = (OpenersMenu) container.getComponentInstance (OpenersMenu.class);
    MenuItem openersMenuItem = new MenuItem (parentMenu, SWT.CASCADE);
    openersMenuItem.setText (Labels.getLabel ("menu.commands.open"));
    openersMenuItem.setMenu (openersMenu);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="170" endline="176">
private void createFavoritesMenu (Menu parentMenu) {
    MenuItem favoritesMenuItem = new MenuItem (parentMenu, SWT.CASCADE);
    favoritesMenuItem.setText (Labels.getLabel ("menu.favorites"));
    Menu favoritesMenu = (Menu) container.getComponentInstance (FavoritesMenu.class);
    favoritesMenuItem.setMenu (favoritesMenu);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="178" endline="187">
private static Menu initMenu (Menu menu, String label) {
    MenuItem menuItem = new MenuItem (menu, SWT.CASCADE);
    menuItem.setText (Labels.getLabel (label));
    Menu subMenu = new Menu (menu.getShell (), SWT.DROP_DOWN);
    menuItem.setMenu (subMenu);
    return subMenu;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="189" endline="196">
private Listener initListener (Class < ? extends Listener > listenerClass) {
    if (container.getComponentAdapter (listenerClass) == null) container.registerComponentImplementation (listenerClass);

    return (Listener) container.getComponentInstance (listenerClass);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="198" endline="201">
static MenuItem initMenuItem (Menu parent, String label, String acceleratorText, Integer accelerator, Listener listener) {
    return initMenuItem (parent, label, acceleratorText, accelerator, listener, false);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="203" endline="224">
static MenuItem initMenuItem (Menu parent, String label, String acceleratorText, Integer accelerator, Listener listener, boolean disableDuringScanning) {
    MenuItem menuItem = new MenuItem (parent, label == null ? SWT.SEPARATOR : SWT.PUSH);
    if (label != null) menuItem.setText (Labels.getLabel (label) + (acceleratorText != null ? "\t" + acceleratorText : ""));

    if (accelerator != null) menuItem.setAccelerator (accelerator.intValue ());

    if (listener != null) menuItem.addListener (SWT.Selection, listener);
    else menuItem.setEnabled (false);

    if (disableDuringScanning) {
        menuItem.setData ("disableDuringScanning", Boolean.TRUE);
    }
    return menuItem;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="231" endline="234">
public CommandsMenu (Decorations parent) {
    super (parent, SWT.POP_UP);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="236" endline="236">
protected void checkSubclass () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="244" endline="257">
public OpenersMenu (Decorations parent, CommandsMenuActions.EditOpeners editOpenersListener, CommandsMenuActions.ShowOpenersMenu showOpenersMenuListener) {
    super (parent, SWT.DROP_DOWN);
    initMenuItem (this, "menu.commands.open.edit", null, null, editOpenersListener);
    initMenuItem (this, null, null, null, null);
    addListener (SWT.Show, showOpenersMenuListener);
    Event e = new Event ();
    e.widget = this;
    showOpenersMenuListener.handleEvent (e);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="258" endline="258">
protected void checkSubclass () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="266" endline="275">
public FavoritesMenu (Decorations parent, FavoritesMenuActions.Add addListener, FavoritesMenuActions.Edit editListener, FavoritesMenuActions.ShowMenu showFavoritesMenuListener) {
    super (parent, SWT.DROP_DOWN);
    initMenuItem (this, "menu.favorites.add", "Ctrl+D", new Integer (SWT.MOD1 | 'D'), addListener);
    initMenuItem (this, "menu.favorites.edit", null, null, editListener);
    initMenuItem (this, null, null, null, null);
    addListener (SWT.Show, showFavoritesMenuListener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="276" endline="276">
protected void checkSubclass () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="285" endline="292">
public ColumnsMenu (Decorations parent, ColumnsActions.SortBy sortByListener, ColumnsActions.AboutFetcher aboutListener, ColumnsActions.FetcherPreferences preferencesListener) {
    super (parent, SWT.POP_UP);
    initMenuItem (this, "menu.columns.sortBy", null, null, sortByListener);
    initMenuItem (this, "menu.columns.preferences", null, null, preferencesListener);
    initMenuItem (this, "menu.columns.about", null, null, aboutListener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="293" endline="293">
protected void checkSubclass () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="304" endline="307">
public MenuEnablerDisabler (Menu menu) {
    this.menu = menu;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="309" endline="314">
public void transitionTo (final ScanningState state, Transition transition) {
    if (transition != Transition.START && transition != Transition.COMPLETE) return;

    processMenu (menu, state == ScanningState.IDLE);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainMenu.java" startline="316" endline="330">
public void processMenu (Menu menu, boolean isEnabled) {
    for (MenuItem item : menu.getItems ()) {
        if (item.getData ("disableDuringScanning") == Boolean.TRUE) {
            item.setEnabled (isEnabled);
        } else if (item.getMenu () != null) {
            processMenu (item.getMenu (), isEnabled);
        }

    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="71" endline="135">
public MainWindow (Shell shell, GUIConfig guiConfig, Composite feederArea, Composite controlsArea, Combo feederSelectionCombo, Button startStopButton, StartStopScanningAction startStopScanningAction, ResultTable resultTable, StatusBar statusBar, CommandsMenu resultsContextMenu, FeederGUIRegistry feederGUIRegistry, final StateMachine stateMachine, ToolsActions.Preferences preferencesListener, ToolsActions.ChooseFetchers chooseFetchersListsner) {
    this.shell = shell;
    this.guiConfig = guiConfig;
    this.statusBar = statusBar;
    initShell (shell);
    initFeederArea (feederArea, feederGUIRegistry);
    initControlsArea (controlsArea, feederSelectionCombo, startStopButton, startStopScanningAction, preferencesListener, chooseFetchersListsner);
    initTableAndStatusBar (resultTable, resultsContextMenu, statusBar);
    shell.setBounds (guiConfig.getMainWindowBounds ());
    shell.open ();
    if (guiConfig.isMainWindowMaximized) {
        shell.setMaximized (true);
    } else {
        shell.setBounds (guiConfig.getMainWindowBounds ());
    }
    if (guiConfig.isFirstRun) {
        Display.getCurrent ().asyncExec (new Runnable () {
            public void run () {
                if (Platform.CRIPPLED_WINDOWS) {
                    if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
                        BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
                    }
                }
                if (Platform.GNU_JAVA) {
                    showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
                }
                MainWindow.this.shell.forceActive ();
                new GettingStartedDialog ().open ();
                MainWindow.this.guiConfig.isFirstRun = false;
            }}

        );
    }
    stateMachine.addTransitionListener (new EnablerDisabler ());
    Display.getCurrent ().asyncExec (new Runnable () {
        public void run () {
            stateMachine.init ();
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="103" endline="121">
public void run () {
    if (Platform.CRIPPLED_WINDOWS) {
        if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
            BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
        }
    }
    if (Platform.GNU_JAVA) {
        showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
    }
    MainWindow.this.shell.forceActive ();
    new GettingStartedDialog ().open ();
    MainWindow.this.guiConfig.isFirstRun = false;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="129" endline="133">
public void run () {
    stateMachine.init ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="137" endline="143">
private int showMessage (String text, int buttons) {
    MessageBox box = new MessageBox (MainWindow.this.shell, SWT.ICON_WARNING | buttons);
    box.setText (Version.NAME);
    box.setMessage (text);
    return box.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="148" endline="165">
private void initShell (final Shell shell) {
    FormLayout formLayout = new FormLayout ();
    shell.setLayout (formLayout);
    Image image = new Image (shell.getDisplay (), Labels.getInstance ().getImageAsStream ("icon"));
    shell.setImage (image);
    shell.addListener (SWT.Close, new Listener () {
        public void handleEvent (Event event) {
            guiConfig.setMainWindowBounds (shell.getBounds (), shell.getMaximized ());
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="159" endline="163">
public void handleEvent (Event event) {
    guiConfig.setMainWindowBounds (shell.getBounds (), shell.getMaximized ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="170" endline="173">
public Shell getShell () {
    return shell;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="178" endline="181">
public boolean isDisposed () {
    return shell.isDisposed ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="186" endline="190">
private void initTableAndStatusBar (ResultTable resultTable, CommandsMenu resultsContextMenu, StatusBar statusBar) {
    resultTable.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (feederArea, 1), new FormAttachment (statusBar.getComposite (), - 2)));
    resultTable.setMenu (resultsContextMenu);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="192" endline="199">
private void initFeederArea (Composite feederArea, FeederGUIRegistry feederRegistry) {
    this.feederArea = feederArea;
    feederArea.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    this.feederRegistry = feederRegistry;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="204" endline="247">
private void initControlsArea (final Composite controlsArea, final Combo feederSelectionCombo, final Button startStopButton, final StartStopScanningAction startStopScanningAction, final ToolsActions.Preferences preferencesListener, final ToolsActions.ChooseFetchers chooseFetchersListsner) {
    controlsArea.setLayoutData (LayoutHelper.formData (new FormAttachment (feederArea), new FormAttachment (100), new FormAttachment (0), new FormAttachment (feederArea, 0, SWT.BOTTOM)));
    controlsArea.setLayout (LayoutHelper.formLayout (7, 3, 3));
    Control secondControl = feederRegistry.current ().getChildren () [1];
    buttonHeight = secondControl.getSize ().y + 2;
    this.feederSelectionCombo = feederSelectionCombo;
    feederSelectionCombo.pack ();
    IPFeederSelectionListener feederSelectionListener = new IPFeederSelectionListener ();
    feederSelectionCombo.addSelectionListener (feederSelectionListener);
    feederSelectionCombo.select (guiConfig.activeFeeder);
    feederSelectionCombo.setToolTipText (Labels.getLabel ("combobox.feeder.tooltip"));
    this.startStopButton = startStopButton;
    shell.setDefaultButton (startStopButton);
    startStopButton.addSelectionListener (startStopScanningAction);
    controlsArea.setTabList (new Control [] {startStopButton, feederSelectionCombo});
    prefsButton = new ToolBar (controlsArea, SWT.FLAT);
    prefsButton.setCursor (prefsButton.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    ToolItem item = new ToolItem (prefsButton, SWT.PUSH);
    item.setImage (new Image (null, Labels.getInstance ().getImageAsStream ("button.preferences.img")));
    item.setToolTipText (Labels.getLabel ("title.preferences"));
    item.addListener (SWT.Selection, preferencesListener);
    fetchersButton = new ToolBar (controlsArea, SWT.FLAT);
    fetchersButton.setCursor (fetchersButton.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    item = new ToolItem (fetchersButton, SWT.PUSH);
    item.setImage (new Image (null, Labels.getInstance ().getImageAsStream ("button.fetchers.img")));
    item.setToolTipText (Labels.getLabel ("title.fetchers.select"));
    item.addListener (SWT.Selection, chooseFetchersListsner);
    feederSelectionListener.widgetSelected (null);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="249" endline="266">
private void relayoutControls () {
    boolean twoRowToolbar = Math.abs (feederRegistry.current ().getSize ().y - buttonHeight * 2) <= 10;
    feederSelectionCombo.setLayoutData (LayoutHelper.formData (SWT.DEFAULT, buttonHeight, new FormAttachment (0), null, new FormAttachment (0), null));
    if (twoRowToolbar) {
        startStopButton.setLayoutData (LayoutHelper.formData (feederSelectionCombo.getSize ().x, Platform.MAC_OS ? SWT.DEFAULT : buttonHeight, new FormAttachment (0), null, new FormAttachment (feederSelectionCombo, 0), null));
        prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (feederSelectionCombo), null, new FormAttachment (feederSelectionCombo, 0, SWT.CENTER), null));
        fetchersButton.setLayoutData (LayoutHelper.formData (new FormAttachment (startStopButton), null, new FormAttachment (startStopButton, 0, SWT.CENTER), null));
    } else {
        startStopButton.setLayoutData (LayoutHelper.formData (feederSelectionCombo.getSize ().x, Platform.MAC_OS ? SWT.DEFAULT : buttonHeight, new FormAttachment (feederSelectionCombo), null, new FormAttachment (- 1), null));
        prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (startStopButton), null, new FormAttachment (feederSelectionCombo, 0, SWT.CENTER), null));
        fetchersButton.setLayoutData (LayoutHelper.formData (new FormAttachment (prefsButton), null, new FormAttachment (startStopButton, 0, SWT.CENTER), null));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="273" endline="276">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="278" endline="293">
public void widgetSelected (SelectionEvent e) {
    feederRegistry.select (feederSelectionCombo.getSelectionIndex ());
    Rectangle bounds = feederRegistry.current ().getBounds ();
    FormData feederAreaLayoutData = ((FormData) feederArea.getLayoutData ());
    feederAreaLayoutData.height = bounds.height;
    feederAreaLayoutData.width = bounds.width;
    relayoutControls ();
    shell.layout ();
    shell.setText (feederRegistry.current ().getFeederName () + " - " + Version.NAME);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="298" endline="309">
public void transitionTo (final ScanningState state, Transition transition) {
    if (transition != Transition.START && transition != Transition.COMPLETE) return;

    boolean enabled = state == ScanningState.IDLE;
    feederArea.setEnabled (enabled);
    feederSelectionCombo.setEnabled (enabled);
    prefsButton.setEnabled (enabled);
    fetchersButton.setEnabled (enabled);
    statusBar.setEnabled (enabled);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="315" endline="318">
public FeederSelectionCombo (Composite parent) {
    super (parent, SWT.READ_ONLY);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="320" endline="325">
@Override
public int getTextHeight () {
    return buttonHeight;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/MainWindow.java" startline="327" endline="331">
@Override
protected void checkSubclass () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="78" endline="84">
public PreferencesDialog (PingerRegistry pingerRegistry, ScannerConfig scannerConfig, GUIConfig guiConfig, ConfigDetectorDialog configDetectorDialog) {
    this.pingerRegistry = pingerRegistry;
    this.scannerConfig = scannerConfig;
    this.guiConfig = guiConfig;
    this.configDetectorDialog = configDetectorDialog;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="86" endline="90">
@Override
public void open () {
    openTab (0);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="96" endline="111">
public void openTab (int tabIndex) {
    createShell ();
    loadPreferences ();
    tabFolder.setSelection (tabIndex);
    if (tabFolder.getItem (tabIndex) == portsTabItem) {
        portsText.forceFocus ();
    }
    super.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="113" endline="147">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.preferences"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    createTabFolder ();
    okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, tabFolder);
    shell.pack ();
    okButton.setFocus ();
    okButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            savePreferences ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            shell.close ();
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="134" endline="138">
public void widgetSelected (SelectionEvent e) {
    savePreferences ();
    shell.close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="142" endline="145">
public void widgetSelected (SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="152" endline="179">
private void createTabFolder () {
    tabFolder = new TabFolder (shell, SWT.NONE);
    createScanningTab ();
    TabItem tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.scanning"));
    tabItem.setControl (scanningTab);
    scanningTabItem = tabItem;
    createPortsTab ();
    tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.ports"));
    tabItem.setControl (portsTab);
    portsTabItem = tabItem;
    createDisplayTab ();
    tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.display"));
    tabItem.setControl (displayTab);
    tabFolder.pack ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="184" endline="257">
private void createScanningTab () {
    RowLayout rowLayout = createRowLayout ();
    scanningTab = new Composite (tabFolder, SWT.NONE);
    scanningTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group threadsGroup = new Group (scanningTab, SWT.NONE);
    threadsGroup.setText (Labels.getLabel ("preferences.threads"));
    threadsGroup.setLayout (groupLayout);
    GridData gridData = new GridData (80, SWT.DEFAULT);
    Label label;
    label = new Label (threadsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.threads.delay"));
    threadDelayText = new Text (threadsGroup, SWT.BORDER);
    threadDelayText.setLayoutData (gridData);
    label = new Label (threadsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.threads.maxThreads"));
    maxThreadsText = new Text (threadsGroup, SWT.BORDER);
    maxThreadsText.setLayoutData (gridData);
    Group pingingGroup = new Group (scanningTab, SWT.NONE);
    pingingGroup.setLayout (groupLayout);
    pingingGroup.setText (Labels.getLabel ("preferences.pinging"));
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.type"));
    pingersCombo = new Combo (pingingGroup, SWT.DROP_DOWN | SWT.READ_ONLY);
    pingersCombo.setLayoutData (gridData);
    String [] pingerNames = pingerRegistry.getRegisteredNames ();
    for (int i = 0;
    i < pingerNames.length; i ++) {
        pingersCombo.add (Labels.getLabel (pingerNames [i]));
        pingersCombo.setData (Integer.toString (i), pingerNames [i]);
    }
    pingersCombo.select (0);
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.count"));
    pingingCountText = new Text (pingingGroup, SWT.BORDER);
    pingingCountText.setLayoutData (gridData);
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.timeout"));
    pingingTimeoutText = new Text (pingingGroup, SWT.BORDER);
    pingingTimeoutText.setLayoutData (gridData);
    GridData gridDataWithSpan = new GridData ();
    gridDataWithSpan.horizontalSpan = 2;
    deadHostsCheckbox = new Button (pingingGroup, SWT.CHECK);
    deadHostsCheckbox.setText (Labels.getLabel ("preferences.pinging.deadHosts"));
    deadHostsCheckbox.setLayoutData (gridDataWithSpan);
    Group broadcastGroup = new Group (scanningTab, SWT.NONE);
    broadcastGroup.setLayout (groupLayout);
    broadcastGroup.setText (Labels.getLabel ("preferences.broadcast"));
    skipBroadcastsCheckbox = new Button (broadcastGroup, SWT.CHECK);
    skipBroadcastsCheckbox.setText (Labels.getLabel ("preferences.broadcast.skip"));
    GridData gridDataWithSpan2 = new GridData ();
    gridDataWithSpan2.horizontalSpan = 2;
    skipBroadcastsCheckbox.setLayoutData (gridDataWithSpan2);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="262" endline="314">
private void createDisplayTab () {
    RowLayout rowLayout = createRowLayout ();
    displayTab = new Composite (tabFolder, SWT.NONE);
    displayTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 1;
    Group listGroup = new Group (displayTab, SWT.NONE);
    listGroup.setText (Labels.getLabel ("preferences.display.list"));
    listGroup.setLayout (groupLayout);
    listGroup.setLayoutData (new RowData (260, SWT.DEFAULT));
    displayMethod = new Button [DisplayMethod.values ().length];
    Button allRadio = new Button (listGroup, SWT.RADIO);
    allRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.ALL));
    displayMethod [DisplayMethod.ALL.ordinal ()] = allRadio;
    Button aliveRadio = new Button (listGroup, SWT.RADIO);
    aliveRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.ALIVE));
    displayMethod [DisplayMethod.ALIVE.ordinal ()] = aliveRadio;
    Button portsRadio = new Button (listGroup, SWT.RADIO);
    portsRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.PORTS));
    displayMethod [DisplayMethod.PORTS.ordinal ()] = portsRadio;
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group labelsGroup = new Group (displayTab, SWT.NONE);
    labelsGroup.setText (Labels.getLabel ("preferences.display.labels"));
    labelsGroup.setLayout (groupLayout);
    GridData gridData = new GridData ();
    gridData.widthHint = 50;
    Label label = new Label (labelsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.display.labels.notAvailable"));
    notAvailableText = new Text (labelsGroup, SWT.BORDER);
    notAvailableText.setLayoutData (gridData);
    label = new Label (labelsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.display.labels.notScanned"));
    notScannedText = new Text (labelsGroup, SWT.BORDER);
    notScannedText.setLayoutData (gridData);
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 1;
    Group showStatsGroup = new Group (displayTab, SWT.NONE);
    showStatsGroup.setLayout (groupLayout);
    showStatsGroup.setText (Labels.getLabel ("preferences.display.confirmation"));
    askConfirmationCheckbox = new Button (showStatsGroup, SWT.CHECK);
    askConfirmationCheckbox.setText (Labels.getLabel ("preferences.display.confirmation.newScan"));
    showInfoCheckbox = new Button (showStatsGroup, SWT.CHECK);
    showInfoCheckbox.setText (Labels.getLabel ("preferences.display.confirmation.showInfo"));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="319" endline="375">
private void createPortsTab () {
    RowLayout rowLayout = createRowLayout ();
    portsTab = new Composite (tabFolder, SWT.NONE);
    portsTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group timingGroup = new Group (portsTab, SWT.NONE);
    timingGroup.setText (Labels.getLabel ("preferences.ports.timing"));
    timingGroup.setLayout (groupLayout);
    GridData gridData = new GridData ();
    gridData.widthHint = 50;
    Label label = new Label (timingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.ports.timing.timeout"));
    portTimeoutText = new Text (timingGroup, SWT.BORDER);
    portTimeoutText.setLayoutData (gridData);
    GridData gridData1 = new GridData ();
    gridData1.horizontalSpan = 2;
    adaptTimeoutCheckbox = new Button (timingGroup, SWT.CHECK);
    adaptTimeoutCheckbox.setText (Labels.getLabel ("preferences.ports.timing.adaptTimeout"));
    adaptTimeoutCheckbox.setLayoutData (gridData1);
    adaptTimeoutCheckbox.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            minPortTimeoutText.setEnabled (adaptTimeoutCheckbox.getSelection ());
        }}

    );
    label = new Label (timingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.ports.timing.minTimeout"));
    minPortTimeoutText = new Text (timingGroup, SWT.BORDER);
    minPortTimeoutText.setLayoutData (gridData);
    RowLayout portsLayout = new RowLayout (SWT.VERTICAL);
    portsLayout.fill = true;
    portsLayout.marginHeight = 2;
    portsLayout.marginWidth = 2;
    Group portsGroup = new Group (portsTab, SWT.NONE);
    portsGroup.setText (Labels.getLabel ("preferences.ports.ports"));
    portsGroup.setLayout (portsLayout);
    label = new Label (portsGroup, SWT.WRAP);
    label.setText (Labels.getLabel ("preferences.ports.portsDescription"));
    portsText = new Text (portsGroup, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
    portsText.setLayoutData (new RowData (SWT.DEFAULT, 60));
    portsText.addKeyListener (new PortsTextValidationListener ());
    addRequestedPortsCheckbox = new Button (portsGroup, SWT.CHECK);
    addRequestedPortsCheckbox.setText (Labels.getLabel ("preferences.ports.addRequested"));
    addRequestedPortsCheckbox.setToolTipText (Labels.getLabel ("preferences.ports.addRequested.info"));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="346" endline="349">
public void handleEvent (Event event) {
    minPortTimeoutText.setEnabled (adaptTimeoutCheckbox.getSelection ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="392" endline="401">
private RowLayout createRowLayout () {
    RowLayout rowLayout = new RowLayout ();
    rowLayout.type = org.eclipse.swt.SWT.VERTICAL;
    rowLayout.spacing = 9;
    rowLayout.marginHeight = 9;
    rowLayout.marginWidth = 11;
    rowLayout.fill = true;
    return rowLayout;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="403" endline="430">
private void loadPreferences () {
    maxThreadsText.setText (Integer.toString (scannerConfig.maxThreads));
    threadDelayText.setText (Integer.toString (scannerConfig.threadDelay));
    String [] pingerNames = pingerRegistry.getRegisteredNames ();
    for (int i = 0;
    i < pingerNames.length; i ++) {
        if (scannerConfig.selectedPinger.equals (pingerNames [i])) {
            pingersCombo.select (i);
        }
    }
    pingingCountText.setText (Integer.toString (scannerConfig.pingCount));
    pingingTimeoutText.setText (Integer.toString (scannerConfig.pingTimeout));
    deadHostsCheckbox.setSelection (scannerConfig.scanDeadHosts);
    skipBroadcastsCheckbox.setSelection (scannerConfig.skipBroadcastAddresses);
    portTimeoutText.setText (Integer.toString (scannerConfig.portTimeout));
    adaptTimeoutCheckbox.setSelection (scannerConfig.adaptPortTimeout);
    minPortTimeoutText.setText (Integer.toString (scannerConfig.minPortTimeout));
    minPortTimeoutText.setEnabled (scannerConfig.adaptPortTimeout);
    portsText.setText (scannerConfig.portString);
    addRequestedPortsCheckbox.setSelection (scannerConfig.useRequestedPorts);
    notAvailableText.setText (scannerConfig.notAvailableText);
    notScannedText.setText (scannerConfig.notScannedText);
    displayMethod [guiConfig.displayMethod.ordinal ()].setSelection (true);
    showInfoCheckbox.setSelection (guiConfig.showScanStats);
    askConfirmationCheckbox.setSelection (guiConfig.askScanConfirmation);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="432" endline="474">
private void savePreferences () {
    try {
        new PortIterator (portsText.getText ());
    } catch (Exception e) {
        tabFolder.setSelection (portsTabItem);
        portsText.forceFocus ();
        throw new FetcherException ("unparseablePortString", e);
    }
    scannerConfig.selectedPinger = (String) pingersCombo.getData (Integer.toString (pingersCombo.getSelectionIndex ()));
    if (! pingerRegistry.checkSelectedPinger ()) {
        tabFolder.setSelection (scanningTabItem);
        pingersCombo.forceFocus ();
        throw new FetcherException ("unsupportedPinger");
    }
    scannerConfig.maxThreads = parseIntValue (maxThreadsText);
    scannerConfig.threadDelay = parseIntValue (threadDelayText);
    scannerConfig.pingCount = parseIntValue (pingingCountText);
    scannerConfig.pingTimeout = parseIntValue (pingingTimeoutText);
    scannerConfig.scanDeadHosts = deadHostsCheckbox.getSelection ();
    scannerConfig.skipBroadcastAddresses = skipBroadcastsCheckbox.getSelection ();
    scannerConfig.portTimeout = parseIntValue (portTimeoutText);
    scannerConfig.adaptPortTimeout = adaptTimeoutCheckbox.getSelection ();
    scannerConfig.minPortTimeout = parseIntValue (minPortTimeoutText);
    scannerConfig.portString = portsText.getText ();
    scannerConfig.useRequestedPorts = addRequestedPortsCheckbox.getSelection ();
    scannerConfig.notAvailableText = notAvailableText.getText ();
    scannerConfig.notScannedText = notScannedText.getText ();
    for (int i = 0;
    i < displayMethod.length; i ++) {
        if (displayMethod [i].getSelection ()) guiConfig.displayMethod = DisplayMethod.values () [i];

    }
    guiConfig.showScanStats = showInfoCheckbox.getSelection ();
    guiConfig.askScanConfirmation = askConfirmationCheckbox.getSelection ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="479" endline="490">
private static int parseIntValue (Text text) {
    try {
        return Integer.parseInt (text.getText ());
    } catch (NumberFormatException e) {
        text.forceFocus ();
        throw e;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="494" endline="525">
public void keyPressed (KeyEvent e) {
    Text portsText = (Text) e.getSource ();
    if (e.keyCode == SWT.TAB) {
        portsText.getShell ().traverse (SWT.TRAVERSE_TAB_NEXT);
        e.doit = false;
        return;
    } else if (e.keyCode == SWT.CR) {
        if ((e.stateMask & SWT.MOD1) > 0) {
            e.stateMask = 0;
        } else {
            portsText.getShell ().traverse (SWT.TRAVERSE_RETURN);
            e.doit = false;
            return;
        }
    } else if (Character.isISOControl (e.character)) {
        return;
    }

    e.doit = validateChar (e.character, portsText.getText (), portsText.getCaretPosition ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="527" endline="544">
boolean validateChar (char c, String text, int caretPos) {
    char pc = 0;
    for (int i = caretPos - 1;
    i >= 0; i --) {
        pc = text.charAt (i);
        if (! Character.isWhitespace (pc)) break;

    }
    boolean isCurDigit = c >= '0' && c <= '9';
    boolean isPrevDigit = pc >= '0' && pc <= '9';
    return isPrevDigit && (isCurDigit || c == '-' || c == ',') || isCurDigit && (pc == '-' || pc == ',' || pc == 0) || Character.isWhitespace (c) && pc == ',';
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="546" endline="548">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/PreferencesDialog.java" startline="553" endline="557">
public void handleEvent (Event event) {
    scannerConfig.maxThreads = Integer.parseInt (maxThreadsText.getText ());
    configDetectorDialog.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="54" endline="86">
public ResultTable (Composite parent, GUIConfig guiConfig, FetcherRegistry fetcherRegistry, ScanningResultList scanningResultList, StateMachine stateMachine, ColumnsActions.ColumnClick columnClickListener, ColumnsActions.ColumnResize columnResizeListener, ToolsActions.TableSelection selectionListener) {
    super (parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
    this.guiConfig = guiConfig;
    this.scanningResults = scanningResultList;
    this.fetcherRegistry = fetcherRegistry;
    setHeaderVisible (true);
    setLinesVisible (true);
    this.columnClickListener = columnClickListener;
    this.columnResizeListener = columnResizeListener;
    fetcherRegistry.addListener (this);
    handleUpdateOfSelectedFetchers (fetcherRegistry);
    listImages [ResultType.UNKNOWN.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.unknown.img"));
    listImages [ResultType.DEAD.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.dead.img"));
    listImages [ResultType.ALIVE.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.alive.img"));
    listImages [ResultType.WITH_PORTS.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.addinfo.img"));
    addListener (SWT.Selection, selectionListener);
    addListener (SWT.KeyDown, new CommandsMenuActions.Delete (this, stateMachine, selectionListener));
    addListener (SWT.KeyDown, new CommandsMenuActions.CopyIP (this));
    addListener (SWT.KeyDown, new ToolsActions.SelectAll (this, selectionListener));
    addListener (SWT.SetData, new SetDataListener ());
    stateMachine.addTransitionListener (this);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="91" endline="113">
public void handleUpdateOfSelectedFetchers (FetcherRegistry fetcherRegistry) {
    removeAll ();
    TableColumn [] columns = getColumns ();
    for (int i = 0;
    i < columns.length; i ++) {
        columns [i].dispose ();
    }
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        TableColumn tableColumn = new TableColumn (this, SWT.NONE);
        tableColumn.setWidth (guiConfig.getColumnWidth (fetcher));
        tableColumn.setData (fetcher);
        tableColumn.addListener (SWT.Selection, columnClickListener);
        tableColumn.addListener (SWT.Resize, columnResizeListener);
    }
    updateColumnNames ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="115" endline="122">
public void updateColumnNames () {
    int i = 0;
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        getColumn (i ++).setText (fetcher.getFullName ());
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="124" endline="129">
protected void checkSubclass () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="140" endline="167">
public void addOrUpdateResultRow (final ScanningResult result) {
    if (isDisposed ()) return;

    getDisplay ().asyncExec (new Runnable () {
        public void run () {
            if (isDisposed ()) return;

            if (scanningResults.isRegistered (result)) {
                int index = scanningResults.update (result);
                clear (index);
            } else {
                int index = getItemCount ();
                scanningResults.registerAtIndex (index, result);
                new TableItem (ResultTable.this, SWT.NONE);
            }
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="146" endline="165">
public void run () {
    if (isDisposed ()) return;

    if (scanningResults.isRegistered (result)) {
        int index = scanningResults.update (result);
        clear (index);
    } else {
        int index = getItemCount ();
        scanningResults.registerAtIndex (index, result);
        new TableItem (ResultTable.this, SWT.NONE);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="172" endline="175">
public void updateResults () {
    clearAll ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="182" endline="192">
public void updateResult (int index, String fetcherId, Object newValue) {
    int fetcherIndex = fetcherRegistry.getSelectedFetcherIndex (CommentFetcher.ID);
    if (fetcherIndex >= 0) {
        scanningResults.getResult (index).setValue (fetcherIndex, newValue);
        clear (index);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="198" endline="202">
public ScanningResult getSelectedResult () {
    int selectedIndex = getSelectionIndex ();
    return scanningResults.getResult (selectedIndex);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="204" endline="210">
public void remove (int [] indices) {
    scanningResults.remove (indices);
    super.remove (indices);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="212" endline="218">
public void removeAll () {
    scanningResults.clear ();
    super.removeAll ();
    setSortColumn (null);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="224" endline="234">
public void resetSelection () {
    int [] selectionIndices = getSelectionIndices ();
    for (int itemNum : selectionIndices) {
        scanningResults.getResult (itemNum).reset ();
    }
    clear (selectionIndices);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="239" endline="242">
public ScanningResultList getScanningResults () {
    return scanningResults;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="250" endline="266">
public void handleEvent (Event event) {
    TableItem item = (TableItem) event.item;
    int tableIndex = indexOf (item);
    ScanningResult scanningResult = scanningResults.getResult (tableIndex);
    List < ? > values = scanningResult.getValues ();
    String [] resultStrings = new String [values.size ()];
    for (int i = 0;
    i < values.size (); i ++) {
        Object value = values.get (i);
        if (value != null) resultStrings [i] = value.toString ();

    }
    item.setText (resultStrings);
    item.setImage (0, listImages [scanningResult.getType ().ordinal ()]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/ResultTable.java" startline="270" endline="274">
public void transitionTo (ScanningState state, Transition transition) {
    setCursor (getDisplay ().getSystemCursor (state == ScanningState.IDLE ? SWT.CURSOR_ARROW : SWT.CURSOR_APPSTARTING));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="26" endline="29">
public SWTAwareStateMachine (Display display) {
    this.display = display;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="31" endline="45">
@Override
protected void notifyAboutTransition (final Transition transition) {
    if (display.isDisposed ()) return;

    display.asyncExec (new Runnable () {
        public void run () {
            SWTAwareStateMachine.super.notifyAboutTransition (transition);
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="40" endline="43">
public void run () {
    SWTAwareStateMachine.super.notifyAboutTransition (transition);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="43" endline="46">
public SelectFetchersDialog (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="48" endline="156">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.fetchers.select"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.WRAP);
    messageLabel.setText (Labels.getLabel ("text.fetchers.select"));
    Label selectedLabel = new Label (shell, SWT.NONE);
    selectedLabel.setText (Labels.getLabel ("text.fetchers.selectedList"));
    selectedLabel.setLayoutData (LayoutHelper.formData (null, null, new FormAttachment (messageLabel, 5), null));
    selectedFetchersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    selectedFetchersList.setLayoutData (LayoutHelper.formData (140, 200, new FormAttachment (0), new FormAttachment (selectedLabel, 80, SWT.RIGHT), new FormAttachment (selectedLabel), null));
    Iterator < Fetcher > i = fetcherRegistry.getSelectedFetchers ().iterator ();
    i.next ();
    while (i.hasNext ()) {
        Fetcher fetcher = i.next ();
        selectedFetchersList.add (fetcher.getName ());
    }
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    Button addButton = new Button (shell, SWT.NONE);
    addButton.setText (Labels.getLabel ("button.left"));
    Button removeButton = new Button (shell, SWT.NONE);
    removeButton.setText (Labels.getLabel ("button.right"));
    Button prefsButton = new Button (shell, SWT.NONE);
    prefsButton.setText (Labels.getLabel ("button.fetcherPrefs"));
    prefsButton.setToolTipText (Labels.getLabel ("text.fetchers.preferences"));
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (selectedLabel), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), null, new FormAttachment (upButton), null));
    addButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (downButton, 16), null));
    removeButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (addButton), null));
    prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (removeButton, 16), null));
    Label registeredLabel = new Label (shell, SWT.NONE);
    registeredLabel.setText (Labels.getLabel ("text.fetchers.availableList"));
    registeredLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (downButton, 10), null, new FormAttachment (messageLabel, 5), null));
    registeredFetchersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    registeredFetchersList.setLayoutData (LayoutHelper.formData (140, 200, new FormAttachment (downButton, 10), null, new FormAttachment (registeredLabel), null));
    i = fetcherRegistry.getRegisteredFetchers ().iterator ();
    i.next ();
    while (i.hasNext ()) {
        Fetcher fetcher = i.next ();
        String fetcherName = fetcher.getName ();
        registeredFetcherIdsByNames.put (fetcherName, fetcher.getId ());
        if (selectedFetchersList.indexOf (fetcherName) < 0) registeredFetchersList.add (fetcherName);

    }
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, registeredFetchersList);
    upButton.addListener (SWT.Selection, new UpButtonListener (selectedFetchersList));
    downButton.addListener (SWT.Selection, new DownButtonListener (selectedFetchersList));
    AddRemoveButtonListener addButtonListener = new AddRemoveButtonListener (registeredFetchersList, selectedFetchersList);
    addButton.addListener (SWT.Selection, addButtonListener);
    registeredFetchersList.addListener (SWT.MouseDoubleClick, addButtonListener);
    AddRemoveButtonListener removeButtonListener = new AddRemoveButtonListener (selectedFetchersList, registeredFetchersList);
    removeButton.addListener (SWT.Selection, removeButtonListener);
    selectedFetchersList.addListener (SWT.MouseDoubleClick, removeButtonListener);
    prefsButton.addListener (SWT.Selection, new PrefsListener ());
    shell.layout ();
    Rectangle bounds = registeredFetchersList.getBounds ();
    messageLabel.setLayoutData (LayoutHelper.formData (bounds.x + bounds.width - 10, SWT.DEFAULT, new FormAttachment (0), null, null, null));
    shell.pack ();
    cancelButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event e) {
            shell.close ();
            shell.dispose ();
        }}

    );
    okButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            saveFetchersToRegistry (selectedFetchersList.getItems ());
            shell.close ();
            shell.dispose ();
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="141" endline="145">
public void handleEvent (Event e) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="149" endline="154">
public void handleEvent (Event event) {
    saveFetchersToRegistry (selectedFetchersList.getItems ());
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="162" endline="173">
void saveFetchersToRegistry (String [] fetchersNamesToSave) {
    String [] fetchersLabelsToRetain = new String [fetchersNamesToSave.length + 1];
    fetchersLabelsToRetain [0] = IPFetcher.ID;
    for (int i = 0;
    i < fetchersNamesToSave.length; i ++) {
        fetchersLabelsToRetain [i + 1] = registeredFetcherIdsByNames.get (fetchersNamesToSave [i]);
    }
    fetcherRegistry.updateSelectedFetchers (fetchersLabelsToRetain);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="178" endline="190">
public void handleEvent (Event event) {
    String [] selection = selectedFetchersList.getSelection ();
    String fetcherName = selection.length > 0 ? selection [0] : selectedFetchersList.getItem (0);
    for (Fetcher fetcher : fetcherRegistry.getRegisteredFetchers ()) {
        if (fetcherName.equals (fetcher.getName ())) {
            fetcherRegistry.openPreferencesEditor (fetcher);
            break;
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="199" endline="203">
public AddRemoveButtonListener (List fromList, List toList) {
    this.fromList = fromList;
    this.toList = toList;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/SelectFetchersDialog.java" startline="205" endline="217">
public void handleEvent (Event event) {
    int [] selectedItems = fromList.getSelectionIndices ();
    for (int i = 0;
    i < selectedItems.length; i ++) {
        toList.add (fromList.getItem (selectedItems [i]));
    }
    fromList.remove (selectedItems);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatisticsDialog.java" startline="27" endline="31">
public StatisticsDialog (ScanningResultList scanningResults) {
    super (Labels.getLabel ("title.statistics"), null);
    this.scanningResults = scanningResults;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatisticsDialog.java" startline="33" endline="53">
@Override
public void open () {
    if (scanningResults.isInfoAvailable ()) {
        setMessage (prepareText ());
        if (shell != null) {
            shell.close ();
            shell.dispose ();
        }
        super.open ();
    } else {
        throw new UserErrorException ("commands.noResults");
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatisticsDialog.java" startline="55" endline="76">
String prepareText () {
    ScanInfo scanInfo = scanningResults.getScanInfo ();
    title2 = Labels.getLabel (scanInfo.isCompletedNormally () ? "text.scan.completed" : "text.scan.incomplete");
    String ln = System.getProperty ("line.separator");
    StringBuilder text = new StringBuilder ();
    text.append (Labels.getLabel ("text.scan.time.total")).append (timeToText (scanInfo.getScanTime ())).append (ln);
    text.append (Labels.getLabel ("text.scan.time.average")).append (timeToText ((double) scanInfo.getScanTime () / scanInfo.getHostCount ())).append (ln);
    text.append (ln).append (scanningResults.getFeederName ()).append (ln).append (scanningResults.getFeederInfo ()).append (ln).append (ln);
    text.append (Labels.getLabel ("text.scan.hosts.total")).append (scanInfo.getHostCount ()).append (ln);
    text.append (Labels.getLabel ("text.scan.hosts.alive")).append (scanInfo.getAliveCount ()).append (ln);
    if (scanInfo.getWithPortsCount () > 0) text.append (Labels.getLabel ("text.scan.hosts.ports")).append (scanInfo.getWithPortsCount ()).append (ln);

    return text.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatisticsDialog.java" startline="82" endline="93">
static String timeToText (double scanTime) {
    double totalSeconds = scanTime / 1000;
    double totalMinutes = totalSeconds / 60;
    double totalHours = totalMinutes / 60;
    NumberFormat format = new DecimalFormat ("#.#");
    if (totalHours >= 1) return format.format (totalHours) + Labels.getLabel ("unit.hour");

    if (totalMinutes >= 1) return format.format (totalMinutes) + Labels.getLabel ("unit.minute");

    return format.format (totalSeconds) + Labels.getLabel ("unit.second");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="46" endline="76">
public StatusBar (Shell shell, GUIConfig guiConfig, ScannerConfig scannerConfig) {
    this.guiConfig = guiConfig;
    this.scannerConfig = scannerConfig;
    composite = new Composite (shell, SWT.NONE);
    composite.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), null, new FormAttachment (100)));
    composite.setLayout (LayoutHelper.formLayout (1, 1, 2));
    statusText = new Label (composite, SWT.BORDER);
    statusText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (35), new FormAttachment (0), new FormAttachment (100)));
    setStatusText (null);
    displayMethodText = new Label (composite, SWT.BORDER);
    displayMethodText.setText (Labels.getLabel ("text.display." + DisplayMethod.PORTS));
    displayMethodText.pack ();
    displayMethodText.setLayoutData (LayoutHelper.formData (displayMethodText.getSize ().x, SWT.DEFAULT, new FormAttachment (statusText), null, new FormAttachment (0), new FormAttachment (100)));
    displayMethodText.addListener (SWT.MouseDown, new ConfigTextClickListener ());
    updateConfigText ();
    threadsText = new Label (composite, SWT.BORDER);
    setRunningThreads (Math.min (scannerConfig.maxThreads, 200));
    threadsText.pack ();
    threadsText.setLayoutData (LayoutHelper.formData (threadsText.getSize ().x, SWT.DEFAULT, new FormAttachment (displayMethodText), null, new FormAttachment (0), new FormAttachment (100)));
    setRunningThreads (0);
    progressBar = new ProgressBar (composite, SWT.BORDER);
    progressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (threadsText), new FormAttachment (100, Platform.MAC_OS ? - 20 : 0), new FormAttachment (0), new FormAttachment (100)));
    progressBar.setSelection (0);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="81" endline="84">
public void updateConfigText () {
    displayMethodText.setText (Labels.getLabel ("text.display." + guiConfig.displayMethod));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="89" endline="92">
Composite getComposite () {
    return composite;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="97" endline="100">
public boolean isDisposed () {
    return composite.isDisposed ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="106" endline="114">
public void setStatusText (String statusText) {
    if (statusText == null) {
        statusText = Labels.getLabel ("state.ready");
    }
    if (! this.statusText.isDisposed ()) this.statusText.setText (statusText);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="116" endline="131">
public void setRunningThreads (int runningThreads) {
    if (! threadsText.isDisposed ()) {
        boolean maxThreadsReached = runningThreads == scannerConfig.maxThreads;
        if (maxThreadsReachedBefore || maxThreadsReached) {
            Color newColor = threadsText.getDisplay ().getSystemColor (maxThreadsReached ? SWT.COLOR_DARK_RED : SWT.COLOR_WIDGET_FOREGROUND);
            threadsText.setForeground (newColor);
        }
        maxThreadsReachedBefore = maxThreadsReached;
        threadsText.setText (Labels.getLabel ("text.threads") + runningThreads + (maxThreadsReached ? Labels.getLabel ("text.threads.max") : ""));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="133" endline="137">
public void setProgress (int progress) {
    if (! progressBar.isDisposed ()) progressBar.setSelection (progress);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="139" endline="142">
public Shell getShell () {
    return composite.getShell ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="144" endline="148">
public void setEnabled (boolean enabled) {
    displayMethodText.setEnabled (enabled);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/StatusBar.java" startline="153" endline="175">
public void handleEvent (Event event) {
    if (event.type == SWT.MouseDown) {
        Menu popupMenu = new Menu (getShell (), SWT.POP_UP);
        for (DisplayMethod displayMethod : DisplayMethod.values ()) {
            MenuItem item = new MenuItem (popupMenu, 0);
            item.setText (Labels.getLabel ("text.display." + displayMethod));
            item.setData (displayMethod);
            item.addListener (SWT.Selection, this);
        }
        popupMenu.setVisible (true);
    }
    if (event.type == SWT.Selection) {
        guiConfig.displayMethod = (DisplayMethod) event.widget.getData ();
        updateConfigText ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/BrowserLauncher.java" startline="31" endline="70">
public static void openURL (String url) {
    try {
        if (Platform.WINDOWS) {
            Runtime.getRuntime ().exec ("rundll32 url.dll,FileProtocolHandler " + url);
        } else if (Platform.MAC_OS) {
            Class < ? > fileMgr = Class.forName ("com.apple.eio.FileManager");
            Method openURL = fileMgr.getDeclaredMethod ("openURL", new Class [] {String.class});
            openURL.invoke (null, new Object [] {url});
        } else {
            if (browser == null) {
                browser = execAndReturn ("gconftool", "-g", "/desktop/gnome/applications/browser/exec");
                if (browser == null) {
                    for (int count = 0;
                    count < BROWSERS.length && browser == null; count ++) if (Runtime.getRuntime ().exec (new String [] {"which", BROWSERS [count]}).waitFor () == 0) browser = BROWSERS [count];

                }
                if (browser == null) throw new Exception ("Could not find web browser");

            }
            Runtime.getRuntime ().exec (new String [] {browser, url});
        }

    } catch (Exception e) {
        throw new UserErrorException ("openURL.failed", url);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/BrowserLauncher.java" startline="72" endline="89">
private static String execAndReturn (String...exec) {
    try {
        Process p = Runtime.getRuntime ().exec (exec);
        if (p.waitFor () == 0) {
            BufferedReader reader = new BufferedReader (new InputStreamReader (p.getInputStream ()));
            String result = reader.readLine ();
            reader.close ();
            return result;
        }
    } catch (Exception e) {
    }
    return null;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="40" endline="43">
public ColumnResize (GUIConfig guiConfig) {
    this.guiConfig = guiConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="45" endline="55">
public void handleEvent (Event event) {
    TableColumn column = (TableColumn) event.widget;
    if (Platform.LINUX && column.getParent ().getColumn (column.getParent ().getColumnCount () - 1) == column) return;

    guiConfig.setColumnWidth ((Fetcher) column.getData (), column.getWidth ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="64" endline="68">
public ColumnClick (ColumnsMenu columnsMenu, StateMachine stateMachine) {
    this.columnsMenu = columnsMenu;
    this.stateMachine = stateMachine;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="70" endline="104">
public void handleEvent (Event e) {
    TableColumn tableColumn = (TableColumn) e.widget;
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    MenuItem sortMenuItem = columnsMenu.getItem (0);
    MenuItem preferencesMenuItem = columnsMenu.getItem (1);
    MenuItem aboutMenuItem = columnsMenu.getItem (2);
    if (tableColumn.getParent ().getSortColumn () == tableColumn) {
        sortMenuItem.setText (Labels.getLabel ("menu.columns.sortDirection"));
    } else {
        sortMenuItem.setText (Labels.getLabel ("menu.columns.sortBy") + fetcher.getName ());
    }
    sortMenuItem.setEnabled (stateMachine.inState (ScanningState.IDLE));
    preferencesMenuItem.setEnabled (fetcher.getPreferencesClass () != null && stateMachine.inState (ScanningState.IDLE));
    aboutMenuItem.setText (Labels.getLabel ("menu.columns.about") + fetcher.getName ());
    tableColumn.getParent ().forceFocus ();
    columnsMenu.setData (tableColumn);
    columnsMenu.setLocation (e.display.getCursorLocation ());
    columnsMenu.setVisible (true);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="112" endline="115">
public SortBy (ScanningResultList scanningResultList) {
    this.scanningResultList = scanningResultList;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="117" endline="136">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Table table = tableColumn.getParent ();
    if (table.getSortColumn () != tableColumn) {
        table.setSortColumn (tableColumn);
        table.setSortDirection (SWT.UP);
    } else {
        table.setSortDirection (table.getSortDirection () == SWT.UP ? SWT.DOWN : SWT.UP);
    }
    scanningResultList.sort (table.indexOf (tableColumn), table.getSortDirection () == SWT.UP);
    ((ResultTable) table).updateResults ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="144" endline="147">
public FetcherPreferences (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="149" endline="160">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    fetcherRegistry.openPreferencesEditor (fetcher);
    tableColumn.setText (fetcher.getFullName ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ColumnsActions.java" startline="166" endline="182">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    MessageBox messageBox = new MessageBox (tableColumn.getParent ().getShell (), SWT.ICON_INFORMATION | SWT.OK);
    messageBox.setText (Labels.getLabel ("text.fetchers.info") + fetcher.getName ());
    String info = fetcher.getInfo ();
    if (info == null) {
        info = Labels.getLabel ("text.fetchers.info.notAvailable");
    }
    messageBox.setMessage (info);
    messageBox.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="43" endline="53">
static void checkSelection (ResultTable resultTable) {
    if (resultTable.getItemCount () <= 0) {
        throw new UserErrorException ("commands.noResults");
    } else if (resultTable.getSelectionIndex () < 0) {
        throw new UserErrorException ("commands.noSelection");
    }

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="60" endline="66">
public Details (ResultTable resultTable, DetailsWindow detailsWindow) {
    this.resultTable = resultTable;
    this.detailsWindow = detailsWindow;
    resultTable.addListener (SWT.Traverse, this);
    resultTable.addListener (SWT.MouseDoubleClick, this);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="68" endline="77">
public void handleEvent (Event event) {
    if (event.type == SWT.Selection || (resultTable.getSelectionIndex () >= 0 && (event.type == SWT.MouseDoubleClick || event.detail == SWT.TRAVERSE_RETURN))) {
        event.doit = false;
        checkSelection (resultTable);
        detailsWindow.open ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="86" endline="91">
public Delete (ResultTable resultTable, StateMachine stateMachine, TableSelection selectionListener) {
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
    this.selectionListener = selectionListener;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="93" endline="110">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown && event.keyCode != SWT.DEL) return;

    if (! stateMachine.inState (ScanningState.IDLE)) return;

    checkSelection (resultTable);
    int firstSelection = resultTable.getSelectionIndex ();
    resultTable.remove (resultTable.getSelectionIndices ());
    resultTable.setSelection (firstSelection);
    event.widget = resultTable;
    selectionListener.handleEvent (event);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="118" endline="122">
public Rescan (ResultTable resultTable, StateMachine stateMachine) {
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="124" endline="128">
public void handleEvent (Event event) {
    checkSelection (resultTable);
    stateMachine.rescan ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="139" endline="142">
public CopyIP (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="144" endline="160">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown) {
        if ((event.keyCode != 'c' && event.stateMask != SWT.MOD1) || resultTable.getSelectionIndex () < 0) return;

    } else {
        checkSelection (resultTable);
    }
    Clipboard clipboard = new Clipboard (event.display);
    clipboard.setContents (new Object [] {resultTable.getItem (resultTable.getSelectionIndex ()).getText ()}, new Transfer [] {TextTransfer.getInstance ()});
    clipboard.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="167" endline="170">
public CopyIPDetails (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="172" endline="178">
public void handleEvent (Event event) {
    checkSelection (resultTable);
    Clipboard clipboard = new Clipboard (event.display);
    clipboard.setContents (new Object [] {resultTable.getSelectedResult ().toString ()}, new Transfer [] {TextTransfer.getInstance ()});
    clipboard.dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="187" endline="191">
public ShowOpenersMenu (OpenersConfig openersConfig, SelectOpener selectOpener) {
    this.openersConfig = openersConfig;
    this.openersSelectListener = selectOpener;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="193" endline="220">
public void handleEvent (Event event) {
    Menu openersMenu = (Menu) event.widget;
    MenuItem [] menuItems = openersMenu.getItems ();
    for (int i = 2;
    i < menuItems.length; i ++) {
        menuItems [i].dispose ();
    }
    int index = 0;
    for (String name : openersConfig) {
        MenuItem menuItem = new MenuItem (openersMenu, SWT.CASCADE);
        index ++;
        if (index <= 9) {
            name += "\tCtrl+" + index;
            menuItem.setAccelerator (SWT.MOD1 | ('0' + index));
        }
        menuItem.setText (name);
        menuItem.setData (new Integer (index));
        menuItem.addListener (SWT.Selection, openersSelectListener);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="229" endline="233">
public EditOpeners (FetcherRegistry fetcherRegistry, OpenersConfig openersConfig) {
    this.fetcherRegistry = fetcherRegistry;
    this.openersConfig = openersConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="235" endline="238">
public void handleEvent (Event event) {
    new EditOpenersDialog (fetcherRegistry, openersConfig).open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="249" endline="255">
public SelectOpener (OpenersConfig openersConfig, StatusBar statusBar, ResultTable resultTable, OpenerLauncher openerLauncher) {
    this.openersConfig = openersConfig;
    this.statusBar = statusBar;
    this.resultTable = resultTable;
    this.openerLauncher = openerLauncher;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="257" endline="287">
public void handleEvent (Event event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String name = menuItem.getText ();
    int indexOf = name.lastIndexOf ('\t');
    if (indexOf >= 0) {
        name = name.substring (0, indexOf);
    }
    Opener opener = openersConfig.getOpener (name);
    int selectedItem = resultTable.getSelectionIndex ();
    if (selectedItem < 0) {
        throw new UserErrorException ("commands.noSelection");
    }
    try {
        statusBar.setStatusText (Labels.getLabel ("state.opening") + name);
        openerLauncher.launch (opener, selectedItem);
        Thread.sleep (500);
    } catch (InterruptedException e) {
    } finally {
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="39" endline="43">
public Add (FavoritesConfig favoritesConfig, FeederGUIRegistry feederRegistry) {
    this.favoritesConfig = favoritesConfig;
    this.feederRegistry = feederRegistry;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="45" endline="62">
public void handleEvent (Event event) {
    String feederInfo = feederRegistry.current ().getInfo ();
    InputDialog inputDialog = new InputDialog (Labels.getLabel ("title.favorite.add"), Labels.getLabel ("text.favorite.add"));
    String favoriteName = inputDialog.open (feederInfo);
    if (favoriteName != null) {
        if (favoritesConfig.get (favoriteName) != null) {
            throw new UserErrorException ("favorite.alreadyExists");
        }
        favoritesConfig.add (favoriteName, feederRegistry.current ());
        event.display.getActiveShell ().setText (favoriteName + " - " + Version.NAME);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="71" endline="76">
public Select (FavoritesConfig favoritesConfig, FeederGUIRegistry feederRegistry, StartStopScanningAction startStopAction) {
    this.favoritesConfig = favoritesConfig;
    this.feederRegistry = feederRegistry;
    this.startStopAction = startStopAction;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="78" endline="89">
public void widgetSelected (SelectionEvent event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String key = menuItem.getText ();
    feederRegistry.select (favoritesConfig.getFeederId (key));
    feederRegistry.current ().unserialize (favoritesConfig.getSerializedParts (key));
    event.display.getActiveShell ().setText (key + " - " + Version.NAME);
    startStopAction.widgetSelected (event);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="91" endline="94">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="101" endline="104">
public Edit (FavoritesConfig favoritesConfig) {
    this.favoritesConfig = favoritesConfig;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="106" endline="109">
public void handleEvent (Event event) {
    new EditFavoritesDialog (favoritesConfig).open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="118" endline="124">
public ShowMenu (FavoritesConfig favoritesConfig, Select favoritesSelectListener, StateMachine stateMachine) {
    this.favoritesConfig = favoritesConfig;
    this.favoritesSelectListener = favoritesSelectListener;
    this.stateMachine = stateMachine;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="126" endline="147">
public void handleEvent (Event event) {
    Menu favoritesMenu = (Menu) event.widget;
    MenuItem [] menuItems = favoritesMenu.getItems ();
    for (int i = 3;
    i < menuItems.length; i ++) {
        menuItems [i].dispose ();
    }
    for (String name : favoritesConfig) {
        MenuItem menuItem = new MenuItem (favoritesMenu, SWT.CASCADE);
        menuItem.setText (name);
        menuItem.setEnabled (stateMachine.inState (ScanningState.IDLE));
        menuItem.addSelectionListener (favoritesSelectListener);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FeederActions.java" startline="40" endline="45">
public HostnameButton (Text hostnameText, Text ipText, Combo netmaskCombo) {
    this.hostnameText = hostnameText;
    this.ipText = ipText;
    this.netmaskCombo = netmaskCombo;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FeederActions.java" startline="47" endline="50">
public void widgetDefaultSelected (SelectionEvent event) {
    widgetSelected (event);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FeederActions.java" startline="52" endline="83">
public void widgetSelected (SelectionEvent event) {
    String hostname = hostnameText.getText ();
    try {
        if (hostname.equals (InetAddress.getLocalHost ().getHostName ())) {
            askLocalIPAddress ();
        } else {
            InetAddress address = InetAddressUtils.getAddressByName (hostname);
            ipText.setText (address.getHostAddress ());
            String realHostname = address.getCanonicalHostName ();
            if (! address.getHostAddress ().equals (realHostname)) {
                hostnameText.setText (realHostname);
                hostnameText.setSelection (realHostname.length ());
            }
        }
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidHostname");
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FeederActions.java" startline="85" endline="92">
public void keyTraversed (TraverseEvent e) {
    if (e.detail == SWT.TRAVERSE_RETURN) {
        widgetSelected (null);
        e.doit = false;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FeederActions.java" startline="97" endline="154">
private void askLocalIPAddress () {
    try {
        Menu popupMenu = new Menu (Display.getCurrent ().getActiveShell (), SWT.POP_UP);
        Listener menuItemListener = new Listener () {
            public void handleEvent (Event event) {
                MenuItem menuItem = (MenuItem) event.widget;
                String address = (String) menuItem.getData ();
                ipText.setText (address.substring (0, address.lastIndexOf ('/')));
                netmaskCombo.setText (address.substring (address.lastIndexOf ('/')));
                menuItem.getParent ().dispose ();
            }}

        ;
        for (Enumeration < NetworkInterface > i = NetworkInterface.getNetworkInterfaces ();
        i.hasMoreElements ();) {
            NetworkInterface networkInterface = i.nextElement ();
            for (InterfaceAddress ifaddr : networkInterface.getInterfaceAddresses ()) {
                InetAddress address = ifaddr.getAddress ();
                if (! address.isLoopbackAddress () && address instanceof Inet4Address) {
                    MenuItem menuItem = new MenuItem (popupMenu, 0);
                    menuItem.setText (networkInterface.getDisplayName () + ": " + address.getHostAddress ());
                    menuItem.setData (address.getHostAddress () + "/" + ifaddr.getNetworkPrefixLength ());
                    menuItem.addListener (SWT.Selection, menuItemListener);
                }
            }
        }
        if (popupMenu.getItemCount () > 1) {
            popupMenu.setLocation (Display.getCurrent ().getCursorLocation ());
            popupMenu.setVisible (true);
        } else {
            if (popupMenu.getItemCount () == 1) {
                Event event = new Event ();
                event.widget = popupMenu.getItem (0);
                menuItemListener.handleEvent (event);
                popupMenu.dispose ();
            }
        }
    } catch (SocketException e) {
        LOG.log (Level.FINE, "Cannot enumerate network interfaces", e);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/FeederActions.java" startline="104" endline="112">
public void handleEvent (Event event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String address = (String) menuItem.getData ();
    ipText.setText (address.substring (0, address.lastIndexOf ('/')));
    netmaskCombo.setText (address.substring (address.lastIndexOf ('/')));
    menuItem.getParent ().dispose ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="36" endline="40">
NextHost (ResultTable resultTable, ResultType whatToSearchFor) {
    this.resultTable = resultTable;
    this.whatToSearchFor = whatToSearchFor;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="42" endline="45">
protected int inc (int i) {
    return i + 1;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="47" endline="50">
protected int startIndex () {
    return resultTable.getSelectionIndex ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="52" endline="78">
public final void handleEvent (Event event) {
    ScanningResultList results = resultTable.getScanningResults ();
    int numElements = resultTable.getItemCount ();
    int startIndex = startIndex ();
    for (int i = inc (startIndex);
    i < numElements && i >= 0; i = inc (i)) {
        ScanningResult scanningResult = results.getResult (i);
        if (whatToSearchFor.matches (scanningResult.getType ())) {
            resultTable.setSelection (i);
            resultTable.setFocus ();
            return;
        }
    }
    if (startIndex >= 0 && startIndex < numElements) {
        resultTable.deselectAll ();
        handleEvent (event);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="85" endline="88">
public PrevHost (ResultTable resultTable, ResultType whatToSearchFor) {
    super (resultTable, whatToSearchFor);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="90" endline="93">
protected int inc (int i) {
    return i - 1;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="95" endline="99">
protected int startIndex () {
    int curIndex = resultTable.getSelectionIndex ();
    return curIndex >= 0 ? curIndex : resultTable.getItemCount ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="104" endline="107">
public NextAliveHost (ResultTable resultTable) {
    super (resultTable, ResultType.ALIVE);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="112" endline="115">
public NextDeadHost (ResultTable resultTable) {
    super (resultTable, ResultType.DEAD);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="120" endline="123">
public NextHostWithInfo (ResultTable resultTable) {
    super (resultTable, ResultType.WITH_PORTS);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="128" endline="131">
public PrevAliveHost (ResultTable resultTable) {
    super (resultTable, ResultType.ALIVE);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="136" endline="139">
public PrevDeadHost (ResultTable resultTable) {
    super (resultTable, ResultType.DEAD);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="144" endline="147">
public PrevHostWithInfo (ResultTable resultTable) {
    super (resultTable, ResultType.WITH_PORTS);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="157" endline="161">
public Find (StatusBar statusBar, ResultTable resultTable) {
    this.statusBar = statusBar;
    this.resultTable = resultTable;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="163" endline="182">
public void handleEvent (Event event) {
    InputDialog dialog = new InputDialog (Labels.getLabel ("title.find"), Labels.getLabel ("text.find"));
    String text = dialog.open (lastText, Labels.getLabel ("button.find.next"));
    if (text == null) {
        return;
    }
    lastText = text;
    try {
        statusBar.setStatusText (Labels.getLabel ("state.searching"));
        findText (text, statusBar.getShell ());
    } finally {
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="184" endline="220">
private final void findText (String text, Shell activeShell) {
    ScanningResultList results = resultTable.getScanningResults ();
    int startIndex = resultTable.getSelectionIndex () + 1;
    int foundIndex = results.findText (text, startIndex);
    if (foundIndex >= 0) {
        resultTable.setSelection (foundIndex);
        resultTable.setFocus ();
        return;
    }
    if (startIndex > 0) {
        MessageBox messageBox = new MessageBox (activeShell, SWT.YES | SWT.NO | SWT.ICON_QUESTION);
        messageBox.setText (Labels.getLabel ("title.find"));
        messageBox.setMessage (Labels.getLabel ("text.find.notFound") + " " + Labels.getLabel ("text.find.restart"));
        if (messageBox.open () == SWT.YES) {
            resultTable.deselectAll ();
            findText (text, activeShell);
        }
    } else {
        MessageBox messageBox = new MessageBox (activeShell, SWT.OK | SWT.ICON_INFORMATION);
        messageBox.setText (Labels.getLabel ("title.find"));
        messageBox.setMessage (Labels.getLabel ("text.find.notFound"));
        messageBox.open ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="40" endline="43">
public void handleEvent (Event event) {
    new GettingStartedDialog ().open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="50" endline="53">
public CommandLineUsage (CommandLineProcessor cli) {
    this.cli = cli;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="55" endline="60">
public void handleEvent (Event event) {
    InfoDialog dialog = new InfoDialog (Version.NAME, Labels.getLabel ("title.commandline"));
    dialog.setMessage (cli.toString ());
    dialog.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="67" endline="71">
public About (AboutDialog aboutDialog) {
    super ();
    this.aboutDialog = aboutDialog;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="73" endline="76">
public void handleEvent (Event event) {
    aboutDialog.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="81" endline="84">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.WEBSITE);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="89" endline="92">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.FAQ_URL);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="97" endline="100">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.PLUGINS_URL);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="107" endline="110">
public CheckVersion (StatusBar statusBar) {
    this.statusBar = statusBar;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="112" endline="115">
public void handleEvent (final Event event) {
    check ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="117" endline="185">
public void check () {
    statusBar.setStatusText (Labels.getLabel ("state.retrievingVersion"));
    Runnable checkVersionCode = new Runnable () {
        public void run () {
            BufferedReader reader = null;
            String message = null;
            int messageStyle = SWT.ICON_WARNING;
            try {
                URL url = new URL (Version.LATEST_VERSION_URL);
                URLConnection conn = url.openConnection ();
                reader = new BufferedReader (new InputStreamReader (conn.getInputStream ()));
                String latestVersion = reader.readLine ();
                latestVersion = latestVersion.substring (latestVersion.indexOf (' ') + 1);
                if (! Version.getVersion ().equals (latestVersion)) {
                    message = Labels.getLabel ("text.version.old");
                    message = message.replaceFirst ("%LATEST", latestVersion);
                    message = message.replaceFirst ("%VERSION", Version.getVersion ());
                    messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
                } else {
                    message = Labels.getLabel ("text.version.latest");
                    messageStyle = SWT.ICON_INFORMATION;
                }
            } catch (Exception e) {
                message = Labels.getLabel ("exception.UserErrorException.version.latestFailed");
                Logger.getLogger (getClass ().getName ()).log (Level.WARNING, message, e);
            } finally {
                try {
                    if (reader != null) reader.close ();

                } catch (IOException e) {
                }
                final String messageToShow = message;
                final int messageStyleToShow = messageStyle;
                Display.getDefault ().asyncExec (new Runnable () {
                    public void run () {
                        statusBar.setStatusText (null);
                        MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow);
                        messageBox.setText (Version.getFullName ());
                        messageBox.setMessage (messageToShow);
                        if (messageBox.open () == SWT.YES) {
                            BrowserLauncher.openURL (Version.DOWNLOAD_URL);
                        }
                    }}

                );
            }
        }}

    new Thread (checkVersionCode).start ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="123" endline="182">
public void run () {
    BufferedReader reader = null;
    String message = null;
    int messageStyle = SWT.ICON_WARNING;
    try {
        URL url = new URL (Version.LATEST_VERSION_URL);
        URLConnection conn = url.openConnection ();
        reader = new BufferedReader (new InputStreamReader (conn.getInputStream ()));
        String latestVersion = reader.readLine ();
        latestVersion = latestVersion.substring (latestVersion.indexOf (' ') + 1);
        if (! Version.getVersion ().equals (latestVersion)) {
            message = Labels.getLabel ("text.version.old");
            message = message.replaceFirst ("%LATEST", latestVersion);
            message = message.replaceFirst ("%VERSION", Version.getVersion ());
            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
        } else {
            message = Labels.getLabel ("text.version.latest");
            messageStyle = SWT.ICON_INFORMATION;
        }
    } catch (Exception e) {
        message = Labels.getLabel ("exception.UserErrorException.version.latestFailed");
        Logger.getLogger (getClass ().getName ()).log (Level.WARNING, message, e);
    } finally {
        try {
            if (reader != null) reader.close ();

        } catch (IOException e) {
        }
        final String messageToShow = message;
        final int messageStyleToShow = messageStyle;
        Display.getDefault ().asyncExec (new Runnable () {
            public void run () {
                statusBar.setStatusText (null);
                MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow);
                messageBox.setText (Version.getFullName ());
                messageBox.setMessage (messageToShow);
                if (messageBox.open () == SWT.YES) {
                    BrowserLauncher.openURL (Version.DOWNLOAD_URL);
                }
            }}

        );
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="169" endline="179">
public void run () {
    statusBar.setStatusText (null);
    MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow);
    messageBox.setText (Version.getFullName ());
    messageBox.setMessage (messageToShow);
    if (messageBox.open () == SWT.YES) {
        BrowserLauncher.openURL (Version.DOWNLOAD_URL);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="34" endline="38">
public OpenerLauncher (FetcherRegistry fetcherRegistry, ScanningResultList scanningResults) {
    this.fetcherRegistry = fetcherRegistry;
    this.scanningResults = scanningResults;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="40" endline="76">
public void launch (Opener opener, int selectedItem) {
    String openerString = prepareOpenerStringForItem (opener.execString, selectedItem);
    if (openerString.startsWith ("http:") || openerString.startsWith ("https:") || openerString.startsWith ("ftp:") || openerString.startsWith ("mailto:") || openerString.startsWith ("\\\\")) {
        BrowserLauncher.openURL (openerString);
    } else {
        try {
            if (opener.inTerminal) {
                TerminalLauncher.launchInTerminal (openerString, opener.workingDir);
            } else {
                if (Platform.LINUX) {
                    Runtime.getRuntime ().exec (new String [] {"sh", "-c", openerString}, null, opener.workingDir);
                } else {
                    Runtime.getRuntime ().exec (splitCommand (openerString), null, opener.workingDir);
                }
            }
        } catch (Exception e) {
            throw new UserErrorException ("opener.failed", openerString);
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="83" endline="112">
static String [] splitCommand (String command) {
    StringTokenizer tokenizer = new StringTokenizer (command);
    List < String > result = new ArrayList < String > ();
    while (tokenizer.hasMoreTokens ()) {
        String token = tokenizer.nextToken (" \t");
        try {
            if (token.startsWith ("\"")) {
                token = token.substring (1) + tokenizer.nextToken ("\"");
                tokenizer.nextToken (" \t");
            } else if (token.startsWith ("'")) {
                token = token.substring (1) + tokenizer.nextToken ("'");
                tokenizer.nextToken (" \t");
            }

        } catch (NoSuchElementException e) {
        }
        result.add (token);
    }
    return result.toArray (new String [result.size ()]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="120" endline="141">
String prepareOpenerStringForItem (String openerString, int selectedItem) {
    Pattern paramsPattern = Pattern.compile ("\\$\\{(.+?)\\}");
    Matcher matcher = paramsPattern.matcher (openerString);
    StringBuffer sb = new StringBuffer (64);
    while (matcher.find ()) {
        String fetcherId = matcher.group (1);
        Object scannedValue = getScannedValue (selectedItem, fetcherId);
        if (scannedValue == null || scannedValue instanceof Empty) {
            throw new UserErrorException ("opener.nullFetcherValue", fetcherId);
        }
        matcher.appendReplacement (sb, scannedValue.toString ());
    }
    matcher.appendTail (sb);
    return sb.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="143" endline="161">
private Object getScannedValue (int selectedItem, String fetcherId) {
    int fetcherIndex = fetcherRegistry.getSelectedFetcherIndex (fetcherId);
    if (fetcherIndex < 0) {
        throw new UserErrorException ("opener.unknownFetcher", fetcherId);
    }
    Object value = scanningResults.getResult (selectedItem).getValues ().get (fetcherIndex);
    if ((value == null || value instanceof Empty) && fetcherId.equals (HostnameFetcher.ID)) {
        value = scanningResults.getResult (selectedItem).getAddress ().getHostAddress ();
    }
    return value;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="42" endline="45">
public void handleEvent (Event event) {
    event.display.getActiveShell ().close ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="56" endline="63">
SaveResults (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine, boolean isSelection) {
    this.exporterRegistry = exporterRegistry;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
    this.stateMachine = stateMachine;
    this.isSelection = isSelection;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="65" endline="127">
public void handleEvent (Event event) {
    if (resultTable.getItemCount () <= 0) {
        throw new UserErrorException ("commands.noResults");
    }
    if (! stateMachine.inState (ScanningState.IDLE)) {
        MessageBox box = new MessageBox (resultTable.getShell (), SWT.YES | SWT.NO | SWT.ICON_WARNING);
        box.setText (Version.NAME);
        box.setMessage (Labels.getLabel ("exception.ExporterException.scanningInProgress"));
        if (box.open () != SWT.YES) return;

    }
    FileDialog fileDialog = new FileDialog (resultTable.getShell (), SWT.SAVE);
    List < String > extensions = new ArrayList < String > ();
    List < String > descriptions = new ArrayList < String > ();
    StringBuffer labelBuffer = new StringBuffer (Labels.getLabel (isSelection ? "title.exportSelection" : "title.exportAll"));
    addFileExtensions (extensions, descriptions, labelBuffer);
    fileDialog.setText (labelBuffer.toString ());
    fileDialog.setFilterExtensions (extensions.toArray (new String [extensions.size ()]));
    fileDialog.setFilterNames (descriptions.toArray (new String [descriptions.size ()]));
    String fileName = fileDialog.open ();
    if (fileName != null) {
        Exporter exporter = exporterRegistry.createExporter (fileName);
        statusBar.setStatusText (Labels.getLabel ("state.exporting"));
        ExportProcessor exportProcessor = new ExportProcessor (exporter, new File (fileName), false);
        ScanningResultFilter scanningResultSelector = null;
        if (isSelection) {
            scanningResultSelector = new ScanningResultFilter () {
                public boolean isResultSelected (int index, ScanningResult result) {
                    return resultTable.isSelected (index);
                }}

            ;
        }
        exportProcessor.process (resultTable.getScanningResults (), scanningResultSelector);
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="116" endline="119">
public boolean isResultSelected (int index, ScanningResult result) {
    return resultTable.isSelected (index);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="129" endline="141">
private final void addFileExtensions (List < String > extensions, List < String > descriptions, StringBuffer sb) {
    sb.append (" (");
    for (Exporter exporter : exporterRegistry) {
        extensions.add ("*." + exporter.getFilenameExtension ());
        sb.append (exporter.getFilenameExtension ()).append (", ");
        descriptions.add (Labels.getLabel (exporter.getId ()));
    }
    sb.delete (sb.length () - 2, sb.length ());
    sb.append (")");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="146" endline="149">
public SaveAll (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine) {
    super (exporterRegistry, resultTable, statusBar, stateMachine, false);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="154" endline="157">
public SaveSelection (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine) {
    super (exporterRegistry, resultTable, statusBar, stateMachine, true);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="162" endline="173">
public void handleEvent (Event event) {
    new Thread ("main") {
        public void run () {
            Main.main ();
        }}

    .start ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="168" endline="171">
public void run () {
    Main.main ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="65" endline="84">
StartStopScanningAction (Display display) {
    this.display = display;
    buttonImages [ScanningState.IDLE.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.start.img"));
    buttonImages [ScanningState.SCANNING.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.stop.img"));
    buttonImages [ScanningState.STARTING.ordinal ()] = buttonImages [ScanningState.SCANNING.ordinal ()];
    buttonImages [ScanningState.RESTARTING.ordinal ()] = buttonImages [ScanningState.SCANNING.ordinal ()];
    buttonImages [ScanningState.STOPPING.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.kill.img"));
    buttonImages [ScanningState.KILLING.ordinal ()] = buttonImages [ScanningState.STOPPING.ordinal ()];
    buttonTexts [ScanningState.IDLE.ordinal ()] = Labels.getLabel ("button.start");
    buttonTexts [ScanningState.SCANNING.ordinal ()] = Labels.getLabel ("button.stop");
    buttonTexts [ScanningState.STARTING.ordinal ()] = buttonTexts [ScanningState.SCANNING.ordinal ()];
    buttonTexts [ScanningState.RESTARTING.ordinal ()] = buttonTexts [ScanningState.SCANNING.ordinal ()];
    buttonTexts [ScanningState.STOPPING.ordinal ()] = Labels.getLabel ("button.kill");
    buttonTexts [ScanningState.KILLING.ordinal ()] = Labels.getLabel ("button.kill");
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="86" endline="106">
public StartStopScanningAction (ScannerDispatcherThreadFactory scannerThreadFactory, StateMachine stateMachine, ResultTable resultTable, StatusBar statusBar, FeederGUIRegistry feederRegistry, PingerRegistry pingerRegistry, Button startStopButton, GUIConfig guiConfig) {
    this (startStopButton.getDisplay ());
    this.scannerThreadFactory = scannerThreadFactory;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
    this.feederRegistry = feederRegistry;
    this.pingerRegistry = pingerRegistry;
    this.button = startStopButton;
    this.stateMachine = stateMachine;
    this.guiConfig = guiConfig;
    stateMachine.addTransitionListener (this);
    ScanningState state = stateMachine.getState ();
    button.setImage (buttonImages [state.ordinal ()]);
    button.setText (buttonTexts [state.ordinal ()]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="111" endline="114">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="119" endline="128">
public void widgetSelected (SelectionEvent event) {
    if (stateMachine.inState (ScanningState.IDLE)) {
        if (! preScanChecks ()) return;

    }
    stateMachine.transitionToNext ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="130" endline="148">
private final boolean preScanChecks () {
    pingerRegistry.checkSelectedPinger ();
    if (guiConfig.askScanConfirmation && resultTable.getItemCount () > 0) {
        MessageBox box = new MessageBox (resultTable.getShell (), SWT.ICON_QUESTION | SWT.YES | SWT.NO);
        box.setText (Labels.getLabel ("text.scan.new"));
        box.setMessage (Labels.getLabel ("text.scan.confirmation"));
        if (box.open () != SWT.YES) {
            return false;
        }
    }
    return true;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="150" endline="208">
public void transitionTo (final ScanningState state, final Transition transition) {
    if (statusBar.isDisposed () || transition == Transition.INIT) return;

    switch (state) {
        case IDLE :
            button.setEnabled (true);
            updateProgress (null, 0, 0);
            statusBar.setStatusText (null);
            break;
        case STARTING :
            resultTable.removeAll ();
            try {
                scannerThread = scannerThreadFactory.createScannerThread (feederRegistry.createFeeder (), StartStopScanningAction.this, createResultsCallback (state));
                stateMachine.startScanning ();
                mainWindowTitle = statusBar.getShell ().getText ();
            } catch (RuntimeException e) {
                stateMachine.reset ();
                throw e;
            }
            break;
        case RESTARTING :
            resultTable.resetSelection ();
            try {
                scannerThread = scannerThreadFactory.createScannerThread (feederRegistry.createRescanFeeder (resultTable.getSelection ()), StartStopScanningAction.this, createResultsCallback (state));
                stateMachine.startScanning ();
                mainWindowTitle = statusBar.getShell ().getText ();
            } catch (RuntimeException e) {
                stateMachine.reset ();
                throw e;
            }
            break;
        case SCANNING :
            scannerThread.start ();
            break;
        case STOPPING :
            statusBar.setStatusText (Labels.getLabel ("state.waitForThreads"));
            break;
        case KILLING :
            button.setEnabled (false);
            statusBar.setStatusText (Labels.getLabel ("state.killingThreads"));
            break;
    }
    button.setImage (buttonImages [state.ordinal ()]);
    button.setText (buttonTexts [state.ordinal ()]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="213" endline="259">
private final ScanningResultCallback createResultsCallback (ScanningState state) {
    if (guiConfig.displayMethod == DisplayMethod.ALL || state == ScanningState.RESTARTING) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
                resultTable.addOrUpdateResultRow (result);
            } public void consumeResults (ScanningResult result) {
                resultTable.addOrUpdateResultRow (result);
            }}

        ;
    }
    if (guiConfig.displayMethod == DisplayMethod.ALIVE) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
            } public void consumeResults (ScanningResult result) {
                if (result.getType ().ordinal () >= ResultType.ALIVE.ordinal ()) resultTable.addOrUpdateResultRow (result);

            }}

        ;
    }
    if (guiConfig.displayMethod == DisplayMethod.PORTS) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
            } public void consumeResults (ScanningResult result) {
                if (result.getType () == ResultType.WITH_PORTS) resultTable.addOrUpdateResultRow (result);

            }}

        ;
    }
    throw new UnsupportedOperationException (guiConfig.displayMethod.toString ());
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="220" endline="223">
public void prepareForResults (ScanningResult result) {
    resultTable.addOrUpdateResultRow (result);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="224" endline="227">
public void consumeResults (ScanningResult result) {
    resultTable.addOrUpdateResultRow (result);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="234" endline="236">
public void prepareForResults (ScanningResult result) {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="237" endline="241">
public void consumeResults (ScanningResult result) {
    if (result.getType ().ordinal () >= ResultType.ALIVE.ordinal ()) resultTable.addOrUpdateResultRow (result);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="248" endline="250">
public void prepareForResults (ScanningResult result) {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="251" endline="255">
public void consumeResults (ScanningResult result) {
    if (result.getType () == ResultType.WITH_PORTS) resultTable.addOrUpdateResultRow (result);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="261" endline="290">
public void updateProgress (final InetAddress currentAddress, final int runningThreads, final int percentageComplete) {
    if (display.isDisposed ()) return;

    display.asyncExec (new Runnable () {
        public void run () {
            if (statusBar.isDisposed ()) return;

            if (currentAddress != null) {
                statusBar.setStatusText (Labels.getLabel ("state.scanning") + currentAddress.getHostAddress ());
            }
            statusBar.setRunningThreads (runningThreads);
            statusBar.setProgress (percentageComplete);
            if (! stateMachine.inState (ScanningState.IDLE)) statusBar.getShell ().setText (percentageComplete + "% - " + mainWindowTitle);
            else statusBar.getShell ().setText (mainWindowTitle);

            button.setImage (buttonImages [stateMachine.getState ().ordinal ()]);
        }}

    );
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="267" endline="288">
public void run () {
    if (statusBar.isDisposed ()) return;

    if (currentAddress != null) {
        statusBar.setStatusText (Labels.getLabel ("state.scanning") + currentAddress.getHostAddress ());
    }
    statusBar.setRunningThreads (runningThreads);
    statusBar.setProgress (percentageComplete);
    if (! stateMachine.inState (ScanningState.IDLE)) statusBar.getShell ().setText (percentageComplete + "% - " + mainWindowTitle);
    else statusBar.getShell ().setText (mainWindowTitle);

    button.setImage (buttonImages [stateMachine.getState ().ordinal ()]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/TerminalLauncher.java" startline="42" endline="105">
public static void launchInTerminal (String execString, File workingDir) {
    try {
        if (Platform.WINDOWS) {
            File batFile = File.createTempFile ("launch", ".cmd");
            batFile.deleteOnExit ();
            FileWriter writer = new FileWriter (batFile);
            writer.write ("@rem This is a temporary file generated by Angry IP Scanner\n" + "@start cmd /k " + execString);
            writer.close ();
            Runtime.getRuntime ().exec (batFile.getAbsolutePath (), null, workingDir);
        } else if (Platform.MAC_OS) {
            Runtime.getRuntime ().exec (new String [] {"osascript", "-e", "tell application \"Terminal\" to do script \"" + execString + "\""}, null, workingDir);
        } else {
            if (workingTerminal == UNKNOWN) {
                detectWorkingTerminal ();
            }
            switch (workingTerminal) {
                case GNOME :
                    Runtime.getRuntime ().exec (new String [] {"gnome-terminal", "-x", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                case XFCE :
                    Runtime.getRuntime ().exec (new String [] {"xfce4-terminal", "-x", "sh", "-c", execString + ";sh"}, null, workingDir);
                    break;
                case KDE :
                    Runtime.getRuntime ().exec (new String [] {"konsole", "-e", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                default :
                    Runtime.getRuntime ().exec (new String [] {"xterm", "-e", "sh", "-c", execString + ";sh"}, null, workingDir);
            }
        }

    } catch (Exception e) {
        LOG.log (Level.WARNING, "openTerminal.failed", e);
        if (workingTerminal != XTERM) {
            workingTerminal = XTERM;
            launchInTerminal (execString, workingDir);
        } else {
            throw new UserErrorException ("openTerminal.failed", execString);
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/TerminalLauncher.java" startline="107" endline="125">
private static void detectWorkingTerminal () throws InterruptedException, IOException {
    if (Runtime.getRuntime ().exec (new String [] {"pidof", "nautilus"}).waitFor () == 0) {
        workingTerminal = GNOME;
    } else if (Runtime.getRuntime ().exec (new String [] {"pidof", "xfce4-session", "xfwm4", "Thunar", "xfdesktop"}).waitFor () == 0) {
        workingTerminal = XFCE;
    } else if (Runtime.getRuntime ().exec (new String [] {"pidof", "dcopserver"}).waitFor () == 0) {
        workingTerminal = KDE;
    } else {
        workingTerminal = XTERM;
    }

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="43" endline="48">
public Preferences (PreferencesDialog preferencesDialog, ResultTable resultTable, StatusBar statusBar) {
    this.preferencesDialog = preferencesDialog;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="50" endline="59">
public void handleEvent (Event event) {
    preferencesDialog.open ();
    resultTable.updateResults ();
    resultTable.updateColumnNames ();
    statusBar.updateConfigText ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="67" endline="70">
public ChooseFetchers (SelectFetchersDialog selectFetchersDialog) {
    this.selectFetchersDialog = selectFetchersDialog;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="72" endline="75">
public void handleEvent (Event event) {
    selectFetchersDialog.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="85" endline="92">
public ScanStatistics (GUIConfig guiConfig, StatisticsDialog statisticsDialog, StateMachine stateMachine, CommandProcessor commandProcessor) {
    this.guiConfig = guiConfig;
    this.statisticsDialog = statisticsDialog;
    if (! commandProcessor.shouldAutoQuit ()) stateMachine.addTransitionListener (this);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="94" endline="97">
public void handleEvent (Event event) {
    statisticsDialog.open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="99" endline="106">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.COMPLETE && guiConfig.showScanStats) {
        handleEvent (null);
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="117" endline="121">
public TableSelection (StatusBar statusBar, StateMachine stateMachine) {
    this.statusBar = statusBar;
    this.stateMachine = stateMachine;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="123" endline="134">
public void handleEvent (Event event) {
    if (stateMachine.inState (ScanningState.IDLE)) {
        Table resultTable = (Table) event.widget;
        int selectionCount = resultTable.getSelectionCount ();
        if (selectionCount > 1) statusBar.setStatusText (selectionCount + Labels.getLabel ("text.hostsSelected"));
        else statusBar.setStatusText (null);

    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="144" endline="149">
public SelectDesired (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    this.resultTable = resultTable;
    this.results = results;
    this.tableSelectionListener = tableSelectionListener;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="151" endline="165">
public void handleEvent (Event event) {
    int count = resultTable.getItemCount ();
    resultTable.deselectAll ();
    for (int i = 0;
    i < count; i ++) {
        if (isDesired (results.getResult (i).getType ())) {
            resultTable.select (i);
        }
    }
    event.widget = resultTable;
    tableSelectionListener.handleEvent (event);
    resultTable.forceFocus ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="172" endline="175">
public SelectAlive (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="177" endline="180">
boolean isDesired (ResultType type) {
    return type.ordinal () >= ResultType.ALIVE.ordinal ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="185" endline="188">
public SelectDead (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="190" endline="193">
boolean isDesired (ResultType type) {
    return type == ResultType.DEAD;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="198" endline="201">
public SelectWithPorts (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="203" endline="206">
boolean isDesired (ResultType type) {
    return type == ResultType.WITH_PORTS;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="211" endline="214">
public SelectWithoutPorts (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="216" endline="219">
boolean isDesired (ResultType type) {
    return type == ResultType.ALIVE;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="231" endline="235">
public SelectAll (ResultTable resultTable, TableSelection tableSelectionListener) {
    this.resultTable = resultTable;
    this.tableSelectionListener = tableSelectionListener;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="237" endline="248">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown && event.keyCode == 'a' && event.stateMask == SWT.MOD1) {
        resultTable.selectAll ();
        event.widget = resultTable;
        tableSelectionListener.handleEvent (event);
        event.doit = false;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="256" endline="260">
public SelectInvert (ResultTable resultTable, TableSelection tableSelectionListener) {
    this.resultTable = resultTable;
    this.tableSelectionListener = tableSelectionListener;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/actions/ToolsActions.java" startline="262" endline="279">
public void handleEvent (Event event) {
    int count = resultTable.getItemCount ();
    resultTable.setRedraw (false);
    for (int i = 0;
    i < count; i ++) {
        if (resultTable.isSelected (i)) resultTable.deselect (i);
        else resultTable.select (i);

    }
    resultTable.setRedraw (true);
    resultTable.redraw ();
    event.widget = resultTable;
    tableSelectionListener.handleEvent (event);
    resultTable.forceFocus ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="34" endline="39">
public AbstractFeederGUI (Composite parent) {
    super (parent, SWT.NONE);
    setVisible (false);
    initialize ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="46" endline="49">
public String getFeederId () {
    return feeder.getId ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="54" endline="57">
public String getFeederName () {
    return feeder.getName ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="62" endline="65">
public String getInfo () {
    return getFeederName () + ": " + createFeeder ().getInfo ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="77" endline="114">
protected static void asyncFillLocalHostInfo (final Text hostnameText, final Text ipText) {
    new Thread () {
        public void run () {
            synchronized (localResolveLock) {
                try {
                    if (localAddress == null) {
                        localName = InetAddress.getLocalHost ().getHostName ();
                        InetAddress localhost = InetAddressUtils.getAddressByName (localName);
                        localAddress = localhost.getHostAddress ();
                    }
                    Display.getDefault ().asyncExec (new Runnable () {
                        public void run () {
                            if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

                            if ("".equals (ipText.getText ())) ipText.setText (localAddress);

                        }}

                    );
                } catch (UnknownHostException e) {
                    LOG.fine (e.toString ());
                }
            }
        }}

    .start ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="81" endline="112">
public void run () {
    synchronized (localResolveLock) {
        try {
            if (localAddress == null) {
                localName = InetAddress.getLocalHost ().getHostName ();
                InetAddress localhost = InetAddressUtils.getAddressByName (localName);
                localAddress = localhost.getHostAddress ();
            }
            Display.getDefault ().asyncExec (new Runnable () {
                public void run () {
                    if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

                    if ("".equals (ipText.getText ())) ipText.setText (localAddress);

                }}

            );
        } catch (UnknownHostException e) {
            LOG.fine (e.toString ());
        }
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="96" endline="103">
public void run () {
    if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

    if ("".equals (ipText.getText ())) ipText.setText (localAddress);

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="37" endline="47">
public FeederGUIRegistry (AbstractFeederGUI [] allTheFeeders, Combo feederSelectionCombo, GUIConfig guiConfig) {
    this.feederGUIList = Arrays.asList (allTheFeeders);
    this.feederSelectionCombo = feederSelectionCombo;
    for (AbstractFeederGUI feederGUI : feederGUIList) {
        feederSelectionCombo.add (feederGUI.getFeederName ());
    }
    this.guiConfig = guiConfig;
    this.currentFeederGUI = allTheFeeders [0];
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="49" endline="52">
public AbstractFeederGUI current () {
    return currentFeederGUI;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="57" endline="68">
public void select (int newActiveFeeder) {
    currentFeederGUI.setVisible (false);
    currentFeederGUI = feederGUIList.get (newActiveFeeder);
    guiConfig.activeFeeder = newActiveFeeder;
    currentFeederGUI.setVisible (true);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="70" endline="73">
public Iterator < AbstractFeederGUI > iterator () {
    return feederGUIList.iterator ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="78" endline="93">
public void select (String feederId) {
    for (int i = 0;
    i < feederGUIList.size (); i ++) {
        AbstractFeederGUI guiFeeder = feederGUIList.get (i);
        if (guiFeeder.getFeederId ().equals (feederId) || guiFeeder.getFeederName ().equals (feederId)) {
            feederSelectionCombo.select (i);
            feederSelectionCombo.notifyListeners (SWT.Selection, null);
            return;
        }
    }
    throw new FeederException ("Feeder not found: " + feederId);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="98" endline="102">
public Feeder createFeeder () {
    lastScanFeeder = current ().createFeeder ();
    return lastScanFeeder;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="108" endline="116">
public Feeder createRescanFeeder (TableItem [] selection) {
    String [] addresses = new String [selection.length];
    for (int i = 0;
    i < selection.length; i ++) {
        addresses [i] = selection [i].getText ();
    }
    return new RescanFeeder (lastScanFeeder, addresses);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="37" endline="40">
public FileFeederGUI (Composite parent) {
    super (parent);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="42" endline="96">
protected void initialize () {
    feeder = new FileFeeder ();
    setLayout (LayoutHelper.formLayout (3, 3, 4));
    fileNameLabel = new Label (this, SWT.NONE);
    fileNameText = new Text (this, SWT.BORDER);
    browseButton = new Button (this, SWT.NONE);
    fileNameLabel.setText (Labels.getLabel ("feeder.file.name") + ":");
    FormData formData = new FormData ();
    formData.left = new FormAttachment (0);
    formData.top = new FormAttachment (fileNameText, 0, SWT.CENTER);
    formData.bottom = new FormAttachment (browseButton, 0, SWT.BOTTOM);
    fileNameLabel.setLayoutData (formData);
    fileNameText.setText ("255.255.255.255.xxx.xxx");
    formData = new FormData (fileNameText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x, SWT.DEFAULT);
    formData.top = new FormAttachment (0);
    formData.left = new FormAttachment (fileNameLabel);
    fileNameText.setLayoutData (formData);
    fileNameText.setText ("");
    browseButton.setText (Labels.getLabel ("feeder.file.browse"));
    formData = new FormData ();
    formData.top = new FormAttachment (0);
    formData.bottom = new FormAttachment (fileNameText, 0, SWT.BOTTOM);
    formData.left = new FormAttachment (fileNameText);
    browseButton.setLayoutData (formData);
    browseButton.addSelectionListener (new SelectionListener () {
        public void widgetDefaultSelected (SelectionEvent e) {
            widgetSelected (e);
        } public void widgetSelected (SelectionEvent e) {
            FileDialog dialog = new FileDialog (getShell ());
            dialog.setText (Labels.getLabel ("feeder.file.browse"));
            String fileName = dialog.open ();
            if (fileName != null) {
                fileNameText.setText (fileName);
                fileNameText.setSelection (fileName.length ());
            }
        }}

    );
    pack ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="76" endline="79">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="81" endline="91">
public void widgetSelected (SelectionEvent e) {
    FileDialog dialog = new FileDialog (getShell ());
    dialog.setText (Labels.getLabel ("feeder.file.browse"));
    String fileName = dialog.open ();
    if (fileName != null) {
        fileNameText.setText (fileName);
        fileNameText.setSelection (fileName.length ());
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="98" endline="102">
public Feeder createFeeder () {
    feeder = new FileFeeder (fileNameText.getText ());
    return feeder;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="104" endline="107">
public String [] serialize () {
    return new String [] {fileNameText.getText ()};
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="109" endline="112">
public void unserialize (String [] parts) {
    fileNameText.setText (parts [0]);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="114" endline="117">
public String [] serializePartsLabels () {
    return new String [] {"feeder.file.name"};
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="50" endline="53">
public RandomFeederGUI (Composite parent) {
    super (parent);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="55" endline="131">
protected void initialize () {
    feeder = new RandomFeeder ();
    setLayout (LayoutHelper.formLayout (3, 3, 4));
    ipPrototypeLabel = new Label (this, SWT.NONE);
    ipPrototypeText = new Text (this, SWT.BORDER);
    ipMaskLabel = new Label (this, SWT.NONE);
    ipMaskCombo = new Combo (this, SWT.NONE);
    hostnameText = new Text (this, SWT.BORDER);
    hostnameLabel = new Label (this, SWT.NONE);
    ipUpButton = new Button (this, SWT.NONE);
    countLabel = new Label (this, SWT.NONE);
    countSpinner = new Spinner (this, SWT.BORDER);
    ipPrototypeText.setText ("255.255.255.255xx");
    int textWidth = ipPrototypeText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;
    ipPrototypeText.setText ("");
    ipPrototypeLabel.setText (Labels.getLabel ("feeder.random.prototype") + ":");
    ipPrototypeLabel.setLayoutData (LayoutHelper.formData (null, new FormAttachment (hostnameLabel, 0, SWT.RIGHT), new FormAttachment (ipPrototypeText, 0, SWT.CENTER), null));
    ipPrototypeText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (ipPrototypeLabel), null, new FormAttachment (0), null));
    ipMaskLabel.setText (Labels.getLabel ("feeder.random.mask") + ":");
    ipMaskLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (ipPrototypeText, 3), null, new FormAttachment (ipPrototypeText, 0, SWT.CENTER), null));
    ipMaskCombo.setVisibleItemCount (10);
    ipMaskCombo.add ("255...128");
    ipMaskCombo.add ("255...0");
    ipMaskCombo.add ("255..0.0");
    ipMaskCombo.add ("255.0.0.0");
    ipMaskCombo.add ("0.0.0.0");
    ipMaskCombo.add ("255..0.255");
    ipMaskCombo.add ("255.0.0.255");
    ipMaskCombo.select (3);
    ipMaskCombo.setLayoutData (LayoutHelper.formData (textWidth - 15, SWT.DEFAULT, new FormAttachment (ipMaskLabel), null, new FormAttachment (0), new FormAttachment (ipPrototypeText, 0, SWT.BOTTOM)));
    FeederActions.HostnameButton hostnameSelectionListener = new FeederActions.HostnameButton (hostnameText, ipPrototypeText, ipMaskCombo);
    hostnameText.addTraverseListener (hostnameSelectionListener);
    hostnameText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (ipPrototypeText, 0, SWT.LEFT), null, new FormAttachment (ipPrototypeText), null));
    hostnameLabel.setText (Labels.getLabel ("feeder.random.hostname") + ":");
    hostnameLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (hostnameText, 0, SWT.CENTER), null));
    ipUpButton.setImage (new Image (getDisplay (), Labels.getInstance ().getImageAsStream ("button.ipUp.img")));
    ipUpButton.setText (Labels.getLabel ("button.ipUp"));
    ipUpButton.addSelectionListener (hostnameSelectionListener);
    ipUpButton.setLayoutData (LayoutHelper.formData (new FormAttachment (hostnameText), null, new FormAttachment (ipPrototypeText), ! Platform.MAC_OS ? new FormAttachment (hostnameText, 1, SWT.BOTTOM) : null));
    countLabel.setText (Labels.getLabel ("feeder.random.count"));
    countLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (ipUpButton, 3), null, new FormAttachment (ipUpButton, 0, SWT.CENTER), null));
    countSpinner.setSelection (100);
    countSpinner.setMaximum (100000);
    countSpinner.setMinimum (1);
    countSpinner.setLayoutData (LayoutHelper.formData (new FormAttachment (countLabel), new FormAttachment (ipMaskCombo, 0, SWT.RIGHT), new FormAttachment (ipUpButton, 0, SWT.CENTER), null));
    countSpinner.addTraverseListener (new TraverseListener () {
        public void keyTraversed (TraverseEvent e) {
            ipPrototypeText.forceFocus ();
            countSpinner.forceFocus ();
        }}

    );
    pack ();
    asyncFillLocalHostInfo (hostnameText, ipPrototypeText);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="117" endline="124">
public void keyTraversed (TraverseEvent e) {
    ipPrototypeText.forceFocus ();
    countSpinner.forceFocus ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="133" endline="137">
public Feeder createFeeder () {
    feeder = new RandomFeeder (ipPrototypeText.getText (), ipMaskCombo.getText (), countSpinner.getSelection ());
    return feeder;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="139" endline="142">
public String [] serialize () {
    return new String [] {ipPrototypeText.getText (), ipMaskCombo.getText (), String.valueOf (countSpinner.getSelection ())};
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="144" endline="149">
public void unserialize (String [] parts) {
    ipPrototypeText.setText (parts [0]);
    ipMaskCombo.setText (parts [1]);
    countSpinner.setSelection (Integer.parseInt (parts [2]));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="151" endline="154">
public String [] serializePartsLabels () {
    return new String [] {"feeder.random.prototype", "feeder.random.mask", "feeder.random.count"};
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="59" endline="62">
public RangeFeederGUI (Composite parent) {
    super (parent);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="64" endline="146">
protected void initialize () {
    feeder = new RangeFeeder ();
    setLayout (LayoutHelper.formLayout (3, 3, 4));
    ipRangeLabel = new Label (this, SWT.NONE);
    startIPText = new Text (this, SWT.BORDER);
    toLabel = new Label (this, SWT.NONE);
    endIPText = new Text (this, SWT.BORDER);
    hostnameLabel = new Label (this, SWT.NONE);
    hostnameText = new Text (this, SWT.BORDER);
    ipUpButton = new Button (this, SWT.NONE);
    netmaskCombo = new Combo (this, SWT.NONE);
    startIPText.setText ("255.255.255.255xx");
    int textWidth = startIPText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;
    startIPText.setText ("");
    ipRangeLabel.setText (Labels.getLabel ("feeder.range") + ":");
    ipRangeLabel.setLayoutData (LayoutHelper.formData (null, new FormAttachment (hostnameLabel, 0, SWT.RIGHT), new FormAttachment (startIPText, 0, SWT.CENTER), null));
    startIPText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (ipRangeLabel), null, new FormAttachment (0), null));
    startIPText.addModifyListener (new StartIPModifyListener ());
    toLabel.setText (Labels.getLabel ("feeder.range.to"));
    toLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (startIPText), null, new FormAttachment (startIPText, 0, SWT.CENTER), null));
    endIPText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (toLabel), null, null, null));
    endIPText.addKeyListener (new EndIPKeyListener ());
    FeederActions.HostnameButton hostnameListener = new FeederActions.HostnameButton (hostnameText, startIPText, netmaskCombo) {
        public void widgetSelected (SelectionEvent event) {
            isEndIPUnedited = true;
            netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
            super.widgetSelected (event);
        }}

    ;
    hostnameText.addTraverseListener (hostnameListener);
    hostnameText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (startIPText, 0, SWT.LEFT), null, new FormAttachment (startIPText), null));
    hostnameText.setToolTipText (Labels.getLabel ("feeder.range.hostname.tooltip"));
    Listener netmaskResetListener = new NetmaskResetListener ();
    startIPText.addListener (SWT.Modify, netmaskResetListener);
    endIPText.addListener (SWT.Modify, netmaskResetListener);
    hostnameLabel.setText (Labels.getLabel ("feeder.range.hostname") + ":");
    hostnameLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (hostnameText, 0, SWT.CENTER), null));
    ipUpButton.setImage (new Image (getDisplay (), Labels.getInstance ().getImageAsStream ("button.ipUp.img")));
    ipUpButton.setText (Labels.getLabel ("button.ipUp"));
    ipUpButton.addSelectionListener (hostnameListener);
    ipUpButton.setLayoutData (LayoutHelper.formData (new FormAttachment (hostnameText), null, new FormAttachment (endIPText), ! Platform.MAC_OS ? new FormAttachment (hostnameText, 1, SWT.BOTTOM) : null));
    netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
    netmaskCombo.setVisibleItemCount (10);
    netmaskCombo.add ("/26");
    netmaskCombo.add ("/24");
    netmaskCombo.add ("/16");
    netmaskCombo.add ("255...192");
    netmaskCombo.add ("255...128");
    netmaskCombo.add ("255...0");
    netmaskCombo.add ("255..0.0");
    netmaskCombo.add ("255.0.0.0");
    NetmaskListener netmaskSelectionListener = new NetmaskListener ();
    netmaskCombo.addListener (SWT.Selection, netmaskSelectionListener);
    netmaskCombo.addListener (SWT.Traverse, netmaskSelectionListener);
    netmaskCombo.setLayoutData (LayoutHelper.formData (new FormAttachment (ipUpButton, 5), new FormAttachment (endIPText, 0, SWT.RIGHT), new FormAttachment (startIPText), new FormAttachment (hostnameText, 0, SWT.BOTTOM)));
    netmaskCombo.setToolTipText (Labels.getLabel ("feeder.range.netmask.tooltip"));
    pack ();
    asyncFillLocalHostInfo (hostnameText, startIPText);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="98" endline="106">
public void widgetSelected (SelectionEvent event) {
    isEndIPUnedited = true;
    netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
    super.widgetSelected (event);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="148" endline="152">
public Feeder createFeeder () {
    feeder = new RangeFeeder (startIPText.getText (), endIPText.getText ());
    return feeder;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="154" endline="157">
public String [] serialize () {
    return new String [] {startIPText.getText (), endIPText.getText ()};
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="159" endline="166">
public void unserialize (String [] parts) {
    startIPText.setText (parts [0]);
    endIPText.setText (parts [1]);
    netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="168" endline="171">
public String [] serializePartsLabels () {
    return new String [] {"feeder.range.startIP", "feeder.range.endIP"};
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="175" endline="178">
public void keyPressed (KeyEvent e) {
    isEndIPUnedited = false;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="180" endline="182">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="187" endline="192">
public void handleEvent (Event event) {
    if (! modifyListenersDisabled) netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="197" endline="203">
public void modifyText (ModifyEvent e) {
    if (isEndIPUnedited) {
        endIPText.setText (startIPText.getText ());
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="208" endline="252">
public void handleEvent (Event event) {
    if (event.type == SWT.Traverse) {
        if (event.detail != SWT.TRAVERSE_RETURN) return;

        event.doit = false;
    }
    if (event.type == SWT.Selection) {
        if (netmaskCombo.indexOf (netmaskCombo.getText ()) < 0) return;

    }
    try {
        String netmaskString = netmaskCombo.getText ();
        InetAddress netmask = InetAddressUtils.parseNetmask (netmaskString);
        InetAddress startIP = InetAddress.getByName (startIPText.getText ());
        modifyListenersDisabled = true;
        startIPText.setText (InetAddressUtils.startRangeByNetmask (startIP, netmask).getHostAddress ());
        endIPText.setText (InetAddressUtils.endRangeByNetmask (startIP, netmask).getHostAddress ());
        modifyListenersDisabled = false;
        isEndIPUnedited = false;
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidNetmask");
    }
    if (event.type == SWT.Traverse) {
        getParent ().forceFocus ();
    } else {
        netmaskCombo.forceFocus ();
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PingFetcherPrefs.java" startline="23" endline="26">
public PingFetcherPrefs (PreferencesDialog preferencesDialog) {
    this.preferencesDialog = preferencesDialog;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PingFetcherPrefs.java" startline="28" endline="31">
public void openFor (Fetcher fetcher) {
    preferencesDialog.openTab (0);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="33" endline="35">
public PortTextFetcherPrefs () {
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="37" endline="41">
public void openFor (Fetcher fetcher) {
    this.fetcher = (PortTextFetcher) fetcher;
    open ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="43" endline="79">
@Override
protected void populateShell () {
    shell = new Shell (Display.getCurrent ().getActiveShell (), SWT.DIALOG_TRIM);
    shell.setText (fetcher.getName ());
    shell.setLayout (LayoutHelper.formLayout (10, 10, 5));
    Combo predefinedCombo = new Combo (shell, SWT.DROP_DOWN | SWT.READ_ONLY);
    predefinedCombo.add (Labels.getLabel ("fetcher.portText.custom"));
    predefinedCombo.select (0);
    predefinedCombo.setLayoutData (LayoutHelper.formData (null, new FormAttachment (100), new FormAttachment (0), null));
    Label sendLabel = new Label (shell, SWT.NONE);
    sendLabel.setText (Labels.getLabel ("text.fetcher.portText.send"));
    sendLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, null, new FormAttachment (predefinedCombo, 0, SWT.BOTTOM)));
    Text sendText = new Text (shell, SWT.BORDER | SWT.READ_ONLY);
    sendText.setText (stringToText (fetcher.getTextToSend ()));
    sendText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (sendLabel), null));
    Label matchLabel = new Label (shell, SWT.NONE);
    matchLabel.setText (Labels.getLabel ("text.fetcher.portText.match"));
    matchLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (sendText), null));
    Text matchText = new Text (shell, SWT.BORDER | SWT.READ_ONLY);
    matchText.setText (fetcher.getMatchingRegexp ().pattern ());
    matchText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (sendText, 0, SWT.RIGHT), new FormAttachment (matchLabel), null));
    Label replaceLabel = new Label (shell, SWT.NONE);
    replaceLabel.setText (Labels.getLabel ("text.fetcher.portText.replace"));
    replaceLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (matchText), null));
    Text replaceText = new Text (shell, SWT.BORDER | SWT.READ_ONLY);
    replaceText.setText ("$1");
    replaceText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (sendText, 0, SWT.RIGHT), new FormAttachment (replaceLabel), null));
    shell.pack ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="84" endline="99">
private String stringToText (String s) {
    StringBuilder t = new StringBuilder ();
    for (char c : s.toCharArray ()) {
        if (c == '\n') t.append ("\\n");
        else if (c == '\r') t.append ("\\r");
        else if (c == '\t') t.append ("\\t");
        else t.append (c);

    }
    return t.toString ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PortsFetcherPrefs.java" startline="23" endline="26">
public PortsFetcherPrefs (PreferencesDialog preferencesDialog) {
    this.preferencesDialog = preferencesDialog;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/fetchers/PortsFetcherPrefs.java" startline="28" endline="31">
public void openFor (Fetcher fetcher) {
    preferencesDialog.openTab (1);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/util/LayoutHelper.java" startline="22" endline="29">
public static FormLayout formLayout (int marginWidth, int marginHeight, int spacing) {
    FormLayout formLayout = new FormLayout ();
    formLayout.marginWidth = marginWidth;
    formLayout.marginHeight = marginHeight;
    formLayout.spacing = spacing;
    return formLayout;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/util/LayoutHelper.java" startline="31" endline="39">
public static FormData formData (int width, int height, FormAttachment left, FormAttachment right, FormAttachment top, FormAttachment bottom) {
    FormData formData = new FormData (width, height);
    formData.left = left;
    formData.right = right;
    formData.top = top;
    formData.bottom = bottom;
    return formData;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/gui/util/LayoutHelper.java" startline="41" endline="44">
public static FormData formData (FormAttachment left, FormAttachment right, FormAttachment top, FormAttachment bottom) {
    return formData (SWT.DEFAULT, SWT.DEFAULT, left, right, top, bottom);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="34" endline="52">
public static InetAddress startRangeByNetmask (InetAddress address, InetAddress netmask) {
    byte [] netmaskBytes = netmask.getAddress ();
    byte [] addressBytes = address.getAddress ();
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) (addressBytes [i] & netmaskBytes [i]);
    }
    try {
        return InetAddress.getByAddress (addressBytes);
    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="54" endline="72">
public static InetAddress endRangeByNetmask (InetAddress address, InetAddress netmask) {
    byte [] netmaskBytes = netmask.getAddress ();
    byte [] addressBytes = address.getAddress ();
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) (addressBytes [i] | ~ (netmaskBytes [i]));
    }
    try {
        return InetAddress.getByAddress (addressBytes);
    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="78" endline="90">
public static boolean greaterThan (InetAddress inetAddress1, InetAddress inetAddress2) {
    byte [] address1 = inetAddress1.getAddress ();
    byte [] address2 = inetAddress2.getAddress ();
    for (int i = 0;
    i < address1.length; i ++) {
        if ((address1 [i] & 0xFF) > (address2 [i] & 0xFF)) return true;
        else if ((address1 [i] & 0xFF) < (address2 [i] & 0xFF)) break;

    }
    return false;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="95" endline="113">
public static InetAddress increment (InetAddress address) {
    try {
        byte [] newAddress = address.getAddress ();
        for (int i = newAddress.length - 1;
        i >= 0; i --) {
            if (++ newAddress [i] != 0x00) break;

        }
        return InetAddress.getByAddress (newAddress);
    } catch (UnknownHostException e) {
        assert false : e;
        return null;
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="125" endline="146">
public static InetAddress parseNetmask (String netmaskString) throws UnknownHostException {
    if (netmaskString.startsWith ("/")) {
        int totalBits = Integer.parseInt (netmaskString.substring (1));
        byte [] mask = new byte [4];
        for (int i = 0;
        i < mask.length; i ++) {
            int curByteBits = totalBits >= 8 ? 8 : totalBits;
            totalBits -= curByteBits;
            mask [i] = (byte) ((((1 << curByteBits) - 1) << (8 - curByteBits)) & 0xFF);
        }
        return InetAddress.getByAddress (mask);
    }
    netmaskString = netmaskString.replaceAll ("\\.\\.", ".255.");
    netmaskString = netmaskString.replaceAll ("\\.\\.", ".255.");
    return InetAddress.getByName (netmaskString);
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="155" endline="161">
public static void maskPrototypeAddressBytes (byte [] addressBytes, byte [] maskBytes, byte [] prototypeBytes) {
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) ((addressBytes [i] & ~ maskBytes [i]) | (prototypeBytes [i] & maskBytes [i]));
    }
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="167" endline="171">
public static boolean isLikelyBroadcast (InetAddress address) {
    byte [] bytes = address.getAddress ();
    return bytes [bytes.length - 1] == 0 || bytes [bytes.length - 1] == (byte) 0xFF;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/InetAddressUtils.java" startline="180" endline="210">
public static InetAddress getAddressByName (String hostname) throws UnknownHostException {
    InetAddress address = InetAddress.getByName (hostname);
    if (address.isLoopbackAddress ()) {
        try {
            outer : for (Enumeration < NetworkInterface > i = NetworkInterface.getNetworkInterfaces ();
            i.hasMoreElements ();) {
                NetworkInterface networkInterface = i.nextElement ();
                for (Enumeration < InetAddress > i2 = networkInterface.getInetAddresses ();
                i2.hasMoreElements ();) {
                    InetAddress currentAddress = i2.nextElement ();
                    if (! currentAddress.isLoopbackAddress () && currentAddress instanceof Inet4Address) {
                        address = currentAddress;
                        break outer;
                    }
                }
            }
        } catch (SocketException e) {
            LOG.log (Level.FINE, "Cannot enumerate network interfaces", e);
        }
    }
    return address;
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/SequenceIterator.java" startline="21" endline="28">
public SequenceIterator (Iterator < E >...iterators) {
    this.iterators = iterators;
    if (! iterators [iterators.length - 1].hasNext ()) throw new IllegalArgumentException ();

}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/SequenceIterator.java" startline="30" endline="34">
public boolean hasNext () {
    return iterators [iterators.length - 1].hasNext ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/SequenceIterator.java" startline="36" endline="43">
public E next () {
    if (! iterators [currentIndex].hasNext ()) currentIndex ++;

    return iterators [currentIndex].next ();
}
</source>
<source file="/Users/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/data/mutantbase//net/azib/ipscan/util/SequenceIterator.java" startline="45" endline="48">
public void remove () {
    iterators [currentIndex].remove ();
}
</source>
