<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="31" endline="34">
public String getId () {
    return "exporter.xml";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="36" endline="39">
public String getFilenameExtension () {
    return "xml";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="41" endline="46">
@Override
public void shouldAppendTo (File file) {
    throw new ExporterException ("xml.noAppend");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="48" endline="73">
@Override
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    output = new PrintWriter (new OutputStreamWriter (outputStream, ENCODING));
    output.println ("<?xml version=\"1.0\" encoding=\"" + ENCODING + "\" standalone=\"yes\"?>");
    output.println ("<!-- This file has been generated by " + Version.getFullName () + " -->");
    output.println ("<!-- Visit the website at " + Version.WEBSITE + " -->");
    SimpleDateFormat sdf = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
    output.println ("<scanning_report time=\"" + sdf.format (new Date ()) + "\">");
    int colonPos = feederInfo.indexOf (':');
    String feederName = null;
    if (colonPos >= 0) {
        feederName = feederInfo.substring (0, colonPos);
        feederInfo = feederInfo.substring (colonPos + 1);
    }
    output.print ("\t<feeder" + (feederName != null ? " name=\"" + feederName.trim () + "\"" : "") + ">");
    output.print ("<![CDATA[" + feederInfo.trim () + "]]>");
    output.println ("</feeder>");
    output.println ("\t<hosts>");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="75" endline="84">
@Override
public void end () throws IOException {
    output.println ("\t</hosts>");
    output.println ("</scanning_report>");
    if (output.checkError ()) {
        throw new IOException ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="86" endline="90">
public void setFetchers (String [] fetcherNames) throws IOException {
    ipFetcherIndex = IPListExporter.findFetcherById ("fetcher.ip", fetcherNames);
    this.fetcherNames = fetcherNames;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="92" endline="105">
public void nextAdressResults (Object [] results) throws IOException {
    output.println ("\t\t<host address=\"" + results [ipFetcherIndex] + "\">");
    for (int i = 0;
    i < results.length; i ++) {
        if (results [i] != null) {
            output.println ("\t\t\t<result name=\"" + fetcherNames [i] + "\"><![CDATA[" + results [i] + "]]></result>");
        }
    }
    output.println ("\t\t</host>");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExporterException.java" startline="18" endline="21">
public ExporterException (String message) {
    super (message);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExporterException.java" startline="23" endline="27">
public ExporterException (String message, Throwable cause) {
    super (message);
    initCause (cause);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExporterRegistry.java" startline="24" endline="32">
public ExporterRegistry (Exporter [] registeredExporters) {
    exporters = new LinkedHashMap < String, Exporter > ();
    for (int i = 0;
    i < registeredExporters.length; i ++) {
        exporters.put (registeredExporters [i].getFilenameExtension (), registeredExporters [i]);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExporterRegistry.java" startline="37" endline="40">
public Iterator < Exporter > iterator () {
    return exporters.values ().iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExporterRegistry.java" startline="47" endline="67">
public Exporter createExporter (String fileName) throws ExporterException {
    int extensionPos = fileName.lastIndexOf ('.') + 1;
    String extension = fileName.substring (extensionPos);
    Exporter prototype = exporters.get (extension);
    if (prototype == null) {
        throw new ExporterException ("exporter.unknown");
    }
    try {
        return (Exporter) prototype.clone ();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="28" endline="31">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="33" endline="36">
public void shouldAppendTo (File file) {
    this.append = true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="38" endline="41">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    output = new PrintWriter (new OutputStreamWriter (outputStream));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="43" endline="48">
public void end () throws IOException {
    if (output.checkError ()) throw new IOException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="50" endline="61">
public Exporter clone () {
    try {
        return (Exporter) super.clone ();
    } catch (CloneNotSupportedException e) {
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExportProcessor.java" startline="28" endline="33">
public ExportProcessor (Exporter exporter, File file, boolean append) {
    this.exporter = exporter;
    this.file = file;
    this.append = append;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/ExportProcessor.java" startline="40" endline="94">
public void process (ScanningResultList scanningResults, ScanningResultFilter filter) {
    FileOutputStream outputStream = null;
    try {
        if (append) {
            exporter.shouldAppendTo (file);
        }
        outputStream = new FileOutputStream (file, append);
        exporter.start (outputStream, scanningResults.getFeederInfo ());
        List < Fetcher > fetchers = scanningResults.getFetchers ();
        String [] fetcherNames = new String [fetchers.size ()];
        int i = 0;
        for (Fetcher fetcher : fetchers) {
            fetcherNames [i ++] = fetcher.getName ();
        }
        exporter.setFetchers (fetcherNames);
        int index = 0;
        for (ScanningResult scanningResult : scanningResults) {
            if (filter == null || filter.isResultSelected (index, scanningResult)) {
                exporter.nextAdressResults (scanningResult.getValues ().toArray ());
            }
        }
        exporter.end ();
    } catch (ExporterException e) {
        throw e;
    } catch (Exception e) {
        throw new ExporterException ("exporting failed", e);
    } finally {
        if (outputStream != null) {
            try {
                outputStream.close ();
            } catch (Exception e) {
            }
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="29" endline="32">
public String getId () {
    return "exporter.ipList";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="34" endline="37">
public String getFilenameExtension () {
    return "lst";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="39" endline="43">
public void setFetchers (String [] fetcherNames) throws IOException {
    ipFetcherIndex = findFetcherById (IPFetcher.ID, fetcherNames);
    portsFetcherIndex = findFetcherById (PortsFetcher.ID, fetcherNames);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="53" endline="64">
static int findFetcherById (String fetcherId, String [] fetcherNames) {
    String fetcherName = Labels.getLabel (fetcherId);
    for (int i = 0;
    i < fetcherNames.length; i ++) {
        if (fetcherName.equals (fetcherNames [i])) {
            return i;
        }
    }
    throw new ExporterException ("fetcher.notFound");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="66" endline="78">
public void nextAdressResults (Object [] results) throws IOException {
    String address = results [ipFetcherIndex].toString ();
    Object ports = results [portsFetcherIndex];
    if (ports != null && ports instanceof NumericRangeList) {
        for (PortIterator i = new PortIterator (ports.toString ());
        i.hasNext ();) {
            output.println (address + DELIMETER + i.next ());
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="24" endline="27">
public String getId () {
    return "exporter.txt";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="29" endline="32">
public String getFilenameExtension () {
    return "txt";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="34" endline="51">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    super.start (outputStream, feederInfo);
    if (! append) {
        output.write (Labels.getLabel ("exporter.txt.generated"));
        output.println (Version.getFullName ());
        output.println (Version.WEBSITE);
        output.println ();
        String scanned = Labels.getLabel ("exporter.txt.scanned");
        scanned = scanned.replaceFirst ("%INFO", feederInfo);
        output.println (scanned);
        output.println (DateFormat.getDateTimeInstance ().format (new Date ()));
        output.println ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="53" endline="68">
public void setFetchers (String [] fetcherNames) throws IOException {
    padLengths = new int [fetcherNames.length];
    for (int i = 0;
    i < fetcherNames.length; i ++) {
        padLengths [i] = fetcherNames [i].length () * 3;
        if (! append) {
            output.write (pad (fetcherNames [i], padLengths [i]));
        }
    }
    if (! append) {
        output.println ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="70" endline="79">
public void nextAdressResults (Object [] results) throws IOException {
    output.write (pad (results [0], padLengths [0]));
    for (int i = 1;
    i < results.length; i ++) {
        Object result = results [i];
        output.write (pad (result, padLengths [i]));
    }
    output.println ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="86" endline="103">
String pad (Object o, int length) {
    if (length < 16) length = 16;

    String s;
    if (o == null) s = "";
    else s = o.toString ();

    if (s.length () >= length) {
        return s;
    }
    return s + "                                                                       ".substring (0, length - s.length ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="22" endline="25">
public String getId () {
    return "exporter.sql";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="27" endline="30">
public String getFilenameExtension () {
    return "sql";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="32" endline="34">
public void setFetchers (String [] fetcherNames) throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="36" endline="39">
public void nextAdressResults (Object [] results) throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="21" endline="24">
public String getId () {
    return "exporter.csv";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="26" endline="29">
public String getFilenameExtension () {
    return "csv";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="31" endline="43">
public void setFetchers (String [] fetcherNames) throws IOException {
    if (! append) {
        output.write (csvSafeString (fetcherNames [0]));
        for (int i = 1;
        i < fetcherNames.length; i ++) {
            output.write (DELIMETER);
            output.write (csvSafeString (fetcherNames [i]));
        }
        output.println ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="45" endline="55">
public void nextAdressResults (Object [] results) throws IOException {
    output.write (csvSafeString (results [0]));
    for (int i = 1;
    i < results.length; i ++) {
        Object result = results [i];
        output.write (DELIMETER);
        output.write (csvSafeString (result));
    }
    output.println ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="60" endline="65">
String csvSafeString (Object o) {
    if (o == null) return "";

    return o.toString ().replace (DELIMETER, DELIMETER_ESCAPED);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="46" endline="49">
public String getId () {
    return "feeder.file";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="51" endline="53">
public FileFeeder () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="55" endline="65">
public FileFeeder (String fileName) {
    try {
        readAddresses (new FileReader (fileName));
    } catch (FileNotFoundException e) {
        throw new FeederException ("file.notExists");
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="67" endline="70">
public FileFeeder (Reader reader) {
    readAddresses (reader);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="72" endline="130">
private void readAddresses (Reader reader) {
    BufferedReader fileReader = new BufferedReader (reader);
    currentIndex = 0;
    foundIPAddresses = new LinkedHashMap < String, ScanningSubject > ();
    try {
        String fileLine;
        while ((fileLine = fileReader.readLine ()) != null) {
            Matcher matcher = InetAddressUtils.IP_ADDRESS_REGEX.matcher (fileLine);
            while (matcher.find ()) {
                try {
                    String address = matcher.group ();
                    ScanningSubject subject = foundIPAddresses.get (address);
                    if (subject == null) subject = new ScanningSubject (InetAddress.getByName (address));

                    if (! matcher.hitEnd () && fileLine.charAt (matcher.end ()) == ':') {
                        Matcher portMatcher = PORT_REGEX.matcher (fileLine.substring (matcher.end () + 1));
                        if (portMatcher.lookingAt ()) {
                            subject.addRequestedPort (Integer.valueOf (portMatcher.group ()));
                        }
                    }
                    foundIPAddresses.put (address, subject);
                } catch (UnknownHostException e) {
                    LOG.log (Level.WARNING, "malformedIP", e);
                }
            }
        }
        if (foundIPAddresses.isEmpty ()) {
            throw new FeederException ("file.nothingFound");
        }
    } catch (IOException e) {
        throw new FeederException ("file.errorWhileReading");
    } finally {
        try {
            fileReader.close ();
        } catch (IOException e) {
        }
    }
    foundIPAddressesIterator = foundIPAddresses.values ().iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="132" endline="135">
public int percentageComplete () {
    return Math.round ((float) currentIndex * 100 / foundIPAddresses.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="137" endline="140">
public boolean hasNext () {
    return foundIPAddressesIterator.hasNext ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="142" endline="146">
public ScanningSubject next () {
    currentIndex ++;
    return foundIPAddressesIterator.next ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="148" endline="152">
public String getInfo () {
    return Integer.toString (foundIPAddresses.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/AbstractFeeder.java" startline="19" endline="22">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/AbstractFeeder.java" startline="24" endline="28">
@Override
public String toString () {
    return getName () + ": " + getInfo ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FeederException.java" startline="18" endline="21">
public FeederException (String message) {
    super (message);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/FeederException.java" startline="23" endline="27">
public FeederException (String message, Throwable cause) {
    super (message);
    initCause (cause);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="36" endline="39">
public String getId () {
    return "feeder.random";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="41" endline="43">
public RandomFeeder () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="45" endline="73">
public RandomFeeder (String prototypeIP, String mask, int count) {
    try {
        this.prototypeBytes = InetAddress.getByName (prototypeIP).getAddress ();
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    try {
        this.maskBytes = InetAddressUtils.parseNetmask (mask).getAddress ();
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidNetmask");
    }
    if (count <= 0) {
        throw new FeederException ("random.invalidCount");
    }
    this.currentNumber = 0;
    this.addressCount = count;
    this.currentBytes = new byte [prototypeBytes.length];
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="75" endline="78">
public int percentageComplete () {
    return Math.round ((float) currentNumber * 100 / addressCount);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="80" endline="83">
public boolean hasNext () {
    return currentNumber < addressCount;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="85" endline="99">
public ScanningSubject next () {
    currentNumber ++;
    random.nextBytes (currentBytes);
    try {
        InetAddressUtils.maskPrototypeAddressBytes (currentBytes, maskBytes, prototypeBytes);
        return new ScanningSubject (InetAddress.getByAddress (currentBytes));
    } catch (UnknownHostException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="101" endline="112">
public String getInfo () {
    try {
        return addressCount + ": " + InetAddress.getByAddress (prototypeBytes).getHostAddress () + " / " + InetAddress.getByAddress (maskBytes).getHostAddress ();
    } catch (UnknownHostException e) {
        assert false : e;
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="37" endline="40">
public String getId () {
    return "feeder.range";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="42" endline="44">
public RangeFeeder () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="46" endline="63">
public RangeFeeder (String startIP, String endIP) {
    try {
        this.startIP = this.currentIP = InetAddress.getByName (startIP);
        this.endIP = this.originalEndIP = InetAddress.getByName (endIP);
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    if (InetAddressUtils.greaterThan (this.startIP, this.endIP)) {
        throw new FeederException ("range.greaterThan");
    }
    initPercentageIncrement ();
    this.endIP = InetAddressUtils.increment (this.endIP);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="68" endline="79">
private void initPercentageIncrement () {
    long rawEndIP = OctetConverter.octetsToInt (this.endIP.getAddress ());
    long rawStartIP = OctetConverter.octetsToInt (this.startIP.getAddress ());
    rawEndIP = rawEndIP >= 0 ? rawEndIP : rawEndIP + Integer.MAX_VALUE;
    rawStartIP = rawStartIP >= 0 ? rawStartIP : rawStartIP + Integer.MAX_VALUE;
    percentageIncrement = 100.0 / (rawEndIP - rawStartIP + 1);
    percentageComplete = 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="81" endline="85">
public boolean hasNext () {
    return ! currentIP.equals (endIP);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="87" endline="93">
public ScanningSubject next () {
    percentageComplete += percentageIncrement;
    InetAddress prevIP = this.currentIP;
    this.currentIP = InetAddressUtils.increment (prevIP);
    return new ScanningSubject (prevIP);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="95" endline="98">
public int percentageComplete () {
    return (int) Math.round (percentageComplete);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="100" endline="104">
public String getInfo () {
    return startIP.getHostAddress () + " - " + originalEndIP.getHostAddress ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="33" endline="37">
public RescanFeeder (Feeder oldFeeder, String...ips) {
    this.originalFeeder = oldFeeder;
    initAddresses (ips);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="42" endline="45">
public String getId () {
    return originalFeeder.getId ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="47" endline="51">
@Override
public String getName () {
    return Labels.getLabel ("feeder.rescan.of") + originalFeeder.getName ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="58" endline="76">
private int initAddresses (String...ips) {
    if (ips.length == 0) throw new IllegalArgumentException ("no IP addresses specified");

    try {
        addresses = new ArrayList < InetAddress > (ips.length);
        for (String s : ips) {
            addresses.add (InetAddress.getByName (s));
        }
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    return ips.length;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="78" endline="81">
public boolean hasNext () {
    return current < addresses.size ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="83" endline="86">
public ScanningSubject next () {
    return new ScanningSubject (addresses.get (current ++));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="88" endline="91">
public int percentageComplete () {
    return current * 100 / addresses.size ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="96" endline="99">
public String getInfo () {
    return originalFeeder.getInfo ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="25" endline="28">
public String getId () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="30" endline="45">
public SmartTextFeeder (String text) {
    text = text.replaceAll ("\\w+", "");
    int slashPos = text.indexOf ('/');
    if (slashPos >= 0) {
        text = text.substring (0, slashPos);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="47" endline="50">
public boolean hasNext () {
    return false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="52" endline="55">
public ScanningSubject next () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="57" endline="60">
public int percentageComplete () {
    return 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="62" endline="65">
public String getInfo () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="37" endline="40">
public FileFeederGUI (Composite parent) {
    super (parent);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="42" endline="96">
protected void initialize () {
    feeder = new FileFeeder ();
    setLayout (LayoutHelper.formLayout (3, 3, 4));
    fileNameLabel = new Label (this, SWT.NONE);
    fileNameText = new Text (this, SWT.BORDER);
    browseButton = new Button (this, SWT.NONE);
    fileNameLabel.setText (Labels.getLabel ("feeder.file.name") + ":");
    FormData formData = new FormData ();
    formData.left = new FormAttachment (0);
    formData.top = new FormAttachment (fileNameText, 0, SWT.CENTER);
    formData.bottom = new FormAttachment (browseButton, 0, SWT.BOTTOM);
    fileNameLabel.setLayoutData (formData);
    fileNameText.setText ("255.255.255.255.xxx.xxx");
    formData = new FormData (fileNameText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x, SWT.DEFAULT);
    formData.top = new FormAttachment (0);
    formData.left = new FormAttachment (fileNameLabel);
    fileNameText.setLayoutData (formData);
    fileNameText.setText ("");
    browseButton.setText (Labels.getLabel ("feeder.file.browse"));
    formData = new FormData ();
    formData.top = new FormAttachment (0);
    formData.bottom = new FormAttachment (fileNameText, 0, SWT.BOTTOM);
    formData.left = new FormAttachment (fileNameText);
    browseButton.setLayoutData (formData);
    browseButton.addSelectionListener (new SelectionListener () {
        public void widgetDefaultSelected (SelectionEvent e) {
            widgetSelected (e);
        } public void widgetSelected (SelectionEvent e) {
            FileDialog dialog = new FileDialog (getShell ());
            dialog.setText (Labels.getLabel ("feeder.file.browse"));
            String fileName = dialog.open ();
            if (fileName != null) {
                fileNameText.setText (fileName);
                fileNameText.setSelection (fileName.length ());
            }
        }}

    );
    pack ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="76" endline="79">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="81" endline="91">
public void widgetSelected (SelectionEvent e) {
    FileDialog dialog = new FileDialog (getShell ());
    dialog.setText (Labels.getLabel ("feeder.file.browse"));
    String fileName = dialog.open ();
    if (fileName != null) {
        fileNameText.setText (fileName);
        fileNameText.setSelection (fileName.length ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="98" endline="102">
public Feeder createFeeder () {
    feeder = new FileFeeder (fileNameText.getText ());
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="104" endline="107">
public String [] serialize () {
    return new String [] {fileNameText.getText ()};
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="109" endline="112">
public void unserialize (String [] parts) {
    fileNameText.setText (parts [0]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="114" endline="117">
public String [] serializePartsLabels () {
    return new String [] {"feeder.file.name"};
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="59" endline="62">
public RangeFeederGUI (Composite parent) {
    super (parent);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="64" endline="146">
protected void initialize () {
    feeder = new RangeFeeder ();
    setLayout (LayoutHelper.formLayout (3, 3, 4));
    ipRangeLabel = new Label (this, SWT.NONE);
    startIPText = new Text (this, SWT.BORDER);
    toLabel = new Label (this, SWT.NONE);
    endIPText = new Text (this, SWT.BORDER);
    hostnameLabel = new Label (this, SWT.NONE);
    hostnameText = new Text (this, SWT.BORDER);
    ipUpButton = new Button (this, SWT.NONE);
    netmaskCombo = new Combo (this, SWT.NONE);
    startIPText.setText ("255.255.255.255xx");
    int textWidth = startIPText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;
    startIPText.setText ("");
    ipRangeLabel.setText (Labels.getLabel ("feeder.range") + ":");
    ipRangeLabel.setLayoutData (LayoutHelper.formData (null, new FormAttachment (hostnameLabel, 0, SWT.RIGHT), new FormAttachment (startIPText, 0, SWT.CENTER), null));
    startIPText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (ipRangeLabel), null, new FormAttachment (0), null));
    startIPText.addModifyListener (new StartIPModifyListener ());
    toLabel.setText (Labels.getLabel ("feeder.range.to"));
    toLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (startIPText), null, new FormAttachment (startIPText, 0, SWT.CENTER), null));
    endIPText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (toLabel), null, null, null));
    endIPText.addKeyListener (new EndIPKeyListener ());
    FeederActions.HostnameButton hostnameListener = new FeederActions.HostnameButton (hostnameText, startIPText, netmaskCombo) {
        public void widgetSelected (SelectionEvent event) {
            isEndIPUnedited = true;
            netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
            super.widgetSelected (event);
        }}

    ;
    hostnameText.addTraverseListener (hostnameListener);
    hostnameText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (startIPText, 0, SWT.LEFT), null, new FormAttachment (startIPText), null));
    hostnameText.setToolTipText (Labels.getLabel ("feeder.range.hostname.tooltip"));
    Listener netmaskResetListener = new NetmaskResetListener ();
    startIPText.addListener (SWT.Modify, netmaskResetListener);
    endIPText.addListener (SWT.Modify, netmaskResetListener);
    hostnameLabel.setText (Labels.getLabel ("feeder.range.hostname") + ":");
    hostnameLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (hostnameText, 0, SWT.CENTER), null));
    ipUpButton.setImage (new Image (getDisplay (), Labels.getInstance ().getImageAsStream ("button.ipUp.img")));
    ipUpButton.setText (Labels.getLabel ("button.ipUp"));
    ipUpButton.addSelectionListener (hostnameListener);
    ipUpButton.setLayoutData (LayoutHelper.formData (new FormAttachment (hostnameText), null, new FormAttachment (endIPText), ! Platform.MAC_OS ? new FormAttachment (hostnameText, 1, SWT.BOTTOM) : null));
    netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
    netmaskCombo.setVisibleItemCount (10);
    netmaskCombo.add ("/26");
    netmaskCombo.add ("/24");
    netmaskCombo.add ("/16");
    netmaskCombo.add ("255...192");
    netmaskCombo.add ("255...128");
    netmaskCombo.add ("255...0");
    netmaskCombo.add ("255..0.0");
    netmaskCombo.add ("255.0.0.0");
    NetmaskListener netmaskSelectionListener = new NetmaskListener ();
    netmaskCombo.addListener (SWT.Selection, netmaskSelectionListener);
    netmaskCombo.addListener (SWT.Traverse, netmaskSelectionListener);
    netmaskCombo.setLayoutData (LayoutHelper.formData (new FormAttachment (ipUpButton, 5), new FormAttachment (endIPText, 0, SWT.RIGHT), new FormAttachment (startIPText), new FormAttachment (hostnameText, 0, SWT.BOTTOM)));
    netmaskCombo.setToolTipText (Labels.getLabel ("feeder.range.netmask.tooltip"));
    pack ();
    asyncFillLocalHostInfo (hostnameText, startIPText);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="98" endline="106">
public void widgetSelected (SelectionEvent event) {
    isEndIPUnedited = true;
    netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
    super.widgetSelected (event);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="148" endline="152">
public Feeder createFeeder () {
    feeder = new RangeFeeder (startIPText.getText (), endIPText.getText ());
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="154" endline="157">
public String [] serialize () {
    return new String [] {startIPText.getText (), endIPText.getText ()};
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="159" endline="166">
public void unserialize (String [] parts) {
    startIPText.setText (parts [0]);
    endIPText.setText (parts [1]);
    netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="168" endline="171">
public String [] serializePartsLabels () {
    return new String [] {"feeder.range.startIP", "feeder.range.endIP"};
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="175" endline="178">
public void keyPressed (KeyEvent e) {
    isEndIPUnedited = false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="180" endline="182">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="187" endline="192">
public void handleEvent (Event event) {
    if (! modifyListenersDisabled) netmaskCombo.setText (Labels.getLabel ("feeder.range.netmask"));

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="197" endline="203">
public void modifyText (ModifyEvent e) {
    if (isEndIPUnedited) {
        endIPText.setText (startIPText.getText ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="208" endline="252">
public void handleEvent (Event event) {
    if (event.type == SWT.Traverse) {
        if (event.detail != SWT.TRAVERSE_RETURN) return;

        event.doit = false;
    }
    if (event.type == SWT.Selection) {
        if (netmaskCombo.indexOf (netmaskCombo.getText ()) < 0) return;

    }
    try {
        String netmaskString = netmaskCombo.getText ();
        InetAddress netmask = InetAddressUtils.parseNetmask (netmaskString);
        InetAddress startIP = InetAddress.getByName (startIPText.getText ());
        modifyListenersDisabled = true;
        startIPText.setText (InetAddressUtils.startRangeByNetmask (startIP, netmask).getHostAddress ());
        endIPText.setText (InetAddressUtils.endRangeByNetmask (startIP, netmask).getHostAddress ());
        modifyListenersDisabled = false;
        isEndIPUnedited = false;
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidNetmask");
    }
    if (event.type == SWT.Traverse) {
        getParent ().forceFocus ();
    } else {
        netmaskCombo.forceFocus ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="50" endline="53">
public RandomFeederGUI (Composite parent) {
    super (parent);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="55" endline="131">
protected void initialize () {
    feeder = new RandomFeeder ();
    setLayout (LayoutHelper.formLayout (3, 3, 4));
    ipPrototypeLabel = new Label (this, SWT.NONE);
    ipPrototypeText = new Text (this, SWT.BORDER);
    ipMaskLabel = new Label (this, SWT.NONE);
    ipMaskCombo = new Combo (this, SWT.NONE);
    hostnameText = new Text (this, SWT.BORDER);
    hostnameLabel = new Label (this, SWT.NONE);
    ipUpButton = new Button (this, SWT.NONE);
    countLabel = new Label (this, SWT.NONE);
    countSpinner = new Spinner (this, SWT.BORDER);
    ipPrototypeText.setText ("255.255.255.255xx");
    int textWidth = ipPrototypeText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;
    ipPrototypeText.setText ("");
    ipPrototypeLabel.setText (Labels.getLabel ("feeder.random.prototype") + ":");
    ipPrototypeLabel.setLayoutData (LayoutHelper.formData (null, new FormAttachment (hostnameLabel, 0, SWT.RIGHT), new FormAttachment (ipPrototypeText, 0, SWT.CENTER), null));
    ipPrototypeText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (ipPrototypeLabel), null, new FormAttachment (0), null));
    ipMaskLabel.setText (Labels.getLabel ("feeder.random.mask") + ":");
    ipMaskLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (ipPrototypeText, 3), null, new FormAttachment (ipPrototypeText, 0, SWT.CENTER), null));
    ipMaskCombo.setVisibleItemCount (10);
    ipMaskCombo.add ("255...128");
    ipMaskCombo.add ("255...0");
    ipMaskCombo.add ("255..0.0");
    ipMaskCombo.add ("255.0.0.0");
    ipMaskCombo.add ("0.0.0.0");
    ipMaskCombo.add ("255..0.255");
    ipMaskCombo.add ("255.0.0.255");
    ipMaskCombo.select (3);
    ipMaskCombo.setLayoutData (LayoutHelper.formData (textWidth - 15, SWT.DEFAULT, new FormAttachment (ipMaskLabel), null, new FormAttachment (0), new FormAttachment (ipPrototypeText, 0, SWT.BOTTOM)));
    FeederActions.HostnameButton hostnameSelectionListener = new FeederActions.HostnameButton (hostnameText, ipPrototypeText, ipMaskCombo);
    hostnameText.addTraverseListener (hostnameSelectionListener);
    hostnameText.setLayoutData (LayoutHelper.formData (textWidth, SWT.DEFAULT, new FormAttachment (ipPrototypeText, 0, SWT.LEFT), null, new FormAttachment (ipPrototypeText), null));
    hostnameLabel.setText (Labels.getLabel ("feeder.random.hostname") + ":");
    hostnameLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (hostnameText, 0, SWT.CENTER), null));
    ipUpButton.setImage (new Image (getDisplay (), Labels.getInstance ().getImageAsStream ("button.ipUp.img")));
    ipUpButton.setText (Labels.getLabel ("button.ipUp"));
    ipUpButton.addSelectionListener (hostnameSelectionListener);
    ipUpButton.setLayoutData (LayoutHelper.formData (new FormAttachment (hostnameText), null, new FormAttachment (ipPrototypeText), ! Platform.MAC_OS ? new FormAttachment (hostnameText, 1, SWT.BOTTOM) : null));
    countLabel.setText (Labels.getLabel ("feeder.random.count"));
    countLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (ipUpButton, 3), null, new FormAttachment (ipUpButton, 0, SWT.CENTER), null));
    countSpinner.setSelection (100);
    countSpinner.setMaximum (100000);
    countSpinner.setMinimum (1);
    countSpinner.setLayoutData (LayoutHelper.formData (new FormAttachment (countLabel), new FormAttachment (ipMaskCombo, 0, SWT.RIGHT), new FormAttachment (ipUpButton, 0, SWT.CENTER), null));
    countSpinner.addTraverseListener (new TraverseListener () {
        public void keyTraversed (TraverseEvent e) {
            ipPrototypeText.forceFocus ();
            countSpinner.forceFocus ();
        }}

    );
    pack ();
    asyncFillLocalHostInfo (hostnameText, ipPrototypeText);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="117" endline="124">
public void keyTraversed (TraverseEvent e) {
    ipPrototypeText.forceFocus ();
    countSpinner.forceFocus ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="133" endline="137">
public Feeder createFeeder () {
    feeder = new RandomFeeder (ipPrototypeText.getText (), ipMaskCombo.getText (), countSpinner.getSelection ());
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="139" endline="142">
public String [] serialize () {
    return new String [] {ipPrototypeText.getText (), ipMaskCombo.getText (), String.valueOf (countSpinner.getSelection ())};
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="144" endline="149">
public void unserialize (String [] parts) {
    ipPrototypeText.setText (parts [0]);
    ipMaskCombo.setText (parts [1]);
    countSpinner.setSelection (Integer.parseInt (parts [2]));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="151" endline="154">
public String [] serializePartsLabels () {
    return new String [] {"feeder.random.prototype", "feeder.random.mask", "feeder.random.count"};
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="37" endline="47">
public FeederGUIRegistry (AbstractFeederGUI [] allTheFeeders, Combo feederSelectionCombo, GUIConfig guiConfig) {
    this.feederGUIList = Arrays.asList (allTheFeeders);
    this.feederSelectionCombo = feederSelectionCombo;
    for (AbstractFeederGUI feederGUI : feederGUIList) {
        feederSelectionCombo.add (feederGUI.getFeederName ());
    }
    this.guiConfig = guiConfig;
    this.currentFeederGUI = allTheFeeders [0];
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="49" endline="52">
public AbstractFeederGUI current () {
    return currentFeederGUI;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="57" endline="68">
public void select (int newActiveFeeder) {
    currentFeederGUI.setVisible (false);
    currentFeederGUI = feederGUIList.get (newActiveFeeder);
    guiConfig.activeFeeder = newActiveFeeder;
    currentFeederGUI.setVisible (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="70" endline="73">
public Iterator < AbstractFeederGUI > iterator () {
    return feederGUIList.iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="78" endline="93">
public void select (String feederId) {
    for (int i = 0;
    i < feederGUIList.size (); i ++) {
        AbstractFeederGUI guiFeeder = feederGUIList.get (i);
        if (guiFeeder.getFeederId ().equals (feederId) || guiFeeder.getFeederName ().equals (feederId)) {
            feederSelectionCombo.select (i);
            feederSelectionCombo.notifyListeners (SWT.Selection, null);
            return;
        }
    }
    throw new FeederException ("Feeder not found: " + feederId);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="98" endline="102">
public Feeder createFeeder () {
    lastScanFeeder = current ().createFeeder ();
    return lastScanFeeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="108" endline="116">
public Feeder createRescanFeeder (TableItem [] selection) {
    String [] addresses = new String [selection.length];
    for (int i = 0;
    i < selection.length; i ++) {
        addresses [i] = selection [i].getText ();
    }
    return new RescanFeeder (lastScanFeeder, addresses);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="34" endline="39">
public AbstractFeederGUI (Composite parent) {
    super (parent, SWT.NONE);
    setVisible (false);
    initialize ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="46" endline="49">
public String getFeederId () {
    return feeder.getId ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="54" endline="57">
public String getFeederName () {
    return feeder.getName ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="62" endline="65">
public String getInfo () {
    return getFeederName () + ": " + createFeeder ().getInfo ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="77" endline="114">
protected static void asyncFillLocalHostInfo (final Text hostnameText, final Text ipText) {
    new Thread () {
        public void run () {
            synchronized (localResolveLock) {
                try {
                    if (localAddress == null) {
                        localName = InetAddress.getLocalHost ().getHostName ();
                        InetAddress localhost = InetAddressUtils.getAddressByName (localName);
                        localAddress = localhost.getHostAddress ();
                    }
                    Display.getDefault ().asyncExec (new Runnable () {
                        public void run () {
                            if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

                            if ("".equals (ipText.getText ())) ipText.setText (localAddress);

                        }}

                    );
                } catch (UnknownHostException e) {
                    LOG.fine (e.toString ());
                }
            }
        }}

    .start ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="81" endline="112">
public void run () {
    synchronized (localResolveLock) {
        try {
            if (localAddress == null) {
                localName = InetAddress.getLocalHost ().getHostName ();
                InetAddress localhost = InetAddressUtils.getAddressByName (localName);
                localAddress = localhost.getHostAddress ();
            }
            Display.getDefault ().asyncExec (new Runnable () {
                public void run () {
                    if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

                    if ("".equals (ipText.getText ())) ipText.setText (localAddress);

                }}

            );
        } catch (UnknownHostException e) {
            LOG.fine (e.toString ());
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="96" endline="103">
public void run () {
    if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

    if ("".equals (ipText.getText ())) ipText.setText (localAddress);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="45" endline="71">
public MainMenu (Shell shell, Menu mainMenu, CommandsMenu resultsContextMenu, StateMachine stateMachine, PicoContainer parentContainer) {
    container = new DefaultPicoContainer (parentContainer);
    container.registerComponentImplementation (FavoritesMenu.class);
    container.registerComponentImplementation (FavoritesMenuActions.ShowMenu.class);
    container.registerComponentImplementation (FavoritesMenuActions.Select.class);
    container.registerComponentImplementation (FavoritesMenuActions.Add.class);
    container.registerComponentImplementation (FavoritesMenuActions.Edit.class);
    container.registerComponentImplementation (CommandsMenuActions.EditOpeners.class);
    container.registerComponentImplementation (CommandsMenuActions.SelectOpener.class);
    container.registerComponentImplementation (CommandsMenuActions.ShowOpenersMenu.class);
    container.registerComponent (new ConstructorInjectionComponentAdapter (OpenersMenu.class, OpenersMenu.class));
    shell.setMenuBar (mainMenu);
    createMainMenuItems (mainMenu);
    createCommandsMenuItems (resultsContextMenu);
    stateMachine.addTransitionListener (new MenuEnablerDisabler (mainMenu));
    stateMachine.addTransitionListener (new MenuEnablerDisabler (resultsContextMenu));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="73" endline="76">
public void start () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="78" endline="80">
public void stop () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="82" endline="146">
private void createMainMenuItems (Menu menu) {
    Menu subMenu = initMenu (menu, "menu.scan");
    initMenuItem (subMenu, "menu.scan.exportAll", "Ctrl+S", new Integer (SWT.MOD1 | 'S'), initListener (ScanMenuActions.SaveAll.class), false);
    initMenuItem (subMenu, "menu.scan.exportSelection", null, null, initListener (ScanMenuActions.SaveSelection.class), false);
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.scan.exportPreferences", null, null, null);
    initMenuItem (subMenu, "menu.scan.importPreferences", null, null, null);
    if (! Platform.MAC_OS) {
        initMenuItem (subMenu, null, null, null, null);
        initMenuItem (subMenu, "menu.scan.quit", "Ctrl+Q", new Integer (SWT.MOD1 | 'Q'), initListener (ScanMenuActions.Quit.class));
    }
    subMenu = initMenu (menu, "menu.goto");
    initMenuItem (subMenu, "menu.goto.next.aliveHost", "Ctrl+H", new Integer (SWT.MOD1 | 'H'), initListener (GotoMenuActions.NextAliveHost.class));
    initMenuItem (subMenu, "menu.goto.next.openPort", "Ctrl+J", new Integer (SWT.MOD1 | 'J'), initListener (GotoMenuActions.NextHostWithInfo.class));
    initMenuItem (subMenu, "menu.goto.next.deadHost", "Ctrl+K", new Integer (SWT.MOD1 | 'K'), initListener (GotoMenuActions.NextDeadHost.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.goto.prev.aliveHost", "Ctrl+Shift+H", new Integer (SWT.MOD1 | SWT.MOD2 | 'H'), initListener (GotoMenuActions.PrevAliveHost.class));
    initMenuItem (subMenu, "menu.goto.prev.openPort", "Ctrl+Shift+J", new Integer (SWT.MOD1 | SWT.MOD2 | 'J'), initListener (GotoMenuActions.PrevHostWithInfo.class));
    initMenuItem (subMenu, "menu.goto.prev.deadHost", "Ctrl+Shift+K", new Integer (SWT.MOD1 | SWT.MOD2 | 'K'), initListener (GotoMenuActions.PrevDeadHost.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.goto.find", "Ctrl+F", new Integer (SWT.MOD1 | 'F'), initListener (GotoMenuActions.Find.class));
    subMenu = initMenu (menu, "menu.commands");
    createCommandsMenuItems (subMenu);
    createFavoritesMenu (menu);
    subMenu = initMenu (menu, "menu.tools");
    initMenuItem (subMenu, "menu.tools.preferences", "Ctrl+O", new Integer (SWT.MOD1 | (Platform.MAC_OS ? ',' : 'O')), initListener (ToolsActions.Preferences.class), true);
    initMenuItem (subMenu, "menu.tools.fetchers", "Ctrl+Shift+O", new Integer (SWT.MOD1 | SWT.MOD2 | (Platform.MAC_OS ? ',' : 'O')), initListener (ToolsActions.ChooseFetchers.class), true);
    initMenuItem (subMenu, null, null, null, null);
    Menu selectMenu = initMenu (subMenu, "menu.tools.select");
    initMenuItem (subMenu, "menu.tools.scanStatistics", "Ctrl+T", new Integer (SWT.MOD1 | 'T'), initListener (ToolsActions.ScanStatistics.class));
    initMenuItem (selectMenu, "menu.tools.select.alive", null, null, initListener (ToolsActions.SelectAlive.class), true);
    initMenuItem (selectMenu, "menu.tools.select.dead", null, null, initListener (ToolsActions.SelectDead.class), true);
    initMenuItem (selectMenu, "menu.tools.select.withPorts", null, null, initListener (ToolsActions.SelectWithPorts.class), true);
    initMenuItem (selectMenu, "menu.tools.select.withoutPorts", null, null, initListener (ToolsActions.SelectWithoutPorts.class), true);
    initMenuItem (selectMenu, null, null, null, null);
    initMenuItem (selectMenu, "menu.tools.select.invert", "Ctrl+I", new Integer (SWT.MOD1 | 'I'), initListener (ToolsActions.SelectInvert.class), true);
    subMenu = initMenu (menu, "menu.help");
    initMenuItem (subMenu, "menu.help.gettingStarted", ! Platform.MAC_OS ? "F1" : null, new Integer (Platform.MAC_OS ? SWT.HELP : SWT.F1), initListener (HelpMenuActions.GettingStarted.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.help.website", null, null, initListener (HelpMenuActions.Website.class));
    initMenuItem (subMenu, "menu.help.faq", null, null, initListener (HelpMenuActions.FAQ.class));
    initMenuItem (subMenu, "menu.help.plugins", null, null, initListener (HelpMenuActions.Plugins.class));
    initMenuItem (subMenu, null, null, null, null);
    initMenuItem (subMenu, "menu.help.cmdLine", null, null, initListener (HelpMenuActions.CommandLineUsage.class));
    if (! Platform.MAC_OS) {
        initMenuItem (subMenu, null, null, null, null);
        initMenuItem (subMenu, "menu.help.checkVersion", null, null, initListener (HelpMenuActions.CheckVersion.class));
        initMenuItem (subMenu, null, null, null, null);
        initMenuItem (subMenu, "menu.help.about", null, null, initListener (HelpMenuActions.About.class));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="148" endline="160">
private void createCommandsMenuItems (Menu menu) {
    initMenuItem (menu, "menu.commands.details", null, null, initListener (CommandsMenuActions.Details.class));
    initMenuItem (menu, null, null, null, null);
    initMenuItem (menu, "menu.commands.rescan", "Ctrl+R", new Integer (SWT.MOD1 | 'R'), initListener (CommandsMenuActions.Rescan.class), true);
    initMenuItem (menu, "menu.commands.delete", Platform.MAC_OS ? "⌦" : "Del", null, initListener (CommandsMenuActions.Delete.class), true);
    initMenuItem (menu, null, null, null, null);
    initMenuItem (menu, "menu.commands.copy", Platform.MAC_OS ? "⌘C" : "Ctrl+C", null, initListener (CommandsMenuActions.CopyIP.class));
    initMenuItem (menu, "menu.commands.copyDetails", null, null, initListener (CommandsMenuActions.CopyIPDetails.class));
    initMenuItem (menu, null, null, null, null);
    createOpenersMenu (menu);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="162" endline="168">
private void createOpenersMenu (Menu parentMenu) {
    OpenersMenu openersMenu = (OpenersMenu) container.getComponentInstance (OpenersMenu.class);
    MenuItem openersMenuItem = new MenuItem (parentMenu, SWT.CASCADE);
    openersMenuItem.setText (Labels.getLabel ("menu.commands.open"));
    openersMenuItem.setMenu (openersMenu);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="170" endline="176">
private void createFavoritesMenu (Menu parentMenu) {
    MenuItem favoritesMenuItem = new MenuItem (parentMenu, SWT.CASCADE);
    favoritesMenuItem.setText (Labels.getLabel ("menu.favorites"));
    Menu favoritesMenu = (Menu) container.getComponentInstance (FavoritesMenu.class);
    favoritesMenuItem.setMenu (favoritesMenu);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="178" endline="187">
private static Menu initMenu (Menu menu, String label) {
    MenuItem menuItem = new MenuItem (menu, SWT.CASCADE);
    menuItem.setText (Labels.getLabel (label));
    Menu subMenu = new Menu (menu.getShell (), SWT.DROP_DOWN);
    menuItem.setMenu (subMenu);
    return subMenu;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="189" endline="196">
private Listener initListener (Class < ? extends Listener > listenerClass) {
    if (container.getComponentAdapter (listenerClass) == null) container.registerComponentImplementation (listenerClass);

    return (Listener) container.getComponentInstance (listenerClass);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="198" endline="201">
static MenuItem initMenuItem (Menu parent, String label, String acceleratorText, Integer accelerator, Listener listener) {
    return initMenuItem (parent, label, acceleratorText, accelerator, listener, false);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="203" endline="224">
static MenuItem initMenuItem (Menu parent, String label, String acceleratorText, Integer accelerator, Listener listener, boolean disableDuringScanning) {
    MenuItem menuItem = new MenuItem (parent, label == null ? SWT.SEPARATOR : SWT.PUSH);
    if (label != null) menuItem.setText (Labels.getLabel (label) + (acceleratorText != null ? "\t" + acceleratorText : ""));

    if (accelerator != null) menuItem.setAccelerator (accelerator.intValue ());

    if (listener != null) menuItem.addListener (SWT.Selection, listener);
    else menuItem.setEnabled (false);

    if (disableDuringScanning) {
        menuItem.setData ("disableDuringScanning", Boolean.TRUE);
    }
    return menuItem;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="231" endline="234">
public CommandsMenu (Decorations parent) {
    super (parent, SWT.POP_UP);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="236" endline="236">
protected void checkSubclass () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="244" endline="257">
public OpenersMenu (Decorations parent, CommandsMenuActions.EditOpeners editOpenersListener, CommandsMenuActions.ShowOpenersMenu showOpenersMenuListener) {
    super (parent, SWT.DROP_DOWN);
    initMenuItem (this, "menu.commands.open.edit", null, null, editOpenersListener);
    initMenuItem (this, null, null, null, null);
    addListener (SWT.Show, showOpenersMenuListener);
    Event e = new Event ();
    e.widget = this;
    showOpenersMenuListener.handleEvent (e);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="258" endline="258">
protected void checkSubclass () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="266" endline="275">
public FavoritesMenu (Decorations parent, FavoritesMenuActions.Add addListener, FavoritesMenuActions.Edit editListener, FavoritesMenuActions.ShowMenu showFavoritesMenuListener) {
    super (parent, SWT.DROP_DOWN);
    initMenuItem (this, "menu.favorites.add", "Ctrl+D", new Integer (SWT.MOD1 | 'D'), addListener);
    initMenuItem (this, "menu.favorites.edit", null, null, editListener);
    initMenuItem (this, null, null, null, null);
    addListener (SWT.Show, showFavoritesMenuListener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="276" endline="276">
protected void checkSubclass () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="285" endline="292">
public ColumnsMenu (Decorations parent, ColumnsActions.SortBy sortByListener, ColumnsActions.AboutFetcher aboutListener, ColumnsActions.FetcherPreferences preferencesListener) {
    super (parent, SWT.POP_UP);
    initMenuItem (this, "menu.columns.sortBy", null, null, sortByListener);
    initMenuItem (this, "menu.columns.preferences", null, null, preferencesListener);
    initMenuItem (this, "menu.columns.about", null, null, aboutListener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="293" endline="293">
protected void checkSubclass () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="304" endline="307">
public MenuEnablerDisabler (Menu menu) {
    this.menu = menu;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="309" endline="314">
public void transitionTo (final ScanningState state, Transition transition) {
    if (transition != Transition.START && transition != Transition.COMPLETE) return;

    processMenu (menu, state == ScanningState.IDLE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="316" endline="330">
public void processMenu (Menu menu, boolean isEnabled) {
    for (MenuItem item : menu.getItems ()) {
        if (item.getData ("disableDuringScanning") == Boolean.TRUE) {
            item.setEnabled (isEnabled);
        } else if (item.getMenu () != null) {
            processMenu (item.getMenu (), isEnabled);
        }

    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="26" endline="29">
public SWTAwareStateMachine (Display display) {
    this.display = display;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="31" endline="45">
@Override
protected void notifyAboutTransition (final Transition transition) {
    if (display.isDisposed ()) return;

    display.asyncExec (new Runnable () {
        public void run () {
            SWTAwareStateMachine.super.notifyAboutTransition (transition);
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="40" endline="43">
public void run () {
    SWTAwareStateMachine.super.notifyAboutTransition (transition);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="54" endline="86">
public ResultTable (Composite parent, GUIConfig guiConfig, FetcherRegistry fetcherRegistry, ScanningResultList scanningResultList, StateMachine stateMachine, ColumnsActions.ColumnClick columnClickListener, ColumnsActions.ColumnResize columnResizeListener, ToolsActions.TableSelection selectionListener) {
    super (parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
    this.guiConfig = guiConfig;
    this.scanningResults = scanningResultList;
    this.fetcherRegistry = fetcherRegistry;
    setHeaderVisible (true);
    setLinesVisible (true);
    this.columnClickListener = columnClickListener;
    this.columnResizeListener = columnResizeListener;
    fetcherRegistry.addListener (this);
    handleUpdateOfSelectedFetchers (fetcherRegistry);
    listImages [ResultType.UNKNOWN.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.unknown.img"));
    listImages [ResultType.DEAD.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.dead.img"));
    listImages [ResultType.ALIVE.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.alive.img"));
    listImages [ResultType.WITH_PORTS.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.addinfo.img"));
    addListener (SWT.Selection, selectionListener);
    addListener (SWT.KeyDown, new CommandsMenuActions.Delete (this, stateMachine, selectionListener));
    addListener (SWT.KeyDown, new CommandsMenuActions.CopyIP (this));
    addListener (SWT.KeyDown, new ToolsActions.SelectAll (this, selectionListener));
    addListener (SWT.SetData, new SetDataListener ());
    stateMachine.addTransitionListener (this);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="91" endline="113">
public void handleUpdateOfSelectedFetchers (FetcherRegistry fetcherRegistry) {
    removeAll ();
    TableColumn [] columns = getColumns ();
    for (int i = 0;
    i < columns.length; i ++) {
        columns [i].dispose ();
    }
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        TableColumn tableColumn = new TableColumn (this, SWT.NONE);
        tableColumn.setWidth (guiConfig.getColumnWidth (fetcher));
        tableColumn.setData (fetcher);
        tableColumn.addListener (SWT.Selection, columnClickListener);
        tableColumn.addListener (SWT.Resize, columnResizeListener);
    }
    updateColumnNames ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="115" endline="122">
public void updateColumnNames () {
    int i = 0;
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        getColumn (i ++).setText (fetcher.getFullName ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="124" endline="129">
protected void checkSubclass () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="140" endline="167">
public void addOrUpdateResultRow (final ScanningResult result) {
    if (isDisposed ()) return;

    getDisplay ().asyncExec (new Runnable () {
        public void run () {
            if (isDisposed ()) return;

            if (scanningResults.isRegistered (result)) {
                int index = scanningResults.update (result);
                clear (index);
            } else {
                int index = getItemCount ();
                scanningResults.registerAtIndex (index, result);
                new TableItem (ResultTable.this, SWT.NONE);
            }
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="146" endline="165">
public void run () {
    if (isDisposed ()) return;

    if (scanningResults.isRegistered (result)) {
        int index = scanningResults.update (result);
        clear (index);
    } else {
        int index = getItemCount ();
        scanningResults.registerAtIndex (index, result);
        new TableItem (ResultTable.this, SWT.NONE);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="172" endline="175">
public void updateResults () {
    clearAll ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="182" endline="192">
public void updateResult (int index, String fetcherId, Object newValue) {
    int fetcherIndex = fetcherRegistry.getSelectedFetcherIndex (CommentFetcher.ID);
    if (fetcherIndex >= 0) {
        scanningResults.getResult (index).setValue (fetcherIndex, newValue);
        clear (index);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="198" endline="202">
public ScanningResult getSelectedResult () {
    int selectedIndex = getSelectionIndex ();
    return scanningResults.getResult (selectedIndex);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="204" endline="210">
public void remove (int [] indices) {
    scanningResults.remove (indices);
    super.remove (indices);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="212" endline="218">
public void removeAll () {
    scanningResults.clear ();
    super.removeAll ();
    setSortColumn (null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="224" endline="234">
public void resetSelection () {
    int [] selectionIndices = getSelectionIndices ();
    for (int itemNum : selectionIndices) {
        scanningResults.getResult (itemNum).reset ();
    }
    clear (selectionIndices);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="239" endline="242">
public ScanningResultList getScanningResults () {
    return scanningResults;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="250" endline="266">
public void handleEvent (Event event) {
    TableItem item = (TableItem) event.item;
    int tableIndex = indexOf (item);
    ScanningResult scanningResult = scanningResults.getResult (tableIndex);
    List < ? > values = scanningResult.getValues ();
    String [] resultStrings = new String [values.size ()];
    for (int i = 0;
    i < values.size (); i ++) {
        Object value = values.get (i);
        if (value != null) resultStrings [i] = value.toString ();

    }
    item.setText (resultStrings);
    item.setImage (0, listImages [scanningResult.getType ().ordinal ()]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="270" endline="274">
public void transitionTo (ScanningState state, Transition transition) {
    setCursor (getDisplay ().getSystemCursor (state == ScanningState.IDLE ? SWT.CURSOR_ARROW : SWT.CURSOR_APPSTARTING));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/util/LayoutHelper.java" startline="22" endline="29">
public static FormLayout formLayout (int marginWidth, int marginHeight, int spacing) {
    FormLayout formLayout = new FormLayout ();
    formLayout.marginWidth = marginWidth;
    formLayout.marginHeight = marginHeight;
    formLayout.spacing = spacing;
    return formLayout;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/util/LayoutHelper.java" startline="31" endline="39">
public static FormData formData (int width, int height, FormAttachment left, FormAttachment right, FormAttachment top, FormAttachment bottom) {
    FormData formData = new FormData (width, height);
    formData.left = left;
    formData.right = right;
    formData.top = top;
    formData.bottom = bottom;
    return formData;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/util/LayoutHelper.java" startline="41" endline="44">
public static FormData formData (FormAttachment left, FormAttachment right, FormAttachment top, FormAttachment bottom) {
    return formData (SWT.DEFAULT, SWT.DEFAULT, left, right, top, bottom);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="47" endline="52">
public ConfigDetectorDialog (ScannerConfig config, ConfigDetector configDetector) {
    this.config = config;
    this.configDetector = configDetector;
    this.configDetector.setCallback (this);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="54" endline="110">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.configDetect"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 10));
    Label infoLabel = new Label (shell, SWT.WRAP);
    infoLabel.setText (Labels.getLabel ("text.configDetect"));
    infoLabel.setLayoutData (LayoutHelper.formData (340, SWT.DEFAULT, new FormAttachment (0), new FormAttachment (100), new FormAttachment (0), null));
    Label hostLabel = new Label (shell, SWT.WRAP);
    hostLabel.setText (Labels.getLabel ("text.configDetect.host"));
    hostLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (infoLabel), null));
    hostText = new Text (shell, SWT.BORDER);
    hostText.setText ("www");
    hostText.setLayoutData (LayoutHelper.formData (100, SWT.DEFAULT, new FormAttachment (hostLabel), null, new FormAttachment (hostLabel, 0, SWT.CENTER), null));
    Label portLabel = new Label (shell, SWT.WRAP);
    portLabel.setText (Labels.getLabel ("text.configDetect.port"));
    portLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (hostText, 10), null, new FormAttachment (infoLabel), null));
    portText = new Text (shell, SWT.BORDER);
    portText.setText ("80");
    portText.setLayoutData (LayoutHelper.formData (30, SWT.DEFAULT, new FormAttachment (portLabel), null, new FormAttachment (portLabel, 0, SWT.CENTER), null));
    Label tryLabel = new Label (shell, SWT.NONE);
    tryLabel.setText (Labels.getLabel ("text.configDetect.tries"));
    tryLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (hostLabel, 10), null));
    tryCountLabel = new Label (shell, SWT.NONE);
    tryCountLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (tryLabel, - 5), new FormAttachment (100), new FormAttachment (hostLabel, 10), null));
    tryProgressBar = new ProgressBar (shell, SWT.NONE);
    tryProgressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (tryLabel), null));
    Label successLabel = new Label (shell, SWT.NONE);
    successLabel.setText (Labels.getLabel ("text.configDetect.successes"));
    successLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (tryProgressBar, 10), null));
    successCountLabel = new Label (shell, SWT.NONE);
    successCountLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (successLabel, - 5), new FormAttachment (100), new FormAttachment (tryProgressBar, 10), null));
    successProgressBar = new ProgressBar (shell, SWT.NONE);
    successProgressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (successLabel), null));
    startButton = new Button (shell, SWT.NONE);
    startButton.setText (Labels.getLabel ("button.start"));
    startButton.addListener (SWT.Selection, new StartButtonListener ());
    closeButton = new Button (shell, SWT.NONE);
    closeButton.setText (Labels.getLabel ("button.close"));
    closeButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
        }}

    );
    positionButtonsInFormLayout (startButton, closeButton, successProgressBar);
    shell.pack ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="101" endline="104">
public void handleEvent (Event event) {
    shell.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="112" endline="123">
public void onDetectorTry () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            tryCount ++;
            tryCountLabel.setText (Integer.toString (tryCount));
            tryProgressBar.setSelection (tryCount);
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="116" endline="121">
public void run () {
    tryCount ++;
    tryCountLabel.setText (Integer.toString (tryCount));
    tryProgressBar.setSelection (tryCount);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="125" endline="136">
public void onDetectorSuccess () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            successCount ++;
            successCountLabel.setText (Integer.toString (successCount));
            successProgressBar.setSelection (successCount);
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="129" endline="134">
public void run () {
    successCount ++;
    successCountLabel.setText (Integer.toString (successCount));
    successProgressBar.setSelection (successCount);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="138" endline="150">
private void onStart () {
    startButton.setEnabled (false);
    closeButton.setEnabled (false);
    tryCount = 0;
    tryCountLabel.setText ("0");
    tryProgressBar.setMaximum (configDetector.getInitialConnectCount ());
    tryProgressBar.setSelection (0);
    successCount = 0;
    successCountLabel.setText ("0");
    successProgressBar.setMaximum (configDetector.getInitialSuccessCount ());
    successProgressBar.setSelection (0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="152" endline="179">
private void onFinish () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            successProgressBar.setMaximum (configDetector.getExpectedSuccessfulConnectCount ());
            startButton.setEnabled (true);
            closeButton.setEnabled (true);
            if (configDetector.getExpectedSuccessfulConnectCount () > configDetector.getActualSuccessfulConnectCount ()) {
                MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_ERROR);
                box.setText (Labels.getLabel ("title.configDetect"));
                box.setMessage (String.format (Labels.getLabel ("text.configDetect.failed"), configDetector.getInitialConnectCount (), configDetector.getExpectedSuccessfulConnectCount (), configDetector.getActualSuccessfulConnectCount ()));
                box.open ();
            } else {
                MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_INFORMATION);
                box.setText (Labels.getLabel ("title.configDetect"));
                box.setMessage (String.format (Labels.getLabel ("text.configDetect.success"), config.maxThreads));
                box.open ();
            }
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="156" endline="177">
public void run () {
    successProgressBar.setMaximum (configDetector.getExpectedSuccessfulConnectCount ());
    startButton.setEnabled (true);
    closeButton.setEnabled (true);
    if (configDetector.getExpectedSuccessfulConnectCount () > configDetector.getActualSuccessfulConnectCount ()) {
        MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_ERROR);
        box.setText (Labels.getLabel ("title.configDetect"));
        box.setMessage (String.format (Labels.getLabel ("text.configDetect.failed"), configDetector.getInitialConnectCount (), configDetector.getExpectedSuccessfulConnectCount (), configDetector.getActualSuccessfulConnectCount ()));
        box.open ();
    } else {
        MessageBox box = new MessageBox (shell, SWT.OK | SWT.ICON_INFORMATION);
        box.setText (Labels.getLabel ("title.configDetect"));
        box.setMessage (String.format (Labels.getLabel ("text.configDetect.success"), config.maxThreads));
        box.open ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="183" endline="198">
public void handleEvent (Event event) {
    final InetSocketAddress socketAddress = new InetSocketAddress (hostText.getText (), Integer.parseInt (portText.getText ()));
    onStart ();
    new Thread () {
        public void run () {
            configDetector.detectMaxThreads (socketAddress);
            onFinish ();
        }}

    .start ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/ConfigDetectorDialog.java" startline="192" endline="196">
public void run () {
    configDetector.detectMaxThreads (socketAddress);
    onFinish ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="43" endline="46">
public SelectFetchersDialog (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="48" endline="156">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.fetchers.select"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.WRAP);
    messageLabel.setText (Labels.getLabel ("text.fetchers.select"));
    Label selectedLabel = new Label (shell, SWT.NONE);
    selectedLabel.setText (Labels.getLabel ("text.fetchers.selectedList"));
    selectedLabel.setLayoutData (LayoutHelper.formData (null, null, new FormAttachment (messageLabel, 5), null));
    selectedFetchersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    selectedFetchersList.setLayoutData (LayoutHelper.formData (140, 200, new FormAttachment (0), new FormAttachment (selectedLabel, 80, SWT.RIGHT), new FormAttachment (selectedLabel), null));
    Iterator < Fetcher > i = fetcherRegistry.getSelectedFetchers ().iterator ();
    i.next ();
    while (i.hasNext ()) {
        Fetcher fetcher = i.next ();
        selectedFetchersList.add (fetcher.getName ());
    }
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    Button addButton = new Button (shell, SWT.NONE);
    addButton.setText (Labels.getLabel ("button.left"));
    Button removeButton = new Button (shell, SWT.NONE);
    removeButton.setText (Labels.getLabel ("button.right"));
    Button prefsButton = new Button (shell, SWT.NONE);
    prefsButton.setText (Labels.getLabel ("button.fetcherPrefs"));
    prefsButton.setToolTipText (Labels.getLabel ("text.fetchers.preferences"));
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (selectedLabel), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), null, new FormAttachment (upButton), null));
    addButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (downButton, 16), null));
    removeButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (addButton), null));
    prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (removeButton, 16), null));
    Label registeredLabel = new Label (shell, SWT.NONE);
    registeredLabel.setText (Labels.getLabel ("text.fetchers.availableList"));
    registeredLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (downButton, 10), null, new FormAttachment (messageLabel, 5), null));
    registeredFetchersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    registeredFetchersList.setLayoutData (LayoutHelper.formData (140, 200, new FormAttachment (downButton, 10), null, new FormAttachment (registeredLabel), null));
    i = fetcherRegistry.getRegisteredFetchers ().iterator ();
    i.next ();
    while (i.hasNext ()) {
        Fetcher fetcher = i.next ();
        String fetcherName = fetcher.getName ();
        registeredFetcherIdsByNames.put (fetcherName, fetcher.getId ());
        if (selectedFetchersList.indexOf (fetcherName) < 0) registeredFetchersList.add (fetcherName);

    }
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, registeredFetchersList);
    upButton.addListener (SWT.Selection, new UpButtonListener (selectedFetchersList));
    downButton.addListener (SWT.Selection, new DownButtonListener (selectedFetchersList));
    AddRemoveButtonListener addButtonListener = new AddRemoveButtonListener (registeredFetchersList, selectedFetchersList);
    addButton.addListener (SWT.Selection, addButtonListener);
    registeredFetchersList.addListener (SWT.MouseDoubleClick, addButtonListener);
    AddRemoveButtonListener removeButtonListener = new AddRemoveButtonListener (selectedFetchersList, registeredFetchersList);
    removeButton.addListener (SWT.Selection, removeButtonListener);
    selectedFetchersList.addListener (SWT.MouseDoubleClick, removeButtonListener);
    prefsButton.addListener (SWT.Selection, new PrefsListener ());
    shell.layout ();
    Rectangle bounds = registeredFetchersList.getBounds ();
    messageLabel.setLayoutData (LayoutHelper.formData (bounds.x + bounds.width - 10, SWT.DEFAULT, new FormAttachment (0), null, null, null));
    shell.pack ();
    cancelButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event e) {
            shell.close ();
            shell.dispose ();
        }}

    );
    okButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            saveFetchersToRegistry (selectedFetchersList.getItems ());
            shell.close ();
            shell.dispose ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="141" endline="145">
public void handleEvent (Event e) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="149" endline="154">
public void handleEvent (Event event) {
    saveFetchersToRegistry (selectedFetchersList.getItems ());
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="162" endline="173">
void saveFetchersToRegistry (String [] fetchersNamesToSave) {
    String [] fetchersLabelsToRetain = new String [fetchersNamesToSave.length + 1];
    fetchersLabelsToRetain [0] = IPFetcher.ID;
    for (int i = 0;
    i < fetchersNamesToSave.length; i ++) {
        fetchersLabelsToRetain [i + 1] = registeredFetcherIdsByNames.get (fetchersNamesToSave [i]);
    }
    fetcherRegistry.updateSelectedFetchers (fetchersLabelsToRetain);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="178" endline="190">
public void handleEvent (Event event) {
    String [] selection = selectedFetchersList.getSelection ();
    String fetcherName = selection.length > 0 ? selection [0] : selectedFetchersList.getItem (0);
    for (Fetcher fetcher : fetcherRegistry.getRegisteredFetchers ()) {
        if (fetcherName.equals (fetcher.getName ())) {
            fetcherRegistry.openPreferencesEditor (fetcher);
            break;
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="199" endline="203">
public AddRemoveButtonListener (List fromList, List toList) {
    this.fromList = fromList;
    this.toList = toList;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="205" endline="217">
public void handleEvent (Event event) {
    int [] selectedItems = fromList.getSelectionIndices ();
    for (int i = 0;
    i < selectedItems.length; i ++) {
        toList.add (fromList.getItem (selectedItems [i]));
    }
    fromList.remove (selectedItems);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="31" endline="34">
public EditFavoritesDialog (FavoritesConfig favoritesConfig) {
    this.favoritesConfig = favoritesConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="36" endline="104">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.favorite.edit"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setText (Labels.getLabel ("text.favorite.edit"));
    favoritesList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    favoritesList.setLayoutData (LayoutHelper.formData (330, 200, new FormAttachment (0), null, new FormAttachment (messageLabel), null));
    for (String name : favoritesConfig) {
        favoritesList.add (name);
    }
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    upButton.addListener (SWT.Selection, new UpButtonListener (favoritesList));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    downButton.addListener (SWT.Selection, new DownButtonListener (favoritesList));
    Button renameButton = new Button (shell, SWT.NONE);
    renameButton.setText (Labels.getLabel ("button.rename"));
    Listener renameListener = new RenameListener ();
    renameButton.addListener (SWT.Selection, renameListener);
    favoritesList.addListener (SWT.MouseDoubleClick, renameListener);
    Button deleteButton = new Button (shell, SWT.NONE);
    deleteButton.setText (Labels.getLabel ("button.delete"));
    deleteButton.addListener (SWT.Selection, new DeleteListener ());
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (messageLabel), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (upButton), null));
    renameButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), null, new FormAttachment (downButton, 10), null));
    deleteButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (renameButton), null));
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, favoritesList);
    shell.pack ();
    okButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            saveFavorites ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            shell.close ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="91" endline="95">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    saveFavorites ();
    shell.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="99" endline="102">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="106" endline="110">
private void saveFavorites () {
    favoritesConfig.update (favoritesList.getItems ());
    favoritesConfig.store ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="114" endline="117">
public void handleEvent (Event event) {
    favoritesList.remove (favoritesList.getSelectionIndices ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="122" endline="135">
public void handleEvent (Event event) {
    int index = favoritesList.getSelectionIndex ();
    InputDialog prompt = new InputDialog (Labels.getLabel ("title.rename"), "");
    String oldName = favoritesList.getItem (index);
    String newName = prompt.open (oldName);
    if (newName != null) {
        favoritesConfig.add (newName, favoritesConfig.remove (oldName));
        favoritesList.setItem (index, newName);
    }
    favoritesList.forceFocus ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="27" endline="31">
public StatisticsDialog (ScanningResultList scanningResults) {
    super (Labels.getLabel ("title.statistics"), null);
    this.scanningResults = scanningResults;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="33" endline="53">
@Override
public void open () {
    if (scanningResults.isInfoAvailable ()) {
        setMessage (prepareText ());
        if (shell != null) {
            shell.close ();
            shell.dispose ();
        }
        super.open ();
    } else {
        throw new UserErrorException ("commands.noResults");
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="55" endline="76">
String prepareText () {
    ScanInfo scanInfo = scanningResults.getScanInfo ();
    title2 = Labels.getLabel (scanInfo.isCompletedNormally () ? "text.scan.completed" : "text.scan.incomplete");
    String ln = System.getProperty ("line.separator");
    StringBuilder text = new StringBuilder ();
    text.append (Labels.getLabel ("text.scan.time.total")).append (timeToText (scanInfo.getScanTime ())).append (ln);
    text.append (Labels.getLabel ("text.scan.time.average")).append (timeToText ((double) scanInfo.getScanTime () / scanInfo.getHostCount ())).append (ln);
    text.append (ln).append (scanningResults.getFeederName ()).append (ln).append (scanningResults.getFeederInfo ()).append (ln).append (ln);
    text.append (Labels.getLabel ("text.scan.hosts.total")).append (scanInfo.getHostCount ()).append (ln);
    text.append (Labels.getLabel ("text.scan.hosts.alive")).append (scanInfo.getAliveCount ()).append (ln);
    if (scanInfo.getWithPortsCount () > 0) text.append (Labels.getLabel ("text.scan.hosts.ports")).append (scanInfo.getWithPortsCount ()).append (ln);

    return text.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="82" endline="93">
static String timeToText (double scanTime) {
    double totalSeconds = scanTime / 1000;
    double totalMinutes = totalSeconds / 60;
    double totalHours = totalMinutes / 60;
    NumberFormat format = new DecimalFormat ("#.#");
    if (totalHours >= 1) return format.format (totalHours) + Labels.getLabel ("unit.hour");

    if (totalMinutes >= 1) return format.format (totalMinutes) + Labels.getLabel ("unit.minute");

    return format.format (totalSeconds) + Labels.getLabel ("unit.second");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="43" endline="53">
static void checkSelection (ResultTable resultTable) {
    if (resultTable.getItemCount () <= 0) {
        throw new UserErrorException ("commands.noResults");
    } else if (resultTable.getSelectionIndex () < 0) {
        throw new UserErrorException ("commands.noSelection");
    }

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="60" endline="66">
public Details (ResultTable resultTable, DetailsWindow detailsWindow) {
    this.resultTable = resultTable;
    this.detailsWindow = detailsWindow;
    resultTable.addListener (SWT.Traverse, this);
    resultTable.addListener (SWT.MouseDoubleClick, this);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="68" endline="77">
public void handleEvent (Event event) {
    if (event.type == SWT.Selection || (resultTable.getSelectionIndex () >= 0 && (event.type == SWT.MouseDoubleClick || event.detail == SWT.TRAVERSE_RETURN))) {
        event.doit = false;
        checkSelection (resultTable);
        detailsWindow.open ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="86" endline="91">
public Delete (ResultTable resultTable, StateMachine stateMachine, TableSelection selectionListener) {
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
    this.selectionListener = selectionListener;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="93" endline="110">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown && event.keyCode != SWT.DEL) return;

    if (! stateMachine.inState (ScanningState.IDLE)) return;

    checkSelection (resultTable);
    int firstSelection = resultTable.getSelectionIndex ();
    resultTable.remove (resultTable.getSelectionIndices ());
    resultTable.setSelection (firstSelection);
    event.widget = resultTable;
    selectionListener.handleEvent (event);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="118" endline="122">
public Rescan (ResultTable resultTable, StateMachine stateMachine) {
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="124" endline="128">
public void handleEvent (Event event) {
    checkSelection (resultTable);
    stateMachine.rescan ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="139" endline="142">
public CopyIP (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="144" endline="160">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown) {
        if ((event.keyCode != 'c' && event.stateMask != SWT.MOD1) || resultTable.getSelectionIndex () < 0) return;

    } else {
        checkSelection (resultTable);
    }
    Clipboard clipboard = new Clipboard (event.display);
    clipboard.setContents (new Object [] {resultTable.getItem (resultTable.getSelectionIndex ()).getText ()}, new Transfer [] {TextTransfer.getInstance ()});
    clipboard.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="167" endline="170">
public CopyIPDetails (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="172" endline="178">
public void handleEvent (Event event) {
    checkSelection (resultTable);
    Clipboard clipboard = new Clipboard (event.display);
    clipboard.setContents (new Object [] {resultTable.getSelectedResult ().toString ()}, new Transfer [] {TextTransfer.getInstance ()});
    clipboard.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="187" endline="191">
public ShowOpenersMenu (OpenersConfig openersConfig, SelectOpener selectOpener) {
    this.openersConfig = openersConfig;
    this.openersSelectListener = selectOpener;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="193" endline="220">
public void handleEvent (Event event) {
    Menu openersMenu = (Menu) event.widget;
    MenuItem [] menuItems = openersMenu.getItems ();
    for (int i = 2;
    i < menuItems.length; i ++) {
        menuItems [i].dispose ();
    }
    int index = 0;
    for (String name : openersConfig) {
        MenuItem menuItem = new MenuItem (openersMenu, SWT.CASCADE);
        index ++;
        if (index <= 9) {
            name += "\tCtrl+" + index;
            menuItem.setAccelerator (SWT.MOD1 | ('0' + index));
        }
        menuItem.setText (name);
        menuItem.setData (new Integer (index));
        menuItem.addListener (SWT.Selection, openersSelectListener);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="229" endline="233">
public EditOpeners (FetcherRegistry fetcherRegistry, OpenersConfig openersConfig) {
    this.fetcherRegistry = fetcherRegistry;
    this.openersConfig = openersConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="235" endline="238">
public void handleEvent (Event event) {
    new EditOpenersDialog (fetcherRegistry, openersConfig).open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="249" endline="255">
public SelectOpener (OpenersConfig openersConfig, StatusBar statusBar, ResultTable resultTable, OpenerLauncher openerLauncher) {
    this.openersConfig = openersConfig;
    this.statusBar = statusBar;
    this.resultTable = resultTable;
    this.openerLauncher = openerLauncher;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="257" endline="287">
public void handleEvent (Event event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String name = menuItem.getText ();
    int indexOf = name.lastIndexOf ('\t');
    if (indexOf >= 0) {
        name = name.substring (0, indexOf);
    }
    Opener opener = openersConfig.getOpener (name);
    int selectedItem = resultTable.getSelectionIndex ();
    if (selectedItem < 0) {
        throw new UserErrorException ("commands.noSelection");
    }
    try {
        statusBar.setStatusText (Labels.getLabel ("state.opening") + name);
        openerLauncher.launch (opener, selectedItem);
        Thread.sleep (500);
    } catch (InterruptedException e) {
    } finally {
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="34" endline="38">
public OpenerLauncher (FetcherRegistry fetcherRegistry, ScanningResultList scanningResults) {
    this.fetcherRegistry = fetcherRegistry;
    this.scanningResults = scanningResults;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="40" endline="76">
public void launch (Opener opener, int selectedItem) {
    String openerString = prepareOpenerStringForItem (opener.execString, selectedItem);
    if (openerString.startsWith ("http:") || openerString.startsWith ("https:") || openerString.startsWith ("ftp:") || openerString.startsWith ("mailto:") || openerString.startsWith ("\\\\")) {
        BrowserLauncher.openURL (openerString);
    } else {
        try {
            if (opener.inTerminal) {
                TerminalLauncher.launchInTerminal (openerString, opener.workingDir);
            } else {
                if (Platform.LINUX) {
                    Runtime.getRuntime ().exec (new String [] {"sh", "-c", openerString}, null, opener.workingDir);
                } else {
                    Runtime.getRuntime ().exec (splitCommand (openerString), null, opener.workingDir);
                }
            }
        } catch (Exception e) {
            throw new UserErrorException ("opener.failed", openerString);
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="83" endline="112">
static String [] splitCommand (String command) {
    StringTokenizer tokenizer = new StringTokenizer (command);
    List < String > result = new ArrayList < String > ();
    while (tokenizer.hasMoreTokens ()) {
        String token = tokenizer.nextToken (" \t");
        try {
            if (token.startsWith ("\"")) {
                token = token.substring (1) + tokenizer.nextToken ("\"");
                tokenizer.nextToken (" \t");
            } else if (token.startsWith ("'")) {
                token = token.substring (1) + tokenizer.nextToken ("'");
                tokenizer.nextToken (" \t");
            }

        } catch (NoSuchElementException e) {
        }
        result.add (token);
    }
    return result.toArray (new String [result.size ()]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="120" endline="141">
String prepareOpenerStringForItem (String openerString, int selectedItem) {
    Pattern paramsPattern = Pattern.compile ("\\$\\{(.+?)\\}");
    Matcher matcher = paramsPattern.matcher (openerString);
    StringBuffer sb = new StringBuffer (64);
    while (matcher.find ()) {
        String fetcherId = matcher.group (1);
        Object scannedValue = getScannedValue (selectedItem, fetcherId);
        if (scannedValue == null || scannedValue instanceof Empty) {
            throw new UserErrorException ("opener.nullFetcherValue", fetcherId);
        }
        matcher.appendReplacement (sb, scannedValue.toString ());
    }
    matcher.appendTail (sb);
    return sb.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="143" endline="161">
private Object getScannedValue (int selectedItem, String fetcherId) {
    int fetcherIndex = fetcherRegistry.getSelectedFetcherIndex (fetcherId);
    if (fetcherIndex < 0) {
        throw new UserErrorException ("opener.unknownFetcher", fetcherId);
    }
    Object value = scanningResults.getResult (selectedItem).getValues ().get (fetcherIndex);
    if ((value == null || value instanceof Empty) && fetcherId.equals (HostnameFetcher.ID)) {
        value = scanningResults.getResult (selectedItem).getAddress ().getHostAddress ();
    }
    return value;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="40" endline="43">
public ColumnResize (GUIConfig guiConfig) {
    this.guiConfig = guiConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="45" endline="55">
public void handleEvent (Event event) {
    TableColumn column = (TableColumn) event.widget;
    if (Platform.LINUX && column.getParent ().getColumn (column.getParent ().getColumnCount () - 1) == column) return;

    guiConfig.setColumnWidth ((Fetcher) column.getData (), column.getWidth ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="64" endline="68">
public ColumnClick (ColumnsMenu columnsMenu, StateMachine stateMachine) {
    this.columnsMenu = columnsMenu;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="70" endline="104">
public void handleEvent (Event e) {
    TableColumn tableColumn = (TableColumn) e.widget;
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    MenuItem sortMenuItem = columnsMenu.getItem (0);
    MenuItem preferencesMenuItem = columnsMenu.getItem (1);
    MenuItem aboutMenuItem = columnsMenu.getItem (2);
    if (tableColumn.getParent ().getSortColumn () == tableColumn) {
        sortMenuItem.setText (Labels.getLabel ("menu.columns.sortDirection"));
    } else {
        sortMenuItem.setText (Labels.getLabel ("menu.columns.sortBy") + fetcher.getName ());
    }
    sortMenuItem.setEnabled (stateMachine.inState (ScanningState.IDLE));
    preferencesMenuItem.setEnabled (fetcher.getPreferencesClass () != null && stateMachine.inState (ScanningState.IDLE));
    aboutMenuItem.setText (Labels.getLabel ("menu.columns.about") + fetcher.getName ());
    tableColumn.getParent ().forceFocus ();
    columnsMenu.setData (tableColumn);
    columnsMenu.setLocation (e.display.getCursorLocation ());
    columnsMenu.setVisible (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="112" endline="115">
public SortBy (ScanningResultList scanningResultList) {
    this.scanningResultList = scanningResultList;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="117" endline="136">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Table table = tableColumn.getParent ();
    if (table.getSortColumn () != tableColumn) {
        table.setSortColumn (tableColumn);
        table.setSortDirection (SWT.UP);
    } else {
        table.setSortDirection (table.getSortDirection () == SWT.UP ? SWT.DOWN : SWT.UP);
    }
    scanningResultList.sort (table.indexOf (tableColumn), table.getSortDirection () == SWT.UP);
    ((ResultTable) table).updateResults ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="144" endline="147">
public FetcherPreferences (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="149" endline="160">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    fetcherRegistry.openPreferencesEditor (fetcher);
    tableColumn.setText (fetcher.getFullName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="166" endline="182">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    MessageBox messageBox = new MessageBox (tableColumn.getParent ().getShell (), SWT.ICON_INFORMATION | SWT.OK);
    messageBox.setText (Labels.getLabel ("text.fetchers.info") + fetcher.getName ());
    String info = fetcher.getInfo ();
    if (info == null) {
        info = Labels.getLabel ("text.fetchers.info.notAvailable");
    }
    messageBox.setMessage (info);
    messageBox.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="43" endline="48">
public Preferences (PreferencesDialog preferencesDialog, ResultTable resultTable, StatusBar statusBar) {
    this.preferencesDialog = preferencesDialog;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="50" endline="59">
public void handleEvent (Event event) {
    preferencesDialog.open ();
    resultTable.updateResults ();
    resultTable.updateColumnNames ();
    statusBar.updateConfigText ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="67" endline="70">
public ChooseFetchers (SelectFetchersDialog selectFetchersDialog) {
    this.selectFetchersDialog = selectFetchersDialog;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="72" endline="75">
public void handleEvent (Event event) {
    selectFetchersDialog.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="85" endline="92">
public ScanStatistics (GUIConfig guiConfig, StatisticsDialog statisticsDialog, StateMachine stateMachine, CommandProcessor commandProcessor) {
    this.guiConfig = guiConfig;
    this.statisticsDialog = statisticsDialog;
    if (! commandProcessor.shouldAutoQuit ()) stateMachine.addTransitionListener (this);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="94" endline="97">
public void handleEvent (Event event) {
    statisticsDialog.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="99" endline="106">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.COMPLETE && guiConfig.showScanStats) {
        handleEvent (null);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="117" endline="121">
public TableSelection (StatusBar statusBar, StateMachine stateMachine) {
    this.statusBar = statusBar;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="123" endline="134">
public void handleEvent (Event event) {
    if (stateMachine.inState (ScanningState.IDLE)) {
        Table resultTable = (Table) event.widget;
        int selectionCount = resultTable.getSelectionCount ();
        if (selectionCount > 1) statusBar.setStatusText (selectionCount + Labels.getLabel ("text.hostsSelected"));
        else statusBar.setStatusText (null);

    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="144" endline="149">
public SelectDesired (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    this.resultTable = resultTable;
    this.results = results;
    this.tableSelectionListener = tableSelectionListener;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="151" endline="165">
public void handleEvent (Event event) {
    int count = resultTable.getItemCount ();
    resultTable.deselectAll ();
    for (int i = 0;
    i < count; i ++) {
        if (isDesired (results.getResult (i).getType ())) {
            resultTable.select (i);
        }
    }
    event.widget = resultTable;
    tableSelectionListener.handleEvent (event);
    resultTable.forceFocus ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="172" endline="175">
public SelectAlive (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="177" endline="180">
boolean isDesired (ResultType type) {
    return type.ordinal () >= ResultType.ALIVE.ordinal ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="185" endline="188">
public SelectDead (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="190" endline="193">
boolean isDesired (ResultType type) {
    return type == ResultType.DEAD;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="198" endline="201">
public SelectWithPorts (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="203" endline="206">
boolean isDesired (ResultType type) {
    return type == ResultType.WITH_PORTS;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="211" endline="214">
public SelectWithoutPorts (ResultTable resultTable, ScanningResultList results, TableSelection tableSelectionListener) {
    super (resultTable, results, tableSelectionListener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="216" endline="219">
boolean isDesired (ResultType type) {
    return type == ResultType.ALIVE;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="231" endline="235">
public SelectAll (ResultTable resultTable, TableSelection tableSelectionListener) {
    this.resultTable = resultTable;
    this.tableSelectionListener = tableSelectionListener;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="237" endline="248">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown && event.keyCode == 'a' && event.stateMask == SWT.MOD1) {
        resultTable.selectAll ();
        event.widget = resultTable;
        tableSelectionListener.handleEvent (event);
        event.doit = false;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="256" endline="260">
public SelectInvert (ResultTable resultTable, TableSelection tableSelectionListener) {
    this.resultTable = resultTable;
    this.tableSelectionListener = tableSelectionListener;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="262" endline="279">
public void handleEvent (Event event) {
    int count = resultTable.getItemCount ();
    resultTable.setRedraw (false);
    for (int i = 0;
    i < count; i ++) {
        if (resultTable.isSelected (i)) resultTable.deselect (i);
        else resultTable.select (i);

    }
    resultTable.setRedraw (true);
    resultTable.redraw ();
    event.widget = resultTable;
    tableSelectionListener.handleEvent (event);
    resultTable.forceFocus ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="65" endline="84">
StartStopScanningAction (Display display) {
    this.display = display;
    buttonImages [ScanningState.IDLE.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.start.img"));
    buttonImages [ScanningState.SCANNING.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.stop.img"));
    buttonImages [ScanningState.STARTING.ordinal ()] = buttonImages [ScanningState.SCANNING.ordinal ()];
    buttonImages [ScanningState.RESTARTING.ordinal ()] = buttonImages [ScanningState.SCANNING.ordinal ()];
    buttonImages [ScanningState.STOPPING.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.kill.img"));
    buttonImages [ScanningState.KILLING.ordinal ()] = buttonImages [ScanningState.STOPPING.ordinal ()];
    buttonTexts [ScanningState.IDLE.ordinal ()] = Labels.getLabel ("button.start");
    buttonTexts [ScanningState.SCANNING.ordinal ()] = Labels.getLabel ("button.stop");
    buttonTexts [ScanningState.STARTING.ordinal ()] = buttonTexts [ScanningState.SCANNING.ordinal ()];
    buttonTexts [ScanningState.RESTARTING.ordinal ()] = buttonTexts [ScanningState.SCANNING.ordinal ()];
    buttonTexts [ScanningState.STOPPING.ordinal ()] = Labels.getLabel ("button.kill");
    buttonTexts [ScanningState.KILLING.ordinal ()] = Labels.getLabel ("button.kill");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="86" endline="106">
public StartStopScanningAction (ScannerDispatcherThreadFactory scannerThreadFactory, StateMachine stateMachine, ResultTable resultTable, StatusBar statusBar, FeederGUIRegistry feederRegistry, PingerRegistry pingerRegistry, Button startStopButton, GUIConfig guiConfig) {
    this (startStopButton.getDisplay ());
    this.scannerThreadFactory = scannerThreadFactory;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
    this.feederRegistry = feederRegistry;
    this.pingerRegistry = pingerRegistry;
    this.button = startStopButton;
    this.stateMachine = stateMachine;
    this.guiConfig = guiConfig;
    stateMachine.addTransitionListener (this);
    ScanningState state = stateMachine.getState ();
    button.setImage (buttonImages [state.ordinal ()]);
    button.setText (buttonTexts [state.ordinal ()]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="111" endline="114">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="119" endline="128">
public void widgetSelected (SelectionEvent event) {
    if (stateMachine.inState (ScanningState.IDLE)) {
        if (! preScanChecks ()) return;

    }
    stateMachine.transitionToNext ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="130" endline="148">
private final boolean preScanChecks () {
    pingerRegistry.checkSelectedPinger ();
    if (guiConfig.askScanConfirmation && resultTable.getItemCount () > 0) {
        MessageBox box = new MessageBox (resultTable.getShell (), SWT.ICON_QUESTION | SWT.YES | SWT.NO);
        box.setText (Labels.getLabel ("text.scan.new"));
        box.setMessage (Labels.getLabel ("text.scan.confirmation"));
        if (box.open () != SWT.YES) {
            return false;
        }
    }
    return true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="150" endline="208">
public void transitionTo (final ScanningState state, final Transition transition) {
    if (statusBar.isDisposed () || transition == Transition.INIT) return;

    switch (state) {
        case IDLE :
            button.setEnabled (true);
            updateProgress (null, 0, 0);
            statusBar.setStatusText (null);
            break;
        case STARTING :
            resultTable.removeAll ();
            try {
                scannerThread = scannerThreadFactory.createScannerThread (feederRegistry.createFeeder (), StartStopScanningAction.this, createResultsCallback (state));
                stateMachine.startScanning ();
                mainWindowTitle = statusBar.getShell ().getText ();
            } catch (RuntimeException e) {
                stateMachine.reset ();
                throw e;
            }
            break;
        case RESTARTING :
            resultTable.resetSelection ();
            try {
                scannerThread = scannerThreadFactory.createScannerThread (feederRegistry.createRescanFeeder (resultTable.getSelection ()), StartStopScanningAction.this, createResultsCallback (state));
                stateMachine.startScanning ();
                mainWindowTitle = statusBar.getShell ().getText ();
            } catch (RuntimeException e) {
                stateMachine.reset ();
                throw e;
            }
            break;
        case SCANNING :
            scannerThread.start ();
            break;
        case STOPPING :
            statusBar.setStatusText (Labels.getLabel ("state.waitForThreads"));
            break;
        case KILLING :
            button.setEnabled (false);
            statusBar.setStatusText (Labels.getLabel ("state.killingThreads"));
            break;
    }
    button.setImage (buttonImages [state.ordinal ()]);
    button.setText (buttonTexts [state.ordinal ()]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="213" endline="259">
private final ScanningResultCallback createResultsCallback (ScanningState state) {
    if (guiConfig.displayMethod == DisplayMethod.ALL || state == ScanningState.RESTARTING) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
                resultTable.addOrUpdateResultRow (result);
            } public void consumeResults (ScanningResult result) {
                resultTable.addOrUpdateResultRow (result);
            }}

        ;
    }
    if (guiConfig.displayMethod == DisplayMethod.ALIVE) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
            } public void consumeResults (ScanningResult result) {
                if (result.getType ().ordinal () >= ResultType.ALIVE.ordinal ()) resultTable.addOrUpdateResultRow (result);

            }}

        ;
    }
    if (guiConfig.displayMethod == DisplayMethod.PORTS) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
            } public void consumeResults (ScanningResult result) {
                if (result.getType () == ResultType.WITH_PORTS) resultTable.addOrUpdateResultRow (result);

            }}

        ;
    }
    throw new UnsupportedOperationException (guiConfig.displayMethod.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="220" endline="223">
public void prepareForResults (ScanningResult result) {
    resultTable.addOrUpdateResultRow (result);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="224" endline="227">
public void consumeResults (ScanningResult result) {
    resultTable.addOrUpdateResultRow (result);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="234" endline="236">
public void prepareForResults (ScanningResult result) {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="237" endline="241">
public void consumeResults (ScanningResult result) {
    if (result.getType ().ordinal () >= ResultType.ALIVE.ordinal ()) resultTable.addOrUpdateResultRow (result);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="248" endline="250">
public void prepareForResults (ScanningResult result) {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="251" endline="255">
public void consumeResults (ScanningResult result) {
    if (result.getType () == ResultType.WITH_PORTS) resultTable.addOrUpdateResultRow (result);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="261" endline="290">
public void updateProgress (final InetAddress currentAddress, final int runningThreads, final int percentageComplete) {
    if (display.isDisposed ()) return;

    display.asyncExec (new Runnable () {
        public void run () {
            if (statusBar.isDisposed ()) return;

            if (currentAddress != null) {
                statusBar.setStatusText (Labels.getLabel ("state.scanning") + currentAddress.getHostAddress ());
            }
            statusBar.setRunningThreads (runningThreads);
            statusBar.setProgress (percentageComplete);
            if (! stateMachine.inState (ScanningState.IDLE)) statusBar.getShell ().setText (percentageComplete + "% - " + mainWindowTitle);
            else statusBar.getShell ().setText (mainWindowTitle);

            button.setImage (buttonImages [stateMachine.getState ().ordinal ()]);
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="267" endline="288">
public void run () {
    if (statusBar.isDisposed ()) return;

    if (currentAddress != null) {
        statusBar.setStatusText (Labels.getLabel ("state.scanning") + currentAddress.getHostAddress ());
    }
    statusBar.setRunningThreads (runningThreads);
    statusBar.setProgress (percentageComplete);
    if (! stateMachine.inState (ScanningState.IDLE)) statusBar.getShell ().setText (percentageComplete + "% - " + mainWindowTitle);
    else statusBar.getShell ().setText (mainWindowTitle);

    button.setImage (buttonImages [stateMachine.getState ().ordinal ()]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/BrowserLauncher.java" startline="25" endline="35">
public static void openURL (String url) {
    try {
        Desktop.getDesktop ().browse (new URI (url));
    } catch (Exception e) {
        throw new UserErrorException ("openURL.failed", url);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="39" endline="43">
public Add (FavoritesConfig favoritesConfig, FeederGUIRegistry feederRegistry) {
    this.favoritesConfig = favoritesConfig;
    this.feederRegistry = feederRegistry;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="45" endline="62">
public void handleEvent (Event event) {
    String feederInfo = feederRegistry.current ().getInfo ();
    InputDialog inputDialog = new InputDialog (Labels.getLabel ("title.favorite.add"), Labels.getLabel ("text.favorite.add"));
    String favoriteName = inputDialog.open (feederInfo);
    if (favoriteName != null) {
        if (favoritesConfig.get (favoriteName) != null) {
            throw new UserErrorException ("favorite.alreadyExists");
        }
        favoritesConfig.add (favoriteName, feederRegistry.current ());
        event.display.getActiveShell ().setText (favoriteName + " - " + Version.NAME);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="71" endline="76">
public Select (FavoritesConfig favoritesConfig, FeederGUIRegistry feederRegistry, StartStopScanningAction startStopAction) {
    this.favoritesConfig = favoritesConfig;
    this.feederRegistry = feederRegistry;
    this.startStopAction = startStopAction;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="78" endline="89">
public void widgetSelected (SelectionEvent event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String key = menuItem.getText ();
    feederRegistry.select (favoritesConfig.getFeederId (key));
    feederRegistry.current ().unserialize (favoritesConfig.getSerializedParts (key));
    event.display.getActiveShell ().setText (key + " - " + Version.NAME);
    startStopAction.widgetSelected (event);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="91" endline="94">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="101" endline="104">
public Edit (FavoritesConfig favoritesConfig) {
    this.favoritesConfig = favoritesConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="106" endline="109">
public void handleEvent (Event event) {
    new EditFavoritesDialog (favoritesConfig).open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="118" endline="124">
public ShowMenu (FavoritesConfig favoritesConfig, Select favoritesSelectListener, StateMachine stateMachine) {
    this.favoritesConfig = favoritesConfig;
    this.favoritesSelectListener = favoritesSelectListener;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="126" endline="147">
public void handleEvent (Event event) {
    Menu favoritesMenu = (Menu) event.widget;
    MenuItem [] menuItems = favoritesMenu.getItems ();
    for (int i = 3;
    i < menuItems.length; i ++) {
        menuItems [i].dispose ();
    }
    for (String name : favoritesConfig) {
        MenuItem menuItem = new MenuItem (favoritesMenu, SWT.CASCADE);
        menuItem.setText (name);
        menuItem.setEnabled (stateMachine.inState (ScanningState.IDLE));
        menuItem.addSelectionListener (favoritesSelectListener);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/TerminalLauncher.java" startline="42" endline="105">
public static void launchInTerminal (String execString, File workingDir) {
    try {
        if (Platform.WINDOWS) {
            File batFile = File.createTempFile ("launch", ".cmd");
            batFile.deleteOnExit ();
            FileWriter writer = new FileWriter (batFile);
            writer.write ("@rem This is a temporary file generated by Angry IP Scanner\n" + "@start cmd /k " + execString);
            writer.close ();
            Runtime.getRuntime ().exec (batFile.getAbsolutePath (), null, workingDir);
        } else if (Platform.MAC_OS) {
            Runtime.getRuntime ().exec (new String [] {"osascript", "-e", "tell application \"Terminal\" to do script \"" + execString + "\""}, null, workingDir);
        } else {
            if (workingTerminal == UNKNOWN) {
                detectWorkingTerminal ();
            }
            switch (workingTerminal) {
                case GNOME :
                    Runtime.getRuntime ().exec (new String [] {"gnome-terminal", "-x", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                case XFCE :
                    Runtime.getRuntime ().exec (new String [] {"xfce4-terminal", "-x", "sh", "-c", execString + ";sh"}, null, workingDir);
                    break;
                case KDE :
                    Runtime.getRuntime ().exec (new String [] {"konsole", "-e", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                default :
                    Runtime.getRuntime ().exec (new String [] {"xterm", "-e", "sh", "-c", execString + ";sh"}, null, workingDir);
            }
        }

    } catch (Exception e) {
        LOG.log (Level.WARNING, "openTerminal.failed", e);
        if (workingTerminal != XTERM) {
            workingTerminal = XTERM;
            launchInTerminal (execString, workingDir);
        } else {
            throw new UserErrorException ("openTerminal.failed", execString);
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/TerminalLauncher.java" startline="107" endline="125">
private static void detectWorkingTerminal () throws InterruptedException, IOException {
    if (Runtime.getRuntime ().exec (new String [] {"pidof", "nautilus"}).waitFor () == 0) {
        workingTerminal = GNOME;
    } else if (Runtime.getRuntime ().exec (new String [] {"pidof", "xfce4-session", "xfwm4", "Thunar", "xfdesktop"}).waitFor () == 0) {
        workingTerminal = XFCE;
    } else if (Runtime.getRuntime ().exec (new String [] {"pidof", "dcopserver"}).waitFor () == 0) {
        workingTerminal = KDE;
    } else {
        workingTerminal = XTERM;
    }

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="40" endline="45">
public HostnameButton (Text hostnameText, Text ipText, Combo netmaskCombo) {
    this.hostnameText = hostnameText;
    this.ipText = ipText;
    this.netmaskCombo = netmaskCombo;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="47" endline="50">
public void widgetDefaultSelected (SelectionEvent event) {
    widgetSelected (event);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="52" endline="83">
public void widgetSelected (SelectionEvent event) {
    String hostname = hostnameText.getText ();
    try {
        if (hostname.equals (InetAddress.getLocalHost ().getHostName ())) {
            askLocalIPAddress ();
        } else {
            InetAddress address = InetAddressUtils.getAddressByName (hostname);
            ipText.setText (address.getHostAddress ());
            String realHostname = address.getCanonicalHostName ();
            if (! address.getHostAddress ().equals (realHostname)) {
                hostnameText.setText (realHostname);
                hostnameText.setSelection (realHostname.length ());
            }
        }
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidHostname");
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="85" endline="92">
public void keyTraversed (TraverseEvent e) {
    if (e.detail == SWT.TRAVERSE_RETURN) {
        widgetSelected (null);
        e.doit = false;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="97" endline="154">
private void askLocalIPAddress () {
    try {
        Menu popupMenu = new Menu (Display.getCurrent ().getActiveShell (), SWT.POP_UP);
        Listener menuItemListener = new Listener () {
            public void handleEvent (Event event) {
                MenuItem menuItem = (MenuItem) event.widget;
                String address = (String) menuItem.getData ();
                ipText.setText (address.substring (0, address.lastIndexOf ('/')));
                netmaskCombo.setText (address.substring (address.lastIndexOf ('/')));
                menuItem.getParent ().dispose ();
            }}

        ;
        for (Enumeration < NetworkInterface > i = NetworkInterface.getNetworkInterfaces ();
        i.hasMoreElements ();) {
            NetworkInterface networkInterface = i.nextElement ();
            for (InterfaceAddress ifaddr : networkInterface.getInterfaceAddresses ()) {
                InetAddress address = ifaddr.getAddress ();
                if (! address.isLoopbackAddress () && address instanceof Inet4Address) {
                    MenuItem menuItem = new MenuItem (popupMenu, 0);
                    menuItem.setText (networkInterface.getDisplayName () + ": " + address.getHostAddress ());
                    menuItem.setData (address.getHostAddress () + "/" + ifaddr.getNetworkPrefixLength ());
                    menuItem.addListener (SWT.Selection, menuItemListener);
                }
            }
        }
        if (popupMenu.getItemCount () > 1) {
            popupMenu.setLocation (Display.getCurrent ().getCursorLocation ());
            popupMenu.setVisible (true);
        } else {
            if (popupMenu.getItemCount () == 1) {
                Event event = new Event ();
                event.widget = popupMenu.getItem (0);
                menuItemListener.handleEvent (event);
                popupMenu.dispose ();
            }
        }
    } catch (SocketException e) {
        LOG.log (Level.FINE, "Cannot enumerate network interfaces", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="104" endline="112">
public void handleEvent (Event event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String address = (String) menuItem.getData ();
    ipText.setText (address.substring (0, address.lastIndexOf ('/')));
    netmaskCombo.setText (address.substring (address.lastIndexOf ('/')));
    menuItem.getParent ().dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="42" endline="45">
public void handleEvent (Event event) {
    event.display.getActiveShell ().close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="56" endline="63">
SaveResults (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine, boolean isSelection) {
    this.exporterRegistry = exporterRegistry;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
    this.stateMachine = stateMachine;
    this.isSelection = isSelection;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="65" endline="127">
public void handleEvent (Event event) {
    if (resultTable.getItemCount () <= 0) {
        throw new UserErrorException ("commands.noResults");
    }
    if (! stateMachine.inState (ScanningState.IDLE)) {
        MessageBox box = new MessageBox (resultTable.getShell (), SWT.YES | SWT.NO | SWT.ICON_WARNING);
        box.setText (Version.NAME);
        box.setMessage (Labels.getLabel ("exception.ExporterException.scanningInProgress"));
        if (box.open () != SWT.YES) return;

    }
    FileDialog fileDialog = new FileDialog (resultTable.getShell (), SWT.SAVE);
    List < String > extensions = new ArrayList < String > ();
    List < String > descriptions = new ArrayList < String > ();
    StringBuffer labelBuffer = new StringBuffer (Labels.getLabel (isSelection ? "title.exportSelection" : "title.exportAll"));
    addFileExtensions (extensions, descriptions, labelBuffer);
    fileDialog.setText (labelBuffer.toString ());
    fileDialog.setFilterExtensions (extensions.toArray (new String [extensions.size ()]));
    fileDialog.setFilterNames (descriptions.toArray (new String [descriptions.size ()]));
    String fileName = fileDialog.open ();
    if (fileName != null) {
        Exporter exporter = exporterRegistry.createExporter (fileName);
        statusBar.setStatusText (Labels.getLabel ("state.exporting"));
        ExportProcessor exportProcessor = new ExportProcessor (exporter, new File (fileName), false);
        ScanningResultFilter scanningResultSelector = null;
        if (isSelection) {
            scanningResultSelector = new ScanningResultFilter () {
                public boolean isResultSelected (int index, ScanningResult result) {
                    return resultTable.isSelected (index);
                }}

            ;
        }
        exportProcessor.process (resultTable.getScanningResults (), scanningResultSelector);
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="116" endline="119">
public boolean isResultSelected (int index, ScanningResult result) {
    return resultTable.isSelected (index);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="129" endline="141">
private final void addFileExtensions (List < String > extensions, List < String > descriptions, StringBuffer sb) {
    sb.append (" (");
    for (Exporter exporter : exporterRegistry) {
        extensions.add ("*." + exporter.getFilenameExtension ());
        sb.append (exporter.getFilenameExtension ()).append (", ");
        descriptions.add (Labels.getLabel (exporter.getId ()));
    }
    sb.delete (sb.length () - 2, sb.length ());
    sb.append (")");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="146" endline="149">
public SaveAll (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine) {
    super (exporterRegistry, resultTable, statusBar, stateMachine, false);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="154" endline="157">
public SaveSelection (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine) {
    super (exporterRegistry, resultTable, statusBar, stateMachine, true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="162" endline="173">
public void handleEvent (Event event) {
    new Thread ("main") {
        public void run () {
            Main.main ();
        }}

    .start ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="168" endline="171">
public void run () {
    Main.main ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="36" endline="40">
NextHost (ResultTable resultTable, ResultType whatToSearchFor) {
    this.resultTable = resultTable;
    this.whatToSearchFor = whatToSearchFor;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="42" endline="45">
protected int inc (int i) {
    return i + 1;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="47" endline="50">
protected int startIndex () {
    return resultTable.getSelectionIndex ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="52" endline="78">
public final void handleEvent (Event event) {
    ScanningResultList results = resultTable.getScanningResults ();
    int numElements = resultTable.getItemCount ();
    int startIndex = startIndex ();
    for (int i = inc (startIndex);
    i < numElements && i >= 0; i = inc (i)) {
        ScanningResult scanningResult = results.getResult (i);
        if (whatToSearchFor.matches (scanningResult.getType ())) {
            resultTable.setSelection (i);
            resultTable.setFocus ();
            return;
        }
    }
    if (startIndex >= 0 && startIndex < numElements) {
        resultTable.deselectAll ();
        handleEvent (event);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="85" endline="88">
public PrevHost (ResultTable resultTable, ResultType whatToSearchFor) {
    super (resultTable, whatToSearchFor);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="90" endline="93">
protected int inc (int i) {
    return i - 1;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="95" endline="99">
protected int startIndex () {
    int curIndex = resultTable.getSelectionIndex ();
    return curIndex >= 0 ? curIndex : resultTable.getItemCount ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="104" endline="107">
public NextAliveHost (ResultTable resultTable) {
    super (resultTable, ResultType.ALIVE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="112" endline="115">
public NextDeadHost (ResultTable resultTable) {
    super (resultTable, ResultType.DEAD);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="120" endline="123">
public NextHostWithInfo (ResultTable resultTable) {
    super (resultTable, ResultType.WITH_PORTS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="128" endline="131">
public PrevAliveHost (ResultTable resultTable) {
    super (resultTable, ResultType.ALIVE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="136" endline="139">
public PrevDeadHost (ResultTable resultTable) {
    super (resultTable, ResultType.DEAD);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="144" endline="147">
public PrevHostWithInfo (ResultTable resultTable) {
    super (resultTable, ResultType.WITH_PORTS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="157" endline="161">
public Find (StatusBar statusBar, ResultTable resultTable) {
    this.statusBar = statusBar;
    this.resultTable = resultTable;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="163" endline="182">
public void handleEvent (Event event) {
    InputDialog dialog = new InputDialog (Labels.getLabel ("title.find"), Labels.getLabel ("text.find"));
    String text = dialog.open (lastText, Labels.getLabel ("button.find.next"));
    if (text == null) {
        return;
    }
    lastText = text;
    try {
        statusBar.setStatusText (Labels.getLabel ("state.searching"));
        findText (text, statusBar.getShell ());
    } finally {
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="184" endline="220">
private final void findText (String text, Shell activeShell) {
    ScanningResultList results = resultTable.getScanningResults ();
    int startIndex = resultTable.getSelectionIndex () + 1;
    int foundIndex = results.findText (text, startIndex);
    if (foundIndex >= 0) {
        resultTable.setSelection (foundIndex);
        resultTable.setFocus ();
        return;
    }
    if (startIndex > 0) {
        MessageBox messageBox = new MessageBox (activeShell, SWT.YES | SWT.NO | SWT.ICON_QUESTION);
        messageBox.setText (Labels.getLabel ("title.find"));
        messageBox.setMessage (Labels.getLabel ("text.find.notFound") + " " + Labels.getLabel ("text.find.restart"));
        if (messageBox.open () == SWT.YES) {
            resultTable.deselectAll ();
            findText (text, activeShell);
        }
    } else {
        MessageBox messageBox = new MessageBox (activeShell, SWT.OK | SWT.ICON_INFORMATION);
        messageBox.setText (Labels.getLabel ("title.find"));
        messageBox.setMessage (Labels.getLabel ("text.find.notFound"));
        messageBox.open ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="40" endline="43">
public void handleEvent (Event event) {
    new GettingStartedDialog ().open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="50" endline="53">
public CommandLineUsage (CommandLineProcessor cli) {
    this.cli = cli;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="55" endline="60">
public void handleEvent (Event event) {
    InfoDialog dialog = new InfoDialog (Version.NAME, Labels.getLabel ("title.commandline"));
    dialog.setMessage (cli.toString ());
    dialog.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="67" endline="71">
public About (AboutDialog aboutDialog) {
    super ();
    this.aboutDialog = aboutDialog;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="73" endline="76">
public void handleEvent (Event event) {
    aboutDialog.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="81" endline="84">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.WEBSITE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="89" endline="92">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.FAQ_URL);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="97" endline="100">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.PLUGINS_URL);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="107" endline="110">
public CheckVersion (StatusBar statusBar) {
    this.statusBar = statusBar;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="112" endline="115">
public void handleEvent (final Event event) {
    check ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="117" endline="185">
public void check () {
    statusBar.setStatusText (Labels.getLabel ("state.retrievingVersion"));
    Runnable checkVersionCode = new Runnable () {
        public void run () {
            BufferedReader reader = null;
            String message = null;
            int messageStyle = SWT.ICON_WARNING;
            try {
                URL url = new URL (Version.LATEST_VERSION_URL);
                URLConnection conn = url.openConnection ();
                reader = new BufferedReader (new InputStreamReader (conn.getInputStream ()));
                String latestVersion = reader.readLine ();
                latestVersion = latestVersion.substring (latestVersion.indexOf (' ') + 1);
                if (! Version.getVersion ().equals (latestVersion)) {
                    message = Labels.getLabel ("text.version.old");
                    message = message.replaceFirst ("%LATEST", latestVersion);
                    message = message.replaceFirst ("%VERSION", Version.getVersion ());
                    messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
                } else {
                    message = Labels.getLabel ("text.version.latest");
                    messageStyle = SWT.ICON_INFORMATION;
                }
            } catch (Exception e) {
                message = Labels.getLabel ("exception.UserErrorException.version.latestFailed");
                Logger.getLogger (getClass ().getName ()).log (Level.WARNING, message, e);
            } finally {
                try {
                    if (reader != null) reader.close ();

                } catch (IOException e) {
                }
                final String messageToShow = message;
                final int messageStyleToShow = messageStyle;
                Display.getDefault ().asyncExec (new Runnable () {
                    public void run () {
                        statusBar.setStatusText (null);
                        MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow);
                        messageBox.setText (Version.getFullName ());
                        messageBox.setMessage (messageToShow);
                        if (messageBox.open () == SWT.YES) {
                            BrowserLauncher.openURL (Version.DOWNLOAD_URL);
                        }
                    }}

                );
            }
        }}

    new Thread (checkVersionCode).start ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="123" endline="182">
public void run () {
    BufferedReader reader = null;
    String message = null;
    int messageStyle = SWT.ICON_WARNING;
    try {
        URL url = new URL (Version.LATEST_VERSION_URL);
        URLConnection conn = url.openConnection ();
        reader = new BufferedReader (new InputStreamReader (conn.getInputStream ()));
        String latestVersion = reader.readLine ();
        latestVersion = latestVersion.substring (latestVersion.indexOf (' ') + 1);
        if (! Version.getVersion ().equals (latestVersion)) {
            message = Labels.getLabel ("text.version.old");
            message = message.replaceFirst ("%LATEST", latestVersion);
            message = message.replaceFirst ("%VERSION", Version.getVersion ());
            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
        } else {
            message = Labels.getLabel ("text.version.latest");
            messageStyle = SWT.ICON_INFORMATION;
        }
    } catch (Exception e) {
        message = Labels.getLabel ("exception.UserErrorException.version.latestFailed");
        Logger.getLogger (getClass ().getName ()).log (Level.WARNING, message, e);
    } finally {
        try {
            if (reader != null) reader.close ();

        } catch (IOException e) {
        }
        final String messageToShow = message;
        final int messageStyleToShow = messageStyle;
        Display.getDefault ().asyncExec (new Runnable () {
            public void run () {
                statusBar.setStatusText (null);
                MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow);
                messageBox.setText (Version.getFullName ());
                messageBox.setMessage (messageToShow);
                if (messageBox.open () == SWT.YES) {
                    BrowserLauncher.openURL (Version.DOWNLOAD_URL);
                }
            }}

        );
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="169" endline="179">
public void run () {
    statusBar.setStatusText (null);
    MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow);
    messageBox.setText (Version.getFullName ());
    messageBox.setMessage (messageToShow);
    if (messageBox.open () == SWT.YES) {
        BrowserLauncher.openURL (Version.DOWNLOAD_URL);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="27" endline="95">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.about"));
    shell.setSize (new Point (400, 373));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLocation (10, 10);
    if (shell.getImage () != null) {
        iconLabel.setImage (shell.getImage ());
    }
    iconLabel.pack ();
    int leftBound = iconLabel.getBounds ().width + 20;
    String aboutText = Labels.getLabel ("text.about");
    aboutText = aboutText.replaceAll ("%NAME", Version.NAME);
    aboutText = aboutText.replaceAll ("%VERSION", Version.getVersion ());
    aboutText = aboutText.replaceAll ("%DATE", Version.getBuildDate ());
    aboutText = aboutText.replaceAll ("%COPYLEFT", Version.COPYLEFT);
    Label aboutLabel = new Label (shell, SWT.NONE);
    aboutLabel.setText (aboutText);
    aboutLabel.setLocation (leftBound, 10);
    aboutLabel.pack ();
    final Label websiteLabel = new Label (shell, SWT.NONE);
    websiteLabel.setForeground (new Color (null, 0, 0, 0xCC));
    websiteLabel.setCursor (shell.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    websiteLabel.setText (Version.WEBSITE);
    websiteLabel.setLocation (leftBound, 10 + aboutLabel.getBounds ().height);
    websiteLabel.addListener (SWT.MouseUp, new Listener () {
        public void handleEvent (Event event) {
            BrowserLauncher.openURL (Version.WEBSITE);
            websiteLabel.setForeground (new Color (null, 0x88, 0, 0xAA));
        }}

    );
    websiteLabel.pack ();
    String systemText = Labels.getLabel ("text.about.system");
    systemText = systemText.replaceAll ("%JAVA", System.getProperty ("java.vm.vendor") + " " + System.getProperty ("java.runtime.version"));
    systemText = systemText.replaceAll ("%OS", System.getProperty ("os.name") + " " + System.getProperty ("os.version") + " (" + System.getProperty ("os.arch") + ")");
    Label systemLabel = new Label (shell, SWT.NONE);
    systemLabel.setText (systemText);
    systemLabel.setLocation (leftBound, 20 + aboutLabel.getBounds ().height + websiteLabel.getBounds ().height);
    systemLabel.pack ();
    Button button = createCloseButton ();
    Text licenseText = new Text (shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.WRAP);
    licenseText.setBounds (leftBound, systemLabel.getBounds ().y + systemLabel.getBounds ().height + 10, shell.getClientArea ().width - leftBound - 10, button.getLocation ().y - systemLabel.getBounds ().y - systemLabel.getBounds ().height - 20);
    licenseText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    licenseText.setText ("Licensed under the GNU General Public License Version 2\n\n" + Version.NAME + " is free software; you can redistribute it and/or " + "modify it under the terms of the GNU General Public License " + "as published by the Free Software Foundation; either version 2 " + "of the License, or (at your option) any later version.\n\n" + Version.NAME + " is distributed in the hope that it will be useful, " + "but WITHOUT ANY WARRANTY; without even the implied warranty of " + "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the " + "GNU General Public License for more details.\n\n" + "You should have received a copy of the GNU General Public License " + "along with this program; if not, write to the Free Software " + "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA " + "02110-1301, USA, or visit http://www.fsf.org/");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="59" endline="63">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.WEBSITE);
    websiteLabel.setForeground (new Color (null, 0x88, 0, 0xAA));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="31" endline="83">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.gettingStarted"));
    shell.setSize (new Point (400, 240));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLocation (10, 10);
    if (parent != null) {
        iconLabel.setImage (parent.getImage ());
        shell.setImage (parent.getImage ());
    }
    iconLabel.pack ();
    int leftBound = iconLabel.getBounds ().width + 20;
    closeButton = new Button (shell, SWT.NONE);
    closeButton.setText (Labels.getLabel ("button.close"));
    nextButton = new Button (shell, SWT.NONE);
    nextButton.setText (Labels.getLabel ("button.next"));
    nextButton.setFocus ();
    positionButtons (nextButton, closeButton);
    gettingStartedText = new Text (shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.WRAP);
    gettingStartedText.setBounds (leftBound, 10, shell.getClientArea ().width - leftBound - 10, closeButton.getLocation ().y - 20);
    gettingStartedText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    closeButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
            shell.dispose ();
        }}

    );
    nextButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            activePage ++;
            displayActivePage ();
        }}

    );
    displayActivePage ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="67" endline="71">
public void handleEvent (Event event) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="75" endline="79">
public void handleEvent (Event event) {
    activePage ++;
    displayActivePage ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="85" endline="102">
void displayActivePage () {
    String text = Labels.getLabel ("text.gettingStarted" + activePage);
    gettingStartedText.setText (text);
    try {
        Labels.getLabel ("text.gettingStarted" + (activePage + 1));
    } catch (Exception e) {
        nextButton.setEnabled (false);
        shell.setDefaultButton (closeButton);
        closeButton.setFocus ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="71" endline="135">
public MainWindow (Shell shell, GUIConfig guiConfig, Composite feederArea, Composite controlsArea, Combo feederSelectionCombo, Button startStopButton, StartStopScanningAction startStopScanningAction, ResultTable resultTable, StatusBar statusBar, CommandsMenu resultsContextMenu, FeederGUIRegistry feederGUIRegistry, final StateMachine stateMachine, ToolsActions.Preferences preferencesListener, ToolsActions.ChooseFetchers chooseFetchersListsner) {
    this.shell = shell;
    this.guiConfig = guiConfig;
    this.statusBar = statusBar;
    initShell (shell);
    initFeederArea (feederArea, feederGUIRegistry);
    initControlsArea (controlsArea, feederSelectionCombo, startStopButton, startStopScanningAction, preferencesListener, chooseFetchersListsner);
    initTableAndStatusBar (resultTable, resultsContextMenu, statusBar);
    shell.setBounds (guiConfig.getMainWindowBounds ());
    shell.open ();
    if (guiConfig.isMainWindowMaximized) {
        shell.setMaximized (true);
    } else {
        shell.setBounds (guiConfig.getMainWindowBounds ());
    }
    if (guiConfig.isFirstRun) {
        Display.getCurrent ().asyncExec (new Runnable () {
            public void run () {
                if (Platform.CRIPPLED_WINDOWS) {
                    if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
                        BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
                    }
                }
                if (Platform.GNU_JAVA) {
                    showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
                }
                MainWindow.this.shell.forceActive ();
                new GettingStartedDialog ().open ();
                MainWindow.this.guiConfig.isFirstRun = false;
            }}

        );
    }
    stateMachine.addTransitionListener (new EnablerDisabler ());
    Display.getCurrent ().asyncExec (new Runnable () {
        public void run () {
            stateMachine.init ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="103" endline="121">
public void run () {
    if (Platform.CRIPPLED_WINDOWS) {
        if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
            BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
        }
    }
    if (Platform.GNU_JAVA) {
        showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
    }
    MainWindow.this.shell.forceActive ();
    new GettingStartedDialog ().open ();
    MainWindow.this.guiConfig.isFirstRun = false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="129" endline="133">
public void run () {
    stateMachine.init ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="137" endline="143">
private int showMessage (String text, int buttons) {
    MessageBox box = new MessageBox (MainWindow.this.shell, SWT.ICON_WARNING | buttons);
    box.setText (Version.NAME);
    box.setMessage (text);
    return box.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="148" endline="165">
private void initShell (final Shell shell) {
    FormLayout formLayout = new FormLayout ();
    shell.setLayout (formLayout);
    Image image = new Image (shell.getDisplay (), Labels.getInstance ().getImageAsStream ("icon"));
    shell.setImage (image);
    shell.addListener (SWT.Close, new Listener () {
        public void handleEvent (Event event) {
            guiConfig.setMainWindowBounds (shell.getBounds (), shell.getMaximized ());
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="159" endline="163">
public void handleEvent (Event event) {
    guiConfig.setMainWindowBounds (shell.getBounds (), shell.getMaximized ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="170" endline="173">
public Shell getShell () {
    return shell;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="178" endline="181">
public boolean isDisposed () {
    return shell.isDisposed ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="186" endline="190">
private void initTableAndStatusBar (ResultTable resultTable, CommandsMenu resultsContextMenu, StatusBar statusBar) {
    resultTable.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (feederArea, 1), new FormAttachment (statusBar.getComposite (), - 2)));
    resultTable.setMenu (resultsContextMenu);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="192" endline="199">
private void initFeederArea (Composite feederArea, FeederGUIRegistry feederRegistry) {
    this.feederArea = feederArea;
    feederArea.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    this.feederRegistry = feederRegistry;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="200" endline="264">
public MainWindow (Shell shell, GUIConfig guiConfig, Composite feederArea, Composite controlsArea, Combo feederSelectionCombo, Button startStopButton, StartStopScanningAction startStopScanningAction, ResultTable resultTable, StatusBar statusBar, CommandsMenu resultsContextMenu, FeederGUIRegistry feederGUIRegistry, final StateMachine stateMachine, ToolsActions.Preferences preferencesListener, ToolsActions.ChooseFetchers chooseFetchersListsner) {
    this.shell = shell;
    this.guiConfig = guiConfig;
    this.statusBar = statusBar;
    initShell (shell);
    initFeederArea (feederArea, feederGUIRegistry);
    initControlsArea (controlsArea, feederSelectionCombo, startStopButton, startStopScanningAction, preferencesListener, chooseFetchersListsner);
    initTableAndStatusBar (resultTable, resultsContextMenu, statusBar);
    shell.setBounds (guiConfig.getMainWindowBounds ());
    shell.open ();
    if (guiConfig.isMainWindowMaximized) {
        shell.setMaximized (true);
    } else {
        shell.setBounds (guiConfig.getMainWindowBounds ());
    }
    if (guiConfig.isFirstRun) {
        Display.getCurrent ().asyncExec (new Runnable () {
            public void run () {
                if (Platform.CRIPPLED_WINDOWS) {
                    if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
                        BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
                    }
                }
                if (Platform.GNU_JAVA) {
                    showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
                }
                MainWindow.this.shell.forceActive ();
                new GettingStartedDialog ().open ();
                MainWindow.this.guiConfig.isFirstRun = false;
            }}

        );
    }
    stateMachine.addTransitionListener (new EnablerDisabler ());
    Display.getCurrent ().asyncExec (new Runnable () {
        public void run () {
            stateMachine.init ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="232" endline="250">
public void run () {
    if (Platform.CRIPPLED_WINDOWS) {
        if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
            BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
        }
    }
    if (Platform.GNU_JAVA) {
        showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
    }
    MainWindow.this.shell.forceActive ();
    new GettingStartedDialog ().open ();
    MainWindow.this.guiConfig.isFirstRun = false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="258" endline="262">
public void run () {
    stateMachine.init ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="269" endline="312">
private void initControlsArea (final Composite controlsArea, final Combo feederSelectionCombo, final Button startStopButton, final StartStopScanningAction startStopScanningAction, final ToolsActions.Preferences preferencesListener, final ToolsActions.ChooseFetchers chooseFetchersListsner) {
    controlsArea.setLayoutData (LayoutHelper.formData (new FormAttachment (feederArea), new FormAttachment (100), new FormAttachment (0), new FormAttachment (feederArea, 0, SWT.BOTTOM)));
    controlsArea.setLayout (LayoutHelper.formLayout (7, 3, 3));
    Control secondControl = feederRegistry.current ().getChildren () [1];
    buttonHeight = secondControl.getSize ().y + 2;
    this.feederSelectionCombo = feederSelectionCombo;
    feederSelectionCombo.pack ();
    IPFeederSelectionListener feederSelectionListener = new IPFeederSelectionListener ();
    feederSelectionCombo.addSelectionListener (feederSelectionListener);
    feederSelectionCombo.select (guiConfig.activeFeeder);
    feederSelectionCombo.setToolTipText (Labels.getLabel ("combobox.feeder.tooltip"));
    this.startStopButton = startStopButton;
    shell.setDefaultButton (startStopButton);
    startStopButton.addSelectionListener (startStopScanningAction);
    controlsArea.setTabList (new Control [] {startStopButton, feederSelectionCombo});
    prefsButton = new ToolBar (controlsArea, SWT.FLAT);
    prefsButton.setCursor (prefsButton.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    ToolItem item = new ToolItem (prefsButton, SWT.PUSH);
    item.setImage (new Image (null, Labels.getInstance ().getImageAsStream ("button.preferences.img")));
    item.setToolTipText (Labels.getLabel ("title.preferences"));
    item.addListener (SWT.Selection, preferencesListener);
    fetchersButton = new ToolBar (controlsArea, SWT.FLAT);
    fetchersButton.setCursor (fetchersButton.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    item = new ToolItem (fetchersButton, SWT.PUSH);
    item.setImage (new Image (null, Labels.getInstance ().getImageAsStream ("button.fetchers.img")));
    item.setToolTipText (Labels.getLabel ("title.fetchers.select"));
    item.addListener (SWT.Selection, chooseFetchersListsner);
    feederSelectionListener.widgetSelected (null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="314" endline="331">
private void relayoutControls () {
    boolean twoRowToolbar = Math.abs (feederRegistry.current ().getSize ().y - buttonHeight * 2) <= 10;
    feederSelectionCombo.setLayoutData (LayoutHelper.formData (SWT.DEFAULT, buttonHeight, new FormAttachment (0), null, new FormAttachment (0), null));
    if (twoRowToolbar) {
        startStopButton.setLayoutData (LayoutHelper.formData (feederSelectionCombo.getSize ().x, Platform.MAC_OS ? SWT.DEFAULT : buttonHeight, new FormAttachment (0), null, new FormAttachment (feederSelectionCombo, 0), null));
        prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (feederSelectionCombo), null, new FormAttachment (feederSelectionCombo, 0, SWT.CENTER), null));
        fetchersButton.setLayoutData (LayoutHelper.formData (new FormAttachment (startStopButton), null, new FormAttachment (startStopButton, 0, SWT.CENTER), null));
    } else {
        startStopButton.setLayoutData (LayoutHelper.formData (feederSelectionCombo.getSize ().x, Platform.MAC_OS ? SWT.DEFAULT : buttonHeight, new FormAttachment (feederSelectionCombo), null, new FormAttachment (- 1), null));
        prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (startStopButton), null, new FormAttachment (feederSelectionCombo, 0, SWT.CENTER), null));
        fetchersButton.setLayoutData (LayoutHelper.formData (new FormAttachment (prefsButton), null, new FormAttachment (startStopButton, 0, SWT.CENTER), null));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="338" endline="341">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="343" endline="358">
public void widgetSelected (SelectionEvent e) {
    feederRegistry.select (feederSelectionCombo.getSelectionIndex ());
    Rectangle bounds = feederRegistry.current ().getBounds ();
    FormData feederAreaLayoutData = ((FormData) feederArea.getLayoutData ());
    feederAreaLayoutData.height = bounds.height;
    feederAreaLayoutData.width = bounds.width;
    relayoutControls ();
    shell.layout ();
    shell.setText (feederRegistry.current ().getFeederName () + " - " + Version.NAME);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="363" endline="374">
public void transitionTo (final ScanningState state, Transition transition) {
    if (transition != Transition.START && transition != Transition.COMPLETE) return;

    boolean enabled = state == ScanningState.IDLE;
    feederArea.setEnabled (enabled);
    feederSelectionCombo.setEnabled (enabled);
    prefsButton.setEnabled (enabled);
    fetchersButton.setEnabled (enabled);
    statusBar.setEnabled (enabled);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="380" endline="383">
public FeederSelectionCombo (Composite parent) {
    super (parent, SWT.READ_ONLY);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="385" endline="390">
@Override
public int getTextHeight () {
    return buttonHeight;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="392" endline="396">
@Override
protected void checkSubclass () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="33" endline="35">
public PortTextFetcherPrefs () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="37" endline="41">
public void openFor (Fetcher fetcher) {
    this.fetcher = (PortTextFetcher) fetcher;
    open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="43" endline="79">
@Override
protected void populateShell () {
    shell = new Shell (Display.getCurrent ().getActiveShell (), SWT.DIALOG_TRIM);
    shell.setText (fetcher.getName ());
    shell.setLayout (LayoutHelper.formLayout (10, 10, 5));
    Combo predefinedCombo = new Combo (shell, SWT.DROP_DOWN | SWT.READ_ONLY);
    predefinedCombo.add (Labels.getLabel ("fetcher.portText.custom"));
    predefinedCombo.select (0);
    predefinedCombo.setLayoutData (LayoutHelper.formData (null, new FormAttachment (100), new FormAttachment (0), null));
    Label sendLabel = new Label (shell, SWT.NONE);
    sendLabel.setText (Labels.getLabel ("text.fetcher.portText.send"));
    sendLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, null, new FormAttachment (predefinedCombo, 0, SWT.BOTTOM)));
    Text sendText = new Text (shell, SWT.BORDER | SWT.READ_ONLY);
    sendText.setText (stringToText (fetcher.getTextToSend ()));
    sendText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (sendLabel), null));
    Label matchLabel = new Label (shell, SWT.NONE);
    matchLabel.setText (Labels.getLabel ("text.fetcher.portText.match"));
    matchLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (sendText), null));
    Text matchText = new Text (shell, SWT.BORDER | SWT.READ_ONLY);
    matchText.setText (fetcher.getMatchingRegexp ().pattern ());
    matchText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (sendText, 0, SWT.RIGHT), new FormAttachment (matchLabel), null));
    Label replaceLabel = new Label (shell, SWT.NONE);
    replaceLabel.setText (Labels.getLabel ("text.fetcher.portText.replace"));
    replaceLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (matchText), null));
    Text replaceText = new Text (shell, SWT.BORDER | SWT.READ_ONLY);
    replaceText.setText ("$1");
    replaceText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (sendText, 0, SWT.RIGHT), new FormAttachment (replaceLabel), null));
    shell.pack ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="84" endline="99">
private String stringToText (String s) {
    StringBuilder t = new StringBuilder ();
    for (char c : s.toCharArray ()) {
        if (c == '\n') t.append ("\\n");
        else if (c == '\r') t.append ("\\r");
        else if (c == '\t') t.append ("\\t");
        else t.append (c);

    }
    return t.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PortsFetcherPrefs.java" startline="23" endline="26">
public PortsFetcherPrefs (PreferencesDialog preferencesDialog) {
    this.preferencesDialog = preferencesDialog;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PortsFetcherPrefs.java" startline="28" endline="31">
public void openFor (Fetcher fetcher) {
    preferencesDialog.openTab (1);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PingFetcherPrefs.java" startline="23" endline="26">
public PingFetcherPrefs (PreferencesDialog preferencesDialog) {
    this.preferencesDialog = preferencesDialog;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/fetchers/PingFetcherPrefs.java" startline="28" endline="31">
public void openFor (Fetcher fetcher) {
    preferencesDialog.openTab (0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="46" endline="76">
public StatusBar (Shell shell, GUIConfig guiConfig, ScannerConfig scannerConfig) {
    this.guiConfig = guiConfig;
    this.scannerConfig = scannerConfig;
    composite = new Composite (shell, SWT.NONE);
    composite.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), null, new FormAttachment (100)));
    composite.setLayout (LayoutHelper.formLayout (1, 1, 2));
    statusText = new Label (composite, SWT.BORDER);
    statusText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (35), new FormAttachment (0), new FormAttachment (100)));
    setStatusText (null);
    displayMethodText = new Label (composite, SWT.BORDER);
    displayMethodText.setText (Labels.getLabel ("text.display." + DisplayMethod.PORTS));
    displayMethodText.pack ();
    displayMethodText.setLayoutData (LayoutHelper.formData (displayMethodText.getSize ().x, SWT.DEFAULT, new FormAttachment (statusText), null, new FormAttachment (0), new FormAttachment (100)));
    displayMethodText.addListener (SWT.MouseDown, new ConfigTextClickListener ());
    updateConfigText ();
    threadsText = new Label (composite, SWT.BORDER);
    setRunningThreads (Math.min (scannerConfig.maxThreads, 200));
    threadsText.pack ();
    threadsText.setLayoutData (LayoutHelper.formData (threadsText.getSize ().x, SWT.DEFAULT, new FormAttachment (displayMethodText), null, new FormAttachment (0), new FormAttachment (100)));
    setRunningThreads (0);
    progressBar = new ProgressBar (composite, SWT.BORDER);
    progressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (threadsText), new FormAttachment (100, Platform.MAC_OS ? - 20 : 0), new FormAttachment (0), new FormAttachment (100)));
    progressBar.setSelection (0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="81" endline="84">
public void updateConfigText () {
    displayMethodText.setText (Labels.getLabel ("text.display." + guiConfig.displayMethod));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="89" endline="92">
Composite getComposite () {
    return composite;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="97" endline="100">
public boolean isDisposed () {
    return composite.isDisposed ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="106" endline="114">
public void setStatusText (String statusText) {
    if (statusText == null) {
        statusText = Labels.getLabel ("state.ready");
    }
    if (! this.statusText.isDisposed ()) this.statusText.setText (statusText);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="116" endline="131">
public void setRunningThreads (int runningThreads) {
    if (! threadsText.isDisposed ()) {
        boolean maxThreadsReached = runningThreads == scannerConfig.maxThreads;
        if (maxThreadsReachedBefore || maxThreadsReached) {
            Color newColor = threadsText.getDisplay ().getSystemColor (maxThreadsReached ? SWT.COLOR_DARK_RED : SWT.COLOR_WIDGET_FOREGROUND);
            threadsText.setForeground (newColor);
        }
        maxThreadsReachedBefore = maxThreadsReached;
        threadsText.setText (Labels.getLabel ("text.threads") + runningThreads + (maxThreadsReached ? Labels.getLabel ("text.threads.max") : ""));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="133" endline="137">
public void setProgress (int progress) {
    if (! progressBar.isDisposed ()) progressBar.setSelection (progress);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="139" endline="142">
public Shell getShell () {
    return composite.getShell ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="144" endline="148">
public void setEnabled (boolean enabled) {
    displayMethodText.setEnabled (enabled);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="153" endline="175">
public void handleEvent (Event event) {
    if (event.type == SWT.MouseDown) {
        Menu popupMenu = new Menu (getShell (), SWT.POP_UP);
        for (DisplayMethod displayMethod : DisplayMethod.values ()) {
            MenuItem item = new MenuItem (popupMenu, 0);
            item.setText (Labels.getLabel ("text.display." + displayMethod));
            item.setData (displayMethod);
            item.addListener (SWT.Selection, this);
        }
        popupMenu.setVisible (true);
    }
    if (event.type == SWT.Selection) {
        guiConfig.displayMethod = (DisplayMethod) event.widget.getData ();
        updateConfigText ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="48" endline="52">
public EditOpenersDialog (FetcherRegistry fetcherRegistry, OpenersConfig openersConfig) {
    this.fetcherRegistry = fetcherRegistry;
    this.openersConfig = openersConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="54" endline="150">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.openers.edit"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setText (Labels.getLabel ("text.openers.edit"));
    openersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    editFieldsGroup = new Group (shell, SWT.NONE);
    openersList.setLayoutData (LayoutHelper.formData (135, 200, null, null, new FormAttachment (messageLabel, 10), new FormAttachment (editFieldsGroup, 0, SWT.BOTTOM)));
    for (String name : openersConfig) {
        openersList.add (name);
    }
    openersList.addListener (SWT.Selection, new ItemSelectListener ());
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    upButton.addListener (SWT.Selection, new UpButtonListener (openersList));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    downButton.addListener (SWT.Selection, new DownButtonListener (openersList));
    Button addButton = new Button (shell, SWT.NONE);
    addButton.setText (Labels.getLabel ("button.add"));
    addButton.addListener (SWT.Selection, new AddButtonListener ());
    Button deleteButton = new Button (shell, SWT.NONE);
    deleteButton.setText (Labels.getLabel ("button.delete"));
    deleteButton.addListener (SWT.Selection, new DeleteButtonListener ());
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (messageLabel, 10), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (upButton), null));
    addButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (downButton, 16), null));
    deleteButton.setLayoutData (LayoutHelper.formData (new FormAttachment (openersList), null, new FormAttachment (addButton), null));
    editFieldsGroup.setLayoutData (LayoutHelper.formData (new FormAttachment (upButton, 10), null, new FormAttachment (messageLabel, 10), null));
    RowLayout rowLayout = new RowLayout (SWT.VERTICAL);
    rowLayout.fill = true;
    rowLayout.justify = true;
    rowLayout.marginTop = 13;
    editFieldsGroup.setLayout (rowLayout);
    Label openerNameLabel = new Label (editFieldsGroup, SWT.NONE);
    openerNameLabel.setText (Labels.getLabel ("text.openers.name"));
    openerNameLabel.setSize (SWT.DEFAULT, 18);
    openerNameText = new Text (editFieldsGroup, SWT.BORDER);
    openerNameText.setSize (SWT.DEFAULT, 22);
    openerNameText.addListener (SWT.KeyUp, new OpenerNameChange ());
    isInTerminalCheckbox = new Button (editFieldsGroup, SWT.CHECK);
    isInTerminalCheckbox.setText (Labels.getLabel ("text.openers.inTerminal"));
    isInTerminalCheckbox.setSize (SWT.DEFAULT, 18);
    Label openerStringLabel = new Label (editFieldsGroup, SWT.NONE);
    openerStringLabel.setText (Labels.getLabel ("text.openers.string"));
    openerStringLabel.setSize (SWT.DEFAULT, 18);
    openerStringText = new Text (editFieldsGroup, SWT.BORDER);
    openerStringText.setSize (SWT.DEFAULT, 22);
    Button hintButton = new Button (editFieldsGroup, SWT.NONE);
    hintButton.setText (Labels.getLabel ("text.openers.hint"));
    hintButton.addListener (SWT.Selection, new HintButtonListener ());
    Label openerDirLabel = new Label (editFieldsGroup, SWT.NONE);
    openerDirLabel.setText (Labels.getLabel ("text.openers.directory"));
    openerDirLabel.setSize (SWT.DEFAULT, 18);
    workingDirText = new Text (editFieldsGroup, SWT.BORDER);
    workingDirText.setSize (SWT.DEFAULT, 22);
    editFieldsGroup.layout ();
    editFieldsGroup.pack ();
    Button closeButton = createCloseButton ();
    closeButton.setLayoutData (LayoutHelper.formData (85, SWT.DEFAULT, null, new FormAttachment (editFieldsGroup, 0, SWT.RIGHT), new FormAttachment (editFieldsGroup, 6), null));
    shell.pack ();
    openersList.select (0);
    loadFieldsForSelection ();
    shell.addListener (SWT.Close, new Listener () {
        public void handleEvent (Event e) {
            saveOpeners ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="145" endline="148">
public void handleEvent (Event e) {
    saveOpeners ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="152" endline="160">
private void saveOpeners () {
    saveCurrentFields ();
    openersConfig.update (openersList.getItems ());
    openersConfig.store ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="162" endline="172">
private void saveCurrentFields () {
    String openerName = openerNameText.getText ();
    if (openerName.length () == 0 || openersList.getItemCount () == 0) return;

    currentSelectionIndex = openersList.getSelectionIndex ();
    File workingDir = workingDirText.getText ().length () > 0 ? new File (workingDirText.getText ()) : null;
    openersConfig.add (openerName, new OpenersConfig.Opener (openerStringText.getText (), isInTerminalCheckbox.getSelection (), workingDir));
    openersList.setItem (currentSelectionIndex, openerName);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="174" endline="187">
private void loadFieldsForSelection () {
    currentSelectionIndex = openersList.getSelectionIndex ();
    if (currentSelectionIndex < 0) return;

    String openerName = openersList.getItem (currentSelectionIndex);
    editFieldsGroup.setText (openerName);
    Opener opener = openersConfig.getOpener (openerName);
    openerNameText.setText (openerName);
    openerStringText.setText (opener.execString);
    workingDirText.setText (opener.workingDir != null ? opener.workingDir.toString () : "");
    isInTerminalCheckbox.setSelection (opener.inTerminal);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="192" endline="205">
public void handleEvent (Event event) {
    StringBuilder message = new StringBuilder (Labels.getLabel ("text.openers.hintText"));
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        message.append ("${").append (fetcher.getId ()).append ("}   - ").append (fetcher.getName ()).append ('\n');
    }
    MessageBox mb = new MessageBox (shell, SWT.ICON_INFORMATION | SWT.OK);
    mb.setText (Labels.getLabel ("title.openers.edit"));
    mb.setMessage (message.toString ());
    mb.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="211" endline="217">
public void handleEvent (Event event) {
    int firstIndex = openersList.getSelectionIndex ();
    openersList.remove (openersList.getSelectionIndices ());
    openersList.setSelection (firstIndex);
    loadFieldsForSelection ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="223" endline="245">
public void handleEvent (Event event) {
    saveCurrentFields ();
    currentSelectionIndex = openersList.getSelectionIndex ();
    if (currentSelectionIndex < 0) {
        currentSelectionIndex = openersList.getItemCount ();
    }
    String newName = Labels.getLabel ("text.openers.new");
    openersList.add (newName, currentSelectionIndex);
    openersList.setSelection (currentSelectionIndex);
    editFieldsGroup.setText (newName);
    openerNameText.setText (newName);
    openerStringText.setText ("${fetcher.ip}");
    workingDirText.setText ("");
    isInTerminalCheckbox.setSelection (false);
    openerNameText.forceFocus ();
    openerNameText.setSelection (0, newName.length ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="251" endline="258">
public void handleEvent (Event event) {
    if (openersList.getSelectionCount () == 0) return;

    saveCurrentFields ();
    loadFieldsForSelection ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="264" endline="269">
public void handleEvent (Event event) {
    String name = openerNameText.getText ();
    editFieldsGroup.setText (name);
    openersList.setItem (currentSelectionIndex, name);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="35" endline="64">
public void open () {
    if (shell == null || shell.isDisposed ()) {
        createShell ();
    }
    if (shell.getParent () != null) {
        Rectangle parentBounds = shell.getParent ().getBounds ();
        Rectangle childBounds = shell.getBounds ();
        int x = parentBounds.x + (parentBounds.width - childBounds.width) / 2;
        int y = parentBounds.y + (parentBounds.height - childBounds.height) / 2;
        shell.setLocation (x, y);
    }
    shell.open ();
    Display display = Display.getCurrent ();
    while (shell != null && ! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) display.sleep ();

    }
    shell = null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="71" endline="96">
protected final void createShell () {
    Shell parent = null;
    try {
        parent = Display.getCurrent ().getShells () [0];
    } catch (Exception e) {
    }
    shell = new Shell (parent, getShellStyle ());
    Image icon = null;
    if (parent != null) {
        icon = parent.getImage ();
    }
    if (icon == null) {
        icon = new Image (shell.getDisplay (), Labels.getInstance ().getImageAsStream ("icon"));
    }
    shell.setImage (icon);
    populateShell ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="101" endline="104">
protected int getShellStyle () {
    return SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="112" endline="141">
protected void positionButtons (Button okButton, Button cancelButton) {
    shell.setDefaultButton (okButton);
    Rectangle clientArea = shell.getClientArea ();
    Point size = okButton.computeSize (85, SWT.DEFAULT);
    okButton.setSize (size);
    if (cancelButton != null) {
        cancelButton.setSize (size);
        if (Platform.MAC_OS || Platform.LINUX) {
            Button fooButton = okButton;
            okButton = cancelButton;
            cancelButton = fooButton;
        }
        int distance = size.y / 3;
        cancelButton.setLocation (clientArea.width - size.x - 10, clientArea.height - size.y - 10);
        okButton.setLocation (clientArea.width - size.x * 2 - 10 - distance, clientArea.height - size.y - 10);
    } else {
        okButton.setLocation (clientArea.width - size.x - 10, clientArea.height - size.y - 10);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="150" endline="167">
protected void positionButtonsInFormLayout (Button okButton, Button cancelButton, Control control) {
    shell.setDefaultButton (okButton);
    if (Platform.MAC_OS || Platform.LINUX) {
        Button fooButton = okButton;
        okButton = cancelButton;
        cancelButton = fooButton;
    }
    cancelButton.pack ();
    cancelButton.setLayoutData (LayoutHelper.formData (Math.max (85, cancelButton.getSize ().x), SWT.DEFAULT, null, new FormAttachment (control, 0, SWT.RIGHT), new FormAttachment (control, 8), null));
    okButton.pack ();
    Point okSize = okButton.getSize ();
    okButton.setLayoutData (LayoutHelper.formData (Math.max (85, okSize.x), SWT.DEFAULT, null, new FormAttachment (cancelButton, - okSize.y / 3), new FormAttachment (control, 8), null));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="172" endline="199">
protected Button createCloseButton () {
    Button button = new Button (shell, SWT.NONE);
    button.setText (Labels.getLabel ("button.close"));
    positionButtons (button, null);
    button.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
            shell.dispose ();
        }}

    );
    if (Platform.MAC_OS) {
        Point size = shell.getSize ();
        shell.setSize (size.x, size.y - button.getSize ().y);
        button.setVisible (false);
    } else {
        button.setFocus ();
    }
    return button;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="180" endline="184">
public void handleEvent (Event event) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="208" endline="211">
public UpButtonListener (List list) {
    this.list = list;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="213" endline="239">
public void handleEvent (Event event) {
    if (list.getSelectionCount () == 0 || list.isSelected (0)) {
        return;
    }
    int [] selectedItems = list.getSelectionIndices ();
    for (int i = 0;
    i < selectedItems.length; i ++) {
        int index = selectedItems [i];
        list.deselect (index);
        String oldItem = list.getItem (index - 1);
        list.setItem (index - 1, list.getItem (index));
        list.setItem (index, oldItem);
        list.select (index - 1);
    }
    if (! Platform.MAC_OS) {
        list.setTopIndex (selectedItems [0] - 2);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="247" endline="250">
public DownButtonListener (List list) {
    this.list = list;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="252" endline="278">
public void handleEvent (Event event) {
    if (list.getSelectionCount () == 0 || list.isSelected (list.getItemCount () - 1)) {
        return;
    }
    int [] selectedItems = list.getSelectionIndices ();
    for (int i = selectedItems.length - 1;
    i >= 0; i --) {
        int index = selectedItems [i];
        list.deselect (index);
        String oldItem = list.getItem (index + 1);
        list.setItem (index + 1, list.getItem (index));
        list.setItem (index, oldItem);
        list.select (index + 1);
    }
    if (! Platform.MAC_OS) {
        list.setTopIndex (selectedItems [0]);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="37" endline="42">
public DetailsWindow (GUIConfig guiConfig, CommentsConfig commentsConfig, ResultTable resultTable) {
    this.guiConfig = guiConfig;
    this.commentsConfig = commentsConfig;
    this.resultTable = resultTable;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="44" endline="48">
@Override
protected int getShellStyle () {
    return SWT.TOOL | SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="50" endline="87">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.details"));
    shell.setLayout (LayoutHelper.formLayout (3, 3, 3));
    shell.setSize (guiConfig.detailsWindowSize);
    ScanningResult result = resultTable.getSelectedResult ();
    commentsText = new Text (shell, SWT.BORDER);
    commentsText.pack ();
    commentsText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), null, new FormAttachment (100)));
    CommentsTextListener commentsTextListener = new CommentsTextListener ();
    commentsText.addFocusListener (commentsTextListener);
    commentsText.addModifyListener (commentsTextListener);
    String comment = commentsConfig.getComment (result.getAddress ());
    if (comment != null) {
        commentsText.setText (comment);
    } else {
        commentsTextListener.focusLost (null);
    }
    Text detailsText = new Text (shell, SWT.BORDER | SWT.READ_ONLY | SWT.MULTI | SWT.V_SCROLL | SWT.WRAP);
    detailsText.setText (result.toString ());
    detailsText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    detailsText.setTabs (32);
    detailsText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (0), new FormAttachment (commentsText)));
    Listener traverseListener = new TraverseListener ();
    detailsText.addListener (SWT.Traverse, traverseListener);
    commentsText.addListener (SWT.Traverse, traverseListener);
    shell.layout ();
    detailsText.forceFocus ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="93" endline="100">
public void focusGained (FocusEvent e) {
    if (commentsText.getText ().equals (defaultText)) {
        commentsText.setText ("");
        commentsText.setForeground (commentsText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_FOREGROUND));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="102" endline="109">
public void focusLost (FocusEvent e) {
    if (commentsText.getText ().length () == 0) {
        commentsText.setText (defaultText);
        commentsText.setForeground (commentsText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="111" endline="121">
public void modifyText (ModifyEvent e) {
    String newComment = commentsText.getText ();
    if (! defaultText.equals (newComment)) {
        commentsConfig.setComment (resultTable.getSelectedResult ().getAddress (), newComment);
        resultTable.updateResult (resultTable.getSelectionIndex (), CommentFetcher.ID, newComment);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="126" endline="134">
public void handleEvent (Event e) {
    if (e.detail == SWT.TRAVERSE_RETURN) {
        guiConfig.detailsWindowSize = shell.getSize ();
        shell.close ();
        shell.dispose ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="34" endline="40">
public InputDialog (String title, String message) {
    populateShell ();
    shell.setText (title);
    messageLabel.setText (message);
    messageLabel.pack ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="42" endline="78">
@Override
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    text = new Text (shell, SWT.BORDER);
    okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    okButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            message = text.getText ();
            shell.dispose ();
        }}

    );
    cancelButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            message = null;
            shell.dispose ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="64" endline="68">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    message = text.getText ();
    shell.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="72" endline="76">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    message = null;
    shell.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="80" endline="87">
private void setText (String text) {
    this.text.setText (text != null ? text : "");
    this.text.setSelection (0, - 1);
    this.text.pack ();
    this.text.setLayoutData (LayoutHelper.formData (Math.max (this.text.getSize ().x, 310), SWT.DEFAULT, new FormAttachment (0), null, new FormAttachment (messageLabel), null));
    this.text.setFocus ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="94" endline="105">
public String open (String text, String okButtonText) {
    okButton.setText (okButtonText);
    setText (text);
    positionButtonsInFormLayout (okButton, cancelButton, this.text);
    shell.pack ();
    open ();
    return message;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="111" endline="114">
public String open (String text) {
    return open (text, Labels.getLabel ("button.OK"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="32" endline="36">
public InfoDialog (String title, String title2) {
    this.title = title;
    this.title2 = title2;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="38" endline="65">
@Override
protected void populateShell () {
    shell.setText (title);
    shell.setLayout (LayoutHelper.formLayout (10, 10, 15));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    iconLabel.setImage (shell.getImage ());
    Label titleLabel = new Label (shell, SWT.NONE);
    FontData sysFontData = shell.getDisplay ().getSystemFont ().getFontData () [0];
    titleLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (iconLabel), null, new FormAttachment (0), null));
    titleLabel.setFont (new Font (null, sysFontData.getName (), sysFontData.getHeight () + 3, sysFontData.getStyle () | SWT.BOLD));
    titleLabel.setText (title2);
    Text statsText = new Text (shell, SWT.MULTI | SWT.READ_ONLY);
    statsText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_BACKGROUND));
    statsText.setLayoutData (LayoutHelper.formData (new FormAttachment (iconLabel), null, new FormAttachment (titleLabel), null));
    statsText.setText (message);
    statsText.pack ();
    Button button = createCloseButton ();
    Point buttonSize = button.getSize ();
    button.setLayoutData (LayoutHelper.formData (buttonSize.x, buttonSize.y, null, new FormAttachment (statsText, 30, SWT.RIGHT), new FormAttachment (statsText), null));
    shell.pack ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="70" endline="73">
public String getMessage () {
    return message;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="78" endline="81">
public void setMessage (String message) {
    this.message = message;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="78" endline="84">
public PreferencesDialog (PingerRegistry pingerRegistry, ScannerConfig scannerConfig, GUIConfig guiConfig, ConfigDetectorDialog configDetectorDialog) {
    this.pingerRegistry = pingerRegistry;
    this.scannerConfig = scannerConfig;
    this.guiConfig = guiConfig;
    this.configDetectorDialog = configDetectorDialog;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="86" endline="90">
@Override
public void open () {
    openTab (0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="96" endline="111">
public void openTab (int tabIndex) {
    createShell ();
    loadPreferences ();
    tabFolder.setSelection (tabIndex);
    if (tabFolder.getItem (tabIndex) == portsTabItem) {
        portsText.forceFocus ();
    }
    super.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="113" endline="147">
@Override
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.preferences"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    createTabFolder ();
    okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, tabFolder);
    shell.pack ();
    okButton.setFocus ();
    okButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            savePreferences ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            shell.close ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="134" endline="138">
public void widgetSelected (SelectionEvent e) {
    savePreferences ();
    shell.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="142" endline="145">
public void widgetSelected (SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="152" endline="179">
private void createTabFolder () {
    tabFolder = new TabFolder (shell, SWT.NONE);
    createScanningTab ();
    TabItem tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.scanning"));
    tabItem.setControl (scanningTab);
    scanningTabItem = tabItem;
    createPortsTab ();
    tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.ports"));
    tabItem.setControl (portsTab);
    portsTabItem = tabItem;
    createDisplayTab ();
    tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.display"));
    tabItem.setControl (displayTab);
    tabFolder.pack ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="184" endline="257">
private void createScanningTab () {
    RowLayout rowLayout = createRowLayout ();
    scanningTab = new Composite (tabFolder, SWT.NONE);
    scanningTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group threadsGroup = new Group (scanningTab, SWT.NONE);
    threadsGroup.setText (Labels.getLabel ("preferences.threads"));
    threadsGroup.setLayout (groupLayout);
    GridData gridData = new GridData (80, SWT.DEFAULT);
    Label label;
    label = new Label (threadsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.threads.delay"));
    threadDelayText = new Text (threadsGroup, SWT.BORDER);
    threadDelayText.setLayoutData (gridData);
    label = new Label (threadsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.threads.maxThreads"));
    maxThreadsText = new Text (threadsGroup, SWT.BORDER);
    maxThreadsText.setLayoutData (gridData);
    Group pingingGroup = new Group (scanningTab, SWT.NONE);
    pingingGroup.setLayout (groupLayout);
    pingingGroup.setText (Labels.getLabel ("preferences.pinging"));
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.type"));
    pingersCombo = new Combo (pingingGroup, SWT.DROP_DOWN | SWT.READ_ONLY);
    pingersCombo.setLayoutData (gridData);
    String [] pingerNames = pingerRegistry.getRegisteredNames ();
    for (int i = 0;
    i < pingerNames.length; i ++) {
        pingersCombo.add (Labels.getLabel (pingerNames [i]));
        pingersCombo.setData (Integer.toString (i), pingerNames [i]);
    }
    pingersCombo.select (0);
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.count"));
    pingingCountText = new Text (pingingGroup, SWT.BORDER);
    pingingCountText.setLayoutData (gridData);
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.timeout"));
    pingingTimeoutText = new Text (pingingGroup, SWT.BORDER);
    pingingTimeoutText.setLayoutData (gridData);
    GridData gridDataWithSpan = new GridData ();
    gridDataWithSpan.horizontalSpan = 2;
    deadHostsCheckbox = new Button (pingingGroup, SWT.CHECK);
    deadHostsCheckbox.setText (Labels.getLabel ("preferences.pinging.deadHosts"));
    deadHostsCheckbox.setLayoutData (gridDataWithSpan);
    Group broadcastGroup = new Group (scanningTab, SWT.NONE);
    broadcastGroup.setLayout (groupLayout);
    broadcastGroup.setText (Labels.getLabel ("preferences.broadcast"));
    skipBroadcastsCheckbox = new Button (broadcastGroup, SWT.CHECK);
    skipBroadcastsCheckbox.setText (Labels.getLabel ("preferences.broadcast.skip"));
    GridData gridDataWithSpan2 = new GridData ();
    gridDataWithSpan2.horizontalSpan = 2;
    skipBroadcastsCheckbox.setLayoutData (gridDataWithSpan2);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="262" endline="314">
private void createDisplayTab () {
    RowLayout rowLayout = createRowLayout ();
    displayTab = new Composite (tabFolder, SWT.NONE);
    displayTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 1;
    Group listGroup = new Group (displayTab, SWT.NONE);
    listGroup.setText (Labels.getLabel ("preferences.display.list"));
    listGroup.setLayout (groupLayout);
    listGroup.setLayoutData (new RowData (260, SWT.DEFAULT));
    displayMethod = new Button [DisplayMethod.values ().length];
    Button allRadio = new Button (listGroup, SWT.RADIO);
    allRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.ALL));
    displayMethod [DisplayMethod.ALL.ordinal ()] = allRadio;
    Button aliveRadio = new Button (listGroup, SWT.RADIO);
    aliveRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.ALIVE));
    displayMethod [DisplayMethod.ALIVE.ordinal ()] = aliveRadio;
    Button portsRadio = new Button (listGroup, SWT.RADIO);
    portsRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.PORTS));
    displayMethod [DisplayMethod.PORTS.ordinal ()] = portsRadio;
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group labelsGroup = new Group (displayTab, SWT.NONE);
    labelsGroup.setText (Labels.getLabel ("preferences.display.labels"));
    labelsGroup.setLayout (groupLayout);
    GridData gridData = new GridData ();
    gridData.widthHint = 50;
    Label label = new Label (labelsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.display.labels.notAvailable"));
    notAvailableText = new Text (labelsGroup, SWT.BORDER);
    notAvailableText.setLayoutData (gridData);
    label = new Label (labelsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.display.labels.notScanned"));
    notScannedText = new Text (labelsGroup, SWT.BORDER);
    notScannedText.setLayoutData (gridData);
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 1;
    Group showStatsGroup = new Group (displayTab, SWT.NONE);
    showStatsGroup.setLayout (groupLayout);
    showStatsGroup.setText (Labels.getLabel ("preferences.display.confirmation"));
    askConfirmationCheckbox = new Button (showStatsGroup, SWT.CHECK);
    askConfirmationCheckbox.setText (Labels.getLabel ("preferences.display.confirmation.newScan"));
    showInfoCheckbox = new Button (showStatsGroup, SWT.CHECK);
    showInfoCheckbox.setText (Labels.getLabel ("preferences.display.confirmation.showInfo"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="319" endline="375">
private void createPortsTab () {
    RowLayout rowLayout = createRowLayout ();
    portsTab = new Composite (tabFolder, SWT.NONE);
    portsTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group timingGroup = new Group (portsTab, SWT.NONE);
    timingGroup.setText (Labels.getLabel ("preferences.ports.timing"));
    timingGroup.setLayout (groupLayout);
    GridData gridData = new GridData ();
    gridData.widthHint = 50;
    Label label = new Label (timingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.ports.timing.timeout"));
    portTimeoutText = new Text (timingGroup, SWT.BORDER);
    portTimeoutText.setLayoutData (gridData);
    GridData gridData1 = new GridData ();
    gridData1.horizontalSpan = 2;
    adaptTimeoutCheckbox = new Button (timingGroup, SWT.CHECK);
    adaptTimeoutCheckbox.setText (Labels.getLabel ("preferences.ports.timing.adaptTimeout"));
    adaptTimeoutCheckbox.setLayoutData (gridData1);
    adaptTimeoutCheckbox.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            minPortTimeoutText.setEnabled (adaptTimeoutCheckbox.getSelection ());
        }}

    );
    label = new Label (timingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.ports.timing.minTimeout"));
    minPortTimeoutText = new Text (timingGroup, SWT.BORDER);
    minPortTimeoutText.setLayoutData (gridData);
    RowLayout portsLayout = new RowLayout (SWT.VERTICAL);
    portsLayout.fill = true;
    portsLayout.marginHeight = 2;
    portsLayout.marginWidth = 2;
    Group portsGroup = new Group (portsTab, SWT.NONE);
    portsGroup.setText (Labels.getLabel ("preferences.ports.ports"));
    portsGroup.setLayout (portsLayout);
    label = new Label (portsGroup, SWT.WRAP);
    label.setText (Labels.getLabel ("preferences.ports.portsDescription"));
    portsText = new Text (portsGroup, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
    portsText.setLayoutData (new RowData (SWT.DEFAULT, 60));
    portsText.addKeyListener (new PortsTextValidationListener ());
    addRequestedPortsCheckbox = new Button (portsGroup, SWT.CHECK);
    addRequestedPortsCheckbox.setText (Labels.getLabel ("preferences.ports.addRequested"));
    addRequestedPortsCheckbox.setToolTipText (Labels.getLabel ("preferences.ports.addRequested.info"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="346" endline="349">
public void handleEvent (Event event) {
    minPortTimeoutText.setEnabled (adaptTimeoutCheckbox.getSelection ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="392" endline="401">
private RowLayout createRowLayout () {
    RowLayout rowLayout = new RowLayout ();
    rowLayout.type = org.eclipse.swt.SWT.VERTICAL;
    rowLayout.spacing = 9;
    rowLayout.marginHeight = 9;
    rowLayout.marginWidth = 11;
    rowLayout.fill = true;
    return rowLayout;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="403" endline="430">
private void loadPreferences () {
    maxThreadsText.setText (Integer.toString (scannerConfig.maxThreads));
    threadDelayText.setText (Integer.toString (scannerConfig.threadDelay));
    String [] pingerNames = pingerRegistry.getRegisteredNames ();
    for (int i = 0;
    i < pingerNames.length; i ++) {
        if (scannerConfig.selectedPinger.equals (pingerNames [i])) {
            pingersCombo.select (i);
        }
    }
    pingingCountText.setText (Integer.toString (scannerConfig.pingCount));
    pingingTimeoutText.setText (Integer.toString (scannerConfig.pingTimeout));
    deadHostsCheckbox.setSelection (scannerConfig.scanDeadHosts);
    skipBroadcastsCheckbox.setSelection (scannerConfig.skipBroadcastAddresses);
    portTimeoutText.setText (Integer.toString (scannerConfig.portTimeout));
    adaptTimeoutCheckbox.setSelection (scannerConfig.adaptPortTimeout);
    minPortTimeoutText.setText (Integer.toString (scannerConfig.minPortTimeout));
    minPortTimeoutText.setEnabled (scannerConfig.adaptPortTimeout);
    portsText.setText (scannerConfig.portString);
    addRequestedPortsCheckbox.setSelection (scannerConfig.useRequestedPorts);
    notAvailableText.setText (scannerConfig.notAvailableText);
    notScannedText.setText (scannerConfig.notScannedText);
    displayMethod [guiConfig.displayMethod.ordinal ()].setSelection (true);
    showInfoCheckbox.setSelection (guiConfig.showScanStats);
    askConfirmationCheckbox.setSelection (guiConfig.askScanConfirmation);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="432" endline="474">
private void savePreferences () {
    try {
        new PortIterator (portsText.getText ());
    } catch (Exception e) {
        tabFolder.setSelection (portsTabItem);
        portsText.forceFocus ();
        throw new FetcherException ("unparseablePortString", e);
    }
    scannerConfig.selectedPinger = (String) pingersCombo.getData (Integer.toString (pingersCombo.getSelectionIndex ()));
    if (! pingerRegistry.checkSelectedPinger ()) {
        tabFolder.setSelection (scanningTabItem);
        pingersCombo.forceFocus ();
        throw new FetcherException ("unsupportedPinger");
    }
    scannerConfig.maxThreads = parseIntValue (maxThreadsText);
    scannerConfig.threadDelay = parseIntValue (threadDelayText);
    scannerConfig.pingCount = parseIntValue (pingingCountText);
    scannerConfig.pingTimeout = parseIntValue (pingingTimeoutText);
    scannerConfig.scanDeadHosts = deadHostsCheckbox.getSelection ();
    scannerConfig.skipBroadcastAddresses = skipBroadcastsCheckbox.getSelection ();
    scannerConfig.portTimeout = parseIntValue (portTimeoutText);
    scannerConfig.adaptPortTimeout = adaptTimeoutCheckbox.getSelection ();
    scannerConfig.minPortTimeout = parseIntValue (minPortTimeoutText);
    scannerConfig.portString = portsText.getText ();
    scannerConfig.useRequestedPorts = addRequestedPortsCheckbox.getSelection ();
    scannerConfig.notAvailableText = notAvailableText.getText ();
    scannerConfig.notScannedText = notScannedText.getText ();
    for (int i = 0;
    i < displayMethod.length; i ++) {
        if (displayMethod [i].getSelection ()) guiConfig.displayMethod = DisplayMethod.values () [i];

    }
    guiConfig.showScanStats = showInfoCheckbox.getSelection ();
    guiConfig.askScanConfirmation = askConfirmationCheckbox.getSelection ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="479" endline="490">
private static int parseIntValue (Text text) {
    try {
        return Integer.parseInt (text.getText ());
    } catch (NumberFormatException e) {
        text.forceFocus ();
        throw e;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="494" endline="525">
public void keyPressed (KeyEvent e) {
    Text portsText = (Text) e.getSource ();
    if (e.keyCode == SWT.TAB) {
        portsText.getShell ().traverse (SWT.TRAVERSE_TAB_NEXT);
        e.doit = false;
        return;
    } else if (e.keyCode == SWT.CR) {
        if ((e.stateMask & SWT.MOD1) > 0) {
            e.stateMask = 0;
        } else {
            portsText.getShell ().traverse (SWT.TRAVERSE_RETURN);
            e.doit = false;
            return;
        }
    } else if (Character.isISOControl (e.character)) {
        return;
    }

    e.doit = validateChar (e.character, portsText.getText (), portsText.getCaretPosition ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="527" endline="544">
boolean validateChar (char c, String text, int caretPos) {
    char pc = 0;
    for (int i = caretPos - 1;
    i >= 0; i --) {
        pc = text.charAt (i);
        if (! Character.isWhitespace (pc)) break;

    }
    boolean isCurDigit = c >= '0' && c <= '9';
    boolean isPrevDigit = pc >= '0' && pc <= '9';
    return isPrevDigit && (isCurDigit || c == '-' || c == ',') || isCurDigit && (pc == '-' || pc == ',' || pc == 0) || Character.isWhitespace (c) && pc == ',';
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="546" endline="548">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="553" endline="557">
public void handleEvent (Event event) {
    scannerConfig.maxThreads = Integer.parseInt (maxThreadsText.getText ());
    configDetectorDialog.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="21" endline="28">
public SequenceIterator (Iterator < E >...iterators) {
    this.iterators = iterators;
    if (! iterators [iterators.length - 1].hasNext ()) throw new IllegalArgumentException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="30" endline="34">
public boolean hasNext () {
    return iterators [iterators.length - 1].hasNext ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="36" endline="43">
public E next () {
    if (! iterators [currentIndex].hasNext ()) currentIndex ++;

    return iterators [currentIndex].next ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="45" endline="48">
public void remove () {
    iterators [currentIndex].remove ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="34" endline="52">
public static InetAddress startRangeByNetmask (InetAddress address, InetAddress netmask) {
    byte [] netmaskBytes = netmask.getAddress ();
    byte [] addressBytes = address.getAddress ();
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) (addressBytes [i] & netmaskBytes [i]);
    }
    try {
        return InetAddress.getByAddress (addressBytes);
    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="54" endline="72">
public static InetAddress endRangeByNetmask (InetAddress address, InetAddress netmask) {
    byte [] netmaskBytes = netmask.getAddress ();
    byte [] addressBytes = address.getAddress ();
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) (addressBytes [i] | ~ (netmaskBytes [i]));
    }
    try {
        return InetAddress.getByAddress (addressBytes);
    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="78" endline="90">
public static boolean greaterThan (InetAddress inetAddress1, InetAddress inetAddress2) {
    byte [] address1 = inetAddress1.getAddress ();
    byte [] address2 = inetAddress2.getAddress ();
    for (int i = 0;
    i < address1.length; i ++) {
        if ((address1 [i] & 0xFF) > (address2 [i] & 0xFF)) return true;
        else if ((address1 [i] & 0xFF) < (address2 [i] & 0xFF)) break;

    }
    return false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="95" endline="113">
public static InetAddress increment (InetAddress address) {
    try {
        byte [] newAddress = address.getAddress ();
        for (int i = newAddress.length - 1;
        i >= 0; i --) {
            if (++ newAddress [i] != 0x00) break;

        }
        return InetAddress.getByAddress (newAddress);
    } catch (UnknownHostException e) {
        assert false : e;
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="125" endline="146">
public static InetAddress parseNetmask (String netmaskString) throws UnknownHostException {
    if (netmaskString.startsWith ("/")) {
        int totalBits = Integer.parseInt (netmaskString.substring (1));
        byte [] mask = new byte [4];
        for (int i = 0;
        i < mask.length; i ++) {
            int curByteBits = totalBits >= 8 ? 8 : totalBits;
            totalBits -= curByteBits;
            mask [i] = (byte) ((((1 << curByteBits) - 1) << (8 - curByteBits)) & 0xFF);
        }
        return InetAddress.getByAddress (mask);
    }
    netmaskString = netmaskString.replaceAll ("\\.\\.", ".255.");
    netmaskString = netmaskString.replaceAll ("\\.\\.", ".255.");
    return InetAddress.getByName (netmaskString);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="155" endline="161">
public static void maskPrototypeAddressBytes (byte [] addressBytes, byte [] maskBytes, byte [] prototypeBytes) {
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) ((addressBytes [i] & ~ maskBytes [i]) | (prototypeBytes [i] & maskBytes [i]));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="167" endline="171">
public static boolean isLikelyBroadcast (InetAddress address) {
    byte [] bytes = address.getAddress ();
    return bytes [bytes.length - 1] == 0 || bytes [bytes.length - 1] == (byte) 0xFF;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="180" endline="210">
public static InetAddress getAddressByName (String hostname) throws UnknownHostException {
    InetAddress address = InetAddress.getByName (hostname);
    if (address.isLoopbackAddress ()) {
        try {
            outer : for (Enumeration < NetworkInterface > i = NetworkInterface.getNetworkInterfaces ();
            i.hasMoreElements ();) {
                NetworkInterface networkInterface = i.nextElement ();
                for (Enumeration < InetAddress > i2 = networkInterface.getInetAddresses ();
                i2.hasMoreElements ();) {
                    InetAddress currentAddress = i2.nextElement ();
                    if (! currentAddress.isLoopbackAddress () && currentAddress instanceof Inet4Address) {
                        address = currentAddress;
                        break outer;
                    }
                }
            }
        } catch (SocketException e) {
            LOG.log (Level.FINE, "Cannot enumerate network interfaces", e);
        }
    }
    return address;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/Main.java" startline="55" endline="116">
public static void main (String...args) {
    long startTime = System.currentTimeMillis ();
    initSystemProperties ();
    Display display;
    try {
        Display.setAppName (Version.NAME);
        display = Display.getDefault ();
        LOG.finer ("SWT initialized after " + (System.currentTimeMillis () - startTime));
    } catch (UnsatisfiedLinkError e) {
        JOptionPane.showMessageDialog (null, "Failed to load native code. Probably you are using a binary built for wrong OS or CPU - try downloading both 32-bit and 64-bit binaries");
        return;
    }
    Labels.initialize (Locale.getDefault ());
    Config globalConfig = Config.getConfig ();
    LOG.finer ("Labels and Config initialized after " + (System.currentTimeMillis () - startTime));
    ComponentRegistry componentRegistry = new ComponentRegistry ();
    LOG.finer ("ComponentRegistry initialized after " + (System.currentTimeMillis () - startTime));
    processCommandLine (args, componentRegistry);
    MainWindow mainWindow = componentRegistry.getMainWindow ();
    LOG.fine ("Startup time: " + (System.currentTimeMillis () - startTime));
    while (! mainWindow.isDisposed ()) {
        try {
            if (! display.readAndDispatch ()) display.sleep ();

        } catch (Throwable e) {
            if (e instanceof SWTException && e.getCause () != null) e = e.getCause ();

            String localizedMessage = getLocalizedMessage (e);
            Shell parent = display.getActiveShell ();
            showMessage (parent != null ? parent : mainWindow.getShell (), e instanceof UserErrorException ? SWT.ICON_WARNING : SWT.ICON_ERROR, Labels.getLabel (e instanceof UserErrorException ? "text.userError" : "text.error"), localizedMessage);
        }
    }
    globalConfig.store ();
    display.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/Main.java" startline="118" endline="124">
private static void showMessage (Shell parent, int flags, String title, String localizedMessage) {
    MessageBox messageBox = new MessageBox (parent, SWT.OK | flags);
    messageBox.setText (title);
    messageBox.setMessage (localizedMessage);
    messageBox.open ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/Main.java" startline="126" endline="133">
private static void initSystemProperties () {
    System.setProperty ("java.net.preferIPv4Stack", "true");
    Security.setProperty ("networkaddress.cache.ttl", "0");
    Security.setProperty ("networkaddress.cache.negative.ttl", "0");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/Main.java" startline="135" endline="150">
private static void processCommandLine (String [] args, ComponentRegistry componentRegistry) {
    if (args.length != 0) {
        CommandLineProcessor cli = componentRegistry.getCommandLineProcessor ();
        try {
            cli.parse (args);
        } catch (Exception e) {
            showMessageToConsole (e.getMessage () + "\n\n" + cli);
            System.exit (1);
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/Main.java" startline="155" endline="180">
private static void showMessageToConsole (String usageText) {
    boolean haveConsole = ! Platform.WINDOWS;
    try {
        haveConsole = System.class.getMethod ("console").invoke (null) != null;
    } catch (Exception e) {
    }
    if (haveConsole) {
        System.err.println (usageText);
    } else {
        InfoDialog dialog = new InfoDialog (Version.NAME, Labels.getLabel ("title.commandline"));
        dialog.setMessage (usageText);
        dialog.open ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/Main.java" startline="186" endline="217">
static String getLocalizedMessage (Throwable e) {
    String localizedMessage;
    try {
        if (e instanceof UserErrorException) {
            localizedMessage = e.getMessage ();
        } else {
            String exceptionClassName = e.getClass ().getSimpleName ();
            String originalMessage = e.getMessage ();
            localizedMessage = Labels.getLabel ("exception." + exceptionClassName + (originalMessage != null ? "." + originalMessage : ""));
        }
        if (e.getCause () != null) {
            localizedMessage += "\n\n" + e.getCause ().toString ();
        }
        LOG.log (Level.FINE, "error", e);
    } catch (Exception e2) {
        localizedMessage = e.toString ();
        LOG.log (Level.SEVERE, "unexpected error", e);
    }
    return localizedMessage;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/LoggerFactory.java" startline="21" endline="26">
public static Logger getLogger () {
    Throwable t = new Throwable ();
    StackTraceElement directCaller = t.getStackTrace () [1];
    return Logger.getLogger (directCaller.getClassName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Labels.java" startline="41" endline="44">
private Labels () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Labels.java" startline="46" endline="49">
public static final Labels getInstance () {
    return instance;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Labels.java" startline="56" endline="95">
public static void initialize (Locale locale) {
    if (instance != null && locale.equals (instance.locale)) {
        return;
    }
    instance = new Labels ();
    instance.locale = locale;
    InputStream labelsStream = null;
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages.properties");
        if (labelsStream == null) {
            throw new MissingResourceException ("Labels not found!", Labels.class.getName (), "messages");
        }
        instance.labelsFallback = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (IOException e) {
        throw new MissingResourceException (e.toString (), Labels.class.getName (), "messages");
    }
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages_" + locale.getLanguage () + ".properties");
        instance.labels = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (Exception e) {
        instance.labels = instance.labelsFallback;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Labels.java" startline="101" endline="105">
public InputStream getImageAsStream (String key) {
    String imagePath = get (key);
    return getClass ().getClassLoader ().getResourceAsStream (imagePath);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Labels.java" startline="111" endline="123">
public String get (String key) {
    try {
        return labels.getString (key);
    } catch (MissingResourceException e) {
        String text = labelsFallback.getString (key);
        LOG.warning ("Used fallback label for " + key);
        return text;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Labels.java" startline="128" endline="131">
public static String getLabel (String key) {
    return getInstance ().get (key);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="37" endline="40">
public ConfigDetector (ScannerConfig config) {
    this.config = config;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="42" endline="45">
public void setCallback (DetectorCallback callback) {
    this.callback = callback;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="47" endline="65">
public void detectMaxThreads (InetSocketAddress socketAddress) {
    logger = LoggerFactory.getLogger ();
    expectedConnects = new AtomicInteger ();
    actualConnects = new AtomicInteger ();
    List < Thread > threads = new LinkedList < Thread > ();
    for (int i = 0;
    i < config.maxThreads; i ++) {
        Thread t = new SocketThread (socketAddress);
        threads.add (t);
        t.start ();
    }
    join (threads);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="67" endline="80">
private void join (List < Thread > threads) {
    try {
        for (Thread t : threads) {
            t.join ();
        }
        threads.clear ();
    } catch (InterruptedException e) {
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="82" endline="85">
public int getInitialConnectCount () {
    return config.maxThreads * CONNECTS_PER_THREAD;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="87" endline="90">
public int getInitialSuccessCount () {
    return (int) (getInitialConnectCount () * SUCCESS_PROBABILITY);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="92" endline="95">
public int getExpectedSuccessfulConnectCount () {
    return expectedConnects.intValue ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="97" endline="100">
public int getActualSuccessfulConnectCount () {
    return actualConnects.intValue ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="112" endline="115">
public SocketThread (InetSocketAddress socketAddress) {
    this.socketAddress = socketAddress;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ConfigDetector.java" startline="117" endline="165">
public void run () {
    for (int i = 0;
    i < CONNECTS_PER_THREAD; i ++) {
        if (callback != null) callback.onDetectorTry ();

        Socket s = new Socket ();
        try {
            s.setSoTimeout (config.portTimeout);
            s.setTcpNoDelay (true);
            s.setSoLinger (true, 0);
            if (Math.random () > (1.0 - SUCCESS_PROBABILITY)) {
                expectedConnects.incrementAndGet ();
                s.connect (socketAddress, config.portTimeout);
            } else {
                s.connect (new InetSocketAddress (InetAddress.getByAddress (new byte [] {(byte) 192, (byte) 168, (byte) (Math.random () * 255), (byte) (Math.random () * 255)}), 61493 + (int) (Math.random () * 200)), config.portTimeout);
            }
            actualConnects.incrementAndGet ();
            if (callback != null) {
                callback.onDetectorSuccess ();
            }
            sleep (10000);
        } catch (SocketTimeoutException e) {
        } catch (Exception e) {
            logger.log (Level.FINE, "Failure: " + e);
        } finally {
            try {
                s.close ();
            } catch (IOException e) {
            }
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="44" endline="48">
CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters) {
    this.feederRegistry = feederCreators;
    this.exporters = exporters;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="50" endline="57">
public CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters, StateMachine stateMachine, ScanningResultList scanningResults) {
    this (feederCreators, exporters);
    this.stateMachine = stateMachine;
    this.scanningResults = scanningResults;
    if (stateMachine != null) stateMachine.addTransitionListener (this);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="59" endline="62">
public boolean shouldAutoQuit () {
    return autoQuit;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="64" endline="67">
public boolean shouldAutoStart () {
    return autoStart;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="69" endline="125">
public void parse (String...args) {
    for (int i = 0;
    i < args.length; i ++) {
        String arg = args [i];
        if (arg.startsWith ("-f:")) {
            if (feederCreator != null) throw new IllegalArgumentException ("Only one feeder is allowed");

            feederCreator = findFeederCreator ("feeder." + arg.substring (3));
            feederArgs = new String [feederCreator.serializePartsLabels ().length];
            for (int j = 0;
            j < feederArgs.length; j ++) {
                feederArgs [j] = args [++ i];
                if (feederArgs [j].startsWith ("-")) throw new IllegalArgumentException (feederCreator.getFeederName () + " requires " + feederArgs.length + " arguments");

            }
        } else if (arg.equals ("-o")) {
            if (outputFilename != null) throw new IllegalArgumentException ("Only one exporter is allowed");

            outputFilename = args [++ i];
            if (outputFilename.startsWith ("-")) throw new IllegalArgumentException ("Output filename missing");

            exporter = findExporter (outputFilename);
            autoStart = true;
        } else if (arg.startsWith ("-")) {
            for (char option : arg.substring (1).toCharArray ()) {
                switch (option) {
                    case 's' :
                        autoStart = true;
                        break;
                    case 'q' :
                        autoQuit = true;
                        break;
                    case 'a' :
                        appendToFile = true;
                        break;
                    default :
                        throw new IllegalArgumentException ("Unknown option: " + option);
                }
            }
        } else throw new IllegalArgumentException ("Unknown argument: " + arg);

    }
    if (feederCreator == null) throw new IllegalArgumentException ("Feeder missing");

    feederCreator.unserialize (feederArgs);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="127" endline="154">
@Override
public String toString () {
    StringBuilder usage = new StringBuilder ();
    usage.append ("Pass the following arguments:\n");
    usage.append ("[options] <feeder> <exporter>\n\n");
    usage.append ("Where <feeder> is one of:\n");
    for (FeederCreator creator : feederRegistry) {
        usage.append ("-f:").append (shortId (creator.getFeederId ()));
        for (String partLabel : creator.serializePartsLabels ()) {
            usage.append (" <").append (Labels.getLabel (partLabel)).append (">");
        }
        usage.append ('\n');
    }
    usage.append ("\n<exporter> is one of:\n");
    for (Exporter exporter : exporters) {
        usage.append ("-o filename.").append (shortId (exporter.getFilenameExtension ())).append ("\t\t").append (Labels.getLabel (exporter.getId ())).append ('\n');
    }
    usage.append ("\nAnd possible [options] are (grouping allowed):\n");
    usage.append ("-s\tstart scanning automatically\n");
    usage.append ("-q\tquit after exporting the results\n");
    usage.append ("-a\tappend to the file, do not overwrite\n");
    return usage.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="156" endline="159">
private String shortId (String longId) {
    return longId.substring (longId.lastIndexOf ('.') + 1);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="161" endline="171">
private FeederCreator findFeederCreator (String feederId) {
    for (FeederCreator creator : feederRegistry) {
        if (feederId.equals (creator.getFeederId ())) {
            return creator;
        }
    }
    throw new IllegalArgumentException ("Feeder unknown: " + shortId (feederId));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="173" endline="176">
private Exporter findExporter (String outputFilename) {
    return exporters.createExporter (outputFilename);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="178" endline="201">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.INIT) {
        if (feederCreator != null) feederRegistry.select (feederCreator.getFeederId ());

        if (autoStart) stateMachine.transitionToNext ();

    } else if (transition == Transition.COMPLETE && state == ScanningState.IDLE && exporter != null) {
        ExportProcessor processor = new ExportProcessor (exporter, new File (outputFilename), appendToFile);
        processor.process (scanningResults, null);
        if (autoQuit) {
            System.err.println ("Saved results to " + outputFilename);
            System.exit (0);
        }
    }

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="82" endline="223">
public ComponentRegistry () {
    MutablePicoContainer container = new DefaultPicoContainer ();
    this.container = container;
    ComponentParameter anyComponentParameter = new ComponentParameter ();
    Config globalConfig = Config.getConfig ();
    container.registerComponentInstance (globalConfig.getPreferences ());
    container.registerComponentInstance (globalConfig.forScanner ());
    container.registerComponentInstance (globalConfig.forGUI ());
    container.registerComponentInstance (globalConfig.forOpeners ());
    container.registerComponentInstance (globalConfig.forFavorites ());
    container.registerComponentInstance (Labels.getInstance ());
    container.registerComponentImplementation (CommentsConfig.class);
    container.registerComponentImplementation (ConfigDetector.class);
    container.registerComponentImplementation (ExporterRegistry.class);
    container.registerComponentImplementation (TXTExporter.class);
    container.registerComponentImplementation (CSVExporter.class);
    container.registerComponentImplementation (XMLExporter.class);
    container.registerComponentImplementation (IPListExporter.class);
    container.registerComponentImplementation (FetcherRegistry.class, FetcherRegistryImpl.class);
    container.registerComponentImplementation (IPFetcher.class);
    container.registerComponentImplementation (PingFetcher.class);
    container.registerComponentImplementation (PingTTLFetcher.class);
    container.registerComponentImplementation (HostnameFetcher.class);
    container.registerComponentImplementation (PortsFetcher.class);
    container.registerComponentImplementation (FilteredPortsFetcher.class);
    container.registerComponentImplementation (WebDetectFetcher.class);
    container.registerComponentImplementation (HTTPSenderFetcher.class);
    container.registerComponentImplementation (CommentFetcher.class);
    container.registerComponentImplementation (NetBIOSInfoFetcher.class);
    container.registerComponentImplementation (PingerRegistry.class, PingerRegistryImpl.class);
    container.registerComponentImplementation (ScanningResultList.class);
    container.registerComponentImplementation (Scanner.class);
    container.registerComponentImplementation (SWTAwareStateMachine.class);
    container.registerComponentImplementation (ScannerDispatcherThreadFactory.class);
    container.registerComponentImplementation (CommandLineProcessor.class);
    container.registerComponentInstance (Display.getDefault ());
    container.registerComponentImplementation ("mainShell", Shell.class);
    container.registerComponentImplementation ("mainMenu", Menu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.BAR))});
    container.registerComponentImplementation ("commandsMenu", CommandsMenu.class);
    container.registerComponentImplementation ("feederArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("controlsArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("startStopButton", Button.class, new Parameter [] {new ComponentParameter ("controlsArea"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("feederSelectionCombo", FeederSelectionCombo.class, new Parameter [] {new ComponentParameter ("controlsArea")});
    container.registerComponentImplementation (FeederGUIRegistry.class);
    Parameter [] feederGUIParameters = new Parameter [] {new ComponentParameter ("feederArea")};
    container.registerComponentImplementation (RangeFeederGUI.class, RangeFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (RandomFeederGUI.class, RandomFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (FileFeederGUI.class, FileFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (OpenerLauncher.class);
    container.registerComponentImplementation (MainWindow.class, MainWindow.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, new ComponentParameter ("feederArea"), new ComponentParameter ("controlsArea"), new ComponentParameter ("feederSelectionCombo"), new ComponentParameter ("startStopButton"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (ResultTable.class, ResultTable.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (StatusBar.class, StatusBar.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (MainMenu.class, MainMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ComponentParameter ("mainMenu"), new ComponentParameter ("commandsMenu"), anyComponentParameter, new ConstantParameter (container)});
    container.registerComponentImplementation (MainMenu.ColumnsMenu.class, MainMenu.ColumnsMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (AboutDialog.class);
    container.registerComponentImplementation (PreferencesDialog.class);
    container.registerComponentImplementation (ConfigDetectorDialog.class);
    container.registerComponentImplementation (SelectFetchersDialog.class);
    container.registerComponentImplementation (DetailsWindow.class);
    container.registerComponentImplementation (StatisticsDialog.class);
    container.registerComponentImplementation (StartStopScanningAction.class);
    container.registerComponentImplementation (ColumnsActions.SortBy.class);
    container.registerComponentImplementation (ColumnsActions.FetcherPreferences.class);
    container.registerComponentImplementation (ColumnsActions.AboutFetcher.class);
    container.registerComponentImplementation (ColumnsActions.ColumnClick.class);
    container.registerComponentImplementation (ColumnsActions.ColumnResize.class);
    container.registerComponentImplementation (CommandsMenuActions.Details.class);
    container.registerComponentImplementation (ToolsActions.Preferences.class);
    container.registerComponentImplementation (ToolsActions.ChooseFetchers.class);
    container.registerComponentImplementation (ToolsActions.TableSelection.class);
    container.registerComponentImplementation (HelpMenuActions.CheckVersion.class);
    if (Platform.MAC_OS) {
        try {
            container.registerComponentImplementation (Class.forName ("net.azib.ipscan.platform.mac.MacApplicationMenu"));
        } catch (Exception e) {
            Logger.getLogger (getClass ().getName ()).warning ("Cannot initialize MacApplicationMenu: " + e);
        }
    }
    new PluginLoader ().addTo (container);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="225" endline="232">
private void start () {
    if (! containerStarted) {
        containerStarted = true;
        container.start ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="234" endline="240">
public MainWindow getMainWindow () {
    start ();
    return (MainWindow) container.getComponentInstance (MainWindow.class);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="242" endline="246">
public CommandLineProcessor getCommandLineProcessor () {
    start ();
    return (CommandLineProcessor) container.getComponentInstance (CommandLineProcessor.class);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ScannerConfig.java" startline="40" endline="58">
ScannerConfig (Preferences preferences) {
    this.preferences = preferences;
    maxThreads = preferences.getInt ("maxThreads", Platform.CRIPPLED_WINDOWS ? 10 : 100);
    threadDelay = preferences.getInt ("threadDelay", 20);
    scanDeadHosts = preferences.getBoolean ("scanDeadHosts", false);
    selectedPinger = preferences.get ("selectedPinger", Platform.WINDOWS && ! Platform.ARCH_64 ? "pinger.windows" : "pinger.icmp");
    pingTimeout = preferences.getInt ("pingTimeout", 2000);
    pingCount = preferences.getInt ("pingCount", 3);
    skipBroadcastAddresses = preferences.getBoolean ("skipBroadcastAddresses", true);
    portTimeout = preferences.getInt ("portTimeout", 2000);
    adaptPortTimeout = preferences.getBoolean ("adaptPortTimeout", ! Platform.CRIPPLED_WINDOWS);
    minPortTimeout = preferences.getInt ("minPortTimeout", 100);
    portString = preferences.get ("portString", "");
    useRequestedPorts = preferences.getBoolean ("useRequestedPorts", true);
    notAvailableText = preferences.get ("notAvailableText", Labels.getLabel ("fetcher.value.notAvailable"));
    notScannedText = preferences.get ("notScannedText", Labels.getLabel ("fetcher.value.notScanned"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/ScannerConfig.java" startline="63" endline="79">
public void store () {
    preferences.putInt ("maxThreads", maxThreads);
    preferences.putInt ("threadDelay", threadDelay);
    preferences.putBoolean ("scanDeadHosts", scanDeadHosts);
    preferences.put ("selectedPinger", selectedPinger);
    preferences.putInt ("pingTimeout", pingTimeout);
    preferences.putInt ("pingCount", pingCount);
    preferences.putBoolean ("skipBroadcastAddresses", skipBroadcastAddresses);
    preferences.putInt ("portTimeout", portTimeout);
    preferences.putBoolean ("adaptPortTimeout", adaptPortTimeout);
    preferences.putInt ("minPortTimeout", minPortTimeout);
    preferences.put ("portString", portString);
    preferences.putBoolean ("useRequestedPorts", useRequestedPorts);
    preferences.put ("notAvailableText", notAvailableText);
    preferences.put ("notScannedText", notScannedText);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="22" endline="41">
public OpenersConfig (Preferences preferences) {
    super (preferences, "openers");
    if (size () == 0) {
        Labels labels = Labels.getInstance ();
        if (Platform.WINDOWS) add (labels.get ("opener.netbios"), new Opener ("\\\\${fetcher.ip}", false, null));

        add (labels.get ("opener.web"), new Opener ("http://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.ftp"), new Opener ("ftp://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.telnet"), new Opener ("telnet ${fetcher.ip}", true, null));
        add (labels.get ("opener.ping"), new Opener ("ping ${fetcher.ip}", true, null));
        add (labels.get ("opener.traceroute"), new Opener ((Platform.WINDOWS ? "tracert" : Platform.LINUX ? "tracepath" : "traceroute") + " ${fetcher.ip}", true, null));
        if (! Platform.WINDOWS) add (labels.get ("opener.ssh"), new Opener ("ssh ${fetcher.ip}", true, null));

        if (! Platform.WINDOWS) add (labels.get ("opener.whois"), new Opener ("whois ${fetcher.ip}", true, null));

        add (labels.get ("opener.geolocate"), new Opener ("http://www.angryip.org/iplocate.php?ip=${fetcher.ip}", false, null));
        add (labels.get ("opener.email"), new Opener ("mailto:somebody@example.com?subject=${fetcher.ip} (${fetcher.hostname})", true, null));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="43" endline="46">
Object serializeValue (String value) {
    return new Opener (value);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="48" endline="55">
public void add (String name, Object value) {
    if (value instanceof Opener) super.add (name, value);
    else throw new IllegalArgumentException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="57" endline="60">
public Opener getOpener (String name) {
    return (Opener) namedList.get (name);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="68" endline="82">
Opener (String serialized) {
    try {
        String [] parts = serialized.split ("@@@");
        execString = parts [0];
        inTerminal = parts [1].charAt (0) == '1';
        workingDir = parts.length >= 3 && parts [2].length () > 0 ? new File (parts [2]) : null;
    } catch (ArrayIndexOutOfBoundsException e) {
        LOG.fine ("Broken opener config read: " + serialized);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="84" endline="89">
public Opener (String execString, boolean inTerminal, File workingDir) {
    this.execString = execString;
    this.inTerminal = inTerminal;
    this.workingDir = workingDir;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="91" endline="94">
public String toString () {
    return execString + "@@@" + (inTerminal ? '1' : '0') + "@@@" + (workingDir != null ? workingDir.toString () : "");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="28" endline="33">
NamedListConfig (Preferences preferences, String preferenceName) {
    this.preferenceName = preferenceName;
    this.preferences = preferences;
    load ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="38" endline="53">
public void load () {
    if (preferences == null) {
        return;
    }
    String [] namedListPrefs = preferences.get (preferenceName, "").split ("###");
    for (int i = 0;
    i < namedListPrefs.length; i += 2) {
        if (namedListPrefs [i].length () > 0) {
            namedList.put (namedListPrefs [i], serializeValue (namedListPrefs [i + 1]));
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="55" endline="58">
Object serializeValue (String value) {
    return value;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="63" endline="75">
public void store () {
    StringBuffer sb = new StringBuffer (32);
    for (Map.Entry < String, Object > e : namedList.entrySet ()) {
        sb.append (e.getKey ()).append ("###").append (e.getValue ()).append ("###");
    }
    if (sb.length () > 3) {
        sb.delete (sb.length () - 3, sb.length ());
    }
    preferences.put (preferenceName, sb.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="81" endline="84">
public void add (String key, Object value) {
    namedList.put (key, value);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="90" endline="94">
public String get (String key) {
    Object value = namedList.get (key);
    return value != null ? value.toString () : null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="100" endline="103">
public String remove (String key) {
    return namedList.remove (key).toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="108" endline="111">
public Iterator < String > iterator () {
    return namedList.keySet ().iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="113" endline="116">
public int size () {
    return namedList.size ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="124" endline="133">
public void update (String [] keys) {
    Map < String, Object > newList = new LinkedHashMap < String, Object > ();
    for (int i = 0;
    i < keys.length; i ++) {
        newList.put (keys [i], namedList.get (keys [i]));
    }
    namedList = newList;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="43" endline="47">
GUIConfig (Preferences preferences) {
    this.preferences = preferences;
    load ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="49" endline="68">
private void load () {
    isFirstRun = preferences.getBoolean ("firstRun", true);
    activeFeeder = preferences.getInt ("activeFeeder", 0);
    displayMethod = DisplayMethod.valueOf (preferences.get ("displayMethod", DisplayMethod.ALL.toString ()));
    showScanStats = preferences.getBoolean ("showScanStats", true);
    askScanConfirmation = preferences.getBoolean ("askScanConfirmation", true);
    isMainWindowMaximized = preferences.getBoolean ("windowMaximized", false);
    Rectangle screen = Display.getDefault ().getBounds ();
    mainWindowBounds = new Rectangle (preferences.getInt ("windowLeft", screen.x + screen.width / 2 - 600 / 2), preferences.getInt ("windowTop", screen.y + screen.height / 2 - 360 / 2), preferences.getInt ("windowWidth", 600), preferences.getInt ("windowHeight", 360));
    detailsWindowSize = new Point (preferences.getInt ("detailsWidth", 300), preferences.getInt ("detailsHeight", 200));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="70" endline="89">
public void store () {
    preferences.putBoolean ("firstRun", isFirstRun);
    preferences.putInt ("activeFeeder", activeFeeder);
    preferences.put ("displayMethod", displayMethod.toString ());
    preferences.putBoolean ("showScanStats", showScanStats);
    preferences.putBoolean ("askScanConfirmation", askScanConfirmation);
    preferences.putBoolean ("windowMaximized", isMainWindowMaximized);
    if (! isMainWindowMaximized) {
        preferences.putInt ("windowLeft", mainWindowBounds.x);
        preferences.putInt ("windowTop", mainWindowBounds.y);
        preferences.putInt ("windowWidth", mainWindowBounds.width);
        preferences.putInt ("windowHeight", mainWindowBounds.height);
    }
    preferences.putInt ("detailsWidth", detailsWindowSize.x);
    preferences.putInt ("detailsHeight", detailsWindowSize.y);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="91" endline="94">
public Rectangle getMainWindowBounds () {
    return mainWindowBounds;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="100" endline="107">
public void setMainWindowBounds (Rectangle bounds, boolean isMaximized) {
    if (! isMaximized) {
        mainWindowBounds = bounds;
    }
    isMainWindowMaximized = isMaximized;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="113" endline="127">
public int getColumnWidth (Fetcher fetcher) {
    int width = preferences.getInt ("columnWidth." + fetcher.getId (), 0);
    if (width == 0) {
        if (fetcher instanceof IPFetcher || fetcher instanceof HostnameFetcher) width = 140;
        else if (fetcher instanceof PingFetcher) width = 60;
        else width = 90;

    }
    return width;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="134" endline="137">
public void setColumnWidth (Fetcher fetcher, int width) {
    preferences.putInt ("columnWidth." + fetcher.getId (), width);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="31" endline="38">
private Config () {
    preferences = Preferences.userRoot ().node ("ipscan");
    scannerConfig = new ScannerConfig (preferences);
    guiConfig = new GUIConfig (preferences);
    favoritesConfig = new FavoritesConfig (preferences);
    openersConfig = new OpenersConfig (preferences);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="43" endline="50">
public static Config getConfig () {
    if (globalConfig == null) {
        globalConfig = new Config ();
    }
    return globalConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="52" endline="58">
public void store () {
    scannerConfig.store ();
    guiConfig.store ();
    favoritesConfig.store ();
    openersConfig.store ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="60" endline="63">
public Preferences getPreferences () {
    return preferences;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="68" endline="71">
public ScannerConfig forScanner () {
    return scannerConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="76" endline="79">
NamedListConfig forFavorites () {
    return favoritesConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="84" endline="87">
OpenersConfig forOpeners () {
    return openersConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Config.java" startline="92" endline="95">
public GUIConfig forGUI () {
    return guiConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="21" endline="25">
public CommentsConfig (Preferences preferences) {
    this.preferences = preferences.node ("comments");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="27" endline="30">
public String getComment (InetAddress address) {
    return preferences.get (address.getHostAddress (), null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="32" endline="38">
public void setComment (InetAddress address, String comment) {
    if (comment == null || comment.length () == 0) preferences.remove (address.getHostAddress ());
    else preferences.put (address.getHostAddress (), comment);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Version.java" startline="44" endline="51">
public static String getVersion () {
    if (version == null) {
        loadVersionFromJar ();
    }
    return version;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Version.java" startline="56" endline="63">
public static String getBuildDate () {
    if (buildDate == null) {
        loadVersionFromJar ();
    }
    return buildDate;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Version.java" startline="65" endline="86">
private static void loadVersionFromJar () {
    String path = Version.class.getClassLoader ().getResource (Version.class.getName ().replace ('.', '/') + ".class").toString ();
    if (path.startsWith ("jar:file:")) {
        path = path.substring (4, path.indexOf ('!'));
        try {
            JarFile jarFile = new JarFile (new URI (path).getPath ());
            Attributes attrs = jarFile.getManifest ().getMainAttributes ();
            version = attrs.getValue ("Version");
            buildDate = attrs.getValue ("Build-Date");
            return;
        } catch (Exception e) {
            LoggerFactory.getLogger ().log (Level.WARNING, "Cannot obtain version", e);
        }
    }
    version = "current";
    buildDate = "today";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/Version.java" startline="88" endline="91">
public static String getFullName () {
    return NAME + " " + getVersion ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="20" endline="23">
public FavoritesConfig (Preferences preferences) {
    super (preferences, "favorites");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="25" endline="34">
public void add (String key, FeederCreator feederCreator) {
    StringBuilder serializedFeeder = new StringBuilder (feederCreator.getFeederId ());
    serializedFeeder.append ('\t');
    for (String part : feederCreator.serialize ()) {
        serializedFeeder.append (part).append (":::");
    }
    super.add (key, serializedFeeder.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="36" endline="41">
public String getFeederId (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (0, indexOf);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="43" endline="48">
public String [] getSerializedParts (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (indexOf + 1).split (":::");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="44" endline="62">
public FetcherRegistryImpl (Fetcher [] registeredFetchers, Preferences preferences, PicoContainer parentContainer) {
    this.preferences = preferences;
    MutablePicoContainer prefsContainer = new DefaultPicoContainer (parentContainer);
    this.registeredFetchers = new LinkedHashMap < String, Fetcher > (registeredFetchers.length);
    for (Fetcher fetcher : registeredFetchers) {
        this.registeredFetchers.put (fetcher.getId (), fetcher);
        Class < ? extends FetcherPrefs > prefsClass = fetcher.getPreferencesClass ();
        if (prefsClass != null && prefsContainer.getComponentAdapterOfType (prefsClass) == null) prefsContainer.registerComponentImplementation (prefsClass);

    }
    this.registeredFetchers = Collections.unmodifiableMap (this.registeredFetchers);
    this.prefsContainer = prefsContainer;
    loadSelectedFetchers (preferences);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="64" endline="91">
private void loadSelectedFetchers (Preferences preferences) {
    String fetcherPrefValue = preferences.get (PREFERENCE_SELECTED_FETCHERS, null);
    if (fetcherPrefValue == null) {
        selectedFetchers = new LinkedHashMap < String, Fetcher > ();
        selectedFetchers.put (IPFetcher.ID, registeredFetchers.get (IPFetcher.ID));
        selectedFetchers.put (PingFetcher.ID, registeredFetchers.get (PingFetcher.ID));
        selectedFetchers.put (HostnameFetcher.ID, registeredFetchers.get (HostnameFetcher.ID));
        selectedFetchers.put (PortsFetcher.ID, registeredFetchers.get (PortsFetcher.ID));
    } else {
        String [] fetcherPrefs = fetcherPrefValue.split ("###");
        selectedFetchers = new LinkedHashMap < String, Fetcher > (registeredFetchers.size ());
        for (int i = 0;
        i < fetcherPrefs.length; i ++) {
            Fetcher fetcher = registeredFetchers.get (fetcherPrefs [i]);
            if (fetcher != null) {
                selectedFetchers.put (fetcherPrefs [i], fetcher);
            }
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="93" endline="105">
private void saveSelectedFetchers (Preferences preferences) {
    StringBuffer sb = new StringBuffer ();
    for (String fetcherName : selectedFetchers.keySet ()) {
        sb.append (fetcherName).append ("###");
    }
    String value = sb.toString ();
    if (value.endsWith ("###")) value = value.substring (0, value.length () - 3);

    preferences.put (PREFERENCE_SELECTED_FETCHERS, value);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="107" endline="110">
public void addListener (FetcherRegistryUpdateListener listener) {
    updateListeners.add (listener);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="112" endline="115">
public Collection < Fetcher > getRegisteredFetchers () {
    return registeredFetchers.values ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="117" endline="120">
public Collection < Fetcher > getSelectedFetchers () {
    return selectedFetchers.values ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="122" endline="134">
public int getSelectedFetcherIndex (String id) {
    int index = 0;
    for (Fetcher fetcher : selectedFetchers.values ()) {
        if (id.equals (fetcher.getId ())) {
            return index;
        }
        index ++;
    }
    return - 1;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="136" endline="154">
public void updateSelectedFetchers (String [] labels) {
    Map < String, Fetcher > newList = new LinkedHashMap < String, Fetcher > ();
    for (int i = 0;
    i < labels.length; i ++) {
        newList.put (labels [i], registeredFetchers.get (labels [i]));
    }
    selectedFetchers = newList;
    for (FetcherRegistryUpdateListener listener : updateListeners) {
        listener.handleUpdateOfSelectedFetchers (this);
    }
    saveSelectedFetchers (preferences);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistryImpl.java" startline="156" endline="164">
public void openPreferencesEditor (Fetcher fetcher) throws FetcherException {
    Class < ? extends FetcherPrefs > prefsClass = fetcher.getPreferencesClass ();
    if (prefsClass == null) throw new FetcherException ("preferences.notAvailable");

    FetcherPrefs prefs = (FetcherPrefs) prefsContainer.getComponentInstanceOfType (prefsClass);
    prefs.openFor (fetcher);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="42" endline="46">
public PingFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    this.pingerRegistry = pingerRegistry;
    this.config = scannerConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="48" endline="51">
public String getId () {
    return ID;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="53" endline="57">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PingFetcherPrefs.class;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="59" endline="85">
protected PingResult executePing (ScanningSubject subject) {
    PingResult result = null;
    if (subject.hasParameter (ScanningSubject.PARAMETER_PING_RESULT)) {
        result = (PingResult) subject.getParameter (ScanningSubject.PARAMETER_PING_RESULT);
    } else {
        try {
            result = pinger.ping (subject, config.pingCount);
        } catch (IOException e) {
            LOG.log (Level.WARNING, "Pinging failed", e);
            result = new PingResult (subject.getAddress ());
        }
        subject.setParameter (ScanningSubject.PARAMETER_PING_RESULT, result);
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="87" endline="99">
public Object scan (ScanningSubject subject) {
    PingResult result = executePing (subject);
    subject.setResultType (result.isAlive () ? ResultType.ALIVE : ResultType.DEAD);
    if (! result.isAlive () && ! config.scanDeadHosts) {
        subject.abortAddressScanning ();
    }
    return result.isAlive () ? new IntegerWithUnit (result.getAverageTime (), "ms") : null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="101" endline="107">
public void init () {
    if (pinger == null) {
        pinger = pingerRegistry.createPinger ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="109" endline="123">
public void cleanup () {
    try {
        if (pinger != null) {
            pinger.close ();
        }
    } catch (IOException e) {
        throw new FetcherException (e);
    }
    pinger = null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="44" endline="47">
public NetBIOSInfoFetcher (ScannerConfig config) {
    this.config = config;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="49" endline="52">
public String getId () {
    return "fetcher.netbios";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="54" endline="107">
public Object scan (ScanningSubject subject) {
    DatagramSocket socket = null;
    try {
        socket = new DatagramSocket ();
        socket.setSoTimeout (config.pingTimeout);
        socket.connect (subject.getAddress (), NETBIOS_UDP_PORT);
        socket.send (new DatagramPacket (REQUEST_DATA, REQUEST_DATA.length));
        byte [] response = new byte [1024];
        DatagramPacket responsePacket = new DatagramPacket (response, response.length);
        socket.receive (responsePacket);
        if (responsePacket.getLength () < RESPONSE_BASE_LEN) {
            return null;
        }
        int nameCount = response [RESPONSE_BASE_LEN - 1] & 0xFF;
        if (responsePacket.getLength () < RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * (nameCount - 1)) {
            return null;
        }
        return extractNames (response, nameCount);
    } catch (SocketTimeoutException e) {
        return null;
    } catch (SocketException e) {
        return null;
    } catch (Exception e) {
        LOG.log (Level.WARNING, null, e);
        return null;
    } finally {
        if (socket != null) {
            socket.close ();
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="109" endline="141">
static String extractNames (byte [] response, int nameCount) {
    String computerName = name (response, 0);
    String groupName = null;
    for (int i = 1;
    i < nameCount; i ++) {
        if (nameType (response, i) == NAME_TYPE_DOMAIN && (nameFlag (response, i) & GROUP_NAME_FLAG) > 0) {
            groupName = name (response, i);
            break;
        }
    }
    String userName = null;
    for (int i = nameCount - 1;
    i > 0; i --) {
        if (nameType (response, i) == NAME_TYPE_MESSENGER) {
            userName = name (response, i);
            break;
        }
    }
    String macAddress = String.format ("%02X-%02X-%02X-%02X-%02X-%02X", nameByte (response, nameCount, 0), nameByte (response, nameCount, 1), nameByte (response, nameCount, 2), nameByte (response, nameCount, 3), nameByte (response, nameCount, 4), nameByte (response, nameCount, 5));
    return (groupName != null ? groupName + "\\" : "") + (userName != null ? userName + "@" : "") + computerName + " [" + macAddress + "]";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="143" endline="148">
private static String name (byte [] response, int i) {
    return new String (response, RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i, RESPONSE_NAME_LEN).trim ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="150" endline="153">
private static int nameByte (byte [] response, int i, int n) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + n] & 0xFF;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="155" endline="159">
private static int nameFlag (byte [] response, int i) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN + 1] & 0xFF + (response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN + 2] & 0xFF) * 0xFF;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="161" endline="164">
private static int nameType (byte [] response, int i) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN] & 0xFF;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="44" endline="50">
public PortTextFetcher (ScannerConfig scannerConfig, int defaultPort, String textToSend, String matchingRegexp) {
    this.scannerConfig = scannerConfig;
    this.defaultPort = defaultPort;
    this.textToSend = textToSend;
    this.matchingRegexp = Pattern.compile (matchingRegexp);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="52" endline="108">
public Object scan (ScanningSubject subject) {
    Iterator < Integer > portIterator = subject.isAnyPortRequested () ? subject.requestedPortsIterator () : Collections.singleton (defaultPort).iterator ();
    while (portIterator.hasNext () && ! Thread.currentThread ().isInterrupted ()) {
        Socket socket = new Socket ();
        try {
            socket.connect (new InetSocketAddress (subject.getAddress (), portIterator.next ()), subject.getAdaptedPortTimeout ());
            socket.setTcpNoDelay (true);
            socket.setSoTimeout (scannerConfig.portTimeout * 2);
            socket.setSoLinger (true, 0);
            socket.getOutputStream ().write (textToSend.getBytes ());
            BufferedReader in = new BufferedReader (new InputStreamReader (socket.getInputStream ()));
            String line;
            while ((line = in.readLine ()) != null) {
                Matcher matcher = matchingRegexp.matcher (line);
                if (matcher.find ()) {
                    subject.setResultType (ResultType.WITH_PORTS);
                    return matcher.group (1);
                }
            }
        } catch (ConnectException e) {
        } catch (SocketTimeoutException e) {
        } catch (SocketException e) {
        } catch (IOException e) {
            LOG.log (Level.FINE, subject.getAddress ().toString (), e);
        } finally {
            try {
                socket.close ();
            } catch (IOException e) {
            }
        }
    }
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="110" endline="114">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PortTextFetcherPrefs.class;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="116" endline="119">
public String getTextToSend () {
    return textToSend;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="121" endline="124">
public void setTextToSend (String textToSend) {
    this.textToSend = textToSend;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="126" endline="129">
public Pattern getMatchingRegexp () {
    return matchingRegexp;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="131" endline="134">
public void setMatchingRegexp (Pattern matchingRegexp) {
    this.matchingRegexp = matchingRegexp;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="23" endline="26">
public FilteredPortsFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="28" endline="31">
public String getId () {
    return "fetcher.ports.filtered";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="33" endline="41">
public Object scan (ScanningSubject subject) {
    boolean portsScanned = scanPorts (subject);
    if (! portsScanned) return NotScanned.VALUE;

    SortedSet < Integer > filteredPorts = getFilteredPorts (subject);
    return filteredPorts.size () > 0 ? new NumericRangeList (filteredPorts, displayAsRanges) : null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PacketLossFetcher.java" startline="19" endline="22">
public PacketLossFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    super (pingerRegistry, scannerConfig);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/LastAliveTimeFetcher.java" startline="21" endline="25">
public String getId () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/LastAliveTimeFetcher.java" startline="27" endline="31">
public Object scan (ScanningSubject subject) {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/CommentFetcher.java" startline="22" endline="25">
public CommentFetcher (CommentsConfig commentsConfig) {
    this.commentsConfig = commentsConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/CommentFetcher.java" startline="27" endline="30">
public String getId () {
    return ID;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/CommentFetcher.java" startline="32" endline="35">
public Object scan (ScanningSubject subject) {
    return commentsConfig.getComment (subject.getAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherException.java" startline="18" endline="21">
public FetcherException (Throwable cause) {
    super (cause);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherException.java" startline="23" endline="26">
public FetcherException (String label, Throwable cause) {
    super (label, cause);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/FetcherException.java" startline="28" endline="31">
public FetcherException (String label) {
    super (label);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="46" endline="49">
public PortsFetcher (ScannerConfig scannerConfig) {
    this.config = scannerConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="51" endline="54">
public String getId () {
    return ID;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="56" endline="61">
@Override
public String getFullName () {
    int numPorts = new PortIterator (config.portString).size ();
    return getName () + " [" + numPorts + (config.useRequestedPorts ? "+" : "") + "]";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="63" endline="67">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PortsFetcherPrefs.class;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="75" endline="147">
@SuppressWarnings("unchecked")
protected boolean scanPorts (ScanningSubject subject) {
    SortedSet < Integer > openPorts = getOpenPorts (subject);
    if (openPorts == null) {
        openPorts = new TreeSet < Integer > ();
        SortedSet < Integer > filteredPorts = new TreeSet < Integer > ();
        subject.setParameter (PARAMETER_OPEN_PORTS, openPorts);
        subject.setParameter (PARAMETER_FILTERED_PORTS, filteredPorts);
        int portTimeout = subject.getAdaptedPortTimeout ();
        Socket socket = null;
        Iterator < Integer > portsIterator = portIteratorPrototype.copy ();
        if (config.useRequestedPorts && subject.isAnyPortRequested ()) {
            portsIterator = new SequenceIterator < Integer > (portsIterator, subject.requestedPortsIterator ());
        }
        if (! portsIterator.hasNext ()) {
            return false;
        }
        while (portsIterator.hasNext () && ! Thread.currentThread ().isInterrupted ()) {
            socket = new Socket ();
            int port = portsIterator.next ();
            try {
                socket.setReuseAddress (true);
                socket.setReceiveBufferSize (32);
                socket.connect (new InetSocketAddress (subject.getAddress (), port), portTimeout);
                socket.setSoLinger (true, 0);
                socket.setSendBufferSize (16);
                socket.setTcpNoDelay (true);
                if (socket.isConnected ()) {
                    openPorts.add (port);
                }
            } catch (SocketTimeoutException e) {
                filteredPorts.add (port);
            } catch (IOException e) {
                assert e instanceof ConnectException : e;
            } finally {
                try {
                    socket.close ();
                } catch (IOException e) {
                }
            }
        }
    }
    return true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="153" endline="157">
@SuppressWarnings("unchecked")
protected SortedSet < Integer > getFilteredPorts (ScanningSubject subject) {
    return (SortedSet < Integer >) subject.getParameter (PARAMETER_FILTERED_PORTS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="163" endline="167">
@SuppressWarnings("unchecked")
protected SortedSet < Integer > getOpenPorts (ScanningSubject subject) {
    return (SortedSet < Integer >) subject.getParameter (PARAMETER_OPEN_PORTS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="172" endline="185">
public Object scan (ScanningSubject subject) {
    boolean portsScanned = scanPorts (subject);
    if (! portsScanned) return NotScanned.VALUE;

    SortedSet < Integer > openPorts = getOpenPorts (subject);
    boolean portsFound = openPorts.size () > 0;
    if (portsFound) {
        subject.setResultType (ResultType.WITH_PORTS);
    }
    return portsFound ? new NumericRangeList (openPorts, displayAsRanges) : null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="187" endline="191">
public void init () {
    this.portIteratorPrototype = new PortIterator (config.portString);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/IPFetcher.java" startline="21" endline="24">
public String getId () {
    return ID;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/IPFetcher.java" startline="26" endline="29">
public Object scan (ScanningSubject subject) {
    return new InetAddressHolder (subject.getAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/WebDetectFetcher.java" startline="19" endline="22">
public WebDetectFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig, 80, "HEAD /robots.txt HTTP/1.0\r\n\r\n", "^[Ss]erver:\\s+(.*)$");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/WebDetectFetcher.java" startline="24" endline="27">
public String getId () {
    return "fetcher.webDetect";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/HTTPSenderFetcher.java" startline="19" endline="23">
public HTTPSenderFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig, 3128, "GET http://www.urbandplayground.com/?f=vote&band_id=150 HTTP/1.0\r\n\r\n", "\">([^>]+?VOT[^<]+?)</");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/HTTPSenderFetcher.java" startline="25" endline="28">
public String getId () {
    return "fetcher.httpSender";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="20" endline="23">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="25" endline="28">
public String getFullName () {
    return getName ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="30" endline="40">
public String getInfo () {
    try {
        return Labels.getLabel (getId () + ".info");
    } catch (MissingResourceException e) {
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="42" endline="46">
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="48" endline="51">
public void init () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="53" endline="56">
public void cleanup () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="19" endline="22">
public String getId () {
    return ID;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="24" endline="29">
public Object scan (ScanningSubject subject) {
    String hostname = subject.getAddress ().getCanonicalHostName ();
    return subject.getAddress ().getHostAddress ().equals (hostname) ? null : hostname;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="22" endline="25">
public PingTTLFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    super (pingerRegistry, scannerConfig);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="27" endline="30">
public String getId () {
    return "fetcher.ping.ttl";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="32" endline="37">
public Object scan (ScanningSubject subject) {
    PingResult result = executePing (subject);
    subject.setResultType (result.isAlive () ? ResultType.ALIVE : ResultType.DEAD);
    return result.isAlive () && result.getTTL () > 0 ? new Integer (result.getTTL ()) : null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="24" endline="27">
public Scanner (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="34" endline="57">
public void scan (ScanningSubject scanningSubject, ScanningResult result) {
    int fetcherIndex = 0;
    boolean isScanningInterrupted = false;
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        Object value = NotScanned.VALUE;
        if (! scanningSubject.isAddressAborted () && ! isScanningInterrupted) {
            value = fetcher.scan (scanningSubject);
            isScanningInterrupted = Thread.currentThread ().isInterrupted ();
            if (value == null) value = isScanningInterrupted ? NotScanned.VALUE : NotAvailable.VALUE;

        }
        result.setValue (fetcherIndex, value);
        fetcherIndex ++;
    }
    result.setType (scanningSubject.getResultType ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="62" endline="68">
public void init () {
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        fetcher.init ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="73" endline="79">
public void cleanup () {
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        fetcher.cleanup ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="51" endline="56">
public ScanningSubject (InetAddress address) {
    this.address = address;
    this.parameters = new HashMap < String, Object > ();
    this.config = Config.getConfig ().forScanner ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="58" endline="61">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="66" endline="69">
public void setParameter (String name, Object value) {
    parameters.put (name, value);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="75" endline="78">
public Object getParameter (String name) {
    return parameters.get (name);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="84" endline="87">
public boolean hasParameter (String name) {
    return parameters.containsKey (name);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="92" endline="95">
public ResultType getResultType () {
    return resultType;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="101" endline="104">
public void setResultType (ResultType resultType) {
    this.resultType = resultType;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="109" endline="112">
public boolean isAddressAborted () {
    return isAborted;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="117" endline="120">
public void abortAddressScanning () {
    this.isAborted = true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="122" endline="125">
public boolean isAnyPortRequested () {
    return requestedPorts != null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="130" endline="133">
public Iterator < Integer > requestedPortsIterator () {
    return requestedPorts == null ? null : requestedPorts.iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="138" endline="143">
public void addRequestedPort (Integer requestedPort) {
    if (requestedPorts == null) requestedPorts = new ArrayList < Integer > ();

    requestedPorts.add (requestedPort);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="148" endline="166">
public int getAdaptedPortTimeout () {
    if (adaptedPortTimeout > 0) return adaptedPortTimeout;

    PingResult pingResult = (PingResult) getParameter (PARAMETER_PING_RESULT);
    if (pingResult != null) {
        if (config.adaptPortTimeout && pingResult.isTimeoutAdaptationAllowed ()) {
            adaptedPortTimeout = Math.min (Math.max (pingResult.getLongestTime () * 3, config.minPortTimeout), config.portTimeout);
            return adaptedPortTimeout;
        }
    }
    return config.portTimeout;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="168" endline="181">
@Override
public String toString () {
    StringBuilder sb = new StringBuilder (address.getHostAddress ());
    if (requestedPorts != null) {
        sb.append (':');
        for (Integer port : requestedPorts) sb.append (port).append (',');

        if (sb.charAt (sb.length () - 1) == ',') sb.deleteCharAt (sb.length () - 1);

    }
    return sb.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="35" endline="38">
public ICMPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="40" endline="57">
private RawSocket createRawSocket () throws IOException {
    RawSocket socket = new RawSocket ();
    socket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    try {
        socket.setSendTimeout (timeout);
        socket.setReceiveTimeout (timeout);
    } catch (java.net.SocketException se) {
        socket.setUseSelectTimeout (true);
        socket.setSendTimeout (timeout);
        socket.setReceiveTimeout (timeout);
    }
    return socket;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="59" endline="120">
private void sendReceiveEchoPacket (RawSocket socket, InetAddress address, int sequence, PingResult result) throws IOException {
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    packet.setType (ICMPPacket.TYPE_ECHO_REQUEST);
    packet.setCode (0);
    packet.setIdentifier (hashCode () & 0xFFFF);
    packet.setSequenceNumber (sequence);
    int offset = packet.getIPHeaderByteLength ();
    int dataOffset = offset + packet.getICMPHeaderByteLength ();
    int length = packet.getICMPPacketByteLength ();
    OctetConverter.longToOctets (System.currentTimeMillis (), data, dataOffset);
    packet.computeICMPChecksum ();
    socket.write (address, data, offset, length);
    try {
        int skippedCount = 0;
        do {
            socket.read (address, data);
            skippedCount ++;
        } while (packet.getType () != ICMPPacket.TYPE_ECHO_REPLY || packet.getIdentifier () != (hashCode () & 0xFFFF) || packet.getSequenceNumber () != sequence);
        if (packet.getSourceAsInetAddress ().equals (address)) {
            long end = System.currentTimeMillis ();
            long start = OctetConverter.octetsToLong (data, dataOffset);
            long time = end - start;
            result.addReply (time);
            result.setTTL (packet.getTTL () & 0xFF);
        }
    } catch (InterruptedIOException e) {
        LOG.finer ("Receive timeout");
    } catch (UnknownHostException e) {
        LOG.log (Level.WARNING, "Cannot retrieve the source address of an ICMP packet", e);
    } catch (IOException e) {
        LOG.log (Level.WARNING, "Unable to read from the socket", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="129" endline="156">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    RawSocket socket = createRawSocket ();
    try {
        for (int i = 0;
        i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
            try {
                sendReceiveEchoPacket (socket, subject.getAddress (), i, result);
            } catch (InterruptedIOException e) {
            }
        }
    } finally {
        socket.close ();
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="158" endline="160">
public void close () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="33" endline="37">
public TCPPinger (int timeout) {
    this.timeout = timeout + timeout / 2;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="39" endline="112">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    int workingPort = - 1;
    for (int i = 0;
    i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
        Socket socket = new Socket ();
        long startTime = System.currentTimeMillis ();
        try {
            int probePort = workingPort >= 0 ? workingPort : PROBE_TCP_PORTS [i % PROBE_TCP_PORTS.length];
            if (i == 0 && subject.isAnyPortRequested ()) {
                probePort = subject.requestedPortsIterator ().next ();
            }
            socket.setReuseAddress (true);
            socket.setReceiveBufferSize (32);
            socket.connect (new InetSocketAddress (subject.getAddress (), probePort), timeout);
            if (socket.isConnected ()) {
                success (result, startTime);
                workingPort = probePort;
            }
        } catch (SocketTimeoutException e) {
        } catch (NoRouteToHostException e) {
            break;
        } catch (IOException e) {
            String msg = e.getMessage ();
            if (msg.contains ("refused")) {
                success (result, startTime);
            } else if (msg.contains ("route to host") || msg.contains ("down") || msg.contains ("unreachable")) {
                break;
            } else {
                LOG.log (Level.FINER, subject.toString (), e);
            }

        } finally {
            try {
                socket.close ();
            } catch (Exception e) {
            }
        }
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="114" endline="119">
private void success (PingResult result, long startTime) {
    result.addReply (System.currentTimeMillis () - startTime);
    result.enableTimeoutAdaptation ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="121" endline="124">
public void close () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="36" endline="51">
public PingerRegistryImpl (ScannerConfig scannerConfig) {
    this.scannerConfig = scannerConfig;
    pingers = new LinkedHashMap < String, Class < ? extends Pinger > > ();
    if (Platform.WINDOWS && ! Platform.ARCH_64) {
        pingers.put ("pinger.windows", WindowsPinger.class);
    }
    pingers.put ("pinger.icmp", ICMPSharedPinger.class);
    pingers.put ("pinger.icmp2", ICMPPinger.class);
    pingers.put ("pinger.udp", UDPPinger.class);
    pingers.put ("pinger.tcp", TCPPinger.class);
    pingers.put ("pinger.combined", CombinedUnprivilegedPinger.class);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="53" endline="56">
public String [] getRegisteredNames () {
    return pingers.keySet ().toArray (new String [pingers.size ()]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="61" endline="64">
public Pinger createPinger () throws FetcherException {
    return createPinger (scannerConfig.selectedPinger, scannerConfig.pingTimeout);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="69" endline="87">
Pinger createPinger (String pingerName, int timeout) throws FetcherException {
    Class < ? extends Pinger > pingerClass = pingers.get (pingerName);
    Constructor < ? extends Pinger > constructor;
    try {
        constructor = pingerClass.getConstructor (new Class [] {int.class});
        return constructor.newInstance (new Object [] {new Integer (timeout)});
    } catch (Exception e) {
        Throwable t = e instanceof InvocationTargetException ? e.getCause () : e;
        String message = "Unable to create pinger: " + pingerName;
        LOG.log (Level.SEVERE, message, t);
        if (t instanceof RuntimeException) throw (RuntimeException) t;

        throw new FetcherException ("pingerCreateFailure");
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingerRegistryImpl.java" startline="89" endline="109">
public boolean checkSelectedPinger () {
    if (scannerConfig.selectedPinger.startsWith ("pinger.icmp")) {
        try {
            Pinger icmpPinger = createPinger (scannerConfig.selectedPinger, 250);
            icmpPinger.ping (new ScanningSubject (InetAddress.getLocalHost ()), 1);
        } catch (Exception e) {
            LOG.info ("ICMP pinger failed: " + e);
            scannerConfig.selectedPinger = Platform.WINDOWS && ! Platform.ARCH_64 ? "pinger.windows" : "pinger.combined";
            return false;
        }
    }
    return true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/UDPPinger.java" startline="34" endline="37">
public UDPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/UDPPinger.java" startline="39" endline="85">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    DatagramSocket socket = new DatagramSocket ();
    socket.setSoTimeout (timeout);
    socket.connect (subject.getAddress (), PROBE_UDP_PORT);
    for (int i = 0;
    i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
        DatagramPacket packet = new DatagramPacket (new byte [] {}, 0);
        long startTime = System.currentTimeMillis ();
        try {
            socket.send (packet);
            socket.receive (packet);
        } catch (PortUnreachableException e) {
            result.addReply (System.currentTimeMillis () - startTime);
        } catch (SocketTimeoutException e) {
        } catch (NoRouteToHostException e) {
            break;
        } catch (SocketException e) {
            if (e.getMessage ().contains ("route to host")) {
                break;
            }
        } catch (IOException e) {
            LOG.log (Level.FINER, subject.toString (), e);
        }
    }
    socket.close ();
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/UDPPinger.java" startline="87" endline="90">
public void close () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="26" endline="29">
public PingResult (InetAddress address) {
    this.address = address;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="31" endline="39">
public void addReply (long time) {
    replyCount ++;
    if (time > longestTime) longestTime = time;

    totalTime += time;
    timeoutAdaptationAllowed = replyCount > 2;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="41" endline="44">
public int getTTL () {
    return ttl;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="46" endline="49">
public void setTTL (int ttl) {
    this.ttl = ttl;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="51" endline="54">
public int getAverageTime () {
    return (int) (totalTime / replyCount);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="56" endline="59">
public int getLongestTime () {
    return (int) longestTime;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="61" endline="64">
public int getReplyCount () {
    return replyCount;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="69" endline="72">
public boolean isAlive () {
    return replyCount > 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="74" endline="78">
public void enableTimeoutAdaptation () {
    if (isAlive ()) timeoutAdaptationAllowed = true;

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="80" endline="83">
public boolean isTimeoutAdaptationAllowed () {
    return timeoutAdaptationAllowed;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="29" endline="43">
public WindowsPinger (int timeout) {
    this.timeout = timeout;
    if (dll == null) {
        try {
            dll = (IcmpDll) Native.loadLibrary ("iphlpapi", IcmpDll.class);
        } catch (UnsatisfiedLinkError e) {
            dll = (IcmpDll) Native.loadLibrary ("icmp", IcmpDll.class);
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="45" endline="81">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    byte [] pingData = new byte [56];
    byte [] replyData = new byte [56 + 100];
    int handle = dll.IcmpCreateFile ();
    if (handle < 0) {
        throw new IOException ("Unable to create Windows native ICMP handle");
    }
    try {
        for (int i = 1;
        i <= count && ! Thread.currentThread ().isInterrupted (); i ++) {
            if (dll.IcmpSendEcho (handle, subject.getAddress ().getAddress (), pingData, pingData.length, 0, replyData, replyData.length, timeout) > 0) {
                int status = replyData [4] + (replyData [5] << 8) + (replyData [6] << 16) + (replyData [7] << 24);
                if (status == 0) {
                    int roundTripTime = replyData [8] + (replyData [9] << 8) + (replyData [10] << 16) + (replyData [11] << 24);
                    int timeToLive = replyData [20] & 0xFF;
                    result.addReply (roundTripTime);
                    result.setTTL (timeToLive);
                }
            }
        }
    } finally {
        dll.IcmpCloseHandle (handle);
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="83" endline="86">
public void close () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="106" endline="110">
public static void main (String [] args) throws IOException {
    PingResult ping = new WindowsPinger (2000).ping (new ScanningSubject (InetAddress.getLocalHost ()), 1);
    System.out.println (ping.getAverageTime ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="48" endline="75">
public ICMPSharedPinger (int timeout) throws IOException {
    sendingSocket = new RawSocket ();
    sendingSocket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    receivingSocket = new RawSocket ();
    receivingSocket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    this.timeout = timeout;
    try {
        sendingSocket.setSendTimeout (timeout);
        receivingSocket.setReceiveTimeout (timeout);
    } catch (java.net.SocketException se) {
        sendingSocket.setUseSelectTimeout (true);
        receivingSocket.setUseSelectTimeout (true);
        sendingSocket.setSendTimeout (timeout);
        receivingSocket.setReceiveTimeout (timeout);
    }
    receiverThread = new PacketReceiverThread ();
    receiverThread.start ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="77" endline="84">
public void close () throws IOException {
    synchronized (sendingSocket) {
        sendingSocket.close ();
    }
    receiverThread.interrupt ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="86" endline="166">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    InetAddress address = subject.getAddress ();
    PingResult result = new PingResult (address);
    results.put (address, result);
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    packet.setType (ICMPPacket.TYPE_ECHO_REQUEST);
    packet.setCode (0);
    packet.setIdentifier (hashCode () & 0xFFFF);
    try {
        for (int i = 1;
        i <= count && ! Thread.currentThread ().isInterrupted (); i ++) {
            packet.setSequenceNumber (i);
            int offset = packet.getIPHeaderByteLength ();
            timeOffsetInPacket = offset + packet.getICMPHeaderByteLength ();
            int length = packet.getICMPPacketByteLength ();
            OctetConverter.longToOctets (System.currentTimeMillis (), data, timeOffsetInPacket);
            packet.computeICMPChecksum ();
            if (LOG.isLoggable (Level.FINEST)) {
                LOG.finest ("Pinging " + i + result.address);
            }
            synchronized (sendingSocket) {
                sendingSocket.write (result.address, data, offset, length);
            }
            try {
                Thread.sleep (15);
            } catch (InterruptedException e) {
                Thread.currentThread ().interrupt ();
            }
        }
        int totalTimeout = timeout * count;
        while (totalTimeout > 0 && result.getReplyCount () < count) {
            if (LOG.isLoggable (Level.FINEST)) {
                LOG.finest ("Waiting for response " + address + ": " + totalTimeout);
            }
            synchronized (result) {
                try {
                    result.wait (timeout);
                } catch (InterruptedException e) {
                }
            }
            totalTimeout -= timeout;
        }
        return result;
    } finally {
        results.remove (address);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="174" endline="179">
public PacketReceiverThread () {
    super ("Ping packet receiver");
    setDaemon (true);
    setPriority (Thread.MAX_PRIORITY);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="181" endline="279">
public void run () {
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    InetAddress tmpAddress = null;
    try {
        tmpAddress = InetAddress.getLocalHost ();
    } catch (UnknownHostException e) {
        LOG.log (Level.SEVERE, null, e);
    }
    try {
        receivingSocket.write (tmpAddress, data);
    } catch (IOException e) {
        LOG.log (Level.WARNING, "Sending of test packet failed", e);
    }
    do {
        try {
            receivingSocket.read (tmpAddress, data);
            if (packet.getType () == ICMPPacket.TYPE_ECHO_REPLY && packet.getIdentifier () == (ICMPSharedPinger.this.hashCode () & 0xFFFF) && packet.getSequenceNumber () > 0) {
                long endTime = System.currentTimeMillis ();
                PingResult result = results.get (packet.getSourceAsInetAddress ());
                if (result == null) {
                    LOG.warning ("ICMP packet received from an unknown address: " + packet.getSourceAsInetAddress ());
                    continue;
                }
                long startTime = OctetConverter.octetsToLong (data, timeOffsetInPacket);
                long time = endTime - startTime;
                if (LOG.isLoggable (Level.FINEST)) {
                    LOG.finest ("Received " + packet.getSequenceNumber () + packet.getSourceAsInetAddress () + ": " + time);
                }
                result.addReply (time);
                result.setTTL (packet.getTTL () & 0xFF);
                synchronized (result) {
                    result.notifyAll ();
                }
            } else if (packet.getType () == ICMPPacket.TYPE_HOST_UNREACHABLE) {
            }

        } catch (InterruptedIOException e) {
            LOG.finer ("Receive timeout");
        } catch (UnknownHostException e) {
            LOG.log (Level.WARNING, "Cannot retrieve the source address of an ICMP packet", e);
        } catch (IOException e) {
            LOG.log (Level.WARNING, "Unable to read from the socket", e);
        }
    } while (! interrupted ());
    try {
        receivingSocket.close ();
    } catch (IOException e) {
    }
    LOG.fine ("Terminated");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="25" endline="29">
public CombinedUnprivilegedPinger (int timeout) {
    udpPinger = new UDPPinger (timeout);
    tcpPinger = new TCPPinger (timeout);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="31" endline="41">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = udpPinger.ping (subject, count);
    if (! result.isAlive ()) {
        result = tcpPinger.ping (subject, count);
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="43" endline="47">
public void close () throws IOException {
    udpPinger.close ();
    tcpPinger.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultComparator.java" startline="19" endline="60">
@SuppressWarnings("unchecked")
public int compare (ScanningResult r1, ScanningResult r2) {
    Object val1 = r1.getValues ().get (index);
    Object val2 = r2.getValues ().get (index);
    if (val1 == null) val1 = NotAvailable.VALUE;

    if (val2 == null) val2 = NotAvailable.VALUE;

    int result;
    if (val1 == val2) {
        result = 0;
    } else if (val1.getClass () == val2.getClass () && ! (val1 instanceof String) && val1 instanceof Comparable) {
        result = ((Comparable) val1).compareTo (val2);
    } else {
        if (val1 instanceof Empty) result = ((Empty) val1).compareTo (val2);
        else if (val2 instanceof Empty) result = - ((Empty) val2).compareTo (val1);
        else {
            result = val1.toString ().compareToIgnoreCase (val2.toString ());
        }

    }

    if (result == 0 && index != 0) {
        result = ((Comparable) r1.getValues ().get (0)).compareTo (r2.getValues ().get (0));
    }
    return result * (ascending ? 1 : - 1);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultComparator.java" startline="62" endline="69">
public void byIndex (int index, boolean ascending) {
    this.index = index;
    this.ascending = ascending;
    Empty.setSortDirection (ascending);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThreadFactory.java" startline="27" endline="33">
public ScannerDispatcherThreadFactory (ScanningResultList scanningResults, Scanner scanner, StateMachine stateMachine, ScannerConfig scannerConfig) {
    this.scanningResults = scanningResults;
    this.scanner = scanner;
    this.stateMachine = stateMachine;
    this.scannerConfig = scannerConfig;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThreadFactory.java" startline="35" endline="38">
public ScannerDispatcherThread createScannerThread (Feeder feeder, ScanningProgressCallback progressCallback, ScanningResultCallback resultsCallback) {
    return new ScannerDispatcherThread (feeder, scanner, stateMachine, progressCallback, scanningResults, scannerConfig, resultsCallback);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="53" endline="56">
public ScanningResultList (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="58" endline="62">
public ScanningResultList (FetcherRegistry fetcherRegistry, StateMachine stateMachine) {
    this (fetcherRegistry);
    stateMachine.addTransitionListener (new StopScanningListener ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="68" endline="71">
public List < Fetcher > getFetchers () {
    return selectedFetchers;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="76" endline="79">
public boolean areResultsAvailable () {
    return ! resultList.isEmpty ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="84" endline="87">
public boolean isInfoAvailable () {
    return info != null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="92" endline="95">
public String getFeederInfo () {
    return feederInfo;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="100" endline="103">
public String getFeederName () {
    return feederName;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="110" endline="119">
public synchronized ScanningResult createResult (InetAddress address) {
    info.numScanned ++;
    Integer index = resultIndexes.get (address);
    if (index == null) {
        return new ScanningResult (address, fetcherRegistry.getSelectedFetchers ().size ());
    }
    return resultList.get (index);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="128" endline="140">
public synchronized void registerAtIndex (int index, ScanningResult result) {
    if (resultIndexes.put (result.getAddress (), index) != null) throw new IllegalStateException (result.getAddress () + " is already registered in the list");

    result.resultList = this;
    resultList.add (index, result);
    if (result.isReady ()) updateStatistics (result);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="145" endline="148">
public synchronized boolean isRegistered (ScanningResult result) {
    return resultIndexes.containsKey (result.getAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="154" endline="161">
public synchronized int update (ScanningResult result) {
    if (result.isReady ()) updateStatistics (result);

    return resultIndexes.get (result.getAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="166" endline="172">
public synchronized void clear () {
    resultList.clear ();
    resultIndexes.clear ();
    selectedFetchers = null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="178" endline="187">
public synchronized void initNewScan (Feeder feeder) {
    selectedFetchers = new ArrayList < Fetcher > (fetcherRegistry.getSelectedFetchers ());
    this.feederInfo = feeder.getInfo ();
    this.feederName = feeder.getName ();
    this.info = new ScanInfo ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="192" endline="195">
public ScanInfo getScanInfo () {
    return info;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="202" endline="205">
public synchronized Iterator < ScanningResult > iterator () {
    return resultList.iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="211" endline="214">
public synchronized ScanningResult getResult (int index) {
    return resultList.get (index);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="220" endline="236">
public synchronized void remove (int [] indices) {
    List < ScanningResult > newList = new ArrayList < ScanningResult > (RESULT_LIST_INITIAL_SIZE);
    Map < InetAddress, Integer > newMap = new HashMap < InetAddress, Integer > (RESULT_LIST_INITIAL_SIZE);
    for (int i = 0;
    i < resultList.size (); i ++) {
        if (Arrays.binarySearch (indices, i) < 0) {
            newList.add (resultList.get (i));
            newMap.put (resultList.get (i).getAddress (), newList.size () - 1);
        }
    }
    resultList = newList;
    resultIndexes = newMap;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="243" endline="255">
public synchronized void sort (int columnIndex, boolean ascending) {
    resultsComparator.byIndex (columnIndex, ascending);
    Collections.sort (resultList, resultsComparator);
    resultIndexes = new HashMap < InetAddress, Integer > (RESULT_LIST_INITIAL_SIZE);
    for (int i = 0;
    i < resultList.size (); i ++) {
        resultIndexes.put (resultList.get (i).getAddress (), i);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="263" endline="280">
public int findText (String text, int startIndex) {
    text = text.toLowerCase ();
    for (int i = startIndex;
    i < resultList.size (); i ++) {
        ScanningResult scanningResult = getResult (i);
        for (Object value : scanningResult.getValues ()) {
            if (value != null && value.toString ().toLowerCase ().contains (text)) {
                return i;
            }
        }
    }
    return - 1;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="282" endline="293">
private void updateStatistics (ScanningResult result) {
    if (result.getType () == ResultType.ALIVE) {
        info.numAlive ++;
    } else if (result.getType () == ResultType.WITH_PORTS) {
        info.numAlive ++;
        info.numWithPorts ++;
    }

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="314" endline="320">
public long getScanTime () {
    long endTime = this.endTime;
    if (endTime == 0) endTime = System.currentTimeMillis ();

    return endTime - startTime;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="325" endline="328">
public int getHostCount () {
    return numScanned;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="333" endline="336">
public int getAliveCount () {
    return numAlive;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="341" endline="344">
public int getWithPortsCount () {
    return numWithPorts;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="349" endline="352">
public boolean isCompletedNormally () {
    return scanFinished && ! scanAborted;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="357" endline="371">
public void transitionTo (ScanningState state, Transition transition) {
    synchronized (ScanningResultList.this) {
        if (transition == Transition.COMPLETE && state == ScanningState.IDLE) {
            info.endTime = System.currentTimeMillis ();
            info.scanFinished = true;
        } else if (state == ScanningState.KILLING) {
            info.scanAborted = true;
        }

    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/plugins/PluginLoader.java" startline="12" endline="31">
public void addTo (MutablePicoContainer container) {
    String plugins = System.getProperty ("ipscan.plugins");
    if (plugins != null) {
        String [] classes = plugins.split ("\\s*,\\s*");
        for (String className : classes) {
            try {
                Class clazz = Class.forName (className);
                container.registerComponentImplementation (clazz);
            } catch (ClassNotFoundException e) {
                LOG.warning ("Unable to load plugin: " + className);
            }
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="27" endline="32">
public boolean matches (ResultType that) {
    if (this.ordinal () <= DEAD.ordinal ()) return that.ordinal () <= DEAD.ordinal ();

    return this.ordinal () <= that.ordinal ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="51" endline="57">
ScanningResult (InetAddress address, int numberOfFetchers) {
    this.address = address;
    values = new Object [numberOfFetchers];
    values [0] = address.getHostAddress ();
    type = ResultType.UNKNOWN;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="63" endline="68">
public void reset () {
    values = new Object [values.length];
    values [0] = address.getHostAddress ();
    type = ResultType.UNKNOWN;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="70" endline="73">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="78" endline="81">
public boolean isReady () {
    return type != ResultType.UNKNOWN;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="86" endline="89">
public List < Object > getValues () {
    return Arrays.asList (values);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="94" endline="97">
void setType (ResultType type) {
    this.type = type;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="102" endline="105">
public ResultType getType () {
    return type;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="112" endline="115">
public void setValue (int fetcherIndex, Object value) {
    values [fetcherIndex] = value;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="124" endline="141">
public String toString () {
    String newLine = System.getProperty ("line.separator");
    StringBuffer details = new StringBuffer (1024);
    Iterator < ? > iterator = getValues ().iterator ();
    List < Fetcher > fetchers = resultList.getFetchers ();
    for (int i = 0;
    iterator.hasNext (); i ++) {
        String fetcherName = fetchers.get (i).getName ();
        details.append (fetcherName).append (":\t");
        Object value = iterator.next ();
        details.append (value != null ? value : "");
        details.append (newLine);
    }
    return details.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/ScanningState.java" startline="29" endline="46">
ScanningState next () {
    switch (this) {
        case IDLE :
            return STARTING;
        case STARTING :
            return SCANNING;
        case SCANNING :
            return STOPPING;
        case STOPPING :
            return KILLING;
        case RESTARTING :
            return SCANNING;
        default :
            return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="35" endline="38">
public boolean inState (ScanningState state) {
    return this.state == state;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="43" endline="46">
public ScanningState getState () {
    return state;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="52" endline="63">
public void addTransitionListener (StateTransitionListener listener) {
    try {
        listenersLock.writeLock ().lock ();
        transitionListeners.add (listener);
    } finally {
        listenersLock.writeLock ().unlock ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="69" endline="80">
public void removeTransitionListener (StateTransitionListener listener) {
    try {
        listenersLock.writeLock ().lock ();
        transitionListeners.remove (listener);
    } finally {
        listenersLock.writeLock ().unlock ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="87" endline="94">
void transitionTo (ScanningState newState, Transition transition) {
    if (state != newState) {
        state = newState;
        notifyAboutTransition (transition);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="96" endline="110">
protected void notifyAboutTransition (Transition transition) {
    try {
        listenersLock.readLock ().lock ();
        for (StateTransitionListener listener : transitionListeners) {
            listener.transitionTo (state, transition);
        }
    } finally {
        listenersLock.readLock ().unlock ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="116" endline="123">
public void transitionToNext () {
    if (state != ScanningState.KILLING) {
        transitionTo (state.next (), Transition.NEXT);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="128" endline="143">
public void stop () {
    if (state == ScanningState.SCANNING) {
        transitionTo (ScanningState.STOPPING, Transition.STOP);
    } else if (state == ScanningState.STOPPING) {
        notifyAboutTransition (Transition.STOP);
    } else {
        throw new IllegalStateException ("Attempt to stop from " + state);
    }

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="148" endline="158">
public void complete () {
    if (state == ScanningState.STOPPING || state == ScanningState.KILLING) {
        transitionTo (ScanningState.IDLE, Transition.COMPLETE);
    } else {
        throw new IllegalStateException ("Attempt to complete from " + state);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="163" endline="173">
public void rescan () {
    if (state == ScanningState.IDLE) {
        transitionTo (ScanningState.RESTARTING, Transition.RESCAN);
    } else {
        throw new IllegalStateException ("Attempt to rescan from " + state);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="178" endline="188">
public void startScanning () {
    if (state == ScanningState.STARTING || state == ScanningState.RESTARTING) {
        transitionTo (ScanningState.SCANNING, Transition.START);
    } else {
        throw new IllegalStateException ("Attempt to go scanning from " + state);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="193" endline="197">
public void init () {
    state = ScanningState.IDLE;
    notifyAboutTransition (Transition.INIT);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="202" endline="206">
public void reset () {
    state = ScanningState.IDLE;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="33" endline="61">
public PortIterator (String portString) {
    if (portString != null && (portString = portString.trim ()).length () > 0) {
        String [] portRanges = portString.split ("[\\s\t\n\r,;]+");
        portRangeStart = new int [portRanges.length + 1];
        portRangeEnd = new int [portRanges.length];
        for (int i = 0;
        i < portRanges.length; i ++) {
            String range = portRanges [i];
            int dashPos = range.indexOf ('-') + 1;
            int endPort = Integer.parseInt (range.substring (dashPos));
            portRangeEnd [i] = endPort;
            portRangeStart [i] = dashPos == 0 ? endPort : Integer.parseInt (range.substring (0, dashPos - 1));
            if (endPort <= 0 || endPort >= 65536) {
                throw new NumberFormatException (endPort + " port is out of range");
            }
        }
        currentPort = portRangeStart [0];
        rangeCountMinus1 = portRanges.length - 1;
        hasNext = rangeCountMinus1 >= 0;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="66" endline="69">
public boolean hasNext () {
    return hasNext;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="74" endline="86">
public Integer next () {
    int returnPort = currentPort ++;
    if (currentPort > portRangeEnd [rangeIndex]) {
        hasNext = rangeIndex < rangeCountMinus1;
        rangeIndex ++;
        currentPort = portRangeStart [rangeIndex];
    }
    return returnPort;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="88" endline="99">
public int size () {
    int size = 0;
    if (portRangeStart != null) {
        for (int i = 0;
        i <= rangeCountMinus1; i ++) {
            size += portRangeEnd [i] - portRangeStart [i] + 1;
        }
    }
    return size;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="105" endline="116">
public PortIterator copy () {
    try {
        return (PortIterator) super.clone ();
    } catch (CloneNotSupportedException e) {
        assert false : "this should never happen";
        return null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="118" endline="121">
public void remove () {
    throw new UnsupportedOperationException ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="45" endline="75">
public ScannerDispatcherThread (Feeder feeder, Scanner scanner, StateMachine stateMachine, ScanningProgressCallback progressCallback, ScanningResultList scanningResults, ScannerConfig scannerConfig, ScanningResultCallback resultsCallback) {
    setName (getClass ().getSimpleName ());
    this.config = scannerConfig;
    this.stateMachine = stateMachine;
    this.progressCallback = progressCallback;
    this.resultsCallback = resultsCallback;
    this.threadGroup = new ThreadGroup (getName ());
    this.threadPool = Executors.newFixedThreadPool (config.maxThreads, this);
    setDaemon (true);
    this.feeder = feeder;
    this.scanner = scanner;
    this.scanningResultList = scanningResults;
    try {
        this.scanningResultList.initNewScan (feeder);
        scanner.init ();
    } catch (RuntimeException e) {
        stateMachine.reset ();
        throw e;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="77" endline="157">
public void run () {
    try {
        stateMachine.addTransitionListener (this);
        long lastNotifyTime = 0;
        try {
            ScanningSubject subject = null;
            while (feeder.hasNext () && stateMachine.inState (ScanningState.SCANNING)) {
                Thread.sleep (config.threadDelay);
                if ((numActiveThreads.intValue () < config.maxThreads)) {
                    subject = feeder.next ();
                    if (config.skipBroadcastAddresses && InetAddressUtils.isLikelyBroadcast (subject.getAddress ())) {
                        continue;
                    }
                    ScanningResult result = scanningResultList.createResult (subject.getAddress ());
                    resultsCallback.prepareForResults (result);
                    AddressScannerTask scanningTask = new AddressScannerTask (subject, result);
                    threadPool.execute (scanningTask);
                }
                long now = System.currentTimeMillis ();
                if (now - lastNotifyTime >= UI_UPDATE_INTERVAL_MS) {
                    lastNotifyTime = now;
                    progressCallback.updateProgress (subject.getAddress (), numActiveThreads.intValue (), feeder.percentageComplete ());
                }
            }
        } catch (InterruptedException e) {
        }
        stateMachine.stop ();
        threadPool.shutdown ();
        try {
            while (! threadPool.awaitTermination (UI_UPDATE_INTERVAL_MS, TimeUnit.MILLISECONDS)) {
                progressCallback.updateProgress (null, numActiveThreads.intValue (), 100);
            }
        } catch (InterruptedException e) {
        }
        scanner.cleanup ();
        stateMachine.complete ();
    } finally {
        stateMachine.removeTransitionListener (this);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="163" endline="170">
public void transitionTo (ScanningState state, Transition transition) {
    if (state == ScanningState.KILLING) {
        threadGroup.interrupt ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="175" endline="183">
public Thread newThread (Runnable r) {
    Thread thread = new Thread (threadGroup, r);
    thread.setDaemon (true);
    return thread;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="194" endline="199">
AddressScannerTask (ScanningSubject subject, ScanningResult result) {
    this.subject = subject;
    this.result = result;
    numActiveThreads.incrementAndGet ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="201" endline="215">
public void run () {
    Thread.currentThread ().setName (getClass ().getSimpleName () + ": " + subject);
    try {
        scanner.scan (subject, result);
        resultsCallback.consumeResults (result);
    } finally {
        numActiveThreads.decrementAndGet ();
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="22" endline="26">
public InetAddressHolder (InetAddress address) {
    s = address.getHostAddress ();
    a = address.getAddress ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="28" endline="45">
public int compareTo (InetAddressHolder that) {
    byte [] b1 = this.a;
    byte [] b2 = that.a;
    for (int i = 0;
    i < b1.length; i ++) {
        if (b1 [i] == b2 [i]) continue;
        else if ((b1 [i] & 0xFF) > (b2 [i] & 0xFF)) return 1;
        else return - 1;

    }
    return 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="47" endline="51">
@Override
public String toString () {
    return s;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="53" endline="57">
@Override
public int hashCode () {
    return s.hashCode ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="59" endline="77">
@Override
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    final InetAddressHolder other = (InetAddressHolder) obj;
    if (s == null) {
        if (other.s != null) return false;

    } else if (! s.equals (other.s)) return false;

    return true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NotAvailable.java" startline="18" endline="18">
private NotAvailable () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NotAvailable.java" startline="23" endline="26">
public String toString () {
    return Config.getConfig ().forScanner ().notAvailableText;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NotAvailable.java" startline="28" endline="35">
@Override
public int compareTo (Object that) {
    if (that == NotScanned.VALUE) return - sortDirection;

    return super.compareTo (that);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/Empty.java" startline="25" endline="28">
public static void setSortDirection (boolean ascending) {
    Empty.sortDirection = ascending ? 1 : - 1;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/Empty.java" startline="30" endline="36">
public int compareTo (Object that) {
    if (this == that) return 0;

    return sortDirection;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NumericRangeList.java" startline="32" endline="43">
public NumericRangeList (Collection < Integer > numbers, boolean displayAsRanges) {
    this.numbers = new int [numbers.size ()];
    int c = 0;
    for (Number n : numbers) {
        this.numbers [c ++] = n.intValue ();
    }
    this.displayAsRanges = displayAsRanges;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NumericRangeList.java" startline="48" endline="94">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    int prevNumber = Integer.MAX_VALUE;
    int rangeStartNumber = 0;
    boolean isRange = false;
    int i = 0;
    if (numbers.length > 0) {
        prevNumber = numbers [0];
        sb.append (prevNumber);
    }
    while (++ i < numbers.length) {
        int curNumber = numbers [i];
        if (displayAsRanges && prevNumber + 1 == curNumber) {
            if (! isRange) {
                isRange = true;
                rangeStartNumber = prevNumber;
            }
        } else {
            if (isRange) {
                sb.append (rangeStartNumber + 1 == prevNumber ? ',' : '-').append (prevNumber);
                isRange = false;
            }
            sb.append (',').append (curNumber);
        }
        prevNumber = curNumber;
    }
    if (isRange) {
        sb.append (rangeStartNumber + 1 == prevNumber ? ',' : '-').append (prevNumber);
    }
    return sb.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NumericRangeList.java" startline="96" endline="109">
public int compareTo (NumericRangeList that) {
    int result = this.numbers.length - that.numbers.length;
    if (result == 0) {
        for (int i = 0;
        i < this.numbers.length && result == 0; i ++) {
            result = this.numbers [i] - that.numbers [i];
        }
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NotScanned.java" startline="18" endline="18">
private NotScanned () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NotScanned.java" startline="23" endline="26">
public String toString () {
    return Config.getConfig ().forScanner ().notScannedText;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/NotScanned.java" startline="28" endline="35">
@Override
public int compareTo (Object that) {
    if (that == NotAvailable.VALUE) return sortDirection;

    return super.compareTo (that);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="22" endline="26">
public IntegerWithUnit (int value, String unitLabel) {
    this.value = value;
    this.unitLabel = unitLabel;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="28" endline="31">
public int intValue () {
    return value;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="33" endline="36">
public String toString () {
    return value + Labels.getLabel ("unit." + unitLabel);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="38" endline="41">
public int hashCode () {
    return value;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="43" endline="52">
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (obj instanceof IntegerWithUnit) return value == ((IntegerWithUnit) obj).value;

    return false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="54" endline="61">
public int compareTo (IntegerWithUnit n) {
    if (this == n) return 0;

    if (n == null) return 1;

    return value == n.value ? 0 : value > n.value ? 1 : - 1;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/LibraryLoader.java" startline="23" endline="59">
public static void loadLibrary (String library) {
    String filename = System.mapLibraryName (library);
    String fullFilename = System.getProperty ("java.io.tmpdir") + System.getProperty ("file.separator") + filename;
    try {
        System.load (fullFilename);
    } catch (UnsatisfiedLinkError err2) {
        try {
            InputStream is = LibraryLoader.class.getClassLoader ().getResourceAsStream (filename);
            if (is == null) {
                throw new IOException (filename + " not found in the jar file (classpath)");
            }
            byte [] buffer = new byte [4096];
            OutputStream os = new FileOutputStream (fullFilename);
            int read;
            while ((read = is.read (buffer)) != - 1) {
                os.write (buffer, 0, read);
            }
            os.close ();
            is.close ();
            new File (fullFilename).setExecutable (true, false);
            System.load (fullFilename);
        } catch (IOException ioe) {
            throw new RuntimeException ("Unable to extract native library: " + library, ioe);
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/UserErrorException.java" startline="21" endline="24">
public UserErrorException (String label) {
    super (Labels.getLabel ("exception.UserErrorException." + label));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/UserErrorException.java" startline="26" endline="30">
public UserErrorException (String label, Throwable cause) {
    this (label);
    initCause (cause);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src/net/azib/ipscan/core/UserErrorException.java" startline="32" endline="35">
public UserErrorException (String label, String rawInfo) {
    super (Labels.getLabel ("exception.UserErrorException." + label) + rawInfo);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="43" endline="49">
public MacApplicationMenu (AboutDialog aboutDialog, PreferencesDialog preferencesDialog, SelectFetchersDialog selectFetchersDialog, CheckVersion checkVersionListener) {
    this.aboutDialog = aboutDialog;
    this.preferencesDialog = preferencesDialog;
    this.selectFetchersDialog = selectFetchersDialog;
    this.checkVersionListener = checkVersionListener;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="51" endline="61">
public void start () {
    final Display display = Display.getDefault ();
    display.syncExec (new Runnable () {
        public void run () {
            hookApplicationMenu (display);
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="56" endline="59">
public void run () {
    hookApplicationMenu (display);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="63" endline="65">
public void stop () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="72" endline="164">
public void hookApplicationMenu (final Display display) {
    Object target = new Object () {
        @SuppressWarnings("unused")
        int commandProc (int nextHandler, int theEvent, int userData) {
            if (OS.GetEventKind (theEvent) == OS.kEventProcessCommand) {
                HICommand command = new HICommand ();
                OS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeHICommand, null, HICommand.sizeof, null, command);
                switch (command.commandID) {
                    case kHICommandPreferences :
                        preferencesDialog.open ();
                        return OS.noErr;
                    case kHICommandFetchers :
                        selectFetchersDialog.open ();
                        return OS.noErr;
                    case kHICommandAbout :
                        aboutDialog.open ();
                        return OS.noErr;
                    case kHICommandCheckVersion :
                        checkVersionListener.check ();
                        return OS.noErr;
                }
            }
            return OS.eventNotHandledErr;
        }}

    ;
    final Callback commandCallback = new Callback (target, "commandProc", 3);
    long commandProc = commandCallback.getAddress ();
    if (commandProc == 0) {
        commandCallback.dispose ();
        return;
    }
    int [] mask = new int [] {OS.kEventClassCommand, OS.kEventProcessCommand};
    OS.InstallEventHandler (OS.GetApplicationEventTarget (), (int) commandProc, mask.length / 2, mask, 0, null);
    int [] outMenu = new int [1];
    short [] outIndex = new short [1];
    if (OS.GetIndMenuItemWithCommandID (0, kHICommandPreferences, 1, outMenu, outIndex) == OS.noErr && outMenu [0] != 0) {
        int menu = outMenu [0];
        String aboutName = Labels.getLabel ("title.about") + " " + Version.NAME;
        char buf [] = new char [aboutName.length ()];
        aboutName.getChars (0, buf.length, buf, 0);
        int str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buf, buf.length);
        OS.InsertMenuItemTextWithCFString (menu, str, (short) 0, 0, kHICommandAbout);
        OS.CFRelease (str);
        OS.InsertMenuItemTextWithCFString (menu, 0, (short) 1, OS.kMenuItemAttrSeparator, 0);
        OS.EnableMenuCommand (menu, kHICommandPreferences);
        String fetchersName = Labels.getLabel ("menu.tools.fetchers").replace ("&", "");
        buf = new char [fetchersName.length ()];
        fetchersName.getChars (0, buf.length, buf, 0);
        str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buf, buf.length);
        OS.InsertMenuItemTextWithCFString (menu, str, (short) 3, 0, kHICommandFetchers);
        OS.CFRelease (str);
        OS.InsertMenuItemTextWithCFString (menu, 0, (short) 4, OS.kMenuItemAttrSeparator, 0);
        String checkVersionName = Labels.getLabel ("menu.help.checkVersion").replace ("&", "");
        buf = new char [checkVersionName.length ()];
        checkVersionName.getChars (0, buf.length, buf, 0);
        str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buf, buf.length);
        OS.InsertMenuItemTextWithCFString (menu, str, (short) 5, 0, kHICommandCheckVersion);
        OS.CFRelease (str);
        OS.DisableMenuCommand (menu, kHICommandServices);
    }
    display.disposeExec (new Runnable () {
        public void run () {
            commandCallback.dispose ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="77" endline="101">
@SuppressWarnings("unused")
int commandProc (int nextHandler, int theEvent, int userData) {
    if (OS.GetEventKind (theEvent) == OS.kEventProcessCommand) {
        HICommand command = new HICommand ();
        OS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeHICommand, null, HICommand.sizeof, null, command);
        switch (command.commandID) {
            case kHICommandPreferences :
                preferencesDialog.open ();
                return OS.noErr;
            case kHICommandFetchers :
                selectFetchersDialog.open ();
                return OS.noErr;
            case kHICommandAbout :
                aboutDialog.open ();
                return OS.noErr;
            case kHICommandCheckVersion :
                checkVersionListener.check ();
                return OS.noErr;
        }
    }
    return OS.eventNotHandledErr;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/src-platform/mac/net/azib/ipscan/platform/mac/MacApplicationMenu.java" startline="159" endline="162">
public void run () {
    commandCallback.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="44" endline="47">
public ICMPEchoPacket (int size) {
    super (size);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="55" endline="58">
public ICMPEchoPacket (ICMPEchoPacket packet) {
    super (packet);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="61" endline="64">
public int getICMPHeaderByteLength () {
    return 8;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="72" endline="76">
public final void setIdentifier (int id) {
    _data_ [_offset + OFFSET_IDENTIFIER] = (byte) ((id>> 8) & 0xff);
    _data_ [_offset + OFFSET_IDENTIFIER + 1] = (byte) (id & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="82" endline="86">
public final int getIdentifier () {
    return (((_data_ [_offset + OFFSET_IDENTIFIER] & 0xff) << 8) | (_data_ [_offset + OFFSET_IDENTIFIER + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="94" endline="98">
public final void setSequenceNumber (int seq) {
    _data_ [_offset + OFFSET_SEQUENCE] = (byte) ((seq>> 8) & 0xff);
    _data_ [_offset + OFFSET_SEQUENCE + 1] = (byte) (seq & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="104" endline="108">
public final int getSequenceNumber () {
    return (((_data_ [_offset + OFFSET_SEQUENCE] & 0xff) << 8) | (_data_ [_offset + OFFSET_SEQUENCE + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="32" endline="32">
private OctetConverter () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="41" endline="47">
public static final int octetsToInt (byte [] octets, int offset) {
    return (((octets [offset] & 0xff) << 24) | ((octets [offset + 1] & 0xff) << 16) | ((octets [offset + 2] & 0xff) << 8) | (octets [offset + 3] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="53" endline="56">
public static final int octetsToInt (byte [] octets) {
    return octetsToInt (octets, 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="66" endline="76">
public static final long octetsToLong (byte [] octets, int offset) {
    return (((octets [offset] & 0xffffL) << 56) | ((octets [offset + 1] & 0xffL) << 48) | ((octets [offset + 2] & 0xffL) << 40) | ((octets [offset + 3] & 0xffL) << 32) | ((octets [offset + 4] & 0xffL) << 24) | ((octets [offset + 5] & 0xffL) << 16) | ((octets [offset + 6] & 0xffL) << 8) | (octets [offset + 7] & 0xffL));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="82" endline="85">
public static final long octetsToLong (byte [] octets) {
    return octetsToLong (octets, 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="95" endline="105">
public static final void octetsToString (StringBuffer buffer, byte [] octets, int offset) {
    buffer.append (octets [offset ++] & 0xff);
    buffer.append (".");
    buffer.append (octets [offset ++] & 0xff);
    buffer.append (".");
    buffer.append (octets [offset ++] & 0xff);
    buffer.append (".");
    buffer.append (octets [offset ++] & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="111" endline="114">
public static final void octetsToString (StringBuffer buffer, byte [] octets) {
    octetsToString (buffer, octets, 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="124" endline="133">
public static final void intToString (StringBuffer buffer, int address) {
    buffer.append (0xff & (address>>> 24));
    buffer.append (".");
    buffer.append (0xff & (address>>> 16));
    buffer.append (".");
    buffer.append (0xff & (address>>> 8));
    buffer.append (".");
    buffer.append (0xff & address);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="144" endline="151">
public static final void intToOctets (int address, byte [] octets, int offset) {
    octets [offset] = (byte) (0xff & (address>>> 24));
    octets [offset + 1] = (byte) (0xff & (address>>> 16));
    octets [offset + 2] = (byte) (0xff & (address>>> 8));
    octets [offset + 3] = (byte) (0xff & address);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="157" endline="160">
public static final void intToOctets (int address, byte [] octets) {
    intToOctets (address, octets, 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="170" endline="181">
public static final void longToOctets (long address, byte [] octets, int offset) {
    octets [offset] = (byte) (0xffL & (address>>> 56));
    octets [offset + 1] = (byte) (0xffL & (address>>> 48));
    octets [offset + 2] = (byte) (0xffL & (address>>> 40));
    octets [offset + 3] = (byte) (0xffL & (address>>> 32));
    octets [offset + 4] = (byte) (0xffL & (address>>> 24));
    octets [offset + 5] = (byte) (0xffL & (address>>> 16));
    octets [offset + 6] = (byte) (0xffL & (address>>> 8));
    octets [offset + 7] = (byte) (0xffL & address);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="187" endline="190">
public static final void longToOctets (long address, byte [] octets) {
    longToOctets (address, octets, 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="98" endline="102">
public TCPPacket (int size) {
    super (size);
    __offset = 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="110" endline="115">
public TCPPacket (TCPPacket packet) {
    super (packet.size ());
    copy (packet);
    __offset = packet.__offset;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="124" endline="165">
public void clearSACK () {
    int headerLength = getTCPHeaderByteLength ();
    int offset = OFFSET_URG_POINTER + 2;
    if (headerLength > offset) {
        offset += __offset;
        headerLength += __offset;
        loop : do {
            byte kind = _data_ [offset];
            switch (kind) {
                case KIND_NOP :
                    ++ offset;
                    break;
                case KIND_EOL :
                    break loop;
                case KIND_SACK :
                    _data_ [offset] = KIND_NOP;
                    _data_ [offset + 1] = KIND_NOP;
                    break loop;
                default :
                    offset += _data_ [offset + 1];
                    break;
            }
        } while (offset < headerLength);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="175" endline="187">
public final void copyData (TCPPacket packet) {
    if (_data_.length < packet._data_.length) {
        byte [] data = new byte [packet._data_.length];
        System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
        _data_ = data;
    }
    int length = packet.getTCPDataByteLength ();
    System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
    setTCPDataByteLength (length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="193" endline="196">
public boolean isSet (int mask) {
    return ((_data_ [__offset + OFFSET_CONTROL] & mask) == mask);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="203" endline="206">
public boolean isSetAny (int mask) {
    return ((_data_ [__offset + OFFSET_CONTROL] & mask) != 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="214" endline="218">
public boolean isSetOnly (int mask) {
    int flags = _data_ [__offset + OFFSET_CONTROL] & 0xff;
    return ((flags & mask) == flags);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="227" endline="232">
public void addControlFlags (int mask) {
    int flags = _data_ [__offset + OFFSET_CONTROL] & 0xff;
    flags |= mask;
    _data_ [__offset + OFFSET_CONTROL] = (byte) (flags & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="240" endline="246">
public void removeControlFlags (int mask) {
    int flags = _data_ [__offset + OFFSET_CONTROL] & 0xff;
    flags |= mask;
    flags ^= mask;
    _data_ [__offset + OFFSET_CONTROL] = (byte) (flags & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="254" endline="257">
public void setControlFlags (int mask) {
    _data_ [__offset + OFFSET_CONTROL] = (byte) (mask & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="260" endline="264">
public void setData (byte [] data) {
    super.setData (data);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="272" endline="276">
public final void setSourcePort (int port) {
    _data_ [__offset + OFFSET_SOURCE_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_SOURCE_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="284" endline="288">
public final void setDestinationPort (int port) {
    _data_ [__offset + OFFSET_DESTINATION_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_DESTINATION_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="294" endline="298">
public final int getSourcePort () {
    return (((_data_ [__offset + OFFSET_SOURCE_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_SOURCE_PORT + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="304" endline="308">
public final int getDestinationPort () {
    return (((_data_ [__offset + OFFSET_DESTINATION_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_DESTINATION_PORT + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="316" endline="320">
public final void setSequenceNumber (long seq) {
    OctetConverter.intToOctets ((int) (seq & 0xffffffff), _data_, __offset + OFFSET_SEQUENCE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="326" endline="332">
public final long getSequenceNumber () {
    return (((_data_ [__offset + OFFSET_SEQUENCE] & 0xffL) << 24) | ((_data_ [__offset + OFFSET_SEQUENCE + 1] & 0xffL) << 16) | ((_data_ [__offset + OFFSET_SEQUENCE + 2] & 0xffL) << 8) | (_data_ [__offset + OFFSET_SEQUENCE + 3] & 0xffL));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="340" endline="344">
public final void setAckNumber (long seq) {
    OctetConverter.intToOctets ((int) (seq & 0xffffffff), _data_, __offset + OFFSET_ACK);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="350" endline="356">
public final long getAckNumber () {
    return (((_data_ [__offset + OFFSET_ACK] & 0xffL) << 24) | ((_data_ [__offset + OFFSET_ACK + 1] & 0xffL) << 16) | ((_data_ [__offset + OFFSET_ACK + 2] & 0xffL) << 8) | (_data_ [__offset + OFFSET_ACK + 3] & 0xffL));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="359" endline="363">
public void setIPHeaderLength (int length) {
    super.setIPHeaderLength (length);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="371" endline="375">
public final void setTCPHeaderLength (int length) {
    _data_ [__offset + OFFSET_HEADER_LENGTH] &= 0x0f;
    _data_ [__offset + OFFSET_HEADER_LENGTH] |= ((length << 4) & 0xf0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="381" endline="384">
public final int getTCPHeaderLength () {
    return (_data_ [__offset + OFFSET_HEADER_LENGTH] & 0xf0)>> 4;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="390" endline="393">
public final int getTCPHeaderByteLength () {
    return getTCPHeaderLength () << 2;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="401" endline="405">
public final void setWindowSize (int window) {
    _data_ [__offset + OFFSET_WINDOW_SIZE] = (byte) ((window>> 8) & 0xff);
    _data_ [__offset + OFFSET_WINDOW_SIZE + 1] = (byte) (window & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="411" endline="415">
public final int getWindowSize () {
    return (((_data_ [__offset + OFFSET_WINDOW_SIZE] & 0xff) << 8) | (_data_ [__offset + OFFSET_WINDOW_SIZE + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="423" endline="427">
public final void setUrgentPointer (int pointer) {
    _data_ [__offset + OFFSET_URG_POINTER] = (byte) ((pointer>> 8) & 0xff);
    _data_ [__offset + OFFSET_URG_POINTER + 1] = (byte) (pointer & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="433" endline="437">
public final int getUrgentPointer () {
    return (((_data_ [__offset + OFFSET_URG_POINTER] & 0xff) << 8) | (_data_ [__offset + OFFSET_URG_POINTER + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="443" endline="447">
public final int getTCPChecksum () {
    return (((_data_ [__offset + OFFSET_TCP_CHECKSUM] & 0xff) << 8) | (_data_ [__offset + OFFSET_TCP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="454" endline="457">
public final int getTCPPacketByteLength () {
    return getIPPacketLength () - __offset;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="463" endline="466">
public final int getCombinedHeaderByteLength () {
    return __offset + getTCPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="474" endline="480">
public final void setTCPDataByteLength (int length) {
    if (length < 0) length = 0;

    setIPPacketLength (getCombinedHeaderByteLength () + length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="483" endline="486">
public final int getTCPDataByteLength () {
    return getIPPacketLength () - getCombinedHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="489" endline="504">
private final int __getVirtualHeaderTotal () {
    int s1 = ((_data_ [OFFSET_SOURCE_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 1] & 0xff);
    int s2 = ((_data_ [OFFSET_SOURCE_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 3] & 0xff);
    int d1 = ((_data_ [OFFSET_DESTINATION_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 1] & 0xff);
    int d2 = ((_data_ [OFFSET_DESTINATION_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 3] & 0xff);
    return s1 + s2 + d1 + d2 + getProtocol () + getTCPPacketByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="516" endline="521">
public final int computeTCPChecksum (boolean update) {
    return _computeChecksum_ (__offset, __offset + OFFSET_TCP_CHECKSUM, getIPPacketLength (), __getVirtualHeaderTotal (), update);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="529" endline="532">
public final int computeTCPChecksum () {
    return computeTCPChecksum (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="56" endline="60">
public UDPPacket (int size) {
    super (size);
    __offset = 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="68" endline="73">
public UDPPacket (UDPPacket packet) {
    super (packet.size ());
    copy (packet);
    __offset = packet.__offset;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="83" endline="95">
public final void copyData (UDPPacket packet) {
    if (_data_.length < packet._data_.length) {
        byte [] data = new byte [packet._data_.length];
        System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
        _data_ = data;
    }
    int length = packet.getUDPDataByteLength ();
    System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
    setUDPDataByteLength (length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="98" endline="102">
public void setData (byte [] data) {
    super.setData (data);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="110" endline="114">
public final void setSourcePort (int port) {
    _data_ [__offset + OFFSET_SOURCE_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_SOURCE_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="122" endline="126">
public final void setDestinationPort (int port) {
    _data_ [__offset + OFFSET_DESTINATION_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_DESTINATION_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="132" endline="136">
public final int getSourcePort () {
    return (((_data_ [__offset + OFFSET_SOURCE_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_SOURCE_PORT + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="142" endline="146">
public final int getDestinationPort () {
    return (((_data_ [__offset + OFFSET_DESTINATION_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_DESTINATION_PORT + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="149" endline="153">
public void setIPHeaderLength (int length) {
    super.setIPHeaderLength (length);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="161" endline="165">
public void setUDPPacketLength (int length) {
    _data_ [__offset + OFFSET_UDP_TOTAL_LENGTH] = (byte) ((length>> 8) & 0xff);
    _data_ [__offset + OFFSET_UDP_TOTAL_LENGTH + 1] = (byte) (length & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="171" endline="175">
public final int getUDPPacketLength () {
    return (((_data_ [__offset + OFFSET_UDP_TOTAL_LENGTH] & 0xff) << 8) | (_data_ [__offset + OFFSET_UDP_TOTAL_LENGTH + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="181" endline="185">
public final int getUDPChecksum () {
    return (((_data_ [__offset + OFFSET_UDP_CHECKSUM] & 0xff) << 8) | (_data_ [__offset + OFFSET_UDP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="194" endline="197">
public final int getUDPPacketByteLength () {
    return getIPPacketLength () - __offset;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="203" endline="206">
public final int getCombinedHeaderByteLength () {
    return __offset + LENGTH_UDP_HEADER;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="214" endline="220">
public final void setUDPDataByteLength (int length) {
    if (length < 0) length = 0;

    setIPPacketLength (getCombinedHeaderByteLength () + length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="223" endline="226">
public final int getUDPDataByteLength () {
    return getIPPacketLength () - getCombinedHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="229" endline="244">
private final int __getVirtualHeaderTotal () {
    int s1 = ((_data_ [OFFSET_SOURCE_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 1] & 0xff);
    int s2 = ((_data_ [OFFSET_SOURCE_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 3] & 0xff);
    int d1 = ((_data_ [OFFSET_DESTINATION_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 1] & 0xff);
    int d2 = ((_data_ [OFFSET_DESTINATION_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 3] & 0xff);
    return s1 + s2 + d1 + d2 + getProtocol () + getUDPPacketByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="256" endline="261">
public final int computeUDPChecksum (boolean update) {
    return _computeChecksum_ (__offset, __offset + OFFSET_UDP_CHECKSUM, getIPPacketLength (), __getVirtualHeaderTotal (), update);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="269" endline="272">
public final int computeUDPChecksum () {
    return computeUDPChecksum (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="66" endline="70">
public ICMPPacket (int size) {
    super (size);
    _offset = 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="78" endline="83">
public ICMPPacket (ICMPPacket packet) {
    super (packet.size ());
    copy (packet);
    _offset = packet._offset;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="90" endline="94">
public void setIPHeaderLength (int length) {
    super.setIPHeaderLength (length);
    _offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="100" endline="103">
public final int getCombinedHeaderByteLength () {
    return _offset + getICMPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="111" endline="117">
public final void setICMPDataByteLength (int length) {
    if (length < 0) length = 0;

    setIPPacketLength (getCombinedHeaderByteLength () + length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="123" endline="126">
public final int getICMPDataByteLength () {
    return getIPPacketLength () - getCombinedHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="133" endline="136">
public final int getICMPPacketByteLength () {
    return getIPPacketLength () - _offset;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="146" endline="158">
public final void copyData (ICMPPacket packet) {
    if (_data_.length < packet._data_.length) {
        byte [] data = new byte [packet._data_.length];
        System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
        _data_ = data;
    }
    int length = packet.getICMPDataByteLength ();
    System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
    setICMPDataByteLength (length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="161" endline="165">
public void setData (byte [] data) {
    super.setData (data);
    _offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="173" endline="176">
public final void setType (int type) {
    _data_ [_offset + OFFSET_TYPE] = (byte) (type & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="182" endline="185">
public final int getType () {
    return (_data_ [_offset + OFFSET_TYPE] & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="193" endline="196">
public final void setCode (int code) {
    _data_ [_offset + OFFSET_CODE] = (byte) (code & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="202" endline="205">
public final int getCode () {
    return (_data_ [_offset + OFFSET_CODE] & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="211" endline="215">
public final int getICMPChecksum () {
    return (((_data_ [_offset + OFFSET_ICMP_CHECKSUM] & 0xff) << 8) | (_data_ [_offset + OFFSET_ICMP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="227" endline="231">
public final int computeICMPChecksum (boolean update) {
    return _computeChecksum_ (_offset, _offset + OFFSET_ICMP_CHECKSUM, getIPPacketLength (), 0, update);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="239" endline="242">
public final int computeICMPChecksum () {
    return computeICMPChecksum (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="92" endline="95">
public IPPacket (int size) {
    setData (new byte [size]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="101" endline="104">
public int size () {
    return _data_.length;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="117" endline="120">
public void setData (byte [] data) {
    _data_ = data;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="129" endline="132">
public void getData (byte [] data) {
    System.arraycopy (_data_, 0, data, 0, data.length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="142" endline="147">
public final void copy (IPPacket packet) {
    if (_data_.length != packet.size ()) setData (new byte [packet.size ()]);

    System.arraycopy (packet._data_, 0, _data_, 0, _data_.length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="155" endline="159">
public final void setIPVersion (int version) {
    _data_ [0] &= 0x0f;
    _data_ [0] |= ((version << 4) & 0xf0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="167" endline="170">
public final int getIPVersion () {
    return ((_data_ [0] & 0xf0)>> 4);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="180" endline="185">
public void setIPHeaderLength (int length) {
    _data_ [0] &= 0xf0;
    _data_ [0] |= (length & 0x0f);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="191" endline="194">
public final int getIPHeaderLength () {
    return (_data_ [0] & 0x0f);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="200" endline="203">
public final int getIPHeaderByteLength () {
    return getIPHeaderLength () << 2;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="213" endline="216">
public final void setTypeOfService (int service) {
    _data_ [OFFSET_TYPE_OF_SERVICE] = (byte) (service & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="224" endline="227">
public final int getTypeOfService () {
    return (_data_ [OFFSET_TYPE_OF_SERVICE] & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="235" endline="239">
public final void setIPPacketLength (int length) {
    _data_ [OFFSET_TOTAL_LENGTH] = (byte) ((length>> 8) & 0xff);
    _data_ [OFFSET_TOTAL_LENGTH + 1] = (byte) (length & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="245" endline="249">
public final int getIPPacketLength () {
    return (((_data_ [OFFSET_TOTAL_LENGTH] & 0xff) << 8) | (_data_ [OFFSET_TOTAL_LENGTH + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="257" endline="261">
public void setIdentification (int id) {
    _data_ [OFFSET_IDENTIFICATION] = (byte) ((id>> 8) & 0xff);
    _data_ [OFFSET_IDENTIFICATION + 1] = (byte) (id & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="269" endline="273">
public final int getIdentification () {
    return (((_data_ [OFFSET_IDENTIFICATION] & 0xff) << 8) | (_data_ [OFFSET_IDENTIFICATION + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="283" endline="287">
public final void setIPFlags (int flags) {
    _data_ [OFFSET_FLAGS] &= 0x1f;
    _data_ [OFFSET_FLAGS] |= ((flags << 5) & 0xe0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="295" endline="298">
public final int getIPFlags () {
    return ((_data_ [OFFSET_FLAGS] & 0xe0)>> 5);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="307" endline="312">
public void setFragmentOffset (int offset) {
    _data_ [OFFSET_FLAGS] &= 0xe0;
    _data_ [OFFSET_FLAGS] |= ((offset>> 8) & 0x1f);
    _data_ [OFFSET_FLAGS + 1] = (byte) (offset & 0xff);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="320" endline="324">
public final int getFragmentOffset () {
    return (((_data_ [OFFSET_FLAGS] & 0x1f) << 8) | (_data_ [OFFSET_FLAGS + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="332" endline="335">
public final void setProtocol (int protocol) {
    _data_ [OFFSET_PROTOCOL] = (byte) protocol;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="341" endline="344">
public final int getProtocol () {
    return _data_ [OFFSET_PROTOCOL];
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="352" endline="355">
public final void setTTL (int ttl) {
    _data_ [OFFSET_TTL] = (byte) ttl;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="361" endline="364">
public final int getTTL () {
    return _data_ [OFFSET_TTL];
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="372" endline="411">
protected int _computeChecksum_ (int startOffset, int checksumOffset, int length, int virtualHeaderTotal, boolean update) {
    int total = 0;
    int i = startOffset;
    int imax = checksumOffset;
    while (i < imax) total += (((_data_ [i ++] & 0xff) << 8) | (_data_ [i ++] & 0xff));

    i = checksumOffset + 2;
    imax = length - (length % 2);
    while (i < imax) total += (((_data_ [i ++] & 0xff) << 8) | (_data_ [i ++] & 0xff));

    if (i < length) total += ((_data_ [i] & 0xff) << 8);

    total += virtualHeaderTotal;
    while ((total & 0xffff0000) != 0) total = (total & 0xffff) + (total>>> 16);

    total = (~ total & 0xffff);
    if (update) {
        _data_ [checksumOffset] = (byte) (total>> 8);
        _data_ [checksumOffset + 1] = (byte) (total & 0xff);
    }
    return total;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="423" endline="427">
public final int computeIPChecksum (boolean update) {
    return _computeChecksum_ (0, OFFSET_IP_CHECKSUM, getIPHeaderByteLength (), 0, update);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="435" endline="438">
public final int computeIPChecksum () {
    return computeIPChecksum (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="444" endline="448">
public final int getIPChecksum () {
    return (((_data_ [OFFSET_IP_CHECKSUM] & 0xff) << 8) | (_data_ [OFFSET_IP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="457" endline="462">
public final void getSource (byte [] address) {
    System.arraycopy (_data_, OFFSET_SOURCE_ADDRESS, address, 0, (address.length < LENGTH_SOURCE_ADDRESS ? address.length : LENGTH_SOURCE_ADDRESS));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="471" endline="476">
public final void getDestination (byte [] address) {
    System.arraycopy (_data_, OFFSET_DESTINATION_ADDRESS, address, 0, (address.length < LENGTH_DESTINATION_ADDRESS ? address.length : LENGTH_DESTINATION_ADDRESS));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="484" endline="487">
public final void getSource (StringBuffer buffer) {
    OctetConverter.octetsToString (buffer, _data_, OFFSET_SOURCE_ADDRESS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="495" endline="498">
public final void getDestination (StringBuffer buffer) {
    OctetConverter.octetsToString (buffer, _data_, OFFSET_DESTINATION_ADDRESS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="506" endline="509">
public final void setSourceAsWord (int src) {
    OctetConverter.intToOctets (src, _data_, OFFSET_SOURCE_ADDRESS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="517" endline="520">
public final void setDestinationAsWord (int dest) {
    OctetConverter.intToOctets (dest, _data_, OFFSET_DESTINATION_ADDRESS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="526" endline="529">
public final int getSourceAsWord () {
    return OctetConverter.octetsToInt (_data_, OFFSET_SOURCE_ADDRESS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="535" endline="538">
public final int getDestinationAsWord () {
    return OctetConverter.octetsToInt (_data_, OFFSET_DESTINATION_ADDRESS);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="544" endline="550">
public final InetAddress getSourceAsInetAddress () throws UnknownHostException {
    byte [] octets = new byte [4];
    getSource (octets);
    return InetAddress.getByAddress (octets);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="557" endline="563">
public final InetAddress getDestinationAsInetAddress () throws UnknownHostException {
    byte [] octets = new byte [4];
    getDestination (octets);
    return InetAddress.getByAddress (octets);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="91" endline="94">
public void run () {
    __RockSawShutdown ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="110" endline="113">
TimeVal () {
    seconds = microseconds = 0;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="115" endline="123">
void setInMilliseconds (int milliseconds) {
    seconds = milliseconds / 1000;
    if (seconds > 0) milliseconds -= (seconds * 1000);

    microseconds = milliseconds * 1000;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="125" endline="128">
int getInMilliseconds () {
    return (seconds * 1000 + microseconds / 1000);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="130" endline="133">
boolean isZero () {
    return (seconds == 0 && microseconds == 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="148" endline="161">
public RawSocket () {
    __socket = __UNDEFINED;
    __family = __UNDEFINED;
    __stimeout = new TimeVal ();
    __rtimeout = new TimeVal ();
    String os = System.getProperty ("os.name");
    if (os != null && os.startsWith ("SunOS")) setUseSelectTimeout (true);
    else setUseSelectTimeout (false);

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="168" endline="171">
public boolean isOpen () {
    return (__socket > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="184" endline="189">
private static String __getErrorMessage () {
    StringBuffer buf = new StringBuffer ();
    __getErrorMessage (buf);
    return buf.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="191" endline="194">
private static void __throwIOException () throws IOException {
    throw new IOException (__getErrorMessage ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="196" endline="199">
private static void __throwSocketException () throws SocketException {
    throw new SocketException (__getErrorMessage ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="201" endline="205">
private static void __throwInterruptedIOException () throws InterruptedIOException {
    throw new InterruptedIOException (__getErrorMessage ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="237" endline="251">
public void open (int protocolFamily, int protocol) throws IllegalStateException, IOException {
    if (isOpen ()) throw new IllegalStateException ();

    __socket = __socket (protocolFamily, protocol);
    if (__socket < 0) {
        __socket = __UNDEFINED;
        __throwIOException ();
    }
    __family = protocolFamily;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="260" endline="268">
public void close () throws IOException {
    int result = __close (__socket);
    __socket = __UNDEFINED;
    __family = __UNDEFINED;
    if (result != 0) __throwIOException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="293" endline="299">
public void setIPHeaderInclude (boolean on) throws SocketException {
    int result = __setIPHeaderInclude (__socket, on);
    if (result < 0) __throwSocketException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="308" endline="316">
public boolean getIPHeaderInclude () throws SocketException {
    int result = __getIPHeaderInclude (__socket);
    if (result < 0) __throwSocketException ();

    return (result > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="327" endline="333">
public void setSendBufferSize (int size) throws SocketException {
    int result = __setSendBufferSize (__socket, size);
    if (result < 0) __throwSocketException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="344" endline="352">
public int getSendBufferSize () throws SocketException {
    int result = __getSendBufferSize (__socket);
    if (result < 0) __throwSocketException ();

    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="363" endline="369">
public void setReceiveBufferSize (int size) throws SocketException {
    int result = __setReceiveBufferSize (__socket, size);
    if (result < 0) __throwSocketException ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="380" endline="388">
public int getReceiveBufferSize () throws SocketException {
    int result = __getReceiveBufferSize (__socket);
    if (result < 0) __throwSocketException ();

    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="413" endline="416">
public void setUseSelectTimeout (boolean useSelect) {
    __useSelectTimeout = useSelect;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="429" endline="432">
public boolean getUseSelectTimeout () {
    return __useSelectTimeout;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="444" endline="456">
public void setSendTimeout (int timeout) throws SocketException {
    __stimeout.setInMilliseconds (timeout);
    if (! getUseSelectTimeout ()) {
        int result = __setSendTimeout (__socket, timeout);
        if (result < 0) __throwSocketException ();

    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="467" endline="482">
public int getSendTimeout () throws SocketException {
    int result;
    if (getUseSelectTimeout ()) result = __stimeout.getInMilliseconds ();
    else {
        result = __getSendTimeout (__socket);
        if (result < 0) __throwSocketException ();

    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="494" endline="506">
public void setReceiveTimeout (int timeout) throws SocketException {
    __rtimeout.setInMilliseconds (timeout);
    if (! getUseSelectTimeout ()) {
        int result = __setReceiveTimeout (__socket, timeout);
        if (result < 0) __throwSocketException ();

    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="517" endline="532">
public int getReceiveTimeout () throws SocketException {
    int result;
    if (getUseSelectTimeout ()) result = __rtimeout.getInMilliseconds ();
    else {
        result = __getReceiveTimeout (__socket);
        if (result < 0) __throwSocketException ();

    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="554" endline="585">
public int read (InetAddress address, byte [] data, int offset, int length) throws IllegalArgumentException, IOException, InterruptedIOException {
    if (offset < 0 || length < 0 || length > data.length - offset) throw new IllegalArgumentException ("Invalid offset or length.");

    int result = 0;
    if (getUseSelectTimeout () && ! __rtimeout.isZero ()) result = __select (__socket, true, __rtimeout.seconds, __rtimeout.microseconds);

    if (result == 0) result = __recvfrom (__socket, data, offset, length, __family, address.getAddress ());

    if (result < 0) {
        if (__isErrorEAGAIN ()) __throwInterruptedIOException ();
        else __throwIOException ();

    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="589" endline="593">
public int read (InetAddress address, byte [] data) throws IOException, InterruptedIOException {
    return read (address, data, 0, data.length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="616" endline="642">
public int write (InetAddress address, byte [] data, int offset, int length) throws IllegalArgumentException, IOException, InterruptedIOException {
    if (offset < 0 || length < 0 || length > data.length - offset) throw new IllegalArgumentException ("Invalid offset or length.");

    int result = 0;
    if (getUseSelectTimeout () && ! __stimeout.isZero ()) result = __select (__socket, false, __stimeout.seconds, __stimeout.microseconds);

    if (result == 0) result = __sendto (__socket, data, offset, length, __family, address.getAddress ());

    if (result < 0) {
        if (__isErrorEAGAIN ()) __throwInterruptedIOException ();
        else __throwIOException ();

    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="646" endline="650">
public int write (InetAddress address, byte [] data) throws IOException, InterruptedIOException {
    return write (address, data, 0, data.length);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="36" endline="41">
@Before
public void setUp () throws Exception {
    outputStream = new ByteArrayOutputStream ();
    exporter = createExporter ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="43" endline="47">
@Test
public void testLabel () {
    assertNotNull (Labels.getLabel (exporter.getId ()));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="49" endline="53">
@Test
public void testFilenameExtension () {
    assertNotNull (exporter.getFilenameExtension ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="55" endline="84">
@Test
public void testStreamFlushAndClose () throws IOException {
    final boolean wasClosed [] = new boolean [] {false, false};
    Exporter exporter2 = createExporter ();
    OutputStream mockOutputStream = new OutputStream () {
        public void write (int b) throws IOException {
        } public void close () throws IOException {
            wasClosed [0] = true;
        } public void flush () {
            wasClosed [1] = true;
        }}

    ;
    exporter2.start (mockOutputStream, "feederstuff");
    exporter2.setFetchers (new String [] {Labels.getLabel ("fetcher.ip"), Labels.getLabel ("fetcher.ports")});
    exporter2.nextAdressResults (new Object [] {"1", "2"});
    exporter2.end ();
    assertFalse (wasClosed [0]);
    assertTrue (wasClosed [1]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="62" endline="64">
public void write (int b) throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="65" endline="68">
public void close () throws IOException {
    wasClosed [0] = true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="69" endline="72">
public void flush () {
    wasClosed [1] = true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="86" endline="101">
@Test
public void testBasic () throws Exception {
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {"IP", "hello", "fetcher2"});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost ().getHostAddress (), "world", new Integer (53)});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost ().getHostAddress (), "buga", new Integer (- 1)});
    exporter.end ();
    assertContains (InetAddress.getLocalHost ().getHostAddress ());
    assertContains ("hello");
    assertContains ("fetcher2");
    assertContains ("world");
    assertContains ("53");
    assertContains ("buga");
    assertContains ("-1");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="103" endline="112">
@Test
public void testFetchersWithoutAppend () throws IOException {
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {"IP", "fetcher1", "mega long fetcher 2"});
    exporter.end ();
    assertContains ("IP");
    assertContains ("fetcher1");
    assertContains ("mega long fetcher 2");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="114" endline="124">
@Test
public void testFetchersWithAppend () throws IOException {
    exporter.shouldAppendTo (null);
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {"IP", "fetcher1", "mega long fetcher 2"});
    exporter.end ();
    assertNotContains ("IP");
    assertNotContains ("fetcher1");
    assertNotContains ("mega long fetcher 2");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="126" endline="131">
@Test
public void testClone () throws CloneNotSupportedException {
    Exporter exporter2 = (Exporter) exporter.clone ();
    assertNotSame (exporter, exporter2);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="133" endline="140">
@Test
public void testNextAddressResultsWithNulls () throws IOException {
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {Labels.getLabel (IPFetcher.ID), "fetcher1", Labels.getLabel (PortsFetcher.ID)});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost (), null, null});
    exporter.end ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="142" endline="155">
protected void assertContains (String string, boolean contains) throws IOException {
    if (outputContent == null) {
        outputStream.close ();
        outputContent = new String (outputStream.toByteArray ());
    }
    if (! ((outputContent.indexOf (string) >= 0) ^ (! contains))) {
        throw new ComparisonFailure ("Contains check failed", string, outputContent);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="157" endline="160">
protected void assertContains (String string) throws IOException {
    assertContains (string, true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/AbstractExporterTestCase.java" startline="162" endline="165">
protected void assertNotContains (String string) throws IOException {
    assertContains (string, false);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="30" endline="35">
@Before
public void setUp () throws Exception {
    Labels.initialize (Locale.ENGLISH);
    super.setUp ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="37" endline="40">
protected Exporter createExporter () {
    return new IPListExporter ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="42" endline="58">
@Test
public void testBasic () throws IOException {
    Labels labels = Labels.getInstance ();
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {"fetcher1", labels.get (IPFetcher.ID), "mega long fetcher 2", labels.get (PortsFetcher.ID)});
    exporter.nextAdressResults (new Object [] {"", "123", "", new NumericRangeList (Arrays.asList (1, 23, 4, 5, 6, 78), true)});
    exporter.end ();
    assertContains ("123:1");
    assertContains ("123:23");
    assertContains ("123:4");
    assertContains ("123:5");
    assertContains ("123:6");
    assertContains ("123:78");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="60" endline="64">
@Test
public void testFetchersWithAppend () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="66" endline="70">
@Test
public void testFetchersWithoutAppend () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="72" endline="82">
@Test
public void testNextAddressResultsWithNullsOrEmptyValues () throws IOException {
    Labels labels = Labels.getInstance ();
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {labels.get (IPFetcher.ID), "fetcher1", labels.get (PortsFetcher.ID)});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost (), null, null});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost (), null, NotAvailable.VALUE});
    exporter.end ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/IPListExporterTest.java" startline="84" endline="102">
@Test
public void testFindFetcherById () {
    Labels labels = Labels.getInstance ();
    assertEquals (0, IPListExporter.findFetcherById (IPFetcher.ID, new String [] {labels.get (IPFetcher.ID)}));
    assertEquals (3, IPListExporter.findFetcherById (IPFetcher.ID, new String [] {"a", "b", "c", labels.get (IPFetcher.ID)}));
    assertEquals (1, IPListExporter.findFetcherById (PortsFetcher.ID, new String [] {labels.get (PortsFetcher.ID) + "x", labels.get (PortsFetcher.ID), "mmmm"}));
    try {
        IPListExporter.findFetcherById (IPFetcher.ID, new String [] {"1", "2"});
        fail ();
    } catch (ExporterException e) {
        assertEquals ("fetcher.notFound", e.getMessage ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExporterRegistryTest.java" startline="22" endline="31">
@Test
public void testIterator () {
    for (Iterator < ? > i = exporterRegistry.iterator ();
    i.hasNext ();) {
        Exporter exporter = (Exporter) i.next ();
        assertNotNull (exporter);
        assertNotNull (exporter.getFilenameExtension ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExporterRegistryTest.java" startline="33" endline="43">
@Test
public void testCreate () {
    Exporter exporter;
    exporter = exporterRegistry.createExporter ("aa.abc." + new TXTExporter ().getFilenameExtension ());
    assertTrue (exporter instanceof TXTExporter);
    exporter = exporterRegistry.createExporter ("/tmp/foo/megafile." + new TXTExporter ().getFilenameExtension ());
    assertTrue (exporter instanceof TXTExporter);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExporterRegistryTest.java" startline="45" endline="67">
@Test
public void testCreateFailed () {
    try {
        exporterRegistry.createExporter ("noextension");
        fail ();
    } catch (ExporterException e) {
        assertEquals ("exporter.unknown", e.getMessage ());
    }
    try {
        exporterRegistry.createExporter ("unknown.extension");
        fail ();
    } catch (ExporterException e) {
        assertEquals ("exporter.unknown", e.getMessage ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="22" endline="25">
protected Exporter createExporter () {
    return new TXTExporter ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="27" endline="35">
@Test
public void testPad () {
    assertEquals ("a               ", ((TXTExporter) exporter).pad ("a", 1));
    assertEquals ("                ", ((TXTExporter) exporter).pad ("", 0));
    assertEquals ("abc                 ", ((TXTExporter) exporter).pad ("abc", 20));
    assertEquals ("                ", ((TXTExporter) exporter).pad (null, 5));
    assertEquals ("5               ", ((TXTExporter) exporter).pad (new Integer (5), 5));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="37" endline="44">
@Test
public void testHeaderWithoutAppend () throws IOException {
    exporter.start (outputStream, "feederstuff");
    exporter.end ();
    assertContains (Version.NAME);
    assertContains (Version.WEBSITE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="46" endline="54">
@Test
public void testHeaderWithAppend () throws IOException {
    exporter.shouldAppendTo (null);
    exporter.start (outputStream, "feederstuff");
    exporter.end ();
    assertNotContains (Version.NAME);
    assertNotContains (Version.WEBSITE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="56" endline="61">
@Test
public void testFetchersWithAppend () throws IOException {
    super.testFetchersWithAppend ();
    assertTrue (((TXTExporter) exporter).padLengths != null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="63" endline="68">
@Test
public void testFetchersWithoutAppend () throws IOException {
    super.testFetchersWithoutAppend ();
    assertTrue (((TXTExporter) exporter).padLengths != null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/TXTExporterTest.java" startline="70" endline="76">
@Test
public void testFeederInfo () throws IOException {
    exporter.start (outputStream, "192.168.1.1 - 192.168.3.255");
    exporter.end ();
    assertContains ("192.168.1.1 - 192.168.3.255");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExportProcessorTest.java" startline="39" endline="45">
@Before
public void setUp () {
    fetcherRegistry = mock (FetcherRegistry.class);
    when (fetcherRegistry.getSelectedFetchers ()).thenReturn (Collections.< Fetcher > singletonList (new IPFetcher ()));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExportProcessorTest.java" startline="47" endline="64">
@Test
public void testProcess () throws Exception {
    File file = File.createTempFile ("exportTest", "txt");
    ExportProcessor exportProcessor = new ExportProcessor (new TXTExporter (), file, false);
    ScanningResultList scanningResultList = new ScanningResultList (fetcherRegistry);
    scanningResultList.initNewScan (mockFeeder ("megaFeeder"));
    scanningResultList.registerAtIndex (0, scanningResultList.createResult (InetAddress.getByName ("192.168.0.13")));
    exportProcessor.process (scanningResultList, null);
    String content = readFileContent (file);
    assertTrue (content.indexOf ("megaFeeder") > 0);
    assertTrue (content.indexOf (new IPFetcher ().getName ()) > 0);
    assertTrue (content.indexOf ("fooBar") < 0);
    assertTrue (content.indexOf ("192.168.0.13") > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExportProcessorTest.java" startline="66" endline="94">
@Test
public void testProcessWithFilter () throws Exception {
    File file = File.createTempFile ("exportTest", "txt");
    ExportProcessor exportProcessor = new ExportProcessor (new TXTExporter (), file, false);
    ScanningResultList scanningResultList = new ScanningResultList (fetcherRegistry);
    scanningResultList.initNewScan (mockFeeder ("feeder2"));
    scanningResultList.registerAtIndex (0, scanningResultList.createResult (InetAddress.getByName ("192.168.13.66")));
    scanningResultList.registerAtIndex (1, scanningResultList.createResult (InetAddress.getByName ("192.168.13.67")));
    scanningResultList.registerAtIndex (2, scanningResultList.createResult (InetAddress.getByName ("192.168.13.76")));
    exportProcessor.process (scanningResultList, new ScanningResultFilter () {
        public boolean isResultSelected (int index, ScanningResult result) {
            return ((String) result.getValues ().get (0)).endsWith ("6");
        }}

    );
    String content = readFileContent (file);
    assertTrue (content.indexOf ("feeder2") > 0);
    assertTrue (content.indexOf ("192.168.13.66") > 0);
    assertTrue (content.indexOf ("192.168.13.67") < 0);
    assertTrue (content.indexOf ("192.168.13.76") > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExportProcessorTest.java" startline="81" endline="85">
public boolean isResultSelected (int index, ScanningResult result) {
    return ((String) result.getValues ().get (0)).endsWith ("6");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExportProcessorTest.java" startline="96" endline="102">
private Feeder mockFeeder (String feederInfo) {
    Feeder feeder = mock (Feeder.class);
    when (feeder.getInfo ()).thenReturn (feederInfo);
    when (feeder.getName ()).thenReturn ("feeder.range");
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/ExportProcessorTest.java" startline="104" endline="115">
private String readFileContent (File file) throws FileNotFoundException, IOException {
    StringBuffer buffer = new StringBuffer ();
    BufferedReader reader = new BufferedReader (new FileReader (file));
    String line;
    while ((line = reader.readLine ()) != null) {
        buffer.append (line);
    }
    reader.close ();
    return buffer.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/CSVExporterTest.java" startline="21" endline="24">
protected Exporter createExporter () {
    return new CSVExporter ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/CSVExporterTest.java" startline="26" endline="34">
@Test
public void testCSVSafeString () {
    assertEquals (".a.bb.c.d.", ((CSVExporter) exporter).csvSafeString (",a,bb,c,d,"));
    assertEquals ("", ((CSVExporter) exporter).csvSafeString (""));
    assertEquals ("uuuuhha;", ((CSVExporter) exporter).csvSafeString ("uuuuhha;"));
    assertEquals ("", ((CSVExporter) exporter).csvSafeString (null));
    assertEquals ("123", ((CSVExporter) exporter).csvSafeString (new Long (123)));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/CSVExporterTest.java" startline="36" endline="45">
@Test
public void testFetchersWithoutAppend () throws IOException {
    exporter.start (outputStream, null);
    exporter.setFetchers (new String [] {"fet1", "hello2", "Mega Fetcher", "oops, comma here"});
    exporter.end ();
    assertContains ("fet1");
    assertContains ("Mega Fetcher");
    assertContains ("oops. comma here");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/CSVExporterTest.java" startline="47" endline="55">
@Test
public void testNextAddressResults () throws IOException {
    exporter.start (outputStream, null);
    exporter.setFetchers (new String [] {"fet1", "hello2"});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost (), "oops, comma"});
    exporter.end ();
    assertContains ("oops. comma");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="30" endline="35">
@Before
public void setUp () throws Exception {
    Labels.initialize (Locale.ENGLISH);
    super.setUp ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="37" endline="40">
protected Exporter createExporter () {
    return new XMLExporter ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="42" endline="49">
@Test
public void testHeaderWithoutAppend () throws IOException {
    exporter.start (outputStream, "feederstuff");
    exporter.end ();
    assertContains (Version.NAME);
    assertContains (Version.WEBSITE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="51" endline="62">
@Test
public void testFetchersWithoutAppend () throws IOException {
    exporter.start (outputStream, "feederstuff");
    exporter.setFetchers (new String [] {"fetcher1", Labels.getLabel ("fetcher.ip"), "mega long fetcher 2"});
    exporter.nextAdressResults (new Object [] {"", "123", ""});
    exporter.end ();
    assertContains ("IP");
    assertContains ("address=\"123\"");
    assertContains ("fetcher1");
    assertContains ("mega long fetcher 2");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="64" endline="76">
@Test
public void testFetchersWithAppend () {
    try {
        exporter.shouldAppendTo (null);
        fail ();
    } catch (ExporterException e) {
        assertEquals ("xml.noAppend", e.getMessage ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="78" endline="85">
@Test
public void testFeederInfoWithName () throws IOException {
    exporter.start (outputStream, "Blah: 192.168.1.1 - 192.168.3.255");
    exporter.end ();
    assertContains ("name=\"Blah\"");
    assertContains ("192.168.1.1 - 192.168.3.255");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="87" endline="93">
@Test
public void testFeederInfoNoName () throws IOException {
    exporter.start (outputStream, "Booga 192.168.1.1/123");
    exporter.end ();
    assertContains ("Booga 192.168.1.1/123");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/exporters/XMLExporterTest.java" startline="95" endline="107">
@Test
public void testValidXML () throws Exception {
    exporter.start (outputStream, "<megaInfo'''");
    exporter.setFetchers (new String [] {"IP", "hello", "fet::cher2"});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost ().getHostAddress (), "w?:orld'", new Integer (53)});
    exporter.nextAdressResults (new Object [] {InetAddress.getLocalHost ().getHostAddress (), "bug>>a", new Integer (- 1)});
    exporter.end ();
    assertContains ("<megaInfo'''");
    DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance ().newDocumentBuilder ();
    documentBuilder.parse (new ByteArrayInputStream (outputContent.getBytes (XMLExporter.ENCODING)));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RangeFeederTest.java" startline="16" endline="27">
@Test
public void testHappyPath () throws FeederException {
    RangeFeeder rangeFeeder = new RangeFeeder ("10.11.12.13", "10.11.12.15");
    assertTrue (rangeFeeder.hasNext ());
    assertEquals ("10.11.12.13", rangeFeeder.next ().getAddress ().getHostAddress ());
    assertTrue (rangeFeeder.hasNext ());
    assertEquals ("10.11.12.14", rangeFeeder.next ().getAddress ().getHostAddress ());
    assertTrue (rangeFeeder.hasNext ());
    assertEquals ("10.11.12.15", rangeFeeder.next ().getAddress ().getHostAddress ());
    assertFalse (rangeFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RangeFeederTest.java" startline="29" endline="41">
@Test
public void testInvalidRange () {
    try {
        new RangeFeeder ("10.11.12.13", "10.11.12.10");
        fail ();
    } catch (FeederException e) {
        assertFeederException ("range.greaterThan", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RangeFeederTest.java" startline="43" endline="64">
@Test
public void testMalformedIP () {
    try {
        new RangeFeeder ("10.11.12.abc.", "10.11.12.10");
        fail ();
    } catch (FeederException e) {
        assertFeederException ("malformedIP", e);
    }
    try {
        new RangeFeeder ("10.11.12.1", "ziga,");
        fail ();
    } catch (FeederException e) {
        assertFeederException ("malformedIP", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RangeFeederTest.java" startline="66" endline="80">
@Test
public void testExtremeValues () {
    RangeFeeder rangeFeeder = null;
    rangeFeeder = new RangeFeeder ("0.0.0.0", "0.0.0.0");
    assertTrue (rangeFeeder.hasNext ());
    assertEquals ("0.0.0.0", rangeFeeder.next ().getAddress ().getHostAddress ());
    assertFalse (rangeFeeder.hasNext ());
    rangeFeeder = new RangeFeeder ("255.255.255.255", "255.255.255.255");
    assertTrue (rangeFeeder.hasNext ());
    assertEquals ("255.255.255.255", rangeFeeder.next ().getAddress ().getHostAddress ());
    assertFalse (rangeFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RangeFeederTest.java" startline="82" endline="98">
@Test
public void testGetPercentageComplete () throws Exception {
    RangeFeeder rangeFeeder = new RangeFeeder ("100.11.12.13", "100.11.12.15");
    assertEquals (0, rangeFeeder.percentageComplete ());
    rangeFeeder.next ();
    assertEquals (33, rangeFeeder.percentageComplete ());
    rangeFeeder.next ();
    assertEquals (67, rangeFeeder.percentageComplete ());
    rangeFeeder.next ();
    assertEquals (100, rangeFeeder.percentageComplete ());
    rangeFeeder = new RangeFeeder ("255.255.255.255", "255.255.255.255");
    assertEquals (0, rangeFeeder.percentageComplete ());
    rangeFeeder.next ();
    assertEquals (100, rangeFeeder.percentageComplete ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RangeFeederTest.java" startline="100" endline="107">
@Test
public void testGetInfo () {
    RangeFeeder rangeFeeder = new RangeFeeder ("100.11.12.13", "100.11.12.13");
    assertEquals ("100.11.12.13 - 100.11.12.13", rangeFeeder.getInfo ());
    rangeFeeder = new RangeFeeder ("0.0.0.0", "255.255.255.255");
    assertEquals ("0.0.0.0 - 255.255.255.255", rangeFeeder.getInfo ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="26" endline="38">
@Test
public void testHappyPath () throws FeederException {
    StringReader reader = new StringReader ("10.11.12.13 10.11.12.14 10.11.12.15");
    FileFeeder fileFeeder = new FileFeeder (reader);
    assertTrue (fileFeeder.hasNext ());
    assertEquals ("10.11.12.13", fileFeeder.next ().getAddress ().getHostAddress ());
    assertTrue (fileFeeder.hasNext ());
    assertEquals ("10.11.12.14", fileFeeder.next ().getAddress ().getHostAddress ());
    assertTrue (fileFeeder.hasNext ());
    assertEquals ("10.11.12.15", fileFeeder.next ().getAddress ().getHostAddress ());
    assertFalse (fileFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="40" endline="52">
@Test
public void testStringParams () {
    try {
        new FileFeeder (new File (LabelsTest.findBaseDir (), "build.xml").getPath ());
        fail ();
    } catch (FeederException e) {
        assertEquals ("file.nothingFound", e.getMessage ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="54" endline="66">
@Test
public void testNoFile () {
    try {
        new FileFeeder ("no_such_file.txt");
        fail ();
    } catch (FeederException e) {
        assertFeederException ("file.notExists", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="68" endline="81">
@Test
public void testNothingFound () {
    try {
        StringReader reader = new StringReader ("no ip addresses here");
        new FileFeeder (reader);
        fail ();
    } catch (FeederException e) {
        FeederTestUtils.assertFeederException ("file.nothingFound", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="83" endline="103">
@Test
public void testExtractFromDifferentFormats () {
    assertAddressCount ("The 127.0.0.1 is the localhost IP,\n but 192.168.255.255 is probably a broadcast IP", 2);
    assertAddressCount ("1.1.1.,1245\n2.2.2.2:123\n3.3.3.3.3.3\n\n\n9.9.9.9999", 2);
    assertAddressCount ("1.2.3.4", 1);
    assertAddressCount ("1.2.3.4:125\n2.3.4.255:347", 2);
    assertAddressCount ("255.255.255.255\n\n\n\t0.0.0.0", 2);
    assertAddressCount ("999.999.999.999,1.1.01.1", 1);
    assertAddressCount ("<xml>66.87.99.128</xml>\n<xml>000.87.99.129</xml>0000.1.1.1", 2);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="105" endline="123">
@Test
public void testGetPercentageComplete () throws Exception {
    StringReader reader = new StringReader ("1.2.3.4, 2.3.4.5, mega cool 0.0.0.0");
    FileFeeder fileFeeder = new FileFeeder (reader);
    assertEquals (0, fileFeeder.percentageComplete ());
    fileFeeder.next ();
    assertEquals (33, fileFeeder.percentageComplete ());
    fileFeeder.next ();
    assertEquals (67, fileFeeder.percentageComplete ());
    fileFeeder.next ();
    assertEquals (100, fileFeeder.percentageComplete ());
    reader = new StringReader ("255.255.255.255");
    fileFeeder = new FileFeeder (reader);
    assertEquals (0, fileFeeder.percentageComplete ());
    fileFeeder.next ();
    assertEquals (100, fileFeeder.percentageComplete ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="125" endline="131">
@Test
public void testGetInfo () {
    StringReader reader = new StringReader ("255.255.255.255, 2.3.4.5, mega cool 0.0.0.0");
    FileFeeder fileFeeder = new FileFeeder (reader);
    assertEquals ("3", fileFeeder.getInfo ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="133" endline="148">
@Test
public void requestedPortsAreDetected () throws Exception {
    StringReader reader = new StringReader ("1.2.3.4:1234\n2.3.4.5:\n 7.6.5.4:789004\n 1.2.3.5:80  1.2.3.5:3128 ");
    FileFeeder fileFeeder = new FileFeeder (reader);
    assertEquals (1234, (int) fileFeeder.next ().requestedPortsIterator ().next ());
    assertFalse (fileFeeder.next ().isAnyPortRequested ());
    assertFalse (fileFeeder.next ().isAnyPortRequested ());
    ScanningSubject lastSubject = fileFeeder.next ();
    assertEquals ("1.2.3.5", lastSubject.getAddress ().getHostAddress ());
    Iterator < Integer > portIterator = lastSubject.requestedPortsIterator ();
    assertEquals (80, (int) portIterator.next ());
    assertEquals (3128, (int) portIterator.next ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FileFeederTest.java" startline="150" endline="161">
private void assertAddressCount (String s, int addressCount) {
    StringReader reader = new StringReader (s);
    FileFeeder feeder = new FileFeeder (reader);
    int numAddresses = 0;
    while (feeder.hasNext ()) {
        feeder.next ();
        numAddresses ++;
    }
    assertEquals (addressCount, numAddresses);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="16" endline="25">
@Test
public void testHappyPath () throws FeederException {
    RandomFeeder randomFeeder = new RandomFeeder ("255.255.255.255", "255...0", 2);
    assertTrue (randomFeeder.hasNext ());
    assertTrue (randomFeeder.next ().getAddress ().getHostAddress ().startsWith ("255.255.255"));
    assertTrue (randomFeeder.hasNext ());
    assertTrue (randomFeeder.next ().getAddress ().getHostAddress ().startsWith ("255.255.255"));
    assertFalse (randomFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="27" endline="39">
@Test
public void testInvalidCount () {
    try {
        new RandomFeeder ("1.1.1.1", "1.1.1.1", 0);
        fail ();
    } catch (FeederException e) {
        assertFeederException ("random.invalidCount", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="41" endline="53">
@Test
public void testMalformedIP () {
    try {
        new RandomFeeder ("{123}", "10.11.12.10", 1);
        fail ();
    } catch (FeederException e) {
        assertFeederException ("malformedIP", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="55" endline="67">
@Test
public void testInvalidNetmask () {
    try {
        new RandomFeeder ("1.1.1.1", "<invalid>", 1);
        fail ();
    } catch (FeederException e) {
        assertFeederException ("invalidNetmask", e);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="69" endline="77">
@Test
public void testFullMask () {
    RandomFeeder randomFeeder = null;
    randomFeeder = new RandomFeeder ("1.2.3.45", "255.255.255.255", 1);
    assertTrue (randomFeeder.hasNext ());
    assertEquals ("1.2.3.45", randomFeeder.next ().getAddress ().getHostAddress ());
    assertFalse (randomFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="79" endline="87">
@Test
public void testEmptyMask () {
    RandomFeeder randomFeeder = null;
    randomFeeder = new RandomFeeder ("1.2.3.45", "0.0.0.0", 1);
    assertTrue (randomFeeder.hasNext ());
    assertFalse ("1.2.3.45".equals (randomFeeder.next ().getAddress ().getHostAddress ()));
    assertFalse (randomFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="89" endline="99">
@Test
public void testMaskStartEnd () {
    RandomFeeder randomFeeder = null;
    randomFeeder = new RandomFeeder ("1.2.3.45", "255.0.0.255", 1);
    assertTrue (randomFeeder.hasNext ());
    String address = randomFeeder.next ().getAddress ().getHostAddress ();
    assertTrue (address.startsWith ("1."));
    assertTrue (address.endsWith (".45"));
    assertFalse (randomFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="101" endline="119">
@Test
public void testDifferent () {
    RandomFeeder randomFeeder = null;
    String address = null;
    randomFeeder = new RandomFeeder ("1.2.3.45", "255.0.255.0", 2);
    assertTrue (randomFeeder.hasNext ());
    address = randomFeeder.next ().getAddress ().getHostAddress ();
    assertFalse ("1.2.3.45".equals (address));
    assertTrue (randomFeeder.hasNext ());
    assertFalse (address.equals (randomFeeder.next ().getAddress ().getHostAddress ()));
    assertFalse (randomFeeder.hasNext ());
    randomFeeder = new RandomFeeder ("1.2.3.45", "255.0.127.0", 1);
    assertTrue (randomFeeder.hasNext ());
    assertFalse (address.equals (randomFeeder.next ().getAddress ().getHostAddress ()));
    assertFalse (randomFeeder.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="121" endline="137">
@Test
public void testGetPercentageComplete () throws Exception {
    RandomFeeder randomFeeder = new RandomFeeder ("100.11.12.13", "100.11.12.15", 3);
    assertEquals (0, randomFeeder.percentageComplete ());
    randomFeeder.next ();
    assertEquals (33, randomFeeder.percentageComplete ());
    randomFeeder.next ();
    assertEquals (67, randomFeeder.percentageComplete ());
    randomFeeder.next ();
    assertEquals (100, randomFeeder.percentageComplete ());
    randomFeeder = new RandomFeeder ("255.255.255.255", "255.255.255.255", 1);
    assertEquals (0, randomFeeder.percentageComplete ());
    randomFeeder.next ();
    assertEquals (100, randomFeeder.percentageComplete ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RandomFeederTest.java" startline="139" endline="146">
@Test
public void testGetInfo () {
    RandomFeeder randomFeeder = new RandomFeeder ("100.11.12.13", "100.11.12.15", 3);
    assertEquals ("3: 100.11.12.13 / 100.11.12.15", randomFeeder.getInfo ());
    randomFeeder = new RandomFeeder ("0.0.0.0", "255.255.255.255", 129876);
    assertEquals ("129876: 0.0.0.0 / 255.255.255.255", randomFeeder.getInfo ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RescanFeederTest.java" startline="26" endline="30">
@Test(expected=IllegalArgumentException.class)
public void testEmpty () throws Exception {
    new RescanFeeder (null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RescanFeederTest.java" startline="32" endline="39">
@Test
public void testDelegatedMethods () {
    feeder = new RescanFeeder (mockFeeder (), "123");
    assertEquals ("SomeInfo", feeder.getInfo ());
    assertEquals ("someLabel", feeder.getId ());
    assertEquals (Labels.getLabel ("feeder.rescan.of") + "someName", feeder.getName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RescanFeederTest.java" startline="41" endline="60">
@Test
public void testFunctionality () throws Exception {
    feeder = new RescanFeeder (mockFeeder (), "127.0.0.15", "127.0.1.35", "127.0.2.2");
    assertTrue (feeder.hasNext ());
    assertEquals (0, feeder.percentageComplete ());
    assertEquals ("127.0.0.15", feeder.next ().getAddress ().getHostAddress ());
    assertTrue (feeder.hasNext ());
    assertEquals (33, feeder.percentageComplete ());
    assertEquals ("127.0.1.35", feeder.next ().getAddress ().getHostAddress ());
    assertTrue (feeder.hasNext ());
    assertEquals (66, feeder.percentageComplete ());
    assertEquals ("127.0.2.2", feeder.next ().getAddress ().getHostAddress ());
    assertFalse (feeder.hasNext ());
    assertEquals (100, feeder.percentageComplete ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/RescanFeederTest.java" startline="62" endline="69">
private Feeder mockFeeder () {
    Feeder feeder = mock (Feeder.class);
    when (feeder.getInfo ()).thenReturn ("SomeInfo");
    when (feeder.getId ()).thenReturn ("someLabel");
    when (feeder.getName ()).thenReturn ("someName");
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/feeders/FeederTestUtils.java" startline="17" endline="23">
public static void assertFeederException (String message, FeederException e) {
    Assert.assertEquals (message, e.getMessage ());
    Assert.assertNotNull (Labels.getLabel ("exception.FeederException." + message));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="25" endline="54">
@Before
public void setUp () throws Exception {
    feederGUI = new AbstractFeederGUI (new Shell ()) {
        protected void initialize () {
        } public String getFeederName () {
            return "Mega Feeder";
        } public Feeder createFeeder () {
            feeder = new RangeFeeder ("127.0.0.1", "127.0.0.2");
            return feeder;
        } public String [] serialize () {
            return new String [0];
        } public void unserialize (String [] parts) {
        } public String [] serializePartsLabels () {
            return new String [0];
        }}

    ;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="30" endline="32">
protected void initialize () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="33" endline="36">
public String getFeederName () {
    return "Mega Feeder";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="37" endline="41">
public Feeder createFeeder () {
    feeder = new RangeFeeder ("127.0.0.1", "127.0.0.2");
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="42" endline="45">
public String [] serialize () {
    return new String [0];
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="46" endline="48">
public void unserialize (String [] parts) {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="49" endline="52">
public String [] serializePartsLabels () {
    return new String [0];
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="56" endline="60">
@Test
public void testGetInfo () {
    assertEquals ("Mega Feeder: 127.0.0.1 - 127.0.0.2", feederGUI.getInfo ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/AbstractFeederGUITest.java" startline="62" endline="70">
@Test
public void serializePartsAreLabels () throws Exception {
    for (String label : feederGUI.serializePartsLabels ()) {
        Labels.getLabel (label);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/FeederGUIRegistryTest.java" startline="34" endline="43">
@Before
public void createRegistry () {
    parent = new Shell ();
    feederSelectionCombo = mock (Combo.class);
    feederGUI = new RangeFeederGUI (parent);
    registry = new FeederGUIRegistry (new AbstractFeederGUI [] {feederGUI}, feederSelectionCombo, null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/FeederGUIRegistryTest.java" startline="45" endline="49">
@After
public void dispose () {
    parent.dispose ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/FeederGUIRegistryTest.java" startline="51" endline="57">
@Test
public void addFeederNamesToTheCombo () throws Exception {
    reset (feederSelectionCombo);
    new FeederGUIRegistry (new AbstractFeederGUI [] {feederGUI}, feederSelectionCombo, null);
    verify (feederSelectionCombo).add (Labels.getLabel (feederGUI.getFeederId ()));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/FeederGUIRegistryTest.java" startline="59" endline="65">
@Test
public void createFeederRemembersTheLastOne () throws Exception {
    Feeder lastFeeder = registry.createFeeder ();
    assertSame (lastFeeder, registry.lastScanFeeder);
    assertNotSame (lastFeeder, registry.createFeeder ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/feeders/FeederGUIRegistryTest.java" startline="67" endline="73">
@Test
public void createRescanFeederGetsOriginalFeeder () throws Exception {
    Feeder lastFeeder = registry.createFeeder ();
    Feeder rescanFeeder = registry.createRescanFeeder (new TableItem [] {mock (TableItem.class)});
    assertEquals (lastFeeder.getId (), rescanFeeder.getId ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/SelectFetchersDialogTest.java" startline="20" endline="34">
@Test
public void testSaveFetchersToRegistry () {
    FetcherRegistry fetcherRegistry = mock (FetcherRegistry.class);
    SelectFetchersDialog selectFetchersDialog = new SelectFetchersDialog (fetcherRegistry);
    selectFetchersDialog.registeredFetcherIdsByNames.put ("IP", "fetcher.ip");
    selectFetchersDialog.registeredFetcherIdsByNames.put ("Hello", "fetcher.hello");
    selectFetchersDialog.registeredFetcherIdsByNames.put ("Blah", "fetcher.blah");
    selectFetchersDialog.saveFetchersToRegistry (new String [] {"Blah", "Hello"});
    verify (fetcherRegistry).updateSelectedFetchers (new String [] {"fetcher.ip", "fetcher.blah", "fetcher.hello"});
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/SWTTestCase.java" startline="25" endline="29">
@Before
public void setUp () {
    newShell ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/SWTTestCase.java" startline="31" endline="35">
protected void newShell () {
    disposeShell ();
    shell = new Shell (display);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/SWTTestCase.java" startline="37" endline="44">
private void disposeShell () {
    if (shell != null) {
        shell.dispose ();
        shell = null;
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/SWTTestCase.java" startline="46" endline="56">
@After
public void tearDown () {
    display.syncExec (new Runnable () {
        public void run () {
            disposeShell ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/SWTTestCase.java" startline="51" endline="54">
public void run () {
    disposeShell ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/StatisticsDialogTest.java" startline="30" endline="42">
@Test
public void timeToText () throws Exception {
    Labels.initialize (new Locale ("en"));
    assertEquals ("0\u00A0sec", StatisticsDialog.timeToText (0));
    assertEquals ("0.5\u00A0sec", StatisticsDialog.timeToText (499));
    assertEquals ("0.3\u00A0sec", StatisticsDialog.timeToText (265));
    assertEquals ("1\u00A0sec", StatisticsDialog.timeToText (1001));
    assertEquals ("1.5\u00A0min", StatisticsDialog.timeToText (90025));
    assertEquals ("10\u00A0min", StatisticsDialog.timeToText (600000));
    assertEquals ("1\u00A0h", StatisticsDialog.timeToText (3600000));
    assertEquals ("2.5\u00A0h", StatisticsDialog.timeToText (9036000));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/StatisticsDialogTest.java" startline="44" endline="73">
@Test
public void dialogContent () throws Exception {
    ScanningResultList results = mock (ScanningResultList.class);
    ScanInfo scanInfo = new ScanInfo () {

        {
            this.startTime = System.currentTimeMillis ();
            this.endTime = this.startTime + 10000;
            this.numScanned = 20;
            this.numAlive = 10;
            this.numWithPorts = 5;
        }

    }

    ;
    when (results.getScanInfo ()).thenReturn (scanInfo);
    when (results.getFeederName ()).thenReturn ("SomeFeeder");
    when (results.getFeederInfo ()).thenReturn ("SomeInfoHere");
    String text = new StatisticsDialog (results).prepareText ();
    assertNotNull (text);
    assertTrue (text.contains (Labels.getLabel ("text.scan.time.total") + "10"));
    assertTrue (text.contains (Labels.getLabel ("text.scan.time.average") + "0.5"));
    assertTrue (text.contains ("SomeFeeder"));
    assertTrue (text.contains ("SomeInfoHere"));
    assertTrue (text.contains (Labels.getLabel ("text.scan.hosts.total") + "20"));
    assertTrue (text.contains (Labels.getLabel ("text.scan.hosts.alive") + "10"));
    assertTrue (text.contains (Labels.getLabel ("text.scan.hosts.ports") + "5"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/OpenerLauncherTest.java" startline="37" endline="98">
@Test
public void testReplaceValues () throws UnknownHostException {
    FetcherRegistry fetcherRegistry = mock (FetcherRegistry.class);
    when (fetcherRegistry.getSelectedFetchers ()).thenReturn (Collections.< Fetcher > nCopies (5, null));
    when (fetcherRegistry.getSelectedFetcherIndex (IPFetcher.ID)).thenReturn (0);
    when (fetcherRegistry.getSelectedFetcherIndex (HostnameFetcher.ID)).thenReturn (1);
    when (fetcherRegistry.getSelectedFetcherIndex (PingFetcher.ID)).thenReturn (2);
    when (fetcherRegistry.getSelectedFetcherIndex ("fetcher.comment")).thenReturn (3);
    when (fetcherRegistry.getSelectedFetcherIndex ("noSuchFetcher")).thenReturn (- 1);
    ScanningResultList scanningResults = new ScanningResultList (fetcherRegistry);
    scanningResults.initNewScan (mockFeeder ("info"));
    ScanningResult result = scanningResults.createResult (InetAddress.getByName ("127.0.0.1"));
    result.setValue (0, new InetAddressHolder (InetAddress.getByName ("127.0.0.1")));
    result.setValue (1, "HOSTNAME");
    result.setValue (2, new IntegerWithUnit (10, "ms"));
    scanningResults.registerAtIndex (0, result);
    OpenerLauncher ol = new OpenerLauncher (fetcherRegistry, scanningResults);
    assertEquals ("\\\\127.0.0.1", ol.prepareOpenerStringForItem ("\\\\${fetcher.ip}", 0));
    assertEquals ("HOSTNAME$$$127.0.0.1xxx${}", ol.prepareOpenerStringForItem ("${fetcher.hostname}$$$${fetcher.ip}xxx${}", 0));
    assertEquals ("http://127.0.0.1:80/www", ol.prepareOpenerStringForItem ("http://${fetcher.ip}:80/www", 0));
    assertEquals (result.getValues ().get (2) + ", xx", ol.prepareOpenerStringForItem ("${fetcher.ping}, xx", 0));
    try {
        ol.prepareOpenerStringForItem ("${noSuchFetcher}", 0);
        fail ();
    } catch (UserErrorException e) {
        assertEquals (Labels.getLabel ("exception.UserErrorException.opener.unknownFetcher") + "noSuchFetcher", e.getMessage ());
    }
    try {
        ol.prepareOpenerStringForItem ("${fetcher.comment}", 0);
        fail ();
    } catch (UserErrorException e) {
        assertEquals (Labels.getLabel ("exception.UserErrorException.opener.nullFetcherValue") + "fetcher.comment", e.getMessage ());
    }
    try {
        result.setValue (3, NotAvailable.VALUE);
        ol.prepareOpenerStringForItem ("${fetcher.comment}", 0);
        fail ();
    } catch (UserErrorException e) {
        assertEquals (Labels.getLabel ("exception.UserErrorException.opener.nullFetcherValue") + "fetcher.comment", e.getMessage ());
    }
    result.setValue (1, null);
    assertEquals ("Hostname opening should fall back to the IP", "127.0.0.1", ol.prepareOpenerStringForItem ("${" + HostnameFetcher.ID + "}", 0));
    result.setValue (1, NotAvailable.VALUE);
    assertEquals ("Hostname opening should fall back to the IP", "127.0.0.1", ol.prepareOpenerStringForItem ("${" + HostnameFetcher.ID + "}", 0));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/OpenerLauncherTest.java" startline="100" endline="108">
@Test
public void testCommandSplitting () throws Exception {
    assertArrayEquals (new String [] {"hello", "world"}, OpenerLauncher.splitCommand ("hello world"));
    assertArrayEquals (new String [] {"echo", "hello world", "muha-ha"}, OpenerLauncher.splitCommand ("echo 'hello world' muha-ha"));
    assertArrayEquals (new String [] {"echo", "hello world", "muha-ha"}, OpenerLauncher.splitCommand ("echo \"hello world\" muha-ha"));
    assertArrayEquals (new String [] {"mix \"1", "mix '2"}, OpenerLauncher.splitCommand ("'mix \"1' \"mix '2\""));
    assertArrayEquals (new String [] {"\"aaa"}, OpenerLauncher.splitCommand ("\"aaa"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/OpenerLauncherTest.java" startline="110" endline="116">
private Feeder mockFeeder (String feederInfo) {
    Feeder feeder = mock (Feeder.class);
    when (feeder.getInfo ()).thenReturn (feederInfo);
    when (feeder.getName ()).thenReturn ("feeder.range");
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/StartStopScanningActionTest.java" startline="24" endline="33">
@Test
public void testAllImagesAreDefined () throws Exception {
    StartStopScanningAction action = new StartStopScanningAction (Display.getDefault ());
    for (ScanningState state : ScanningState.values ()) {
        assertNotNull (action.buttonImages [state.ordinal ()]);
        assertNotNull (action.buttonTexts [state.ordinal ()]);
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/GotoActionsTest.java" startline="27" endline="36">
@Test
public void nextHostFindsFirstHost () throws Exception {
    when (table.getItemCount ()).thenReturn (2);
    when (table.getSelectionIndex ()).thenReturn (- 1);
    when (results.getResult (0).getType ()).thenReturn (ResultType.WITH_PORTS);
    new NextHost (table, ResultType.ALIVE).handleEvent (null);
    verify (table).setFocus ();
    verify (table).setSelection (0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/GotoActionsTest.java" startline="38" endline="49">
@Test
public void nextHostStartsFromMiddleRewindsAndFindsFirstOne () {
    when (table.getItemCount ()).thenReturn (2);
    when (table.getSelectionIndex ()).thenReturn (0);
    when (results.getResult (1).getType ()).thenReturn (ResultType.DEAD);
    when (results.getResult (0).getType ()).thenReturn (ResultType.ALIVE);
    when (table.getSelectionIndex ()).thenReturn (- 1);
    new NextHost (table, ResultType.ALIVE).handleEvent (null);
    verify (table).setFocus ();
    verify (table).setSelection (0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/GotoActionsTest.java" startline="51" endline="61">
@Test
public void nextHostFindsSecondItem () {
    when (table.getItemCount ()).thenReturn (2);
    when (table.getSelectionIndex ()).thenReturn (- 1);
    when (results.getResult (0).getType ()).thenReturn (ResultType.WITH_PORTS);
    when (results.getResult (1).getType ()).thenReturn (ResultType.DEAD);
    new NextHost (table, ResultType.DEAD).handleEvent (null);
    verify (table).setFocus ();
    verify (table).setSelection (1);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/GotoActionsTest.java" startline="63" endline="73">
@Test
public void prevHostFindsLastHost () throws Exception {
    when (table.getItemCount ()).thenReturn (10);
    when (table.getSelectionIndex ()).thenReturn (- 1);
    when (results.getResult (9).getType ()).thenReturn (ResultType.WITH_PORTS);
    when (table.setFocus ()).thenReturn (true);
    new PrevHost (table, ResultType.ALIVE).handleEvent (null);
    verify (table).setFocus ();
    verify (table).setSelection (9);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/GotoActionsTest.java" startline="75" endline="86">
@Test
public void prevHostRewindsAndFindsLastItem () {
    when (table.getItemCount ()).thenReturn (25);
    when (table.getSelectionIndex ()).thenReturn (0);
    when (results.getResult (24).getType ()).thenReturn (ResultType.DEAD);
    when (results.getResult (23).getType ()).thenReturn (ResultType.ALIVE);
    when (table.getSelectionIndex ()).thenReturn (- 1);
    new PrevHost (table, ResultType.ALIVE).handleEvent (null);
    verify (table).setFocus ();
    verify (table).setSelection (23);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/actions/GotoActionsTest.java" startline="88" endline="96">
@Test
public void prevHostDoesntFindAnything () {
    when (table.getItemCount ()).thenReturn (1);
    when (table.getSelectionIndex ()).thenReturn (- 1);
    when (results.getResult (0).getType ()).thenReturn (ResultType.DEAD);
    new PrevHost (table, ResultType.ALIVE).handleEvent (null);
    verify (table, never ()).setSelection (anyInt ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/PreferencesDialogTest.java" startline="31" endline="38">
private KeyEvent initPortsTextListener () {
    portsTextListener = new PortsTextValidationListener ();
    Event ev = new Event ();
    ev.widget = mock (Text.class);
    ev.doit = true;
    return new KeyEvent (ev);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/PreferencesDialogTest.java" startline="40" endline="51">
@Test
public void portsTextTraversesOnTab () throws Exception {
    KeyEvent e = initPortsTextListener ();
    e.keyCode = SWT.TAB;
    Shell shell = mock (Shell.class);
    when (((Control) e.getSource ()).getShell ()).thenReturn (shell);
    when (shell.traverse (SWT.TRAVERSE_TAB_NEXT)).thenReturn (true);
    portsTextListener.keyPressed (e);
    assertFalse (e.doit);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/PreferencesDialogTest.java" startline="53" endline="64">
@Test
public void portsTextTraversesOnEnter () throws Exception {
    KeyEvent e = initPortsTextListener ();
    e.keyCode = SWT.CR;
    Shell shell = mock (Shell.class);
    when (((Control) e.getSource ()).getShell ()).thenReturn (shell);
    when (shell.traverse (SWT.TRAVERSE_RETURN)).thenReturn (true);
    portsTextListener.keyPressed (e);
    assertFalse (e.doit);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/PreferencesDialogTest.java" startline="66" endline="79">
@Test
public void portsTextInsertsNewLineOnCtrlEnter () throws Exception {
    KeyEvent e = initPortsTextListener ();
    e.character = SWT.CR;
    e.keyCode = SWT.CR;
    e.stateMask = SWT.MOD1;
    when (((Text) e.widget).getText ()).thenReturn ("1,");
    when (((Text) e.widget).getCaretPosition ()).thenReturn (2);
    portsTextListener.keyPressed (e);
    assertEquals (0, e.stateMask);
    assertTrue (e.doit);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/PreferencesDialogTest.java" startline="81" endline="88">
@Test
public void portsTextControlCharsBypassed () throws Exception {
    KeyEvent e = initPortsTextListener ();
    e.character = 0;
    portsTextListener.keyPressed (e);
    assertTrue ("ISO control chars must be passed through", e.doit);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/PreferencesDialogTest.java" startline="90" endline="110">
@Test
public void testPortsTextValidationListenerLogic () throws Exception {
    PortsTextValidationListener listener = new PortsTextValidationListener ();
    assertFalse (listener.validateChar ('-', "", 0));
    assertFalse (listener.validateChar ('-', "-", 0));
    assertFalse (listener.validateChar ('-', ",", 0));
    assertFalse (listener.validateChar ('\n', "", 0));
    assertFalse (listener.validateChar (',', ",", 0));
    assertFalse (listener.validateChar (',', "-", 0));
    assertFalse (listener.validateChar (',', "12,3", 3));
    assertTrue (listener.validateChar (',', "1234", 2));
    assertTrue (listener.validateChar ('-', "1234", 2));
    assertTrue (listener.validateChar (' ', "123,", 4));
    assertTrue (listener.validateChar ('\n', "123,", 4));
    assertTrue (listener.validateChar ('7', "123,1-3,1-", 10));
    assertTrue (listener.validateChar ('3', "1,   ", 4));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="27" endline="31">
@Override
public void open () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="34" endline="39">
@After
public void dispose () {
    if (! dialog.text.isDisposed ()) dialog.text.getShell ().dispose ();

}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="41" endline="46">
@Test
public void titleAndMessageDisplayed () throws Exception {
    assertEquals ("msg", dialog.messageLabel.getText ());
    assertEquals ("title", dialog.messageLabel.getShell ().getText ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="48" endline="53">
@Test
public void defaultText () throws Exception {
    dialog.open ("hello");
    assertEquals ("hello", dialog.text.getSelectionText ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="55" endline="61">
@Test
public void nullText () throws Exception {
    dialog.open (null);
    assertEquals ("", dialog.text.getText ());
    assertTrue (((FormData) dialog.text.getLayoutData ()).width > 200);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="63" endline="75">
@Test
public void openReturnsEnteredText () throws Exception {
    dialog = new InputDialog ("title", "msg") {
        @Override
        public void open () {
            okButton.notifyListeners (SWT.Selection, new Event ());
        }}

    ;
    assertEquals ("foo", dialog.open ("foo"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/gui/InputDialogTest.java" startline="68" endline="72">
@Override
public void open () {
    okButton.notifyListeners (SWT.Selection, new Event ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/MainTest.java" startline="16" endline="46">
@Test
public void getLocalizedMessage () {
    final boolean wasStackTraceLogged [] = {false};
    Throwable e = new Exception ("hello, test!");
    Main.LOG.setUseParentHandlers (false);
    Main.LOG.addHandler (new Handler () {
        public void close () throws SecurityException {
        } public void flush () {
        } public void publish (LogRecord record) {
            wasStackTraceLogged [0] = true;
        }}

    );
    assertEquals (e.toString (), Main.getLocalizedMessage (e));
    assertTrue (wasStackTraceLogged [0]);
    assertEquals (Labels.getLabel ("exception.FeederException.range.greaterThan"), Main.getLocalizedMessage (new FeederException ("range.greaterThan")));
    assertEquals (Labels.getLabel ("exception.OutOfMemoryError"), Main.getLocalizedMessage (new OutOfMemoryError ()));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/MainTest.java" startline="25" endline="27">
public void close () throws SecurityException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/MainTest.java" startline="28" endline="30">
public void flush () {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/MainTest.java" startline="31" endline="34">
public void publish (LogRecord record) {
    wasStackTraceLogged [0] = true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="17" endline="29">
@Test
public void testStartRangeByNetmask () throws UnknownHostException {
    assertEquals ("127.0.1.64", InetAddressUtils.startRangeByNetmask (InetAddress.getByName ("127.0.1.92"), InetAddress.getByName ("255.255.255.192")).getHostAddress ());
    assertEquals ("127.0.0.15", InetAddressUtils.startRangeByNetmask (InetAddress.getByName ("127.0.0.15"), InetAddress.getByName ("255.255.255.255")).getHostAddress ());
    assertEquals ("192.10.0.0", InetAddressUtils.startRangeByNetmask (InetAddress.getByName ("192.10.11.13"), InetAddress.getByName ("255.255.0.0")).getHostAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="31" endline="43">
@Test
public void testEndRangeByNetmask () throws UnknownHostException {
    assertEquals ("127.0.1.127", InetAddressUtils.endRangeByNetmask (InetAddress.getByName ("127.0.1.92"), InetAddress.getByName ("255.255.255.192")).getHostAddress ());
    assertEquals ("127.0.0.15", InetAddressUtils.endRangeByNetmask (InetAddress.getByName ("127.0.0.15"), InetAddress.getByName ("255.255.255.255")).getHostAddress ());
    assertEquals ("192.10.255.255", InetAddressUtils.endRangeByNetmask (InetAddress.getByName ("192.10.11.13"), InetAddress.getByName ("255.255.0.0")).getHostAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="45" endline="51">
@Test
public void testIncrement () throws UnknownHostException {
    assertEquals ("127.0.0.2", InetAddressUtils.increment (InetAddress.getByName ("127.0.0.1")).getHostAddress ());
    assertEquals ("128.0.0.0", InetAddressUtils.increment (InetAddress.getByName ("127.255.255.255")).getHostAddress ());
    assertEquals ("0.0.0.0", InetAddressUtils.increment (InetAddress.getByName ("255.255.255.255")).getHostAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="53" endline="62">
@Test
public void testGreaterThan () throws UnknownHostException {
    assertTrue (InetAddressUtils.greaterThan (InetAddress.getByName ("127.0.0.1"), InetAddress.getByName ("127.0.0.0")));
    assertTrue (InetAddressUtils.greaterThan (InetAddress.getByName ("129.0.0.1"), InetAddress.getByName ("128.0.0.0")));
    assertTrue (InetAddressUtils.greaterThan (InetAddress.getByName ("255.0.0.0"), InetAddress.getByName ("254.255.255.255")));
    assertFalse (InetAddressUtils.greaterThan (InetAddress.getByName ("0.0.0.0"), InetAddress.getByName ("255.255.255.255")));
    assertFalse (InetAddressUtils.greaterThan (InetAddress.getByName ("0.0.0.0"), InetAddress.getByName ("0.0.0.0")));
    assertFalse (InetAddressUtils.greaterThan (InetAddress.getByName ("127.0.0.1"), InetAddress.getByName ("127.0.5.0")));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="64" endline="81">
@Test
public void testParseNetmask () throws UnknownHostException {
    assertEquals ("255.255.255.255", InetAddressUtils.parseNetmask ("255.255.255.255").getHostAddress ());
    assertEquals ("255.255.255.255", InetAddressUtils.parseNetmask ("255...255").getHostAddress ());
    assertEquals ("255.0.255.255", InetAddressUtils.parseNetmask ("255.0..255").getHostAddress ());
    assertEquals ("255.255.255.192", InetAddressUtils.parseNetmask ("255...192").getHostAddress ());
    assertEquals ("255.0.255.0", InetAddressUtils.parseNetmask ("255.0..0").getHostAddress ());
    assertEquals ("0.0.0.0", InetAddressUtils.parseNetmask ("0.0.0.0").getHostAddress ());
    assertEquals ("0.0.0.0", InetAddressUtils.parseNetmask ("/0").getHostAddress ());
    assertEquals ("128.0.0.0", InetAddressUtils.parseNetmask ("/1").getHostAddress ());
    assertEquals ("255.255.0.0", InetAddressUtils.parseNetmask ("/16").getHostAddress ());
    assertEquals ("255.255.255.0", InetAddressUtils.parseNetmask ("/24").getHostAddress ());
    assertEquals ("255.255.255.128", InetAddressUtils.parseNetmask ("/25").getHostAddress ());
    assertEquals ("255.255.255.248", InetAddressUtils.parseNetmask ("/29").getHostAddress ());
    assertEquals ("255.255.255.255", InetAddressUtils.parseNetmask ("/32").getHostAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="83" endline="97">
@Test
public void testMaskPrototypeBytes () throws UnknownHostException {
    byte [] bytes = InetAddress.getByName ("32.23.34.254").getAddress ();
    InetAddressUtils.maskPrototypeAddressBytes (bytes, InetAddress.getByName ("255.0.0.255").getAddress (), InetAddress.getByName ("29.1.2.255").getAddress ());
    assertEquals ("29.23.34.255", InetAddress.getByAddress (bytes).getHostAddress ());
    bytes = InetAddress.getByName ("250.250.250.250").getAddress ();
    InetAddressUtils.maskPrototypeAddressBytes (bytes, InetAddress.getByName ("0.0.0.0").getAddress (), InetAddress.getByName ("29.1.2.255").getAddress ());
    assertEquals ("250.250.250.250", InetAddress.getByAddress (bytes).getHostAddress ());
    bytes = InetAddress.getByName ("250.250.250.250").getAddress ();
    InetAddressUtils.maskPrototypeAddressBytes (bytes, InetAddress.getByName ("255.255.255.255").getAddress (), InetAddress.getByName ("29.128.127.73").getAddress ());
    assertEquals ("29.128.127.73", InetAddress.getByAddress (bytes).getHostAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="99" endline="105">
@Test
public void testIsLikelyBroadcast () throws UnknownHostException {
    assertTrue (InetAddressUtils.isLikelyBroadcast (InetAddress.getByName ("127.0.2.0")));
    assertTrue (InetAddressUtils.isLikelyBroadcast (InetAddress.getByName ("127.6.32.255")));
    assertFalse (InetAddressUtils.isLikelyBroadcast (InetAddress.getByName ("127.4.5.6")));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/InetAddressUtilsTest.java" startline="107" endline="119">
@Test
public void testGetAddressByName () throws Exception {
    Enumeration < NetworkInterface > ifaces = NetworkInterface.getNetworkInterfaces ();
    ifaces.nextElement ();
    if (ifaces.hasMoreElements ()) {
        assertFalse (InetAddress.getByName (InetAddressUtils.getAddressByName (InetAddress.getLocalHost ().getHostName ()).getHostAddress ()).isLoopbackAddress ());
        assertFalse (InetAddress.getByName (InetAddressUtils.getAddressByName ("localhost").getHostAddress ()).isLoopbackAddress ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/SequenceIteratorTest.java" startline="24" endline="31">
@Test
public void singleIterator () throws Exception {
    Iterator < Integer > i = new SequenceIterator < Integer > (Arrays.asList (1).iterator ());
    assertTrue (i.hasNext ());
    assertEquals (1, (int) i.next ());
    assertFalse (i.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/SequenceIteratorTest.java" startline="33" endline="44">
@Test
public void twoIterators () throws Exception {
    Iterator < Integer > i = new SequenceIterator < Integer > (Arrays.asList (1, 2).iterator (), Arrays.asList (3).iterator ());
    assertTrue (i.hasNext ());
    assertEquals (1, (int) i.next ());
    assertTrue (i.hasNext ());
    assertEquals (2, (int) i.next ());
    assertTrue (i.hasNext ());
    assertEquals (3, (int) i.next ());
    assertFalse (i.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/util/SequenceIteratorTest.java" startline="46" endline="53">
@Test
public void firstEmpty () throws Exception {
    Iterator < Integer > i = new SequenceIterator < Integer > (Arrays.< Integer > asList ().iterator (), Arrays.asList (3).iterator ());
    assertTrue (i.hasNext ());
    assertEquals (3, (int) i.next ());
    assertFalse (i.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="36" endline="42">
@Before
public void prepare () {
    feederCreator = mock (FeederCreator.class);
    exporters = mock (ExporterRegistry.class);
    processor = new CommandLineProcessor (new MockFeederRegistry (feederCreator), exporters);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="43" endline="107">
public MainWindow (Shell shell, GUIConfig guiConfig, Composite feederArea, Composite controlsArea, Combo feederSelectionCombo, Button startStopButton, StartStopScanningAction startStopScanningAction, ResultTable resultTable, StatusBar statusBar, CommandsMenu resultsContextMenu, FeederGUIRegistry feederGUIRegistry, final StateMachine stateMachine, ToolsActions.Preferences preferencesListener, ToolsActions.ChooseFetchers chooseFetchersListsner) {
    this.shell = shell;
    this.guiConfig = guiConfig;
    this.statusBar = statusBar;
    initShell (shell);
    initFeederArea (feederArea, feederGUIRegistry);
    initControlsArea (controlsArea, feederSelectionCombo, startStopButton, startStopScanningAction, preferencesListener, chooseFetchersListsner);
    initTableAndStatusBar (resultTable, resultsContextMenu, statusBar);
    shell.setBounds (guiConfig.getMainWindowBounds ());
    shell.open ();
    if (guiConfig.isMainWindowMaximized) {
        shell.setMaximized (true);
    } else {
        shell.setBounds (guiConfig.getMainWindowBounds ());
    }
    if (guiConfig.isFirstRun) {
        Display.getCurrent ().asyncExec (new Runnable () {
            public void run () {
                if (Platform.CRIPPLED_WINDOWS) {
                    if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
                        BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
                    }
                }
                if (Platform.GNU_JAVA) {
                    showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
                }
                MainWindow.this.shell.forceActive ();
                new GettingStartedDialog ().open ();
                MainWindow.this.guiConfig.isFirstRun = false;
            }}

        );
    }
    stateMachine.addTransitionListener (new EnablerDisabler ());
    Display.getCurrent ().asyncExec (new Runnable () {
        public void run () {
            stateMachine.init ();
        }}

    );
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="75" endline="93">
public void run () {
    if (Platform.CRIPPLED_WINDOWS) {
        if (showMessage (Labels.getLabel ("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES) {
            BrowserLauncher.openURL (Version.FAQ_CRIPPLED_WINDOWS_URL);
        }
    }
    if (Platform.GNU_JAVA) {
        showMessage (Labels.getLabel ("text.gnuJavaInfo"), SWT.OK);
    }
    MainWindow.this.shell.forceActive ();
    new GettingStartedDialog ().open ();
    MainWindow.this.guiConfig.isFirstRun = false;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="101" endline="105">
public void run () {
    stateMachine.init ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="109" endline="126">
@Test
public void toStringGeneratesUsageHelp () throws Exception {
    when (feederCreator.getFeederId ()).thenReturn ("feeder.range");
    when (feederCreator.serializePartsLabels ()).thenReturn (new String [] {"feeder.range.to"});
    Exporter exporter = mock (Exporter.class);
    when (exporters.iterator ()).thenReturn (Collections.singleton (exporter).iterator ());
    when (exporter.getFilenameExtension ()).thenReturn ("pdf");
    when (exporter.getId ()).thenReturn ("exporter.txt");
    String usage = processor.toString ();
    assertTrue (usage.contains ("-f:range"));
    assertTrue (usage.contains (Labels.getLabel ("feeder.range.to")));
    assertTrue (usage.contains (".pdf"));
    assertTrue (usage.contains ("-q"));
    assertTrue (usage.contains ("-s"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="128" endline="147">
@Test
public void minimal () throws Exception {
    when (feederCreator.getFeederId ()).thenReturn ("feeder.feeder");
    when (feederCreator.serializePartsLabels ()).thenReturn (new String [] {"1st", "2nd"});
    Exporter txtExporter = mock (Exporter.class);
    when (exporters.createExporter ("file.txt")).thenReturn (txtExporter);
    processor.parse ("-f:feeder", "arg1", "arg2", "-o", "file.txt");
    assertEquals (feederCreator, processor.feederCreator);
    assertEquals ("file.txt", processor.outputFilename);
    assertEquals (txtExporter, processor.exporter);
    assertFalse (processor.autoQuit);
    assertFalse (processor.appendToFile);
    assertTrue ("specifying exporter should enable autoStart", processor.autoStart);
    verify (feederCreator).unserialize (new String [] {"arg1", "arg2"});
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="149" endline="163">
@Test
public void options () throws Exception {
    when (feederCreator.getFeederId ()).thenReturn ("feeder.mega");
    when (feederCreator.serializePartsLabels ()).thenReturn (new String [0]);
    processor.parse ("-s", "-f:mega", "-aq");
    assertEquals (feederCreator, processor.feederCreator);
    assertTrue (processor.autoQuit);
    assertTrue (processor.autoStart);
    assertTrue (processor.appendToFile);
    verify (feederCreator).unserialize (new String [0]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="165" endline="169">
@Test(expected=IllegalArgumentException.class)
public void missingRequiredFeeder () throws Exception {
    processor.parse ("-o", "exporter");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="171" endline="175">
@Test(expected=IllegalArgumentException.class)
public void inexistentExporter () throws Exception {
    processor.parse ("-o", "blah");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="177" endline="181">
@Test(expected=IllegalArgumentException.class)
public void inexistentFeeder () throws Exception {
    processor.parse ("-f:blah");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="183" endline="187">
@Test(expected=IllegalArgumentException.class)
public void extraExporter () throws Exception {
    processor.parse ("-f:feeder", "-o", "exporter.txt", "-o", "exporter.xml");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="189" endline="193">
@Test(expected=IllegalArgumentException.class)
public void extraFeeder () throws Exception {
    processor.parse ("-f:feeder", "-o", "exporter.xml", "-f:feeder");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="200" endline="203">
public MockFeederRegistry (FeederCreator...creators) {
    list = Arrays.asList (creators);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="205" endline="207">
public void select (String feederId) {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/CommandLineProcessorTest.java" startline="209" endline="212">
public Iterator < FeederCreator > iterator () {
    return list.iterator ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="31" endline="37">
@Before
public void setUp () throws Exception {
    preferences = Preferences.userRoot ().node ("ipscan-test");
    preferences.clear ();
    config = new OpenersConfig (preferences);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="39" endline="43">
@After
public void tearDown () throws Exception {
    preferences.removeNode ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="45" endline="49">
@Test
public void testDefaultValues () throws Exception {
    assertTrue (config.size () > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="51" endline="60">
@Test
public void testAddNoStrings () {
    try {
        config.add ("aa", "b");
        fail ();
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="62" endline="73">
@Test
public void testAdd () {
    config.update (new String [] {});
    config.add ("Mega favorite", new OpenersConfig.Opener ("a@@@0@@@c"));
    assertEquals ("a", config.getOpener ("Mega favorite").execString);
    assertEquals (false, config.getOpener ("Mega favorite").inTerminal);
    assertEquals ("c", config.getOpener ("Mega favorite").workingDir.getName ());
    assertEquals (1, config.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="75" endline="87">
@Test
public void testOpenerDeserialize () {
    OpenersConfig.Opener o = new OpenersConfig.Opener ("uu@@uu@@@1@@@");
    assertEquals ("uu@@uu", o.execString);
    assertEquals (true, o.inTerminal);
    assertEquals (null, o.workingDir);
    o = new OpenersConfig.Opener ("c:\\program files\\mega app\\app.exe@@@0@@@c:\\windoze system");
    assertEquals ("c:\\program files\\mega app\\app.exe", o.execString);
    assertEquals (false, o.inTerminal);
    assertEquals ("c:\\windoze system", o.workingDir.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="89" endline="98">
@Test
public void testLoad () throws Exception {
    preferences.put (PREFERENCE_NAME, "aa###aaa@@@1@@@###bb###bbb@@@1@@@");
    OpenersConfig config = new OpenersConfig (preferences);
    assertEquals ("aaa", config.getOpener ("aa").execString);
    assertEquals ("bbb", config.getOpener ("bb").execString);
    assertEquals (2, config.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="100" endline="110">
@Test
@SuppressWarnings("unchecked")
public void testOrder () throws Exception {
    preferences.put (PREFERENCE_NAME, "aa###aaa@@@1@@@###bb###bbb@@@1@@@");
    OpenersConfig config = new OpenersConfig (preferences);
    Iterator namesIterator = config.iterator ();
    assertEquals ("aa", namesIterator.next ());
    assertEquals ("bb", namesIterator.next ());
    assertFalse (namesIterator.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="112" endline="123">
@Test
public void testStore () throws Exception {
    config.update (new String [] {});
    config.add ("x", new OpenersConfig.Opener ("aa", true, null));
    config.add ("x y z", new OpenersConfig.Opener ("a a", true, new File ("zzz z")));
    config.store ();
    assertEquals ("x###aa@@@1@@@###x y z###a a@@@1@@@zzz z", preferences.get (PREFERENCE_NAME, ""));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java" startline="125" endline="138">
@Test
@SuppressWarnings("unchecked")
public void testUpdate () {
    config.add ("x", new OpenersConfig.Opener ("aa", true, null));
    config.add ("y", new OpenersConfig.Opener ("bb", false, null));
    config.add ("z", new OpenersConfig.Opener ("ccc", false, null));
    config.update (new String [] {"x", "z"});
    Iterator i = config.iterator ();
    assertEquals ("x", i.next ());
    assertEquals ("z", i.next ());
    assertFalse (i.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/GUIConfigTest.java" startline="31" endline="37">
@Before
public void setUp () throws Exception {
    preferences = Preferences.userRoot ().node ("ipscan-test");
    preferences.clear ();
    config = new GUIConfig (preferences);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/GUIConfigTest.java" startline="39" endline="43">
@After
public void tearDown () throws Exception {
    preferences.removeNode ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/GUIConfigTest.java" startline="45" endline="57">
@Test
public void setMainWindowDimensions () throws Exception {
    Rectangle bounds1 = new Rectangle (4, 3, 2, 1);
    config.setMainWindowBounds (bounds1, false);
    assertFalse (config.isMainWindowMaximized);
    assertEquals (bounds1, config.getMainWindowBounds ());
    Rectangle bounds2 = new Rectangle (1, 2, 3, 4);
    config.setMainWindowBounds (bounds2, true);
    assertTrue (config.isMainWindowMaximized);
    assertEquals (bounds1, config.getMainWindowBounds ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/GUIConfigTest.java" startline="59" endline="69">
@Test
public void store () throws Exception {
    config.setMainWindowBounds (new Rectangle (11, 22, 33, 44), false);
    config.store ();
    assertEquals (11, preferences.getInt ("windowLeft", 0));
    config.setMainWindowBounds (new Rectangle (77, 22, 33, 44), true);
    config.store ();
    assertEquals (11, preferences.getInt ("windowLeft", 0));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/GUIConfigTest.java" startline="71" endline="80">
@Test
public void columnWidths () throws Exception {
    Fetcher fetcher = mock (Fetcher.class);
    when (fetcher.getId ()).thenReturn ("fetcher.abc");
    config.setColumnWidth (fetcher, 35);
    assertEquals (35, config.getColumnWidth (fetcher));
    assertEquals (35, preferences.getInt ("columnWidth." + fetcher.getId (), 0));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="27" endline="31">
@Before
public void setUp () throws Exception {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="33" endline="40">
@Test
public void testReinitialize () {
    Labels.initialize (new Locale ("en"));
    Object oldInternalInstance = Labels.getInstance ();
    Labels.initialize (new Locale ("en"));
    assertTrue (oldInternalInstance == Labels.getInstance ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="42" endline="49">
@Test
public void testInitialize () {
    Labels.initialize (new Locale ("en"));
    Object oldInternalInstance = Labels.getInstance ();
    Labels.initialize (new Locale ("ee"));
    assertFalse (oldInternalInstance == Labels.getInstance ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="51" endline="55">
@Test
public void testSimpleLabel () {
    assertEquals ("&Scan", Labels.getLabel ("menu.scan"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="57" endline="69">
@Test
public void testInexistentLabel () {
    try {
        Labels.getLabel ("abra-cadabra");
        fail ();
    } catch (Exception e) {
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="71" endline="81">
@Test
public void testImageAsStream () throws IOException {
    InputStream stream = Labels.getInstance ().getImageAsStream ("button.start.img");
    stream.read ();
    assertEquals ((int) 'P', stream.read ());
    assertEquals ((int) 'N', stream.read ());
    assertEquals ((int) 'G', stream.read ());
    stream.close ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="87" endline="92">
@Test
public void testAllLabels () throws IOException {
    File srcDir = new File (findBaseDir (), "src");
    recurseAndTestLabels (srcDir);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="94" endline="101">
public static File findBaseDir () {
    URL url = LabelsTest.class.getClassLoader ().getResource ("messages.properties");
    File parent = new File (url.getPath ());
    while (! new File (parent, "build.xml").exists ()) parent = parent.getParentFile ();

    return parent;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="103" endline="118">
private void recurseAndTestLabels (File dir) throws IOException {
    String files [] = dir.list ();
    for (int i = 0;
    i < files.length; i ++) {
        File file = new File (dir, files [i]);
        if (file.isDirectory ()) {
            recurseAndTestLabels (file);
        } else if (file.getName ().endsWith (".java")) {
            findAndTestLabels (file);
        }

    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LabelsTest.java" startline="120" endline="166">
private void findAndTestLabels (File file) throws IOException {
    final Pattern LABELS_REGEX = Pattern.compile ("Label.get{1,60}\"([a-z]\\w+?\\.[a-z][\\w.]+?\\w)\"");
    final Pattern EXCEPTION_REGEX = Pattern.compile ("new\\s+?(\\w+?Exception)\\(\"([\\w.]+?\\w)\"");
    BufferedReader fileReader = new BufferedReader (new FileReader (file));
    StringBuffer sb = new StringBuffer ();
    String fileLine;
    while ((fileLine = fileReader.readLine ()) != null) {
        sb.append (fileLine);
    }
    fileReader.close ();
    String fileContent = sb.toString ();
    String key = null;
    try {
        Matcher matcher = LABELS_REGEX.matcher (fileContent);
        while (matcher.find ()) {
            key = matcher.group (1);
            Labels.getLabel (key);
        }
        matcher = EXCEPTION_REGEX.matcher (fileContent);
        while (matcher.find ()) {
            key = "exception." + matcher.group (1) + "." + matcher.group (2);
            Labels.getLabel (key);
        }
    } catch (MissingResourceException e) {
        throw new AssertionFailedError ("Label not found: " + key + ", in file: " + file.getPath ());
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/ConfigTest.java" startline="16" endline="25">
@Test
public void testGetters () {
    Config config = Config.getConfig ();
    assertNotNull (config.getPreferences ());
    assertNotNull (config.forScanner ());
    assertNotNull (config.forGUI ());
    assertNotNull (config.forFavorites ());
    assertNotNull (config.forOpeners ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/LoggerFactoryTest.java" startline="18" endline="22">
public void testAutomaticNameInitialization () {
    assertEquals (getClass ().getName (), staticLogger.getName ());
    assertEquals (getClass ().getName (), LoggerFactory.getLogger ().getName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="29" endline="35">
@Before
public void setUp () throws Exception {
    preferences = Preferences.userRoot ().node ("ipscan-test");
    preferences.node (PREFERENCE_NAME).clear ();
    config = new NamedListConfig (preferences, PREFERENCE_NAME);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="37" endline="41">
@After
public void tearDown () throws Exception {
    preferences.removeNode ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="43" endline="49">
@Test
public void testAdd () {
    config.add ("Mega favorite", "aaa:xxx");
    assertEquals ("aaa:xxx", config.get ("Mega favorite"));
    assertEquals (1, config.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="51" endline="55">
@Test
public void testGetNull () throws Exception {
    assertNull (config.get ("foobar"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="57" endline="63">
@Test
public void testRemove () {
    config.add ("Mega favorite", "aaa:xxx");
    assertEquals ("aaa:xxx", config.remove ("Mega favorite"));
    assertEquals (0, config.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="65" endline="75">
@Test
public void testLoad () throws Exception {
    preferences.put (PREFERENCE_NAME, "aa###aaa###bb###bbb###cc###ccc");
    NamedListConfig config = new NamedListConfig (preferences, PREFERENCE_NAME);
    assertEquals ("aaa", config.get ("aa"));
    assertEquals ("bbb", config.get ("bb"));
    assertEquals ("ccc", config.get ("cc"));
    assertEquals (3, config.size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="77" endline="88">
@Test
@SuppressWarnings("unchecked")
public void testOrder () throws Exception {
    preferences.put (PREFERENCE_NAME, "aa###aaa###bb###bbb###cc###ccc");
    NamedListConfig config = new NamedListConfig (preferences, PREFERENCE_NAME);
    Iterator namesIterator = config.iterator ();
    assertEquals ("aa", namesIterator.next ());
    assertEquals ("bb", namesIterator.next ());
    assertEquals ("cc", namesIterator.next ());
    assertFalse (namesIterator.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="90" endline="99">
@Test
public void testStore () throws Exception {
    config.add ("x", "y");
    config.add ("Buga muga x,1,2,3,4,5", "opopo op : , . l ; - # | @@");
    config.add ("127.0.0.1", "192.168.2.25");
    config.store ();
    assertEquals ("x###y###Buga muga x,1,2,3,4,5###opopo op : , . l ; - # | @@###127.0.0.1###192.168.2.25", preferences.get (PREFERENCE_NAME, ""));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/config/NamedListConfigTest.java" startline="101" endline="114">
@Test
@SuppressWarnings("unchecked")
public void testUpdate () {
    config.add ("z", "zzz");
    config.add ("y", "yyy");
    config.add ("x", "xxx");
    config.update (new String [] {"x", "z"});
    Iterator i = config.iterator ();
    assertEquals ("xxx", config.get ((String) i.next ()));
    assertEquals ("zzz", config.get ((String) i.next ()));
    assertFalse (i.hasNext ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/IPFetcherTest.java" startline="24" endline="28">
@Before
public void setUp () throws Exception {
    fetcher = new IPFetcher ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/IPFetcherTest.java" startline="30" endline="35">
@Test
public void testScan () throws UnknownHostException {
    assertEquals (InetAddress.getLocalHost ().getHostAddress (), fetcher.scan (new ScanningSubject (InetAddress.getLocalHost ())).toString ());
    assertEquals ("255.255.255.255", fetcher.scan (new ScanningSubject (InetAddress.getByName ("255.255.255.255"))).toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/AbstractFetcherTestCase.java" startline="25" endline="29">
@Test
public void testId () {
    assertNotNull (fetcher.getId ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/AbstractFetcherTestCase.java" startline="31" endline="35">
@Test
public void testName () {
    assertNotNull (fetcher.getName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/AbstractFetcherTestCase.java" startline="37" endline="41">
@Test
public void testFullName () {
    assertNotNull (fetcher.getFullName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/NetBIOSInfoFetcherTest.java" startline="20" endline="28">
@Test
public void extractNamesNoUserNoGroup () throws Exception {
    byte [] response = ("01234567890123456789012345678901234567890123456789012345\u0001" + "ComputerName   XYY" + "\u00DE\u00AD\u00BE\u00EF\u0000\u0000         XYY").getBytes ("ISO-8859-1");
    assertEquals ("ComputerName [DE-AD-BE-EF-00-00]", NetBIOSInfoFetcher.extractNames (response, 1));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/NetBIOSInfoFetcherTest.java" startline="30" endline="39">
@Test
public void extractNamesNoUserWithGroup () throws Exception {
    byte [] response = ("01234567890123456789012345678901234567890123456789012345\u0002" + "ComputerName   XYY" + "GroupName      \u0000\u0080\u0000" + "\u0001\u0002\u0003\u0004\u0005\u0006         XYY").getBytes ("ISO-8859-1");
    assertEquals ("GroupName\\ComputerName [01-02-03-04-05-06]", NetBIOSInfoFetcher.extractNames (response, 2));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/NetBIOSInfoFetcherTest.java" startline="41" endline="55">
@Test
public void extractNamesWithUserAndGroup () throws Exception {
    byte [] response = ("01234567890123456789012345678901234567890123456789012345\u0007" + "ComputerName   XYY" + "SomeName       X\u007F\u0000" + "SomeName       X\u0085\u0000" + "GroupName      \u0000\u0085\u0000" + "WrongUserName  \u0003YY" + "UserName       \u0003YY" + "SomeName       XYY" + "\u00DE\u00AD\u00BE\u00EF\u0000\u0000         XYY").getBytes ("ISO-8859-1");
    assertEquals ("GroupName\\UserName@ComputerName [DE-AD-BE-EF-00-00]", NetBIOSInfoFetcher.extractNames (response, 7));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PingTTLFetcherTest.java" startline="18" endline="22">
@Before
public void setUp () throws Exception {
    fetcher = new PingTTLFetcher (null, Config.getConfig ().forScanner ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PingFetcherTest.java" startline="18" endline="22">
@Before
public void setUp () throws Exception {
    fetcher = new PingFetcher (null, Config.getConfig ().forScanner ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PortsFetcherTest.java" startline="34" endline="39">
@Before
public void setUp () throws Exception {
    config = mock (ScannerConfig.class);
    fetcher = new PortsFetcher (config);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PortsFetcherTest.java" startline="41" endline="55">
@Test
public void numberOfPortsInFullName () throws Exception {
    config.useRequestedPorts = false;
    config.portString = "";
    assertEquals (fetcher.getName () + " [0]", fetcher.getFullName ());
    config.portString = "1-3";
    assertEquals (fetcher.getName () + " [3]", fetcher.getFullName ());
    config.useRequestedPorts = true;
    config.portString = "21-29,40";
    assertEquals (fetcher.getName () + " [10+]", fetcher.getFullName ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PortsFetcherTest.java" startline="57" endline="68">
@Test
public void scanWithNoResults () throws Exception {
    config.portString = "65535";
    fetcher.init ();
    Object value = fetcher.scan (new ScanningSubject (InetAddress.getLocalHost ()));
    assertNull (value);
    fetcher.cleanup ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PortsFetcherTest.java" startline="70" endline="94">
@Test
public void scanInterrupted () throws Exception {
    config.portString = "65530-65535";
    fetcher.init ();
    Object value = fetcher.scan (new ScanningSubject (InetAddress.getLocalHost ()));
    assertNull (value);
    config.portTimeout = 3000;
    Thread.currentThread ().interrupt ();
    long testStartTime = System.currentTimeMillis ();
    value = fetcher.scan (new ScanningSubject (InetAddress.getByName ("10.255.255.254")));
    assertNull (value);
    assertTrue ("port scanning wasn't interrupted", System.currentTimeMillis () - testStartTime < 3000);
    assertTrue (Thread.interrupted ());
    fetcher.cleanup ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PortsFetcherTest.java" startline="96" endline="134">
@Test
public void scanWithResults () throws Exception {
    Thread server = new Thread () {
        public void run () {
            try {
                ServerSocket server = new ServerSocket (65431);
                synchronized (this) {
                    this.notify ();
                }
                Socket socket = server.accept ();
                socket.close ();
                server.close ();
            } catch (IOException e) {
                fail ("couldn't test creation of server");
            }
        }}

    ;
    config.portString = "65431";
    fetcher.init ();
    synchronized (server) {
        server.start ();
        server.wait ();
    }
    NumericRangeList value = (NumericRangeList) fetcher.scan (new ScanningSubject (InetAddress.getLocalHost ()));
    assertEquals (config.portString, value.toString ());
    fetcher.cleanup ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/PortsFetcherTest.java" startline="102" endline="119">
public void run () {
    try {
        ServerSocket server = new ServerSocket (65431);
        synchronized (this) {
            this.notify ();
        }
        Socket socket = server.accept ();
        socket.close ();
        server.close ();
    } catch (IOException e) {
        fail ("couldn't test creation of server");
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="37" endline="49">
@Before
public void setUp () throws Exception {
    preferences = Preferences.userRoot ().node ("ipscan-test");
    preferences.clear ();
    ipFetcher = new IPFetcher ();
    pingFetcher = new PingFetcher (null, null);
    hostnameFetcher = new HostnameFetcher ();
    commentFetcher = new CommentFetcher (null);
    portsFetcher = new PortsFetcher (null);
    fetcherRegistry = new FetcherRegistryImpl (new Fetcher [] {ipFetcher, pingFetcher, hostnameFetcher, commentFetcher, portsFetcher}, preferences, null);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="51" endline="55">
@After
public void tearDown () throws Exception {
    preferences.removeNode ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="57" endline="64">
@Test
public void testCreate () throws Exception {
    assertEquals (5, fetcherRegistry.getRegisteredFetchers ().size ());
    assertEquals (4, fetcherRegistry.getSelectedFetchers ().size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="66" endline="70">
@Test(expected=UnsupportedOperationException.class)
public void testModifyRegisteredFetchers () throws Exception {
    fetcherRegistry.getRegisteredFetchers ().clear ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="72" endline="80">
@Test
public void testGetSelectedFetcherIndex () throws Exception {
    assertEquals (0, fetcherRegistry.getSelectedFetcherIndex (ipFetcher.getId ()));
    assertEquals (1, fetcherRegistry.getSelectedFetcherIndex (pingFetcher.getId ()));
    assertEquals (2, fetcherRegistry.getSelectedFetcherIndex (hostnameFetcher.getId ()));
    assertEquals (3, fetcherRegistry.getSelectedFetcherIndex (portsFetcher.getId ()));
    assertEquals (- 1, fetcherRegistry.getSelectedFetcherIndex (commentFetcher.getId ()));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="82" endline="99">
@Test
public void testLoadPreferences () throws Exception {
    preferences.remove (FetcherRegistryImpl.PREFERENCE_SELECTED_FETCHERS);
    fetcherRegistry = new FetcherRegistryImpl (new Fetcher [] {ipFetcher, hostnameFetcher, commentFetcher}, preferences, null);
    assertEquals (4, fetcherRegistry.getSelectedFetchers ().size ());
    preferences.put (FetcherRegistryImpl.PREFERENCE_SELECTED_FETCHERS, hostnameFetcher.getId () + "###" + commentFetcher.getId ());
    fetcherRegistry = new FetcherRegistryImpl (new Fetcher [] {ipFetcher, hostnameFetcher, commentFetcher}, preferences, null);
    assertEquals (2, fetcherRegistry.getSelectedFetchers ().size ());
    Iterator < ? > iterator = fetcherRegistry.getSelectedFetchers ().iterator ();
    assertSame (hostnameFetcher, iterator.next ());
    assertSame (commentFetcher, iterator.next ());
    preferences.put (FetcherRegistryImpl.PREFERENCE_SELECTED_FETCHERS, "not-existing-fetcher###" + hostnameFetcher.getId ());
    fetcherRegistry = new FetcherRegistryImpl (new Fetcher [] {ipFetcher, hostnameFetcher}, preferences, null);
    assertEquals (1, fetcherRegistry.getSelectedFetchers ().size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="101" endline="118">
@Test
public void testUpdateSelectedFetchers () throws Exception {
    fetcherRegistry.updateSelectedFetchers (new String [] {ipFetcher.getId ()});
    assertEquals (1, fetcherRegistry.getSelectedFetchers ().size ());
    Iterator < ? > iterator = fetcherRegistry.getSelectedFetchers ().iterator ();
    assertEquals (ipFetcher.getId (), ((Fetcher) iterator.next ()).getId ());
    assertEquals (ipFetcher.getId (), preferences.get (FetcherRegistryImpl.PREFERENCE_SELECTED_FETCHERS, null));
    fetcherRegistry.updateSelectedFetchers (new String [] {commentFetcher.getId (), ipFetcher.getId ()});
    assertEquals (2, fetcherRegistry.getSelectedFetchers ().size ());
    iterator = fetcherRegistry.getSelectedFetchers ().iterator ();
    assertEquals (commentFetcher.getId (), ((Fetcher) iterator.next ()).getId ());
    assertEquals (ipFetcher.getId (), ((Fetcher) iterator.next ()).getId ());
    assertEquals (commentFetcher.getId () + "###" + ipFetcher.getId (), preferences.get (FetcherRegistryImpl.PREFERENCE_SELECTED_FETCHERS, null));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="120" endline="135">
@Test
public void testListener () throws Exception {
    final boolean listenerWasCalled [] = {false};
    fetcherRegistry.addListener (new FetcherRegistryUpdateListener () {
        public void handleUpdateOfSelectedFetchers (FetcherRegistry fetcherRegistry) {
            assertSame (FetcherRegistryImplTest.this.fetcherRegistry, fetcherRegistry);
            assertEquals (0, fetcherRegistry.getSelectedFetchers ().size ());
            listenerWasCalled [0] = true;
        }}

    );
    fetcherRegistry.updateSelectedFetchers (new String [] {});
    assertTrue (listenerWasCalled [0]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="126" endline="131">
public void handleUpdateOfSelectedFetchers (FetcherRegistry fetcherRegistry) {
    assertSame (FetcherRegistryImplTest.this.fetcherRegistry, fetcherRegistry);
    assertEquals (0, fetcherRegistry.getSelectedFetchers ().size ());
    listenerWasCalled [0] = true;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="137" endline="160">
@Test
public void testOpenPreferencesEditor () throws Exception {
    String message = "foo bar";
    MutablePicoContainer container = new DefaultPicoContainer ();
    container.registerComponentInstance (message);
    Fetcher editableFetcher = new EditableFetcher ();
    fetcherRegistry = new FetcherRegistryImpl (new Fetcher [] {ipFetcher, editableFetcher}, preferences, container);
    EditableFetcherPrefs.calledWithMessage = null;
    fetcherRegistry.openPreferencesEditor (editableFetcher);
    assertSame (message, EditableFetcherPrefs.calledWithMessage);
    assertSame (editableFetcher, EditableFetcherPrefs.calledForFetcher);
    try {
        fetcherRegistry.openPreferencesEditor (ipFetcher);
        fail ("This fetcher is not editable");
    } catch (FetcherException e) {
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="164" endline="167">
public String getId () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="168" endline="171">
public Object scan (ScanningSubject subject) {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="172" endline="176">
@Override
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return EditableFetcherPrefs.class;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="186" endline="189">
public EditableFetcherPrefs (String message) {
    this.message = message;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/FetcherRegistryImplTest.java" startline="191" endline="195">
public void openFor (Fetcher fetcher) {
    calledWithMessage = message;
    calledForFetcher = fetcher;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/HostnameFetcherTest.java" startline="24" endline="28">
@Before
public void setUp () throws Exception {
    fetcher = new HostnameFetcher ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/fetchers/HostnameFetcherTest.java" startline="30" endline="52">
@Test
public void testScan () throws UnknownHostException {
    if (! InetAddress.getLocalHost ().getCanonicalHostName ().equals (InetAddress.getLocalHost ().getHostAddress ())) assertEquals (InetAddress.getLocalHost ().getCanonicalHostName (), fetcher.scan (new ScanningSubject (InetAddress.getLocalHost ())));

    try {
        InetAddress googleAddress = InetAddress.getByName ("www.google.com");
        assertEquals (googleAddress.getCanonicalHostName (), fetcher.scan (new ScanningSubject (googleAddress)));
    } catch (UnknownHostException e) {
    }
    InetAddress inexistentAddress = InetAddress.getByName ("192.168.253.253");
    if (inexistentAddress.getHostName ().equals ("192.168.253.253")) {
        assertNull (fetcher.scan (new ScanningSubject (inexistentAddress)));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/ICMPSharedPingerTest.java" startline="23" endline="31">
@Test
@Ignore("this test works only under root")
public void testPing () throws Exception {
    Pinger pinger = new ICMPSharedPinger (1000);
    PingResult result = pinger.ping (new ScanningSubject (InetAddress.getLocalHost ()), 3);
    assertTrue (result.getAverageTime () >= 0);
    assertTrue (result.getAverageTime () < 50);
    assertTrue (result.getTTL () >= 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="27" endline="31">
@Before
public void setUp () {
    System.setProperty ("java.library.path", "../swt/lib");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="33" endline="42">
@Test
public void testGetRegisteredNames () throws Exception {
    String [] names = new PingerRegistryImpl (null).getRegisteredNames ();
    assertNotNull (names);
    for (int i = 0;
    i < names.length; i ++) {
        assertNotNull (Labels.getLabel (names [i]));
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="44" endline="63">
@Test
public void testCreatePinger () throws Exception {
    PingerRegistryImpl registry = new PingerRegistryImpl (null);
    String [] names = registry.getRegisteredNames ();
    for (int i = 0;
    i < names.length; i ++) {
        try {
            Pinger pinger = registry.createPinger (names [i], 0);
            pinger.close ();
        } catch (FetcherException e) {
            assertEquals ("pingerCreateFailure", e.getMessage ());
        }
    }
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="65" endline="71">
public void testCreateDefaultPinger () throws Exception {
    ScannerConfig config = Config.getConfig ().forScanner ();
    PingerRegistry registry = new PingerRegistryImpl (config);
    config.selectedPinger = "pinger.udp";
    assertTrue (registry.createPinger () instanceof UDPPinger);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="73" endline="94">
@Test
public void checkSelectedPinger () throws Exception {
    ScannerConfig config = Config.getConfig ().forScanner ();
    PingerRegistryImpl registry = new PingerRegistryImpl (config);
    config.selectedPinger = "pinger.udp";
    assertTrue (registry.checkSelectedPinger ());
    config.selectedPinger = "pinger.tcp";
    assertTrue (registry.checkSelectedPinger ());
    registry.pingers.put ("pinger.dummy1", DummyPinger1.class);
    config.selectedPinger = "pinger.icmp.dummy1";
    assertFalse (registry.checkSelectedPinger ());
    assertEquals ("pinger.combined", config.selectedPinger);
    registry.pingers.put ("pinger.dummy2", DummyPinger2.class);
    config.selectedPinger = "pinger.icmp.dummy2";
    assertFalse (registry.checkSelectedPinger ());
    assertEquals ("pinger.combined", config.selectedPinger);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="98" endline="101">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    throw new IOException ("This pinger will not work!");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="103" endline="105">
public void close () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="111" endline="114">
public DummyPinger2 () {
    throw new RuntimeException ("This pinger will not work, can't even create!");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="116" endline="119">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/net/PingerRegistryImplTest.java" startline="121" endline="123">
public void close () throws IOException {
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/plugins/PluginLoaderTest.java" startline="12" endline="19">
@Test
public void loadFromSystemProperty () {
    System.setProperty ("ipscan.plugins", DummyFetcher.class.getName ());
    MutablePicoContainer container = mock (MutablePicoContainer.class);
    new PluginLoader ().addTo (container);
    verify (container).registerComponentImplementation (DummyFetcher.class);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/plugins/PluginLoaderTest.java" startline="23" endline="26">
public Object scan (ScanningSubject subject) {
    return "dummy";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/plugins/PluginLoaderTest.java" startline="28" endline="31">
public String getId () {
    return "dummy";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="44" endline="53">
@Before
public void setUp () throws Exception {
    fetcherRegistry = mock (FetcherRegistry.class);
    when (fetcherRegistry.getSelectedFetchers ()).thenReturn (Arrays.asList (new Fetcher [] {new FakeFetcher (), new AnotherFakeFetcher (), new AddressAbortingFetcher (), new FailingFetcher ()}));
    scanner = new Scanner (fetcherRegistry);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="55" endline="69">
@Test
public void testScan () throws Exception {
    ScanningResult scanningResult = new ScanningResult (InetAddress.getLocalHost (), 4);
    scanner.scan (new ScanningSubject (InetAddress.getLocalHost ()), scanningResult);
    assertEquals (ResultType.ALIVE, scanningResult.getType ());
    assertEquals (InetAddress.getLocalHost (), scanningResult.getAddress ());
    assertEquals (4, scanningResult.getValues ().size ());
    assertEquals ("blah", scanningResult.getValues ().get (0));
    assertEquals (NotAvailable.VALUE, scanningResult.getValues ().get (1));
    assertEquals ("666 ms", scanningResult.getValues ().get (2));
    assertEquals (NotScanned.VALUE, scanningResult.getValues ().get (3));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="71" endline="93">
@Test
public void testScanInterrupted () throws Exception {
    fetcherRegistry = mock (FetcherRegistry.class);
    when (fetcherRegistry.getSelectedFetchers ()).thenReturn (Arrays.asList (new Fetcher [] {new PlainValueFetcher (), new InterruptedFetcher (), new PlainValueFetcher ()}));
    scanner = new Scanner (fetcherRegistry);
    ScanningResult scanningResult = new ScanningResult (InetAddress.getLocalHost (), 3);
    scanner.scan (new ScanningSubject (InetAddress.getLocalHost ()), scanningResult);
    assertEquals (ResultType.UNKNOWN, scanningResult.getType ());
    assertEquals (InetAddress.getLocalHost (), scanningResult.getAddress ());
    assertEquals (3, scanningResult.getValues ().size ());
    assertEquals ("plainValue", scanningResult.getValues ().get (0));
    assertEquals (NotScanned.VALUE, scanningResult.getValues ().get (1));
    assertEquals (NotScanned.VALUE, scanningResult.getValues ().get (2));
    assertTrue (Thread.interrupted ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="95" endline="103">
@Test
public void testInit () throws Exception {
    scanner.init ();
    assertTrue (initCalled.contains (FakeFetcher.class));
    assertTrue (initCalled.contains (AnotherFakeFetcher.class));
    assertTrue (initCalled.contains (AddressAbortingFetcher.class));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="105" endline="113">
@Test
public void testCleanup () throws Exception {
    scanner.cleanup ();
    assertTrue (cleanupCalled.contains (FakeFetcher.class));
    assertTrue (cleanupCalled.contains (AnotherFakeFetcher.class));
    assertTrue (cleanupCalled.contains (AddressAbortingFetcher.class));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="117" endline="120">
public String getId () {
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="122" endline="140">
public Object scan (ScanningSubject subject) {
    try {
        assertEquals (InetAddress.getLocalHost (), subject.getAddress ());
        subject.setResultType (ResultType.ALIVE);
        subject.setParameter ("megaParam", new Long (211082));
    } catch (UnknownHostException e) {
        fail ();
    }
    return "blah";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="142" endline="145">
public void init () {
    initCalled.add (getClass ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="147" endline="150">
public void cleanup () {
    cleanupCalled.add (getClass ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="155" endline="161">
public Object scan (ScanningSubject subject) {
    assertEquals (new Long (211082), subject.getParameter ("megaParam"));
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="166" endline="170">
public Object scan (ScanningSubject subject) {
    subject.abortAddressScanning ();
    return "666 ms";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="175" endline="179">
public Object scan (ScanningSubject subject) {
    fail ("This fetcher should not be reached");
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="184" endline="187">
public Object scan (ScanningSubject subject) {
    return "plainValue";
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerTest.java" startline="192" endline="197">
public Object scan (ScanningSubject subject) {
    Thread.currentThread ().interrupt ();
    return null;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/ScanningStateTest.java" startline="21" endline="30">
@Test
public void testNext () throws Exception {
    assertEquals (ScanningState.STARTING, ScanningState.IDLE.next ());
    assertEquals (ScanningState.SCANNING, ScanningState.STARTING.next ());
    assertEquals (ScanningState.SCANNING, ScanningState.RESTARTING.next ());
    assertEquals (ScanningState.STOPPING, ScanningState.SCANNING.next ());
    assertEquals (ScanningState.KILLING, ScanningState.STOPPING.next ());
    assertNull (ScanningState.KILLING.next ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="25" endline="30">
@Before
public void createStateMachine () {
    stateMachine = new StateMachine () {
    }

    ;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="32" endline="39">
@Test
public void inState () throws Exception {
    assertTrue (stateMachine.inState (ScanningState.IDLE));
    assertFalse (stateMachine.inState (ScanningState.KILLING));
    stateMachine.transitionTo (ScanningState.KILLING, null);
    assertTrue (stateMachine.inState (ScanningState.KILLING));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="41" endline="54">
@Test
public void transitionToSameState () throws Exception {
    stateMachine.addTransitionListener (new StateTransitionListener () {
        public void transitionTo (ScanningState state, Transition transition) {
            fail ("no transition if changing to the same state");
        }}

    );
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
    stateMachine.transitionTo (ScanningState.IDLE, null);
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="46" endline="49">
public void transitionTo (ScanningState state, Transition transition) {
    fail ("no transition if changing to the same state");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="56" endline="75">
@Test
public void transitionToAnotherState () throws Exception {
    final ScanningState [] calledWithParameter = {null};
    stateMachine.addTransitionListener (new StateTransitionListener () {
        public void transitionTo (ScanningState state, Transition transition) {
            calledWithParameter [0] = state;
        }}

    );
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
    stateMachine.transitionTo (ScanningState.STOPPING, null);
    assertEquals (ScanningState.STOPPING, stateMachine.getState ());
    assertEquals (ScanningState.STOPPING, calledWithParameter [0]);
    stateMachine.transitionTo (ScanningState.STARTING, null);
    assertEquals (ScanningState.STARTING, stateMachine.getState ());
    assertEquals (ScanningState.STARTING, calledWithParameter [0]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="62" endline="65">
public void transitionTo (ScanningState state, Transition transition) {
    calledWithParameter [0] = state;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="77" endline="91">
@Test
public void transitionToNext () throws Exception {
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
    stateMachine.transitionToNext ();
    assertEquals (ScanningState.STARTING, stateMachine.getState ());
    stateMachine.transitionToNext ();
    assertEquals (ScanningState.SCANNING, stateMachine.getState ());
    stateMachine.transitionToNext ();
    assertEquals (ScanningState.STOPPING, stateMachine.getState ());
    stateMachine.transitionToNext ();
    assertEquals (ScanningState.KILLING, stateMachine.getState ());
    stateMachine.transitionToNext ();
    assertEquals (ScanningState.KILLING, stateMachine.getState ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="93" endline="112">
@Test
public void stop () throws Exception {
    final int notificationCount [] = {0};
    stateMachine.addTransitionListener (new StateTransitionListener () {
        public void transitionTo (ScanningState state, Transition transition) {
            notificationCount [0] ++;
        }}

    );
    stateMachine.transitionTo (ScanningState.SCANNING, null);
    assertEquals (1, notificationCount [0]);
    stateMachine.stop ();
    assertEquals (ScanningState.STOPPING, stateMachine.getState ());
    assertEquals (2, notificationCount [0]);
    stateMachine.stop ();
    assertEquals (ScanningState.STOPPING, stateMachine.getState ());
    assertEquals (3, notificationCount [0]);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="99" endline="102">
public void transitionTo (ScanningState state, Transition transition) {
    notificationCount [0] ++;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="114" endline="124">
@Test
public void complete () throws Exception {
    stateMachine.transitionTo (ScanningState.STOPPING, null);
    stateMachine.complete ();
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
    stateMachine.transitionTo (ScanningState.KILLING, null);
    stateMachine.complete ();
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="126" endline="132">
@Test
public void rescan () throws Exception {
    stateMachine.transitionTo (ScanningState.IDLE, null);
    stateMachine.rescan ();
    assertEquals (ScanningState.RESTARTING, stateMachine.getState ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="134" endline="144">
@Test
public void startScanning () throws Exception {
    stateMachine.transitionTo (ScanningState.STARTING, null);
    stateMachine.startScanning ();
    assertEquals (ScanningState.SCANNING, stateMachine.getState ());
    stateMachine.transitionTo (ScanningState.RESTARTING, null);
    stateMachine.startScanning ();
    assertEquals (ScanningState.SCANNING, stateMachine.getState ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/state/StateMachineTest.java" startline="146" endline="156">
@Test
public void reset () throws Exception {
    stateMachine.transitionTo (ScanningState.STARTING, null);
    stateMachine.reset ();
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
    stateMachine.transitionTo (ScanningState.KILLING, null);
    stateMachine.reset ();
    assertEquals (ScanningState.IDLE, stateMachine.getState ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningSubjectTest.java" startline="28" endline="38">
@Before
public void initTest () {
    config = mock (ScannerConfig.class);
    subject = new ScanningSubject (null);
    subject.config = config;
    config.portTimeout = 1000;
    config.adaptPortTimeout = true;
    pingResult = new PingResult (null);
    subject.setParameter (ScanningSubject.PARAMETER_PING_RESULT, pingResult);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningSubjectTest.java" startline="40" endline="70">
@Test
public void adaptedPortTimeoutUsingReplies () throws Exception {
    subject.setParameter (ScanningSubject.PARAMETER_PING_RESULT, null);
    assertEquals (config.portTimeout, subject.getAdaptedPortTimeout ());
    subject.setParameter (ScanningSubject.PARAMETER_PING_RESULT, pingResult);
    assertEquals (config.portTimeout, subject.getAdaptedPortTimeout ());
    pingResult.addReply (100);
    assertEquals (config.portTimeout, subject.getAdaptedPortTimeout ());
    pingResult.addReply (200);
    assertEquals (config.portTimeout, subject.getAdaptedPortTimeout ());
    pingResult.addReply (300);
    assertEquals (300 * 3, subject.getAdaptedPortTimeout ());
    pingResult.addReply (500);
    assertEquals (300 * 3, subject.getAdaptedPortTimeout ());
    subject.adaptedPortTimeout = - 1;
    assertEquals (config.portTimeout, subject.getAdaptedPortTimeout ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningSubjectTest.java" startline="72" endline="82">
@Test
public void forcedAdaptedTimeout () throws Exception {
    pingResult.enableTimeoutAdaptation ();
    assertEquals (config.portTimeout, subject.getAdaptedPortTimeout ());
    pingResult.addReply (100);
    pingResult.enableTimeoutAdaptation ();
    assertEquals (100 * 3, subject.getAdaptedPortTimeout ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningSubjectTest.java" startline="84" endline="91">
@Test
public void adaptedTimeoutTooShort () throws Exception {
    config.minPortTimeout = 100;
    pingResult.addReply (0);
    pingResult.enableTimeoutAdaptation ();
    assertEquals (config.minPortTimeout, subject.getAdaptedPortTimeout ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="33" endline="62">
@Test
public void compareDifferentTypes () throws Exception {
    comparator.byIndex (0, true);
    assertTrue (comparator.compare (res ("a"), res ((String) null)) < 0);
    assertTrue (comparator.compare (res ((Integer) null), res (12)) > 0);
    assertTrue (comparator.compare (res (NotAvailable.VALUE), res (NotAvailable.VALUE)) == 0);
    assertTrue (comparator.compare (res (NotScanned.VALUE), res (NotAvailable.VALUE)) > 0);
    assertTrue (comparator.compare (res (NotAvailable.VALUE), res (NotScanned.VALUE)) < 0);
    assertTrue (comparator.compare (res (125), res (NotScanned.VALUE)) < 0);
    assertTrue (comparator.compare (res (9090), res (NotAvailable.VALUE)) < 0);
    assertTrue (comparator.compare (res (9090), res (new NumericRangeList (Arrays.asList (9090), false))) == 0);
    assertTrue (comparator.compare (res (new NumericRangeList (Arrays.asList (154), false)), res (155)) < 0);
    assertTrue (comparator.compare (res (new NumericRangeList (Arrays.asList (1, 2, 3), false)), res (new NumericRangeList (Arrays.asList (5, 6), false))) > 0);
    assertTrue (comparator.compare (res ("abc"), res ("def")) < 0);
    assertTrue (comparator.compare (res ("123"), res (123)) == 0);
    assertTrue (comparator.compare (res ("ZZZ"), res (99)) > 0);
    assertTrue (comparator.compare (res ("125"), res ("13")) < 0);
    assertTrue (comparator.compare (res (125), res (13)) > 0);
    assertTrue (comparator.compare (res (new IntegerWithUnit (125, "ms")), res (new IntegerWithUnit (13, "ms"))) > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="64" endline="75">
@Test
public void differentIndexesSupported () throws Exception {
    comparator.byIndex (0, true);
    assertTrue (comparator.compare (res ("a", "z"), res ("z", "a")) < 0);
    comparator.byIndex (1, true);
    assertTrue (comparator.compare (res ("a", "z"), res ("z", "a")) > 0);
    comparator.byIndex (2, false);
    assertTrue (comparator.compare (res ("a", "x", "mmm"), res ("a", "y", "mmm")) == 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="77" endline="86">
@Test
public void descendingWorks () throws Exception {
    comparator.byIndex (0, false);
    assertTrue (comparator.compare (res ("a"), res (NotAvailable.VALUE)) < 0);
    assertTrue (comparator.compare (res (NotScanned.VALUE), res (NotAvailable.VALUE)) > 0);
    assertTrue (comparator.compare (res (2), res (1)) < 0);
    assertTrue (comparator.compare (res ("A"), res ("Z")) > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="88" endline="96">
@Test
public void stringsComparedCaseInsensitively () throws Exception {
    comparator.byIndex (0, true);
    assertTrue (comparator.compare (res ("a"), res ("A")) == 0);
    assertTrue (comparator.compare (res ("Anton"), res ("ANT")) > 0);
    assertTrue (comparator.compare (res ("Z"), res ("a")) > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="98" endline="113">
@Test
public void fallbackToIP () throws Exception {
    Object ip1 = new InetAddressHolder (InetAddress.getByName ("127.0.0.25"));
    Object ip2 = new InetAddressHolder (InetAddress.getByName ("127.0.0.30"));
    Object ip3 = new InetAddressHolder (InetAddress.getByName ("128.0.0.25"));
    comparator.byIndex (1, true);
    assertTrue (comparator.compare (res (ip1, "a"), res (ip1, "A")) == 0);
    assertTrue (comparator.compare (res (ip1, "a"), res (ip2, "a")) < 0);
    assertTrue (comparator.compare (res (ip3, "a"), res (ip2, "a")) > 0);
    comparator.byIndex (1, false);
    assertTrue (comparator.compare (res (ip1, null), res (ip2, null)) > 0);
    assertTrue (comparator.compare (res (ip3, null), res (ip2, null)) < 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="115" endline="148">
@Test
public void sortingWorksInBothDirections () throws Exception {
    ScanningResult [] results = {res (NotScanned.VALUE), res (NotAvailable.VALUE), res (15), res (NotScanned.VALUE), res (1), res (NotAvailable.VALUE), res ("a")};
    comparator.byIndex (0, true);
    Arrays.sort (results, comparator);
    assertEquals (1, results [0].getValues ().get (0));
    assertEquals (15, results [1].getValues ().get (0));
    assertEquals ("a", results [2].getValues ().get (0));
    assertEquals (NotAvailable.VALUE, results [3].getValues ().get (0));
    assertEquals (NotAvailable.VALUE, results [4].getValues ().get (0));
    assertEquals (NotScanned.VALUE, results [5].getValues ().get (0));
    assertEquals (NotScanned.VALUE, results [6].getValues ().get (0));
    comparator.byIndex (0, false);
    Arrays.sort (results, comparator);
    assertEquals ("a", results [0].getValues ().get (0));
    assertEquals (15, results [1].getValues ().get (0));
    assertEquals (1, results [2].getValues ().get (0));
    assertEquals (NotAvailable.VALUE, results [3].getValues ().get (0));
    assertEquals (NotScanned.VALUE, results [5].getValues ().get (0));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultComparatorTest.java" startline="150" endline="158">
private ScanningResult res (Object...values) throws UnknownHostException {
    ScanningResult result = new ScanningResult (InetAddress.getLocalHost (), values.length);
    for (int i = 0;
    i < values.length; i ++) {
        result.setValue (i, values [i]);
    }
    return result;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="52" endline="60">
@Before
public void setUp () throws Exception {
    fetcherRegistry = mock (FetcherRegistry.class);
    when (fetcherRegistry.getSelectedFetchers ()).thenReturn (fetchers);
    scanningResults = new ScanningResultList (fetcherRegistry);
    scanningResults.initNewScan (mockFeeder ("someFeeder"));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="62" endline="74">
@Test
public void testConstructor () throws Exception {
    StateMachine stateMachine = new StateMachine () {
    }

    ;
    scanningResults = new ScanningResultList (fetcherRegistry, stateMachine);
    scanningResults.initNewScan (mockFeeder ("inff"));
    assertFalse (scanningResults.getScanInfo ().isCompletedNormally ());
    stateMachine.transitionToNext ();
    stateMachine.startScanning ();
    stateMachine.stop ();
    stateMachine.complete ();
    assertTrue (scanningResults.getScanInfo ().isCompletedNormally ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="76" endline="120">
@Test
public void testStatisticsInCaseOfNormalFlow () throws Exception {
    ScanningResult result = scanningResults.createResult (InetAddress.getByName ("6.6.6.6"));
    assertFalse (result.isReady ());
    assertFalse (scanningResults.isRegistered (result));
    scanningResults.registerAtIndex (0, result);
    result.setType (ResultType.WITH_PORTS);
    assertTrue (result.isReady ());
    assertTrue (scanningResults.isRegistered (result));
    assertEquals (0, scanningResults.update (result));
    assertEquals (1, scanningResults.getScanInfo ().getHostCount ());
    assertEquals (1, scanningResults.getScanInfo ().getAliveCount ());
    assertEquals (1, scanningResults.getScanInfo ().getWithPortsCount ());
    result = scanningResults.createResult (InetAddress.getByName ("7.7.7.7"));
    result.setType (ResultType.WITH_PORTS);
    assertTrue (result.isReady ());
    assertFalse (scanningResults.isRegistered (result));
    scanningResults.registerAtIndex (1, result);
    assertTrue (scanningResults.isRegistered (result));
    assertEquals (2, scanningResults.getScanInfo ().getHostCount ());
    assertEquals (2, scanningResults.getScanInfo ().getAliveCount ());
    assertEquals (2, scanningResults.getScanInfo ().getWithPortsCount ());
    scanningResults.info = new ScanInfo ();
    result = scanningResults.createResult (InetAddress.getByName ("6.6.6.6"));
    result.setType (ResultType.ALIVE);
    result.reset ();
    assertFalse (result.isReady ());
    assertTrue (scanningResults.isRegistered (result));
    assertEquals (0, scanningResults.update (result));
    result.setType (ResultType.ALIVE);
    assertTrue (result.isReady ());
    assertTrue (scanningResults.isRegistered (result));
    assertEquals (0, scanningResults.update (result));
    assertEquals (1, scanningResults.getScanInfo ().getHostCount ());
    assertEquals (1, scanningResults.getScanInfo ().getAliveCount ());
    assertEquals (0, scanningResults.getScanInfo ().getWithPortsCount ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="122" endline="130">
@Test
public void testResultType () throws Exception {
    assertTrue (ResultType.UNKNOWN.ordinal () < ResultType.DEAD.ordinal ());
    assertTrue (ResultType.DEAD.ordinal () < ResultType.ALIVE.ordinal ());
    assertTrue (ResultType.ALIVE.ordinal () < ResultType.WITH_PORTS.ordinal ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="132" endline="150">
@Test
public void testCreateResult () throws Exception {
    ScanningResult result = scanningResults.createResult (InetAddress.getByName ("10.0.0.5"));
    assertEquals ("10.0.0.5", result.getAddress ().getHostAddress ());
    assertEquals (ResultType.UNKNOWN, result.getType ());
    assertEquals (4, result.getValues ().size ());
    assertFalse (scanningResults.isRegistered (result));
    result = scanningResults.createResult (InetAddress.getByName ("10.0.0.17"));
    assertEquals ("10.0.0.17", result.getAddress ().getHostAddress ());
    assertFalse (scanningResults.isRegistered (result));
    assertFalse (scanningResults.iterator ().hasNext ());
    assertEquals (2, scanningResults.getScanInfo ().getHostCount ());
    assertEquals (0, scanningResults.getScanInfo ().getAliveCount ());
    assertEquals (0, scanningResults.getScanInfo ().getWithPortsCount ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="152" endline="172">
@Test
public void testRegisterResult () throws Exception {
    ScanningResult result = scanningResults.createResult (InetAddress.getByName ("10.0.0.0"));
    result.setType (ResultType.DEAD);
    scanningResults.registerAtIndex (0, result);
    result = scanningResults.createResult (InetAddress.getByName ("10.0.0.1"));
    result.setType (ResultType.WITH_PORTS);
    scanningResults.registerAtIndex (1, result);
    result = scanningResults.createResult (InetAddress.getByName ("10.0.0.5"));
    result.setType (ResultType.ALIVE);
    scanningResults.registerAtIndex (2, result);
    assertTrue (scanningResults.isRegistered (result));
    assertEquals (2, scanningResults.update (result));
    assertSame (result, scanningResults.getResult (2));
    assertSame (result, scanningResults.createResult (InetAddress.getByName ("10.0.0.5")));
    assertEquals (4, scanningResults.getScanInfo ().getHostCount ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="174" endline="179">
@Test(expected=IllegalStateException.class)
public void testAlreadyRegistered () throws Exception {
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getLocalHost ()));
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getLocalHost ()));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="181" endline="191">
@Test
public void testIterator () throws Exception {
    assertFalse (scanningResults.iterator ().hasNext ());
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getLocalHost ()));
    Iterator < ScanningResult > i = scanningResults.iterator ();
    assertTrue (i.hasNext ());
    assertEquals (InetAddress.getLocalHost (), i.next ().getAddress ());
    assertFalse (i.hasNext ());
    assertEquals (1, scanningResults.getScanInfo ().getHostCount ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="193" endline="202">
@Test
public void testClear () throws Exception {
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getLocalHost ()));
    scanningResults.clear ();
    assertFalse ("Results must be empty", scanningResults.iterator ().hasNext ());
    assertFalse (scanningResults.areResultsAvailable ());
    assertFalse (scanningResults.getScanInfo ().isCompletedNormally ());
    assertNull (scanningResults.getFetchers ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="204" endline="215">
@Test
public void testScanInfoCompletedNormally () throws Exception {
    StopScanningListener stopListener = scanningResults.new StopScanningListener ();
    assertFalse (scanningResults.getScanInfo ().isCompletedNormally ());
    stopListener.transitionTo (ScanningState.IDLE, Transition.COMPLETE);
    assertTrue (scanningResults.getScanInfo ().isCompletedNormally ());
    stopListener.transitionTo (ScanningState.KILLING, Transition.STOP);
    assertFalse (scanningResults.getScanInfo ().isCompletedNormally ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="217" endline="237">
@Test
public void testInitNewScan () throws Exception {
    fetcherRegistry.getSelectedFetchers ().clear ();
    fetcherRegistry.getSelectedFetchers ().add (mockFetcher ("hello"));
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getLocalHost ()));
    Feeder feeder = mockFeeder ("I am the best Feeder in the World!");
    scanningResults.initNewScan (feeder);
    assertTrue ("initNewScan() must not clear results - otherwise rescanning will be broken", scanningResults.areResultsAvailable ());
    assertEquals ("Cached Fetchers must be re-initilized", 1, scanningResults.getFetchers ().size ());
    assertEquals ("I am the best Feeder in the World!", scanningResults.getFeederInfo ());
    assertEquals ("feeder.range", scanningResults.getFeederName ());
    assertNotNull (scanningResults.getScanInfo ());
    assertFalse ("Scanning is not yet finished", scanningResults.getScanInfo ().isCompletedNormally ());
    assertEquals (0, scanningResults.getScanInfo ().getHostCount ());
    assertEquals (0, scanningResults.getScanInfo ().getAliveCount ());
    assertEquals (0, scanningResults.getScanInfo ().getWithPortsCount ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="239" endline="245">
@Test
public void testCachedFetchers () throws Exception {
    scanningResults.initNewScan (mockFeeder ("aaa"));
    fetcherRegistry.getSelectedFetchers ().clear ();
    assertEquals ("Fetchers should be cached from the last scan", 4, scanningResults.getFetchers ().size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="247" endline="269">
@Test
public void testRemove () throws Exception {
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getByName ("127.9.9.1")));
    scanningResults.registerAtIndex (1, scanningResults.createResult (InetAddress.getByName ("127.9.9.2")));
    scanningResults.registerAtIndex (2, scanningResults.createResult (InetAddress.getByName ("127.9.9.3")));
    scanningResults.registerAtIndex (3, scanningResults.createResult (InetAddress.getByName ("127.9.9.4")));
    scanningResults.remove (new int [] {1, 2});
    Iterator < ScanningResult > i = scanningResults.iterator ();
    assertTrue (i.hasNext ());
    assertEquals (InetAddress.getByName ("127.9.9.1"), i.next ().getAddress ());
    assertTrue (i.hasNext ());
    assertEquals (InetAddress.getByName ("127.9.9.4"), i.next ().getAddress ());
    assertFalse (i.hasNext ());
    assertEquals (0, scanningResults.update (scanningResults.createResult (InetAddress.getByName ("127.9.9.1"))));
    assertEquals (1, scanningResults.update (scanningResults.createResult (InetAddress.getByName ("127.9.9.4"))));
    assertFalse (scanningResults.isRegistered (scanningResults.createResult (InetAddress.getByName ("127.9.9.3"))));
    assertFalse (scanningResults.isRegistered (scanningResults.createResult (InetAddress.getByName ("127.9.9.2"))));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="271" endline="296">
@Test
public void testSort () throws Exception {
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getByName ("127.9.9.1")));
    scanningResults.getResult (0).setValue (1, "x");
    scanningResults.registerAtIndex (1, scanningResults.createResult (InetAddress.getByName ("127.9.9.2")));
    scanningResults.getResult (1).setValue (1, "a");
    scanningResults.registerAtIndex (2, scanningResults.createResult (InetAddress.getByName ("127.9.9.3")));
    scanningResults.getResult (2).setValue (1, "z");
    scanningResults.registerAtIndex (3, scanningResults.createResult (InetAddress.getByName ("127.9.9.4")));
    scanningResults.getResult (3).setValue (1, "m");
    scanningResults.sort (1, true);
    Iterator < ScanningResult > i = scanningResults.iterator ();
    assertEquals (InetAddress.getByName ("127.9.9.2"), i.next ().getAddress ());
    assertEquals (InetAddress.getByName ("127.9.9.4"), i.next ().getAddress ());
    assertEquals (InetAddress.getByName ("127.9.9.1"), i.next ().getAddress ());
    assertEquals (InetAddress.getByName ("127.9.9.3"), i.next ().getAddress ());
    assertFalse (i.hasNext ());
    assertEquals (InetAddress.getByName ("127.9.9.1"), scanningResults.getResult (2).getAddress ());
    assertEquals (InetAddress.getByName ("127.9.9.2"), scanningResults.getResult (0).getAddress ());
    assertEquals (InetAddress.getByName ("127.9.9.4"), scanningResults.getResult (1).getAddress ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="298" endline="316">
@Test
public void testGetResultAsString () throws Exception {
    scanningResults.initNewScan (mockFeeder ("abc"));
    List < Fetcher > fetchers = scanningResults.getFetchers ();
    ScanningResult result = scanningResults.createResult (InetAddress.getByName ("172.28.43.55"));
    scanningResults.registerAtIndex (0, result);
    result.setValue (1, "123");
    result.setValue (2, "xxxxx");
    result.setValue (3, null);
    String s = scanningResults.getResult (0).toString ();
    String ln = System.getProperty ("line.separator");
    assertTrue (s.endsWith (ln));
    assertTrue (s.indexOf (fetchers.get (0).getName () + ":\t172.28.43.55" + ln) >= 0);
    assertTrue (s.indexOf (fetchers.get (1).getName () + ":\t123" + ln) >= 0);
    assertTrue (s.indexOf (fetchers.get (2).getName () + ":\txxxxx" + ln) >= 0);
    assertTrue (s.indexOf (fetchers.get (3).getName () + ":\t" + ln) >= 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="318" endline="339">
@Test
public void testFindText () throws Exception {
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getByName ("127.9.9.1")));
    scanningResults.getResult (0).setValue (1, NotScanned.VALUE);
    scanningResults.registerAtIndex (1, scanningResults.createResult (InetAddress.getByName ("127.9.9.2")));
    scanningResults.getResult (1).setValue (1, new Long (123456789L));
    scanningResults.registerAtIndex (2, scanningResults.createResult (InetAddress.getByName ("127.9.9.3")));
    scanningResults.getResult (2).setValue (1, "zzzz");
    scanningResults.registerAtIndex (3, scanningResults.createResult (InetAddress.getByName ("127.9.9.4")));
    scanningResults.getResult (3).setValue (1, "mmmmm");
    scanningResults.registerAtIndex (4, scanningResults.createResult (InetAddress.getByName ("127.9.9.5")));
    scanningResults.getResult (4).setValue (1, null);
    scanningResults.registerAtIndex (5, scanningResults.createResult (InetAddress.getByName ("127.9.9.6")));
    scanningResults.getResult (5).setValue (1, InetAddress.getByName ("127.0.0.1"));
    assertEquals (- 1, scanningResults.findText ("sometext", 0));
    assertEquals (1, scanningResults.findText ("345", 0));
    assertEquals (- 1, scanningResults.findText ("345", 2));
    assertEquals (3, scanningResults.findText ("m", 2));
    assertEquals (5, scanningResults.findText ("0.0.", 2));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="341" endline="358">
@Test
public void testScanTime () throws Exception {
    ScanInfo scanInfo = scanningResults.getScanInfo ();
    assertFalse (scanInfo.isCompletedNormally ());
    long scanTime1 = scanInfo.getScanTime ();
    assertTrue ("Scanning has just begun", scanTime1 >= 0 && scanTime1 <= 10);
    Thread.sleep (10);
    scanningResults.new StopScanningListener ().transitionTo (ScanningState.IDLE, Transition.COMPLETE);
    assertTrue (scanInfo.isCompletedNormally ());
    long scanTime2 = scanInfo.getScanTime ();
    assertTrue ("Scanning has just finished", scanTime2 >= 10 && scanTime1 <= 20);
    assertTrue (scanTime1 != scanTime2);
    Thread.sleep (10);
    assertEquals (scanTime2, scanInfo.getScanTime ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="360" endline="365">
private Fetcher mockFetcher (String name) {
    Fetcher fetcher = mock (Fetcher.class);
    when (fetcher.getName ()).thenReturn (name);
    return fetcher;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScanningResultListTest.java" startline="367" endline="373">
private Feeder mockFeeder (String feederInfo) {
    Feeder feeder = mock (Feeder.class);
    when (feeder.getInfo ()).thenReturn (feederInfo);
    when (feeder.getName ()).thenReturn ("feeder.range");
    return feeder;
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/InetAddressHolderTest.java" startline="22" endline="27">
@Test
public void testToString () throws Exception {
    InetAddressHolder av = new InetAddressHolder (InetAddress.getLocalHost ());
    assertEquals (InetAddress.getLocalHost ().getHostAddress (), av.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/InetAddressHolderTest.java" startline="29" endline="44">
@Test
public void testCompareTo () throws Exception {
    InetAddressHolder av2 = new InetAddressHolder (InetAddress.getByName ("192.168.0.2"));
    InetAddressHolder av10 = new InetAddressHolder (InetAddress.getByName ("192.168.0.10"));
    InetAddressHolder av127 = new InetAddressHolder (InetAddress.getByName ("192.168.0.127"));
    InetAddressHolder av253 = new InetAddressHolder (InetAddress.getByName ("192.168.0.253"));
    assertEquals (- 1, av2.compareTo (av10));
    assertEquals (1, av10.compareTo (av2));
    assertEquals (0, av2.compareTo (av2));
    assertEquals (- 1, av10.compareTo (av253));
    assertEquals (- 1, av127.compareTo (av253));
    assertEquals (1, av253.compareTo (av127));
    assertEquals (1, av253.compareTo (av2));
    assertEquals (0, av253.compareTo (av253));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/InetAddressHolderTest.java" startline="46" endline="55">
@Test
public void testEqualsHashCode () throws Exception {
    InetAddressHolder av1 = new InetAddressHolder (InetAddress.getByName ("192.168.0.2"));
    InetAddressHolder av2 = new InetAddressHolder (InetAddress.getByAddress (new byte [] {(byte) 192, (byte) 168, 0, 2}));
    assertEquals (av1, av2);
    assertEquals (av1.hashCode (), av2.hashCode ());
    assertFalse (av1.equals (null));
    assertFalse (av1.equals (""));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NumericRangeListTest.java" startline="22" endline="34">
@Test
public void testToString () {
    assertEquals ("", new NumericRangeList (Collections.< Integer > emptyList (), true).toString ());
    assertEquals ("1", new NumericRangeList (Arrays.asList (1), true).toString ());
    assertEquals ("1,2", new NumericRangeList (Arrays.asList (1, 2), true).toString ());
    assertEquals ("1-3", new NumericRangeList (Arrays.asList (1, 2, 3), true).toString ());
    assertEquals ("1-3", new NumericRangeList (new TreeSet < Integer > (Arrays.asList (2, 3, 1)), true).toString ());
    assertEquals ("1,2,3", new NumericRangeList (Arrays.asList (1, 2, 3), false).toString ());
    assertEquals ("1,5,6,15", new NumericRangeList (Arrays.asList (1, 5, 6, 15), true).toString ());
    assertEquals ("1,5-8,15", new NumericRangeList (Arrays.asList (1, 5, 6, 7, 8, 15), true).toString ());
    assertEquals ("103,85,89,1", new NumericRangeList (Arrays.asList (103, 85, 89, 1), true).toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NumericRangeListTest.java" startline="36" endline="44">
@Test
public void testCompateTo () throws Exception {
    assertTrue (new NumericRangeList (Arrays.asList (22), false).compareTo (new NumericRangeList (Arrays.asList (80), false)) < 0);
    assertTrue (new NumericRangeList (Arrays.asList (80), false).compareTo (new NumericRangeList (Arrays.asList (22), false)) > 0);
    assertTrue (new NumericRangeList (Arrays.asList (255), false).compareTo (new NumericRangeList (Arrays.asList (255), false)) == 0);
    assertTrue (new NumericRangeList (Arrays.asList (1, 2), false).compareTo (new NumericRangeList (Arrays.asList (8080), false)) > 0);
    assertTrue (new NumericRangeList (Arrays.asList (22, 25, 27, 28), false).compareTo (new NumericRangeList (Arrays.asList (22, 25, 26, 300), false)) > 0);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NotAvailableTest.java" startline="20" endline="24">
@Test
public void testEquals () throws Exception {
    assertEquals (NotAvailable.VALUE, NotAvailable.VALUE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NotAvailableTest.java" startline="26" endline="30">
@Test
public void testToString () throws Exception {
    assertEquals (Config.getConfig ().forScanner ().notAvailableText, NotAvailable.VALUE.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NotAvailableTest.java" startline="32" endline="43">
@Test
public void testCompareTo () throws Exception {
    assertTrue (Comparable.class.isAssignableFrom (NotAvailable.class));
    assertEquals (0, NotAvailable.VALUE.compareTo (NotAvailable.VALUE));
    Empty.setSortDirection (true);
    assertEquals (1, NotAvailable.VALUE.compareTo ("Hello"));
    assertEquals (1, NotAvailable.VALUE.compareTo (null));
    Empty.setSortDirection (false);
    assertEquals (- 1, NotAvailable.VALUE.compareTo ("Hello"));
    Empty.setSortDirection (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NotScannedTest.java" startline="20" endline="24">
@Test
public void testEquals () throws Exception {
    assertEquals (NotScanned.VALUE, NotScanned.VALUE);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NotScannedTest.java" startline="26" endline="30">
@Test
public void testToString () throws Exception {
    assertEquals (Config.getConfig ().forScanner ().notScannedText, NotScanned.VALUE.toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/NotScannedTest.java" startline="32" endline="43">
@Test
public void testCompareTo () throws Exception {
    assertTrue (Comparable.class.isAssignableFrom (NotScanned.class));
    assertEquals (0, NotScanned.VALUE.compareTo (NotScanned.VALUE));
    Empty.setSortDirection (true);
    assertEquals (1, NotScanned.VALUE.compareTo ("Hello"));
    assertEquals (1, NotScanned.VALUE.compareTo (null));
    Empty.setSortDirection (false);
    assertEquals (- 1, NotScanned.VALUE.compareTo ("Hello"));
    Empty.setSortDirection (true);
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/IntegerWithUnitTest.java" startline="22" endline="28">
@Test
public void testIntValue () throws Exception {
    assertEquals (0, new IntegerWithUnit (0, "a").intValue ());
    assertEquals (- 1, new IntegerWithUnit (- 1, "a").intValue ());
    assertEquals (Integer.MAX_VALUE, new IntegerWithUnit (Integer.MAX_VALUE, "a").intValue ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/IntegerWithUnitTest.java" startline="30" endline="34">
@Test
public void testToString () throws Exception {
    assertEquals ("151" + Labels.getLabel ("unit.ms"), new IntegerWithUnit (151, "ms").toString ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/IntegerWithUnitTest.java" startline="36" endline="43">
@Test
public void testEquals () throws Exception {
    assertTrue (new IntegerWithUnit (666, null).equals (new IntegerWithUnit (666, null)));
    assertTrue (new IntegerWithUnit (42, "a").equals (new IntegerWithUnit (42, "b")));
    assertFalse (new IntegerWithUnit (0, null).equals (null));
    assertFalse (new IntegerWithUnit (42, "a").equals (new IntegerWithUnit (43, "a")));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/IntegerWithUnitTest.java" startline="45" endline="50">
@Test
public void testHashCode () throws Exception {
    assertEquals (3, new IntegerWithUnit (3, null).hashCode ());
    assertEquals (- 31, new IntegerWithUnit (- 31, null).hashCode ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/values/IntegerWithUnitTest.java" startline="52" endline="62">
@Test
public void testCompareTo () throws Exception {
    assertTrue (Comparable.class.isAssignableFrom (IntegerWithUnit.class));
    assertEquals (0, new IntegerWithUnit (1, null).compareTo (new IntegerWithUnit (1, null)));
    assertEquals (1, new IntegerWithUnit (123456789, null).compareTo (new IntegerWithUnit (123456, null)));
    assertEquals (- 1, new IntegerWithUnit (12, null).compareTo (new IntegerWithUnit (123456, null)));
    assertEquals (1, new IntegerWithUnit (12, null).compareTo (null));
    IntegerWithUnit instance = new IntegerWithUnit (211082, null);
    assertEquals (0, instance.compareTo (instance));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="18" endline="28">
@Test
public void testBasic () {
    assertEquals ("1 2 3 5 7 ", iterateToString (new PortIterator ("1,2,3,5,7")));
    assertEquals ("1 2 3 5 7 ", iterateToString (new PortIterator ("1,\n2,   3,\t\t5,7")));
    assertEquals ("27 1 65535 ", iterateToString (new PortIterator ("27, 1;65535")));
    assertEquals ("16 ", iterateToString (new PortIterator ("16")));
    assertEquals ("", iterateToString (new PortIterator ("")));
    assertEquals ("12 ", iterateToString (new PortIterator ("   12")));
    assertEquals ("12 ", iterateToString (new PortIterator ("12, ")));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="30" endline="36">
@Test
public void testRange () {
    assertEquals ("1 2 3 ", iterateToString (new PortIterator ("1-3")));
    assertEquals ("65530 65531 65532 65533 65534 65535 ", iterateToString (new PortIterator ("65530-65535")));
    assertEquals ("100 13 14 17 18 19 20 ", iterateToString (new PortIterator ("100,13-14,17-20")));
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="38" endline="45">
@Test
public void testSize () throws Exception {
    assertEquals (0, new PortIterator ("").size ());
    assertEquals (1, new PortIterator ("80").size ());
    assertEquals (5, new PortIterator ("5,10-12,1").size ());
    assertEquals (65000, new PortIterator ("1-65000").size ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="47" endline="51">
@Test
public void testCopy () {
    assertNotNull (new PortIterator ("1").copy ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="53" endline="57">
@Test(expected=NumberFormatException.class)
public void testBrokenNumber () throws Exception {
    new PortIterator ("foo");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="59" endline="63">
@Test(expected=NumberFormatException.class)
public void testTooLarge () throws Exception {
    new PortIterator ("65536");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="65" endline="69">
@Test(expected=NumberFormatException.class)
public void testZero () throws Exception {
    new PortIterator ("1,2,0,3");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="71" endline="75">
@Test(expected=NumberFormatException.class)
public void testNegative () throws Exception {
    new PortIterator ("-3");
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/PortIteratorTest.java" startline="77" endline="85">
private static String iterateToString (PortIterator iterator) {
    StringBuffer sb = new StringBuffer (64);
    while (iterator.hasNext ()) {
        sb.append (iterator.next ()).append (' ');
    }
    return sb.toString ();
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerDispatcherThreadTest.java" startline="33" endline="58">
@Test
public void testConstruction () throws Exception {
    FetcherRegistry registry = mock (FetcherRegistry.class);
    when (registry.getSelectedFetchers ()).thenReturn (Collections.< Fetcher > singleton (new IPFetcher ()));
    Feeder feeder = mock (Feeder.class);
    when (feeder.getInfo ()).thenReturn ("info");
    when (feeder.getName ()).thenReturn ("text.ip");
    ScanningResultList scanningResults = new ScanningResultList (registry);
    scanningResults.info = new ScanInfo ();
    scanningResults.registerAtIndex (0, scanningResults.createResult (InetAddress.getLocalHost ()));
    ScannerConfig config = mock (ScannerConfig.class);
    config.maxThreads = 10;
    ScannerDispatcherThread thread = new ScannerDispatcherThread (feeder, new Scanner (registry), null, null, scanningResults, config, null);
    assertTrue ("ScannerThread should not clear the results - otherwise rescanning will not work", scanningResults.areResultsAvailable ());
    assertEquals (thread.getClass ().getSimpleName (), thread.getName ());
    assertTrue (thread.isDaemon ());
    assertEquals (config.maxThreads, ((ThreadPoolExecutor) thread.threadPool).getMaximumPoolSize ());
    assertEquals (thread, ((ThreadPoolExecutor) thread.threadPool).getThreadFactory ());
}
</source>
<source file="/home/jeff/Dropbox/MutationInjectionFramework/testdata/ExperimentTest/DetectionTest/SampleExperimentRun/mutantbase/ipscan/test/net/azib/ipscan/core/ScannerDispatcherThreadTest.java" startline="60" endline="68">
@Test
public void threadFactoryProducesDaemons () throws Exception {
    ScannerDispatcherThread thread = (ScannerDispatcherThread) ObjenesisHelper.newInstance (ScannerDispatcherThread.class);
    thread.threadGroup = new ThreadGroup ("foo");
    Thread t = thread.newThread (mock (Runnable.class));
    assertTrue (t.isDaemon ());
    assertSame (thread.threadGroup, t.getThreadGroup ());
}
</source>
