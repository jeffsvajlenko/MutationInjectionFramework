    public MainWindow(Shell shell, GUIConfig guiConfig, Composite feederArea, Composite controlsArea, Combo feederSelectionCombo, Button startStopButton, StartStopScanningAction startStopScanningAction, ResultTable resultTable, StatusBar statusBar, CommandsMenu resultsContextMenu, FeederGUIRegistry feederGUIRegistry, final StateMachine stateMachine, ToolsActions.Preferences preferencesListener, ToolsActions.ChooseFetchers chooseFetchersListsner)
    {
        this.shell = shell;
        this.guiConfig = guiConfig;
        this.statusBar = statusBar;

        initShell(shell);

        initFeederArea(feederArea, feederGUIRegistry);

        initControlsArea(controlsArea, feederSelectionCombo, startStopButton, startStopScanningAction, preferencesListener, chooseFetchersListsner);

        initTableAndStatusBar(resultTable, resultsContextMenu, statusBar);

        // after all controls are initialized, resize and open
        shell.setBounds(guiConfig.getMainWindowBounds());
        shell.open();
        if (guiConfig.isMainWindowMaximized)
        {
            shell.setMaximized(true);
        }
        else
        {
            // set bounds twice - a workaround for a bug in SWT GTK + Compiz
            // (otherwise window gets smaller and smaller each time)
            shell.setBounds(guiConfig.getMainWindowBounds());
        }

        if (guiConfig.isFirstRun)
        {
            Display.getCurrent().asyncExec(new Runnable()
            {
                public void run()
                {
                    if (Platform.CRIPPLED_WINDOWS)
                    {
                        // inform crippled windows owners of their default configuration
                        if (showMessage(Labels.getLabel("text.crippledWindowsInfo"), SWT.YES | SWT.NO) == SWT.YES)
                        {
                            BrowserLauncher.openURL(Version.FAQ_CRIPPLED_WINDOWS_URL);
                        }
                    }
                    if (Platform.GNU_JAVA)
                    {
                        // show a warning if running under GNU Java
                        showMessage(Labels.getLabel("text.gnuJavaInfo"), SWT.OK);
                    }
                    MainWindow.this.shell.forceActive();
                    new GettingStartedDialog().open();
                    MainWindow.this.
guiConfig.isFirstRun = false;
                }
            });
        }

        stateMachine.addTransitionListener(new EnablerDisabler());

        Display.getCurrent().asyncExec(new Runnable()
        {
            public void run()
            {
                // asynchronously run init handlers outside of the constructor
                stateMachine.init();
            }
        });
    }
