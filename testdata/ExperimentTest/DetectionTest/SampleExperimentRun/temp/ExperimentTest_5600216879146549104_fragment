package net.azib.ipscan.fetchers;

import net.azib.ipscan.config.CommentsConfig;

import net.azib.ipscan.core.ScanningSubject;

public class CommentFetcher extends AbstractFetcher {
    public static final String ID = "fetcher.comment";
    private CommentsConfig commentsConfig;

    public CommentFetcher (CommentsConfig commentsConfig) {
        this.commentsConfig = commentsConfig;
    }

    public String getId () {
        return ID;
    }

    public void parse (String...args) {
        for (int i = 0;
        i < args.length; i ++) {
            String arg = args [i];
            if (arg.startsWith ("-f:")) {
                if (feederCreator != null) throw new IllegalArgumentException ("Only one feeder is allowed");

                feederCreator = findFeederCreator ("feeder." + arg.substring (3));
                feederArgs = new String [feederCreator.serializePartsLabels ().length];
                for (int j = 0;
                j < feederArgs.length; j ++) {
                    feederArgs [j] = args [++ i];
                    if (feederArgs [j].startsWith ("-")) throw new IllegalArgumentException (feederCreator.getFeederName () + " requires " + feederArgs.length + " arguments");

                }
            } else if (arg.equals ("-o")) {
                if (outputFilename != null) throw new IllegalArgumentException ("Only one exporter is allowed");

                outputFilename = args [++ i];
                if (outputFilename.startsWith ("-")) throw new IllegalArgumentException ("Output filename missing");

                exporter = findExporter (outputFilename);
                autoStart = true;
            } else if (arg.startsWith ("-")) {
                for (char option : arg.substring (1).toCharArray ()) {
                    switch (option) {
                        case 's' :
                            autoStart = true;
                            break;
                        case 'q' :
                            autoQuit = true;
                            break;
                        case 'a' :
                            appendToFile = true;
                            break;
                        default :
                            throw new IllegalArgumentException ("Unknown option: " + option);
                    }
                }
            } else throw new IllegalArgumentException ("Unknown argument: " + arg);

        }
        if (feederCreator == null) throw new IllegalArgumentException ("Feeder missing");

        feederCreator.unserialize (feederArgs);
    }

    public Object scan (ScanningSubject subject) {
        return commentsConfig.getComment (subject.getAddress ());
    }

}

