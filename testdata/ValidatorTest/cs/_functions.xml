<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="110" endline="117">
public void MoveBy (int dx, int dy) {
    foreach (DrawableContainer dc in this) {
        dc.Left += dx;
        dc.Top += dy;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="124" endline="131">
public bool PropertySupported (DrawableContainer.Property prop) {
    foreach (DrawableContainer dc in this) {
        if (! dc.PropertySupported (prop))
            return false;

    }
    return true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="138" endline="146">
public bool PropertySupportedBySome (DrawableContainer.Property prop) {
    bool ret = false;
    foreach (DrawableContainer dc in this) {
        ret |= dc.PropertySupported (prop);
    }
    return ret;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="151" endline="157">
public void HideGrippers () {
    foreach (DrawableContainer dc in this) {
        dc.HideGrippers ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="162" endline="168">
public void ShowGrippers () {
    foreach (DrawableContainer dc in this) {
        dc.ShowGrippers ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="176" endline="184">
public bool ClickableAt (int x, int y) {
    bool ret = false;
    foreach (DrawableContainer dc in this) {
        ret |= dc.ClickableAt (x, y);
    }
    return ret;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="192" endline="199">
public DrawableContainer ClickableElementAt (int x, int y) {
    for (int i = Count - 1; i >= 0; i --) {
        if (this [i].ClickableAt (x, y))
            return this [i];

    }
    return null;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="204" endline="210">
public void OnDoubleClick () {
    foreach (DrawableContainer dc in this) {
        dc.OnDoubleClick ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="217" endline="223">
public void Draw (Graphics g, DrawableContainer.RenderMode rm) {
    foreach (DrawableContainer dc in this) {
        dc.Draw (g, rm);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="231" endline="239">
public bool CanPullUp (DrawableContainerList elements) {
    if (elements.Count == 0 || elements.Count == this.Count)
        return false;

    foreach (DrawableContainer element in elements) {
        if (this.IndexOf (element) < this.Count - elements.Count)
            return true;

    }
    return false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="245" endline="255">
public void PullElementsUp (DrawableContainerList elements) {
    for (int i = this.Count - 1; i >= 0; i --) {
        DrawableContainer dc = this [i];
        if (elements.Contains (dc)) {
            if (Count > (i + 1) && ! elements.Contains (this [i + 1]))
                SwapElements (i, i + 1);

        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="261" endline="273">
public void PullElementsToTop (DrawableContainerList elements) {
    DrawableContainer [] dcs = this.ToArray ();
    for (int i = 0; i < dcs.Length; i ++) {
        DrawableContainer dc = dcs [i];
        if (elements.Contains (dc)) {
            this.Remove (dc);
            this.Add (dc);
        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="281" endline="289">
public bool CanPushDown (DrawableContainerList elements) {
    if (elements.Count == 0 || elements.Count == this.Count)
        return false;

    foreach (DrawableContainer element in elements) {
        if (this.IndexOf (element) >= elements.Count)
            return true;

    }
    return false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="295" endline="305">
public void PushElementsDown (DrawableContainerList elements) {
    for (int i = 0; i < Count; i ++) {
        DrawableContainer dc = this [i];
        if (elements.Contains (dc)) {
            if ((i > 0) && ! elements.Contains (this [i - 1]))
                SwapElements (i, i - 1);

        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="311" endline="323">
public void PushElementsToBottom (DrawableContainerList elements) {
    DrawableContainer [] dcs = this.ToArray ();
    for (int i = dcs.Length - 1; i >= 0; i --) {
        DrawableContainer dc = dcs [i];
        if (elements.Contains (dc)) {
            this.Remove (dc);
            this.Insert (0, dc);
        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainerList.cs.ifdefed" startline="331" endline="339">
private void SwapElements (int index1, int index2) {
    if (index1 >= 0 && index1 < Count && index2 >= 0 && index2 < Count && index1 != index2) {
        DrawableContainer dc = this [index1];
        this [index1] = this [index2];
        this [index2] = dc;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/TextContainer.cs.ifdefed" startline="28" endline="33">
public override void GetObjectData (SerializationInfo info, StreamingContext ctxt) {
    base.GetObjectData (info, ctxt);
    info.AddValue ("Text", childLabel.Text);
    info.AddValue ("Font", childLabel.Font);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/TextContainer.cs.ifdefed" startline="60" endline="63">
public override bool InitContent () {
    return ShowTextInput (true);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/TextContainer.cs.ifdefed" startline="65" endline="68">
public override void OnDoubleClick () {
    ShowTextInput (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/TextContainer.cs.ifdefed" startline="70" endline="89">
private bool ShowTextInput (bool isNew) {
    TextInputForm textInput = new TextInputForm ();
    if (! isNew) {
        textInput.UpdateFromLabel (childLabel);
    }
    textInput.InputText.ForeColor = childLabel.ForeColor;
    textInput.ShowDialog (parent);
    if (textInput.DialogResult == DialogResult.Cancel) {
        return false;
    }
    string text = textInput.InputText.Text;
    childLabel.Text = textInput.InputText.Text;
    childLabel.Font = textInput.InputText.Font;
    ForeColor = textInput.InputText.ForeColor;
    parent.Invalidate ();
    return true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/TextContainer.cs.ifdefed" startline="91" endline="97">
public override void Draw (Graphics g, RenderMode rm) {
    Rectangle rect = GuiRectangle.GetGuiRectangle (this.Left, this.Top, this.Width, this.Height);
    if (Selected && rm.Equals (RenderMode.EDIT))
        DrawSelectionBorder (g, rect);

    Brush fontBrush = new SolidBrush (foreColor);
    g.DrawString (childLabel.Text, childLabel.Font, fontBrush, rect);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="25" endline="39">
public static GraphicsPath Create2 (int x, int y, int width, int height, int radius) {
    GraphicsPath gp = new GraphicsPath ();
    gp.AddLine (x + radius, y, x + width - (radius * 2), y);
    gp.AddArc (x + width - (radius * 2), y, radius * 2, radius * 2, 270, 90);
    gp.AddLine (x + width, y + radius, x + width, y + height - (radius * 2));
    gp.AddArc (x + width - (radius * 2), y + height - (radius * 2), radius * 2, radius * 2, 0, 90);
    gp.AddLine (x + width - (radius * 2), y + height, x + radius, y + height);
    gp.AddArc (x, y + height - (radius * 2), radius * 2, radius * 2, 90, 90);
    gp.AddLine (x, y + height - (radius * 2), x, y + radius);
    gp.AddArc (x, y, radius * 2, radius * 2, 180, 90);
    gp.CloseFigure ();
    return gp;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="41" endline="119">
public static GraphicsPath Create (int x, int y, int width, int height, int radius, RectangleCorners corners) {
    int xw = x + width;
    int yh = y + height;
    int xwr = xw - radius;
    int yhr = yh - radius;
    int xr = x + radius;
    int yr = y + radius;
    int r2 = radius * 2;
    int xwr2 = xw - r2;
    int yhr2 = yh - r2;
    GraphicsPath p = new GraphicsPath ();
    p.StartFigure ();
    if ((RectangleCorners.TopLeft & corners) == RectangleCorners.TopLeft) {
        p.AddArc (x, y, r2, r2, 180, 90);
    } else {
        p.AddLine (x, yr, x, y);
        p.AddLine (x, y, xr, y);
    }
    p.AddLine (xr, y, xwr, y);
    if ((RectangleCorners.TopRight & corners) == RectangleCorners.TopRight) {
        p.AddArc (xwr2, y, r2, r2, 270, 90);
    } else {
        p.AddLine (xwr, y, xw, y);
        p.AddLine (xw, y, xw, yr);
    }
    p.AddLine (xw, yr, xw, yhr);
    if ((RectangleCorners.BottomRight & corners) == RectangleCorners.BottomRight) {
        p.AddArc (xwr2, yhr2, r2, r2, 0, 90);
    } else {
        p.AddLine (xw, yhr, xw, yh);
        p.AddLine (xw, yh, xwr, yh);
    }
    p.AddLine (xwr, yh, xr, yh);
    if ((RectangleCorners.BottomLeft & corners) == RectangleCorners.BottomLeft) {
        p.AddArc (x, yhr2, r2, r2, 90, 90);
    } else {
        p.AddLine (xr, yh, x, yh);
        p.AddLine (x, yh, x, yhr);
    }
    p.AddLine (x, yhr, x, yr);
    p.CloseFigure ();
    return p;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="121" endline="126">
public static GraphicsPath Create (Rectangle rect, int radius, RectangleCorners corners) {
    return Create (rect.X, rect.Y, rect.Width, rect.Height, radius, corners);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="128" endline="133">
public static GraphicsPath Create (int x, int y, int width, int height, int radius) {
    return Create (x, y, width, height, radius, RectangleCorners.All);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="135" endline="139">
public static GraphicsPath Create (Rectangle rect, int radius) {
    return Create (rect.X, rect.Y, rect.Width, rect.Height, radius);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="141" endline="145">
public static GraphicsPath Create (int x, int y, int width, int height) {
    return Create (x, y, width, height, 5);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RoundedRectangle.cs.ifdefed" startline="147" endline="150">
public static GraphicsPath Create (Rectangle rect) {
    return Create (rect.X, rect.Y, rect.Width, rect.Height);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/LineContainer.cs.ifdefed" startline="41" endline="46">
public override void GetObjectData (SerializationInfo info, StreamingContext ctxt) {
    base.GetObjectData (info, ctxt);
    info.AddValue ("hasStartPointArrowHead", HasStartPointArrowHead);
    info.AddValue ("hasEndPointArrowHead", HasEndPointArrowHead);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/LineContainer.cs.ifdefed" startline="49" endline="60">
public override void Draw (Graphics g, RenderMode rm) {
    g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
    Pen pen = new Pen (foreColor);
    pen.Width = thickness;
    AdjustableArrowCap aac = new AdjustableArrowCap (4, 6);
    if (HasStartPointArrowHead)
        pen.CustomStartCap = aac;

    if (HasEndPointArrowHead)
        pen.CustomEndCap = aac;

    g.DrawLine (pen, this.Left, this.Top, this.Left + this.Width, this.Top + this.Height);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/LineContainer.cs.ifdefed" startline="62" endline="70">
public override bool ClickableAt (int x, int y) {
    if (! base.ClickableAt (x, y)) {
        return false;
    }
    double distance = DrawingHelper.CalculateLinePointDistance (this.Left, this.Top, this.Left + this.Width, this.Top + this.Height, x, y);
    return distance < 5;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="132" endline="181">
void SurfaceMouseDown (object sender, MouseEventArgs e) {
    mX = e.X;
    mY = e.Y;
    mouseDown = true;
    drawingElement = null;
    if (DrawingMode == DrawingModes.Rect) {
        DeselectAllElements ();
        drawingElement = new RectangleContainer (this);
    } else if (DrawingMode == DrawingModes.Ellipse) {
        DeselectAllElements ();
        drawingElement = new EllipseContainer (this);
    } else if (DrawingMode == DrawingModes.Text) {
        DeselectAllElements ();
        drawingElement = new TextContainer (this);
    } else if (DrawingMode == DrawingModes.Line) {
        DeselectAllElements ();
        drawingElement = new LineContainer (this);
    } else if (DrawingMode == DrawingModes.Arrow) {
        DeselectAllElements ();
        drawingElement = new LineContainer (this);
        ((LineContainer) drawingElement).HasEndPointArrowHead = true;
    } else {
        mouseDownElement = elements.ClickableElementAt (e.X, e.Y);
    }
    if (drawingElement != null) {
        drawingElement.Left = e.X;
        drawingElement.Top = e.Y;
        drawingElement.Selected = true;
        drawingElement.ForeColor = conf.Editor_ForeColor;
        drawingElement.BackColor = conf.Editor_BackColor;
        drawingElement.Thickness = conf.Editor_Thickness;
        AddElement (drawingElement);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="183" endline="239">
void SurfaceMouseUp (object sender, MouseEventArgs e) {
    mouseDown = false;
    mouseDownElement = null;
    if (DrawingMode == DrawingModes.None) {
        DrawableContainer element = elements.ClickableElementAt (e.X, e.Y);
        bool shiftModifier = (Control.ModifierKeys & Keys.Shift) == Keys.Shift;
        if (element != null) {
            bool alreadySelected = selectedElements.Contains (element);
            if (shiftModifier) {
                if (alreadySelected)
                    DeselectElement (element);
                else
                    SelectElement (element);

            } else {
                if (! alreadySelected) {
                    DeselectAllElements ();
                    SelectElement (element);
                }
            }
        } else if (! shiftModifier) {
            DeselectAllElements ();
        }
    }
    if (selectedElements.Count > 0) {
        selectedElements.ShowGrippers ();
        selectedElements.Selected = true;
    }
    if (drawingElement != null) {
        if (! drawingElement.InitContent ()) {
            elements.Remove (drawingElement);
            Invalidate ();
        } else {
            if (Math.Abs (drawingElement.Width) < 5 && Math.Abs (drawingElement.Height) < 5) {
                drawingElement.Width = 25;
                drawingElement.Height = 25;
            }
            SelectElement (drawingElement);
            drawingElement.Selected = true;
        }
        drawingElement = null;
    }
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="241" endline="275">
void SurfaceMouseMove (object sender, MouseEventArgs e) {
    if (DrawingMode != DrawingModes.None) {
        Cursor = Cursors.Cross;
    } else {
        Cursor = Cursors.Default;
    }
    if (mouseDown) {
        if (mouseDownElement != null) {
            selectedElements.HideGrippers ();
            if (mouseDownElement.Selected) {
                selectedElements.MoveBy (e.X - mX, e.Y - mY);
            } else {
                mouseDownElement.MoveBy (e.X - mX, e.Y - mY);
            }
            mX = e.X;
            mY = e.Y;
            Invalidate ();
        } else if (drawingElement != null) {
            drawingElement.Width = e.X - drawingElement.Left;
            drawingElement.Height = e.Y - drawingElement.Top;
            Invalidate ();
        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="277" endline="281">
void SurfaceDoubleClick (object sender, MouseEventArgs e) {
    selectedElements.OnDoubleClick ();
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="283" endline="290">
void SurfacePaint (object sender, PaintEventArgs e) {
    currentImage = new Bitmap (Width, Height);
    Graphics g = Graphics.FromImage (currentImage);
    g.DrawImageUnscaled (originalImage, new Point (0, 0));
    elements.Draw (g, DrawableContainer.RenderMode.EDIT);
    e.Graphics.DrawImage (currentImage, 0, 0);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="292" endline="296">
public void AddElement (DrawableContainer element) {
    elements.Add (element);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="298" endline="302">
public void AddElements (DrawableContainerList elems) {
    elements.AddRange (elems);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="304" endline="312">
public Bitmap GetImageForExport () {
    Bitmap ret = new Bitmap (Width, Height);
    Graphics g = Graphics.FromImage (ret);
    g.DrawImageUnscaled (originalImage, new Point (0, 0));
    elements.Draw (g, DrawableContainer.RenderMode.EXPORT);
    g.DrawImage (ret, 0, 0);
    return ret;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="314" endline="326">
public void RemoveSelectedElements () {
    if (selectedElements.Count > 0) {
        foreach (DrawableContainer element in selectedElements) {
            elements.Remove (element);
            element.Dispose ();
        }
        selectedElements.Clear ();
        Invalidate ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="328" endline="337">
public bool CutSelectedElements () {
    if (selectedElements.Count > 0) {
        Clipboard.SetDataObject (selectedElements, true);
        RemoveSelectedElements ();
        return true;
    }
    return false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="339" endline="347">
public bool CopySelectedElements () {
    if (selectedElements.Count > 0) {
        Clipboard.SetDataObject (selectedElements, true);
        return true;
    }
    return false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="349" endline="365">
public void PasteElementFromClipboard () {
    IDataObject ido = Clipboard.GetDataObject ();
    DrawableContainerList dc = null;
    if (ido.GetDataPresent (typeof (DrawableContainerList))) {
        dc = (DrawableContainerList) ido.GetData (typeof (DrawableContainerList));
    }
    if (dc != null) {
        dc.Parent = this;
        dc.MoveBy (10, 10);
        AddElements (dc);
        DeselectAllElements ();
        SelectElements (dc);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="367" endline="379">
public void DuplicateSelectedElements () {
    MemoryStream ms = new MemoryStream ();
    BinaryFormatter bf = new BinaryFormatter ();
    bf.Serialize (ms, selectedElements);
    ms.Seek (0, 0);
    DrawableContainerList dc = (DrawableContainerList) bf.Deserialize (ms);
    dc.Parent = this;
    dc.MoveBy (10, 10);
    AddElements (dc);
    DeselectAllElements ();
    SelectElements (dc);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="381" endline="387">
public void DeselectElement (DrawableContainer element) {
    element.HideGrippers ();
    element.Selected = false;
    selectedElements.Remove (element);
    MovingElementChanged (this, selectedElements);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="388" endline="398">
public void DeselectAllElements () {
    while (selectedElements.Count > 0) {
        DrawableContainer element = selectedElements [0];
        element.HideGrippers ();
        element.Selected = false;
        selectedElements.Remove (element);
    }
    MovingElementChanged (this, selectedElements);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="400" endline="408">
public void SelectElement (DrawableContainer element) {
    if (selectedElements.Contains (element))
        return;

    selectedElements.Add (element);
    element.ShowGrippers ();
    element.Selected = true;
    MovingElementChanged (this, selectedElements);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="410" endline="416">
public void SelectElements (DrawableContainerList elements) {
    foreach (DrawableContainer element in elements) {
        SelectElement (element);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="418" endline="466">
public void ProcessCmdKey (Keys k) {
    if (selectedElements.Count > 0) {
        int px = (k == Keys.Shift) ? 10 : 1;
        switch (k) {
            case Keys.Left :
                selectedElements.MoveBy (- 1, 0);
                break;
            case Keys.Left | Keys.Shift :
                selectedElements.MoveBy (- 10, 0);
                break;
            case Keys.Up :
                selectedElements.MoveBy (0, - 1);
                break;
            case Keys.Up | Keys.Shift :
                selectedElements.MoveBy (0, - 10);
                break;
            case Keys.Right :
                selectedElements.MoveBy (1, 0);
                break;
            case Keys.Right | Keys.Shift :
                selectedElements.MoveBy (10, 0);
                break;
            case Keys.Down :
                selectedElements.MoveBy (0, 1);
                break;
            case Keys.Down | Keys.Shift :
                selectedElements.MoveBy (0, 10);
                break;
            case Keys.PageUp :
                elements.PullElementsUp (selectedElements);
                break;
            case Keys.PageDown :
                elements.PushElementsDown (selectedElements);
                break;
            case Keys.Home :
                elements.PullElementsToTop (selectedElements);
                break;
            case Keys.End :
                elements.PushElementsToBottom (selectedElements);
                break;
            default :
                return;
        }
        Invalidate ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="471" endline="475">
public void PullElementsUp () {
    elements.PullElementsUp (selectedElements);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="480" endline="484">
public void PullElementsToTop () {
    elements.PullElementsToTop (selectedElements);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="489" endline="493">
public void PushElementsDown () {
    elements.PushElementsDown (selectedElements);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="498" endline="502">
public void PushElementsToBottom () {
    elements.PushElementsToBottom (selectedElements);
    Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="508" endline="511">
public bool CanPullSelectionUp () {
    return elements.CanPullUp (selectedElements);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/Surface.cs.ifdefed" startline="517" endline="520">
public bool CanPushSelectionDown () {
    return elements.CanPushDown (selectedElements);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RectangleContainer.cs.ifdefed" startline="27" endline="30">
public override void GetObjectData (SerializationInfo info, StreamingContext ctxt) {
    base.GetObjectData (info, ctxt);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/RectangleContainer.cs.ifdefed" startline="34" endline="42">
public override void Draw (Graphics g, RenderMode rm) {
    Pen pen = new Pen (foreColor);
    pen.Width = thickness;
    Brush brush = new SolidBrush (backColor);
    Rectangle rect = GuiRectangle.GetGuiRectangle (this.Left, this.Top, this.Width, this.Height);
    g.FillRectangle (brush, rect);
    g.DrawRectangle (pen, rect);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="64" endline="67">
public bool PropertySupported (Property prop) {
    return (supportedProperties.Contains (prop));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="147" endline="157">
public virtual void GetObjectData (SerializationInfo info, StreamingContext ctxt) {
    info.AddValue ("foreColor", foreColor);
    info.AddValue ("backColor", backColor);
    info.AddValue ("thickness", thickness);
    info.AddValue ("supportedProperties", supportedProperties);
    info.AddValue ("left", left);
    info.AddValue ("top", top);
    info.AddValue ("width", width);
    info.AddValue ("height", height);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="176" endline="179">
public Label GetLabel () {
    return childLabel;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="181" endline="184">
public virtual bool InitContent () {
    return true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="186" endline="186">
public virtual void OnDoubleClick () {
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="188" endline="216">
private void InitControls () {
    grippers = new Label [8];
    for (int i = 0; i < grippers.Length; i ++) {
        grippers [i] = new Label ();
        grippers [i].Name = "gripper" + i;
        grippers [i].Width = grippers [i].Height = 5;
        grippers [i].BackColor = Color.Black;
        grippers [i].MouseDown += new MouseEventHandler (gripperMouseDown);
        grippers [i].MouseUp += new MouseEventHandler (gripperMouseUp);
        grippers [i].MouseMove += new MouseEventHandler (gripperMouseMove);
        grippers [i].Visible = false;
    }
    grippers [1].Cursor = Cursors.SizeNS;
    grippers [3].Cursor = Cursors.SizeWE;
    grippers [5].Cursor = Cursors.SizeNS;
    grippers [7].Cursor = Cursors.SizeWE;
    parent.Controls.AddRange (grippers);
    childLabel.BackColor = Color.Transparent;
    childLabel.BorderStyle = BorderStyle.None;
    childLabel.Cursor = Cursors.SizeAll;
    childLabel.MouseDown += new MouseEventHandler (gripperMouseDown);
    childLabel.MouseUp += new MouseEventHandler (gripperMouseUp);
    childLabel.MouseMove += new MouseEventHandler (childLabelMouseMove);
    DoLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="218" endline="222">
public void SuspendLayout () {
    layoutSuspended = true;
    childLabel.SuspendLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="224" endline="229">
public void ResumeLayout () {
    layoutSuspended = false;
    DoLayout ();
    childLabel.ResumeLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="231" endline="287">
private void DoLayout () {
    if (! layoutSuspended) {
        int [] xChoords = new int [] {this.Left - 2, this.Left + this.Width / 2 - 2, this.Left + this.Width - 2};
        int [] yChoords = new int [] {this.Top - 2, this.Top + this.Height / 2 - 2, this.Top + this.Height - 2};
        grippers [0].Left = xChoords [0];
        grippers [0].Top = yChoords [0];
        grippers [1].Left = xChoords [1];
        grippers [1].Top = yChoords [0];
        grippers [2].Left = xChoords [2];
        grippers [2].Top = yChoords [0];
        grippers [3].Left = xChoords [2];
        grippers [3].Top = yChoords [1];
        grippers [4].Left = xChoords [2];
        grippers [4].Top = yChoords [2];
        grippers [5].Left = xChoords [1];
        grippers [5].Top = yChoords [2];
        grippers [6].Left = xChoords [0];
        grippers [6].Top = yChoords [2];
        grippers [7].Left = xChoords [0];
        grippers [7].Top = yChoords [1];
        if ((grippers [0].Left < grippers [4].Left && grippers [0].Top < grippers [4].Top) || grippers [0].Left > grippers [4].Left && grippers [0].Top > grippers [4].Top) {
            grippers [0].Cursor = Cursors.SizeNWSE;
            grippers [2].Cursor = Cursors.SizeNESW;
            grippers [4].Cursor = Cursors.SizeNWSE;
            grippers [6].Cursor = Cursors.SizeNESW;
        } else if ((grippers [0].Left > grippers [4].Left && grippers [0].Top < grippers [4].Top) || grippers [0].Left < grippers [4].Left && grippers [0].Top > grippers [4].Top) {
            grippers [0].Cursor = Cursors.SizeNESW;
            grippers [2].Cursor = Cursors.SizeNWSE;
            grippers [4].Cursor = Cursors.SizeNESW;
            grippers [6].Cursor = Cursors.SizeNWSE;
        } else if (grippers [0].Left == grippers [4].Left) {
            grippers [0].Cursor = Cursors.SizeNS;
            grippers [4].Cursor = Cursors.SizeNS;
        } else if (grippers [0].Top == grippers [4].Top) {
            grippers [0].Cursor = Cursors.SizeWE;
            grippers [4].Cursor = Cursors.SizeWE;
        }
        childLabel.Left = this.Left;
        childLabel.Top = this.Top;
        childLabel.Width = this.Width;
        childLabel.Height = this.Height;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="289" endline="296">
public void Dispose () {
    for (int i = 0; i < grippers.Length; i ++) {
        grippers [i].Dispose ();
    }
    childLabel.Dispose ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="301" endline="306">
private void gripperMouseDown (object sender, MouseEventArgs e) {
    mx = e.X;
    my = e.Y;
    mouseDown = true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="308" endline="311">
private void gripperMouseUp (object sender, MouseEventArgs e) {
    mouseDown = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="313" endline="341">
private void gripperMouseMove (object sender, MouseEventArgs e) {
    if (mouseDown) {
        SuspendLayout ();
        Label gr = (Label) sender;
        int gripperIndex = Int16.Parse (gr.Name.Substring (7));
        if (gripperIndex <= 2) {
            this.Top += e.Y - my;
            this.Height -= e.Y - my;
        } else if (gripperIndex >= 4 && gripperIndex <= 6) {
            this.Height += e.Y - my;
        }
        if (gripperIndex >= 2 && gripperIndex <= 4) {
            this.Width += e.X - mx;
        } else if (gripperIndex >= 6 || gripperIndex == 0) {
            this.Left += e.X - mx;
            this.Width -= e.X - mx;
        }
        ResumeLayout ();
        parent.Invalidate ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="343" endline="353">
private void childLabelMouseMove (object sender, MouseEventArgs e) {
    if (mouseDown) {
        SuspendLayout ();
        this.Left += e.X - mx;
        this.Top += e.Y - my;
        ResumeLayout ();
        parent.Invalidate ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="357" endline="360">
public void Draw (Graphics g) {
    Draw (g, RenderMode.EDIT);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="362" endline="367">
public virtual bool ClickableAt (int x, int y) {
    Rectangle r = GuiRectangle.GetGuiRectangle (Left, Top, Width, Height);
    r.Inflate (5, 5);
    return r.Contains (x, y);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="369" endline="375">
protected void DrawSelectionBorder (Graphics g, Rectangle rect) {
    Pen pen = new Pen (Color.MediumSeaGreen);
    pen.DashPattern = new float [] {1, 2};
    pen.Width = 1;
    g.DrawRectangle (pen, rect);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="377" endline="385">
public void ShowGrippers () {
    for (int i = 0; i < grippers.Length; i ++) {
        if (grippers [i].Enabled)
            grippers [i].Show ();
        else
            grippers [i].Hide ();

    }
    this.ResumeLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="387" endline="394">
public void HideGrippers () {
    this.SuspendLayout ();
    for (int i = 0; i < grippers.Length; i ++) {
        grippers [i].Hide ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="396" endline="402">
public void MoveBy (int dx, int dy) {
    this.SuspendLayout ();
    this.Left += dx;
    this.Top += dy;
    this.ResumeLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/DrawableContainer.cs.ifdefed" startline="404" endline="415">
private void SwitchParent (Control newParent) {
    if (parent != null) {
        for (int i = 0; i < grippers.Length; i ++) {
            parent.Controls.Remove (grippers [i]);
        }
    }
    parent = newParent;
    InitControls ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/EllipseContainer.cs.ifdefed" startline="27" endline="30">
public override void GetObjectData (SerializationInfo info, StreamingContext ctxt) {
    base.GetObjectData (info, ctxt);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Drawing/EllipseContainer.cs.ifdefed" startline="33" endline="42">
public override void Draw (Graphics g, RenderMode rm) {
    g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
    Pen pen = new Pen (foreColor);
    pen.Width = thickness;
    Brush brush = new SolidBrush (backColor);
    Rectangle rect = GuiRectangle.GetGuiRectangle (this.Left, this.Top, this.Width, this.Height);
    g.FillEllipse (brush, rect);
    g.DrawEllipse (pen, rect);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/DrawingHelper.cs.ifdefed" startline="26" endline="48">
public static double CalculateLinePointDistance (double x1, double y1, double x2, double y2, double px, double py) {
    x2 -= x1;
    y2 -= y1;
    px -= x1;
    py -= y1;
    double dotprod = px * x2 + py * y2;
    double projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
    double lenSq = px * px + py * py - projlenSq;
    if (lenSq < 0) {
        lenSq = 0;
    }
    return Math.Sqrt (lenSq);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="30" endline="33">
public static void PrepareClipboardObject () {
    ido = new DataObject ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="39" endline="83">
public static void Save (Image img, string fullPath, int quality) {
    DirectoryInfo di = new DirectoryInfo (fullPath.Substring (0, fullPath.LastIndexOf (Path.DirectorySeparatorChar)));
    if (! di.Exists) {
        Directory.CreateDirectory (di.FullName);
    }
    ImageFormat imfo = null;
    string extension = fullPath.Substring (fullPath.LastIndexOf (".") + 1);
    if (extension.Equals ("jpg"))
        extension = "jpeg";

    extension = extension.Substring (0, 1).ToUpper () + extension.Substring (1).ToLower ();
    try {
        Type t = typeof (ImageFormat);
        PropertyInfo pi = t.GetProperty (extension, typeof (ImageFormat));
        imfo = (ImageFormat) pi.GetValue (null, null);
    }
    catch (Exception e) {
        MessageBox.Show (e.ToString ());
        MessageBox.Show ("Could not use " + extension + " as image format. Using Jpeg.");
        imfo = ImageFormat.Jpeg;
        extension = imfo.ToString ();
    }
    PropertyItem pit = PropertyItemProvider.GetPropertyItem (0x0131, "Greenshot");
    img.SetPropertyItem (pit);
    if (extension.Equals ("Jpeg")) {
        EncoderParameters parameters = new EncoderParameters (1);
        parameters.Param [0] = new System.Drawing.Imaging.EncoderParameter (Encoder.Quality, quality);
        ImageCodecInfo [] ies = ImageCodecInfo.GetImageEncoders ();
        img.Save (fullPath, ies [1], parameters);
    } else {
        img.Save (fullPath, imfo);
    }
    if ((bool) AppConfig.GetInstance ().Output_File_CopyPathToClipboard) {
        ido.SetData (DataFormats.Text, true, fullPath);
        Clipboard.SetDataObject (ido, true);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="90" endline="105">
public static void Save (Image img, string fullPath) {
    AppConfig conf = AppConfig.GetInstance ();
    int q;
    if ((bool) conf.Output_File_PromptJpegQuality) {
        JpegQualityDialog jqd = new JpegQualityDialog ();
        jqd.ShowDialog ();
        q = jqd.Quality;
    } else {
        q = AppConfig.GetInstance ().Output_File_JpegQuality;
    }
    Save (img, fullPath, q);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="110" endline="141">
public static string SaveWithDialog (Image img) {
    string ret = null;
    AppConfig conf = AppConfig.GetInstance ();
    SaveFileDialog sfd = CreateSaveFileDialog ();
    DialogResult dr = sfd.ShowDialog ();
    if (dr.Equals (DialogResult.OK)) {
        try {
            string fn = GetFileNameWithExtension (sfd);
            ImageOutput.Save (img, fn);
            ret = fn;
            conf.Output_FileAs_Fullpath = fn;
            conf.Store ();
        }
        catch (System.Runtime.InteropServices.ExternalException) {
            MessageBox.Show (Language.GetInstance ().GetString ("error_nowriteaccess").Replace ("%path%", sfd.FileName).Replace (@"\\", @"\"), Language.GetInstance ().GetString ("error"));
        }
    }
    return ret;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="142" endline="164">
private static SaveFileDialog CreateSaveFileDialog () {
    AppConfig conf = AppConfig.GetInstance ();
    SaveFileDialog saveFileDialog = new SaveFileDialog ();
    string fdf = "";
    int preselect = - 1;
    for (int i = 0; i < RuntimeConfig.SupportedImageFormats.Length; i ++) {
        string ifo = RuntimeConfig.SupportedImageFormats [i];
        if (ifo.ToLower ().Equals ("jpeg"))
            ifo = "Jpg";

        if (conf.Output_FileAs_Fullpath.EndsWith (ifo, StringComparison.CurrentCultureIgnoreCase))
            preselect = i;

        fdf += ifo + "|*." + ifo.ToLower () + "|";
    }
    fdf = fdf.Substring (0, fdf.Length - 1);
    saveFileDialog.Filter = fdf;
    saveFileDialog.AddExtension = false;
    saveFileDialog.FilterIndex = preselect + 1;
    saveFileDialog.InitialDirectory = Path.GetDirectoryName (conf.Output_FileAs_Fullpath);
    saveFileDialog.CheckPathExists = false;
    return saveFileDialog;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="172" endline="185">
private static string GetFileNameWithExtension (SaveFileDialog saveFileDialog) {
    int ix = (2 * (saveFileDialog.FilterIndex - 1)) + 1;
    string selectedFilter = saveFileDialog.Filter.Split ('|') [ix];
    string selectedExt = Path.GetExtension (selectedFilter);
    string fn = saveFileDialog.FileName;
    string ext = Path.GetExtension (fn);
    if (fn.EndsWith (selectedExt, System.StringComparison.CurrentCultureIgnoreCase))
        return fn;
    else
        return fn + selectedExt;

}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ImageOutput.cs.ifdefed" startline="236" endline="250">
public static void CopyToClipboard (Image img) {
    MemoryStream source = new MemoryStream ();
    MemoryStream dest = new MemoryStream ();
    img.Save (source, ImageFormat.Bmp);
    byte [] b = source.GetBuffer ();
    dest.Write (b, 14, (int) source.Length - 14);
    source.Position = 0;
    ido.SetData (DataFormats.Dib, true, dest);
    Clipboard.SetDataObject (ido, true);
    dest.Close ();
    source.Close ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/PropertyItemProvider.cs.ifdefed" startline="20" endline="35">
public static PropertyItem GetPropertyItem (int id, string value) {
    if (propertyItem == null) {
        System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (PropertyItemProvider));
        Bitmap bmp = (Bitmap) resources.GetObject ("propertyitemcontainer");
        propertyItem = bmp.GetPropertyItem (bmp.PropertyIdList [0]);
        propertyItem.Type = 2;
    }
    propertyItem.Id = id;
    System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding ();
    propertyItem.Value = encoding.GetBytes (value + " ");
    propertyItem.Len = value.Length + 1;
    return propertyItem;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/EnvironmentInfo.cs.ifdefed" startline="15" endline="22">
public static string EnvironmentToString () {
    string r = "Software version: " + Application.ProductVersion + "\r\n";
    r += ".NET runtime version: " + Assembly.GetEntryAssembly ().ImageRuntimeVersion + "\r\n";
    r += "Time: " + DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss zzz") + "\r\n";
    r += "OS: " + OSName + " Build " + OSBuild + " " + OSServicePack + "\r\n";
    return r;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/EnvironmentInfo.cs.ifdefed" startline="24" endline="41">
public static string ExceptionToString (Exception ex) {
    if (ex == null)
        return "null\n";

    string report = "";
    report += "Exception: " + ex.GetType ().ToString () + "\r\n";
    report += "Message: " + ex.Message + "\r\n";
    report += "Stack:\r\n" + ex.StackTrace + "\r\n";
    if (ex is ExternalException)
        report += "ErrorCode: " + (ex as ExternalException).ErrorCode.ToString () + "\r\n";

    if (ex.InnerException != null) {
        report += "--- InnerException: ---\r\n";
        report += ExceptionToString (ex.InnerException);
    }
    return report;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="23" endline="37">
public static void createShortcut (string linkFilePath, string targetFilePath, string targetWorkDirPath) {
    DirectoryInfo di = new DirectoryInfo (linkFilePath);
    if (di.Exists) {
        linkFilePath += extractFilenameWithoutExtension (targetFilePath) + ".lnk";
    }
    WshShell shell = new WshShell ();
    WshShortcut link = (WshShortcut) shell.CreateShortcut (linkFilePath);
    link.TargetPath = targetFilePath;
    link.WorkingDirectory = targetWorkDirPath;
    link.Save ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="44" endline="47">
public static void createShortcut (Environment.SpecialFolder specialFolder, string targetFilePath, string targetWorkDirPath) {
    createShortcut (Environment.GetFolderPath (specialFolder), targetFilePath, targetWorkDirPath);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="54" endline="57">
public static void createShortcut (string linkFilePath, string targetFilePath) {
    createShortcut (linkFilePath, targetFilePath, extractPath (targetFilePath));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="64" endline="67">
public static void createShortcut (Environment.SpecialFolder specialFolder, string targetFilePath) {
    createShortcut (Environment.GetFolderPath (specialFolder), targetFilePath);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="73" endline="76">
public static void createShortcut (string linkFilePath) {
    createShortcut (linkFilePath, getAssemblyLocation ());
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="81" endline="84">
public static void createShortcut (Environment.SpecialFolder specialFolder) {
    createShortcut (Environment.GetFolderPath (specialFolder));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="90" endline="94">
public static void removeShortcut (string linkFilePath) {
    FileInfo fi = new FileInfo (linkFilePath);
    if (fi.Exists)
        fi.Delete ();

}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="99" endline="102">
public static void removeShortcut (Environment.SpecialFolder specialFolder) {
    removeShortcut (Environment.GetFolderPath (specialFolder) + extractFilenameWithoutExtension (getAssemblyLocation ()) + ".lnk");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="109" endline="112">
public static bool shortcutExists (string linkFilePath) {
    return new FileInfo (linkFilePath).Exists;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="118" endline="121">
public static bool shortcutExists (Environment.SpecialFolder specialFolder) {
    return shortcutExists (Environment.GetFolderPath (specialFolder) + extractFilenameWithoutExtension (getAssemblyLocation ()) + ".lnk");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="124" endline="127">
private static string getAssemblyLocation () {
    return System.Reflection.Assembly.GetExecutingAssembly ().Location;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="128" endline="131">
private static string extractPath (string location) {
    return location.Substring (0, location.LastIndexOf (@"\"));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ShortcutManager.cs.ifdefed" startline="132" endline="137">
private static string extractFilenameWithoutExtension (string location) {
    int lastSlashIndex = location.LastIndexOf (@"\");
    int lastDotIndex = location.LastIndexOf (".");
    return location.Substring (lastSlashIndex, lastDotIndex - lastSlashIndex);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/GuiRectangle.cs.ifdefed" startline="23" endline="36">
public static Rectangle GetGuiRectangle (int x, int y, int w, int h) {
    if (w < 0) {
        x = x + w;
        w = - w;
    }
    if (h < 0) {
        y = y + h;
        h = - h;
    }
    return new Rectangle (x, y, w, h);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/WindowCapture.cs.ifdefed" startline="30" endline="33">
public static Image CaptureWindow () {
    return CaptureWindow (User32.GetDesktopWindow (), MainForm.GetScreenBounds ());
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/WindowCapture.cs.ifdefed" startline="48" endline="76">
public static Image CaptureWindow (IntPtr handle, Rectangle rect) {
    IntPtr hdcSrc = User32.GetWindowDC (handle);
    int left = rect.X;
    int top = rect.Y;
    int width = rect.Width;
    int height = rect.Height;
    IntPtr hdcDest = GDI32.CreateCompatibleDC (hdcSrc);
    IntPtr hBitmap = GDI32.CreateCompatibleBitmap (hdcSrc, width, height);
    IntPtr hOld = GDI32.SelectObject (hdcDest, hBitmap);
    GDI32.BitBlt (hdcDest, 0, 0, width, height, hdcSrc, left, top, GDI32.SRCCOPY);
    GDI32.SelectObject (hdcDest, hOld);
    GDI32.DeleteDC (hdcDest);
    User32.ReleaseDC (handle, hdcSrc);
    Image img = Image.FromHbitmap (hBitmap);
    GDI32.DeleteObject (hBitmap);
    return img;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ScaleHelper.cs.ifdefed" startline="31" endline="40">
public static SizeF GetScaledSize (SizeF currentSize, SizeF targetSize, bool crop) {
    float wFactor = targetSize.Width / currentSize.Width;
    float hFactor = targetSize.Height / currentSize.Height;
    float factor = crop ? Math.Max (wFactor, hFactor) : Math.Min (wFactor, hFactor);
    return new SizeF (currentSize.Width * factor, currentSize.Height * factor);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ScaleHelper.cs.ifdefed" startline="49" endline="84">
public static RectangleF GetAlignedRectangle (RectangleF currentRect, RectangleF targetRect, ContentAlignment alignment) {
    RectangleF newRect = new RectangleF (targetRect.Location, currentRect.Size);
    switch (alignment) {
        case ContentAlignment.TopCenter :
            newRect.X = (targetRect.Width - currentRect.Width) / 2;
            break;
        case ContentAlignment.TopRight :
            newRect.X = (targetRect.Width - currentRect.Width);
            break;
        case ContentAlignment.MiddleLeft :
            newRect.Y = (targetRect.Height - currentRect.Height) / 2;
            break;
        case ContentAlignment.MiddleCenter :
            newRect.Y = (targetRect.Height - currentRect.Height) / 2;
            newRect.X = (targetRect.Width - currentRect.Width) / 2;
            break;
        case ContentAlignment.MiddleRight :
            newRect.Y = (targetRect.Height - currentRect.Height) / 2;
            newRect.X = (targetRect.Width - currentRect.Width);
            break;
        case ContentAlignment.BottomLeft :
            newRect.Y = (targetRect.Height - currentRect.Height);
            break;
        case ContentAlignment.BottomCenter :
            newRect.Y = (targetRect.Height - currentRect.Height);
            newRect.X = (targetRect.Width - currentRect.Width) / 2;
            break;
        case ContentAlignment.BottomRight :
            newRect.Y = (targetRect.Height - currentRect.Height);
            newRect.X = (targetRect.Width - currentRect.Width);
            break;
    }
    return newRect;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/ScaleHelper.cs.ifdefed" startline="94" endline="99">
public static RectangleF GetScaledRectangle (RectangleF currentRect, RectangleF targetRect, bool crop, ContentAlignment alignment) {
    SizeF newSize = GetScaledSize (currentRect.Size, targetRect.Size, crop);
    RectangleF newRect = new RectangleF (new Point (0, 0), newSize);
    return GetAlignedRectangle (newRect, targetRect, alignment);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/FilenameHelper.cs.ifdefed" startline="26" endline="29">
public static string GetFilenameWithoutExtensionFromPattern (string pattern) {
    return FillPattern (pattern);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/FilenameHelper.cs.ifdefed" startline="31" endline="36">
public static string GetFilenameFromPattern (string pattern, string imageFormat) {
    string ext = imageFormat.ToLower ();
    if (ext.Equals ("jpeg"))
        ext = "jpg";

    return FillPattern (pattern) + "." + ext;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/FilenameHelper.cs.ifdefed" startline="38" endline="55">
private static string FillPattern (string pattern) {
    DateTime d = DateTime.Now;
    pattern = pattern.Replace ("%YYYY%", d.Year.ToString ());
    pattern = pattern.Replace ("%MM%", zeroPad (d.Month.ToString (), 2));
    pattern = pattern.Replace ("%DD%", zeroPad (d.Day.ToString (), 2));
    pattern = pattern.Replace ("%hh%", zeroPad (d.Hour.ToString (), 2));
    pattern = pattern.Replace ("%mm%", zeroPad (d.Minute.ToString (), 2));
    pattern = pattern.Replace ("%ss%", zeroPad (d.Second.ToString (), 2));
    if (pattern.Contains ("%NUM%")) {
        AppConfig conf = AppConfig.GetInstance ();
        int num = conf.Output_File_IncrementingNumber ++;
        conf.Store ();
        pattern = pattern.Replace ("%NUM%", zeroPad (num.ToString (), 6));
    }
    return pattern;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/FilenameHelper.cs.ifdefed" startline="57" endline="61">
private static string zeroPad (string input, int chars) {
    while (input.Length < chars)
        input = "0" + input;

    return input;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/PrintHelper.cs.ifdefed" startline="40" endline="51">
public PrinterSettings PrintWithDialog () {
    if (printDialog.ShowDialog () == DialogResult.OK) {
        printDocument.Print ();
        return printDialog.PrinterSettings;
    } else {
        return null;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Helpers/PrintHelper.cs.ifdefed" startline="53" endline="90">
void GetImageForPrint (object sender, PrintPageEventArgs e) {
    PrintOptionsDialog pod = new PrintOptionsDialog ();
    pod.ShowDialog ();
    ContentAlignment alignment = pod.AllowPrintCenter ? ContentAlignment.MiddleCenter : ContentAlignment.TopLeft;
    RectangleF pageRect = e.PageSettings.PrintableArea;
    GraphicsUnit gu = GraphicsUnit.Pixel;
    RectangleF imageRect = image.GetBounds (ref gu);
    if (pod.AllowPrintRotate) {
        if ((pageRect.Width > pageRect.Height && imageRect.Width < imageRect.Height) || (pageRect.Width < pageRect.Height && imageRect.Width > imageRect.Height)) {
            image.RotateFlip (RotateFlipType.Rotate90FlipNone);
            imageRect = image.GetBounds (ref gu);
            if (alignment.Equals (ContentAlignment.TopLeft))
                alignment = ContentAlignment.TopRight;

        }
    }
    RectangleF printRect = new RectangleF (0, 0, imageRect.Width, imageRect.Height);
    if (pod.AllowPrintEnlarge || pod.AllowPrintShrink) {
        SizeF resizedRect = ScaleHelper.GetScaledSize (imageRect.Size, pageRect.Size, false);
        if ((pod.AllowPrintShrink && resizedRect.Width < printRect.Width) || pod.AllowPrintEnlarge && resizedRect.Width > printRect.Width) {
            printRect.Size = resizedRect;
        }
    }
    printRect = ScaleHelper.GetAlignedRectangle (printRect, new RectangleF (0, 0, pageRect.Width, pageRect.Height), alignment);
    e.Graphics.DrawImage (image, printRect, imageRect, GraphicsUnit.Pixel);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Language.cs.ifdefed" startline="34" endline="42">
public static Language GetInstance () {
    if (uniqueInstance == null) {
        uniqueInstance = new Language ();
    }
    return uniqueInstance;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Language.cs.ifdefed" startline="43" endline="46">
public void SetLanguage (string cultureInfo) {
    Thread.CurrentThread.CurrentUICulture = new CultureInfo (cultureInfo);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Language.cs.ifdefed" startline="47" endline="51">
public string GetString (string id) {
    string s = rm.GetString (id);
    return (s != null) ? s : "string ###" + id + "### not found";
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Configuration/AppConfig.cs.ifdefed" startline="86" endline="93">
public static AppConfig GetInstance () {
    if (instance == null) {
        instance = Load ();
    }
    return instance;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Configuration/AppConfig.cs.ifdefed" startline="99" endline="130">
private static AppConfig Load () {
    AppConfig conf;
    CheckConfigFile ();
    Stream s = null;
    try {
        s = File.Open (filename, FileMode.Open);
        BinaryFormatter b = new BinaryFormatter ();
        conf = (AppConfig) b.Deserialize (s);
        s.Close ();
        conf.SetDefaults ();
        return conf;
    }
    catch (SerializationException) {
        if (s != null) {
            s.Close ();
        }
        AppConfig config = new AppConfig ();
        config.Store ();
        return config;
    }
    catch (Exception) {
        MessageBox.Show ("Could not load Greenshot's configuration file. Please check access permissions for '" + filename + "'.\n", "Error");
        Process.GetCurrentProcess ().Kill ();
    }
    return null;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Configuration/AppConfig.cs.ifdefed" startline="141" endline="148">
private static void CheckConfigFile () {
    if (! File.Exists (filename)) {
        Directory.CreateDirectory (filename.Substring (0, filename.LastIndexOf (@"\")));
        new AppConfig ().Store ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Configuration/AppConfig.cs.ifdefed" startline="153" endline="159">
public void Store () {
    Stream s = File.Open (filename, FileMode.Create);
    BinaryFormatter formatter = new BinaryFormatter ();
    formatter.Serialize (s, this);
    s.Close ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Configuration/AppConfig.cs.ifdefed" startline="166" endline="183">
public void SetDefaults () {
    Type type = this.GetType ();
    FieldInfo [] fieldInfos = type.GetFields ();
    foreach (FieldInfo fi in fieldInfos) {
        object o = fi.GetValue (this);
        int i;
        if (o == null || (int.TryParse (o.ToString (), out i) && i == 0)) {
            AppConfig tmpConf = new AppConfig ();
            Type tmpType = tmpConf.GetType ();
            FieldInfo defaultField = tmpType.GetField (fi.Name);
            fi.SetValue (this, defaultField.GetValue (tmpConf));
        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="43" endline="94">
private void UpdateUI () {
    this.Text = lang.GetString ("settings_title");
    this.tab_general.Text = lang.GetString ("settings_general");
    this.tab_output.Text = lang.GetString ("settings_output");
    this.groupbox_applicationsettings.Text = lang.GetString ("settings_applicationsettings");
    this.label_language.Text = lang.GetString ("settings_language");
    toolTip.SetToolTip (label_language, lang.GetString ("settings_tooltip_language"));
    this.checkbox_registerhotkeys.Text = lang.GetString ("settings_registerhotkeys");
    toolTip.SetToolTip (checkbox_registerhotkeys, lang.GetString ("settings_tooltip_registerhotkeys"));
    this.checkbox_autostartshortcut.Text = lang.GetString ("settings_autostartshortcut");
    this.checkbox_desktopshortcut.Text = lang.GetString ("settings_desktopshortcut");
    this.groupbox_destination.Text = lang.GetString ("settings_destination");
    this.checkbox_clipboard.Text = lang.GetString ("settings_destination_clipboard");
    this.checkbox_printer.Text = lang.GetString ("settings_destination_printer");
    this.checkbox_file.Text = lang.GetString ("settings_destination_file");
    this.checkbox_fileas.Text = lang.GetString ("settings_destination_fileas");
    this.checkbox_editor.Text = lang.GetString ("settings_destination_editor");
    this.groupbox_preferredfilesettings.Text = lang.GetString ("settings_preferredfilesettings");
    this.label_storagelocation.Text = lang.GetString ("settings_storagelocation");
    toolTip.SetToolTip (label_storagelocation, lang.GetString ("settings_tooltip_storagelocation"));
    this.label_screenshotname.Text = lang.GetString ("settings_filenamepattern");
    toolTip.SetToolTip (label_screenshotname, lang.GetString ("settings_tooltip_filenamepattern"));
    this.label_primaryimageformat.Text = lang.GetString ("settings_primaryimageformat");
    this.checkbox_copypathtoclipboard.Text = lang.GetString ("settings_copypathtoclipboard");
    toolTip.SetToolTip (label_primaryimageformat, lang.GetString ("settings_tooltip_primaryimageformat"));
    this.groupbox_jpegsettings.Text = lang.GetString ("settings_jpegsettings");
    this.label_jpegquality.Text = lang.GetString ("settings_jpegquality");
    this.checkbox_alwaysshowjpegqualitydialog.Text = lang.GetString ("settings_alwaysshowjpegqualitydialog");
    this.groupbox_visualisation.Text = lang.GetString ("settings_visualization");
    this.checkbox_showflashlight.Text = lang.GetString ("settings_showflashlight");
    this.checkbox_playsound.Text = lang.GetString ("settings_playsound");
    this.groupbox_printoptions.Text = lang.GetString ("settings_printoptions");
    this.checkboxAllowCenter.Text = lang.GetString ("printoptions_allowcenter");
    this.checkboxAllowEnlarge.Text = lang.GetString ("printoptions_allowenlarge");
    this.checkboxAllowRotate.Text = lang.GetString ("printoptions_allowrotate");
    this.checkboxAllowShrink.Text = lang.GetString ("printoptions_allowshrink");
    this.checkbox_alwaysshowprintoptionsdialog.Text = lang.GetString ("settings_alwaysshowprintoptionsdialog");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="96" endline="125">
private void DisplaySettings () {
    combobox_language.SelectedValue = conf.Ui_Language;
    checkbox_registerhotkeys.Checked = (bool) conf.General_RegisterHotkeys;
    textbox_storagelocation.Text = conf.Output_File_Path;
    textbox_screenshotname.Text = conf.Output_File_FilenamePattern;
    combobox_primaryimageformat.Text = conf.Output_File_Format.ToString ();
    checkbox_copypathtoclipboard.Checked = (bool) conf.Output_File_CopyPathToClipboard;
    trackBarJpegQuality.Value = conf.Output_File_JpegQuality;
    textBoxJpegQuality.Text = conf.Output_File_JpegQuality + "%";
    checkbox_alwaysshowjpegqualitydialog.Checked = (bool) conf.Output_File_PromptJpegQuality;
    checkbox_showflashlight.Checked = (bool) conf.Ui_Effects_Flashlight;
    checkbox_playsound.Checked = (bool) conf.Ui_Effects_CameraSound;
    checkbox_clipboard.Checked = (conf.Output_Destinations & ScreenshotDestinations.Clipboard) == ScreenshotDestinations.Clipboard;
    checkbox_file.Checked = (conf.Output_Destinations & ScreenshotDestinations.FileDefault) == ScreenshotDestinations.FileDefault;
    checkbox_fileas.Checked = (conf.Output_Destinations & ScreenshotDestinations.FileWithDialog) == ScreenshotDestinations.FileWithDialog;
    checkbox_printer.Checked = (conf.Output_Destinations & ScreenshotDestinations.Printer) == ScreenshotDestinations.Printer;
    checkbox_editor.Checked = (conf.Output_Destinations & ScreenshotDestinations.Editor) == ScreenshotDestinations.Editor;
    checkboxAllowCenter.Checked = (bool) conf.Output_Print_Center;
    checkboxAllowEnlarge.Checked = (bool) conf.Output_Print_AllowEnlarge;
    checkboxAllowRotate.Checked = (bool) conf.Output_Print_AllowRotate;
    checkboxAllowShrink.Checked = (bool) conf.Output_Print_AllowShrink;
    checkbox_alwaysshowprintoptionsdialog.Checked = (bool) conf.Output_Print_PromptOptions;
    checkbox_autostartshortcut.Checked = ShortcutManager.shortcutExists (Environment.SpecialFolder.Startup);
    checkbox_desktopshortcut.Checked = ShortcutManager.shortcutExists (Environment.SpecialFolder.Desktop);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="126" endline="157">
private void SaveSettings () {
    conf.Ui_Language = combobox_language.SelectedValue.ToString ();
    conf.General_RegisterHotkeys = (bool ?) checkbox_registerhotkeys.Checked;
    conf.Output_File_Path = textbox_storagelocation.Text;
    conf.Output_File_FilenamePattern = textbox_screenshotname.Text;
    conf.Output_File_Format = combobox_primaryimageformat.Text;
    conf.Output_File_CopyPathToClipboard = (bool ?) checkbox_copypathtoclipboard.Checked;
    conf.Output_File_JpegQuality = trackBarJpegQuality.Value;
    conf.Output_File_PromptJpegQuality = (bool ?) checkbox_alwaysshowjpegqualitydialog.Checked;
    conf.Ui_Effects_Flashlight = (bool ?) checkbox_showflashlight.Checked;
    conf.Ui_Effects_CameraSound = (bool ?) checkbox_playsound.Checked;
    ScreenshotDestinations dest = 0;
    if (checkbox_clipboard.Checked)
        dest |= ScreenshotDestinations.Clipboard;

    if (checkbox_file.Checked)
        dest |= ScreenshotDestinations.FileDefault;

    if (checkbox_fileas.Checked)
        dest |= ScreenshotDestinations.FileWithDialog;

    if (checkbox_printer.Checked)
        dest |= ScreenshotDestinations.Printer;

    if (checkbox_editor.Checked)
        dest |= ScreenshotDestinations.Editor;

    conf.Output_Destinations = dest;
    conf.Output_Print_Center = (bool ?) checkboxAllowCenter.Checked;
    conf.Output_Print_AllowEnlarge = (bool ?) checkboxAllowEnlarge.Checked;
    conf.Output_Print_AllowRotate = (bool ?) checkboxAllowRotate.Checked;
    conf.Output_Print_AllowShrink = (bool ?) checkboxAllowShrink.Checked;
    conf.Output_Print_PromptOptions = (bool ?) checkbox_alwaysshowprintoptionsdialog.Checked;
    conf.Store ();
    if (checkbox_autostartshortcut.Checked)
        ShortcutManager.createShortcut (Environment.SpecialFolder.Startup);
    else
        ShortcutManager.removeShortcut (Environment.SpecialFolder.Startup);

    if (checkbox_desktopshortcut.Checked)
        ShortcutManager.createShortcut (Environment.SpecialFolder.Desktop);
    else
        ShortcutManager.removeShortcut (Environment.SpecialFolder.Desktop);

}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="159" endline="170">
private void FillLanguageCombo () {
    List < CultureInfo > langs = new List < CultureInfo > ();
    for (int i = 0; i < RuntimeConfig.SupportedLanguages.Length; i ++) {
        CultureInfo ci = new CultureInfo (RuntimeConfig.SupportedLanguages [i]);
        langs.Add (ci);
    }
    combobox_language.DataSource = langs;
    combobox_language.DisplayMember = "NativeName";
    combobox_language.ValueMember = "Name";
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="172" endline="175">
void Settings_cancelClick (object sender, System.EventArgs e) {
    this.Close ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="177" endline="181">
void Settings_okayClick (object sender, System.EventArgs e) {
    SaveSettings ();
    this.Close ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="183" endline="190">
void BrowseClick (object sender, System.EventArgs e) {
    this.folderBrowserDialog1.SelectedPath = this.textbox_storagelocation.Text;
    if (this.folderBrowserDialog1.ShowDialog () == DialogResult.OK) {
        this.textbox_storagelocation.Text = this.folderBrowserDialog1.SelectedPath;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="192" endline="195">
void TrackBarJpegQualityScroll (object sender, System.EventArgs e) {
    textBoxJpegQuality.Text = trackBarJpegQuality.Value.ToString ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.cs.ifdefed" startline="198" endline="201">
void BtnPatternHelpClick (object sender, EventArgs e) {
    MessageBox.Show (lang.GetString ("settings_message_filenamepattern"), lang.GetString ("settings_filenamepattern"));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/FlashlightForm.cs.ifdefed" startline="36" endline="41">
public void FadeIn () {
    Opacity = 0;
    Show ();
    Fade (2, 0, 1, 2);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/FlashlightForm.cs.ifdefed" startline="42" endline="46">
public void FadeOut () {
    Fade (6, 1, 0, 2);
    Hide ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/FlashlightForm.cs.ifdefed" startline="47" endline="61">
private void Fade (int frames, double startOpacity, double targetOpacity, double exponent) {
    this.Opacity = startOpacity;
    double baseOpacity = Math.Min (startOpacity, targetOpacity);
    double diff = Math.Abs (targetOpacity - startOpacity);
    double stepWidth = (double) (10) / (double) frames;
    double maxValue = Math.Pow (10, exponent);
    for (int i = 0; i <= frames; i ++) {
        double x = ((startOpacity < targetOpacity) ? i : frames - i) * stepWidth;
        double factor = Math.Pow (x, exponent) / 100;
        this.Opacity = baseOpacity + factor * diff;
        Thread.Sleep (1000 / framesPerSecond);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/FlashlightForm.cs.ifdefed" startline="62" endline="66">
private void FlashlightForm_Load (object sender, EventArgs e) {
    this.Bounds = MainForm.GetScreenBounds ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/SettingsForm.Designer.cs.ifdefed" startline="39" endline="552">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (SettingsForm));
    this.textbox_storagelocation = new System.Windows.Forms.TextBox ();
    this.label_storagelocation = new System.Windows.Forms.Label ();
    this.settings_cancel = new System.Windows.Forms.Button ();
    this.settings_okay = new System.Windows.Forms.Button ();
    this.folderBrowserDialog1 = new System.Windows.Forms.FolderBrowserDialog ();
    this.browse = new System.Windows.Forms.Button ();
    this.label_screenshotname = new System.Windows.Forms.Label ();
    this.textbox_screenshotname = new System.Windows.Forms.TextBox ();
    this.label_language = new System.Windows.Forms.Label ();
    this.combobox_language = new System.Windows.Forms.ComboBox ();
    this.combobox_primaryimageformat = new System.Windows.Forms.ComboBox ();
    this.label_primaryimageformat = new System.Windows.Forms.Label ();
    this.groupbox_preferredfilesettings = new System.Windows.Forms.GroupBox ();
    this.btnPatternHelp = new System.Windows.Forms.Button ();
    this.checkbox_copypathtoclipboard = new System.Windows.Forms.CheckBox ();
    this.groupbox_visualisation = new System.Windows.Forms.GroupBox ();
    this.checkbox_playsound = new System.Windows.Forms.CheckBox ();
    this.checkbox_showflashlight = new System.Windows.Forms.CheckBox ();
    this.groupbox_applicationsettings = new System.Windows.Forms.GroupBox ();
    this.checkbox_desktopshortcut = new System.Windows.Forms.CheckBox ();
    this.checkbox_autostartshortcut = new System.Windows.Forms.CheckBox ();
    this.checkbox_registerhotkeys = new System.Windows.Forms.CheckBox ();
    this.checkbox_editor = new System.Windows.Forms.CheckBox ();
    this.groupbox_jpegsettings = new System.Windows.Forms.GroupBox ();
    this.checkbox_alwaysshowjpegqualitydialog = new System.Windows.Forms.CheckBox ();
    this.label_jpegquality = new System.Windows.Forms.Label ();
    this.textBoxJpegQuality = new System.Windows.Forms.TextBox ();
    this.trackBarJpegQuality = new System.Windows.Forms.TrackBar ();
    this.checkbox_clipboard = new System.Windows.Forms.CheckBox ();
    this.checkbox_file = new System.Windows.Forms.CheckBox ();
    this.checkbox_printer = new System.Windows.Forms.CheckBox ();
    this.groupbox_destination = new System.Windows.Forms.GroupBox ();
    this.checkbox_fileas = new System.Windows.Forms.CheckBox ();
    this.tabcontrol = new System.Windows.Forms.TabControl ();
    this.tab_general = new System.Windows.Forms.TabPage ();
    this.tab_output = new System.Windows.Forms.TabPage ();
    this.groupbox_printoptions = new System.Windows.Forms.GroupBox ();
    this.checkbox_alwaysshowprintoptionsdialog = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowCenter = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowRotate = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowEnlarge = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowShrink = new System.Windows.Forms.CheckBox ();
    this.groupbox_preferredfilesettings.SuspendLayout ();
    this.groupbox_visualisation.SuspendLayout ();
    this.groupbox_applicationsettings.SuspendLayout ();
    this.groupbox_jpegsettings.SuspendLayout ();
    ((System.ComponentModel.ISupportInitialize) (this.trackBarJpegQuality)).BeginInit ();
    this.groupbox_destination.SuspendLayout ();
    this.tabcontrol.SuspendLayout ();
    this.tab_general.SuspendLayout ();
    this.tab_output.SuspendLayout ();
    this.groupbox_printoptions.SuspendLayout ();
    this.SuspendLayout ();
    this.textbox_storagelocation.Location = new System.Drawing.Point (138, 18);
    this.textbox_storagelocation.Name = "textbox_storagelocation";
    this.textbox_storagelocation.ReadOnly = true;
    this.textbox_storagelocation.Size = new System.Drawing.Size (233, 20);
    this.textbox_storagelocation.TabIndex = 12;
    this.label_storagelocation.Location = new System.Drawing.Point (6, 21);
    this.label_storagelocation.Name = "label_storagelocation";
    this.label_storagelocation.Size = new System.Drawing.Size (116, 23);
    this.label_storagelocation.TabIndex = 11;
    this.label_storagelocation.Text = "Storage Location";
    this.settings_cancel.Location = new System.Drawing.Point (364, 511);
    this.settings_cancel.Name = "settings_cancel";
    this.settings_cancel.Size = new System.Drawing.Size (75, 23);
    this.settings_cancel.TabIndex = 7;
    this.settings_cancel.Text = "Cancel";
    this.settings_cancel.UseVisualStyleBackColor = true;
    this.settings_cancel.Click += new System.EventHandler (this.Settings_cancelClick);
    this.settings_okay.Location = new System.Drawing.Point (283, 511);
    this.settings_okay.Name = "settings_okay";
    this.settings_okay.Size = new System.Drawing.Size (75, 23);
    this.settings_okay.TabIndex = 6;
    this.settings_okay.Text = "OK";
    this.settings_okay.UseVisualStyleBackColor = true;
    this.settings_okay.Click += new System.EventHandler (this.Settings_okayClick);
    this.browse.Location = new System.Drawing.Point (371, 17);
    this.browse.Name = "browse";
    this.browse.Size = new System.Drawing.Size (35, 23);
    this.browse.TabIndex = 1;
    this.browse.Text = "...";
    this.browse.UseVisualStyleBackColor = true;
    this.browse.Click += new System.EventHandler (this.BrowseClick);
    this.label_screenshotname.Location = new System.Drawing.Point (6, 44);
    this.label_screenshotname.Name = "label_screenshotname";
    this.label_screenshotname.Size = new System.Drawing.Size (116, 23);
    this.label_screenshotname.TabIndex = 9;
    this.label_screenshotname.Text = "Filename pattern";
    this.textbox_screenshotname.Location = new System.Drawing.Point (138, 41);
    this.textbox_screenshotname.Name = "textbox_screenshotname";
    this.textbox_screenshotname.Size = new System.Drawing.Size (233, 20);
    this.textbox_screenshotname.TabIndex = 2;
    this.label_language.Location = new System.Drawing.Point (6, 20);
    this.label_language.Name = "label_language";
    this.label_language.Size = new System.Drawing.Size (181, 23);
    this.label_language.TabIndex = 10;
    this.label_language.Text = "Language";
    this.combobox_language.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
    this.combobox_language.FormattingEnabled = true;
    this.combobox_language.Location = new System.Drawing.Point (193, 17);
    this.combobox_language.Name = "combobox_language";
    this.combobox_language.Size = new System.Drawing.Size (213, 21);
    this.combobox_language.TabIndex = 0;
    this.combobox_primaryimageformat.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
    this.combobox_primaryimageformat.FormattingEnabled = true;
    this.combobox_primaryimageformat.Location = new System.Drawing.Point (138, 64);
    this.combobox_primaryimageformat.Name = "combobox_primaryimageformat";
    this.combobox_primaryimageformat.Size = new System.Drawing.Size (268, 21);
    this.combobox_primaryimageformat.TabIndex = 4;
    this.label_primaryimageformat.Location = new System.Drawing.Point (6, 67);
    this.label_primaryimageformat.Name = "label_primaryimageformat";
    this.label_primaryimageformat.Size = new System.Drawing.Size (136, 19);
    this.label_primaryimageformat.TabIndex = 8;
    this.label_primaryimageformat.Text = "Primary image format";
    this.groupbox_preferredfilesettings.Controls.Add (this.btnPatternHelp);
    this.groupbox_preferredfilesettings.Controls.Add (this.checkbox_copypathtoclipboard);
    this.groupbox_preferredfilesettings.Controls.Add (this.combobox_primaryimageformat);
    this.groupbox_preferredfilesettings.Controls.Add (this.label_primaryimageformat);
    this.groupbox_preferredfilesettings.Controls.Add (this.label_storagelocation);
    this.groupbox_preferredfilesettings.Controls.Add (this.browse);
    this.groupbox_preferredfilesettings.Controls.Add (this.textbox_storagelocation);
    this.groupbox_preferredfilesettings.Controls.Add (this.textbox_screenshotname);
    this.groupbox_preferredfilesettings.Controls.Add (this.label_screenshotname);
    this.groupbox_preferredfilesettings.Location = new System.Drawing.Point (2, 106);
    this.groupbox_preferredfilesettings.Name = "groupbox_preferredfilesettings";
    this.groupbox_preferredfilesettings.Size = new System.Drawing.Size (412, 122);
    this.groupbox_preferredfilesettings.TabIndex = 13;
    this.groupbox_preferredfilesettings.TabStop = false;
    this.groupbox_preferredfilesettings.Text = "Preferred Output File Settings";
    this.btnPatternHelp.Location = new System.Drawing.Point (371, 39);
    this.btnPatternHelp.Name = "btnPatternHelp";
    this.btnPatternHelp.Size = new System.Drawing.Size (35, 23);
    this.btnPatternHelp.TabIndex = 19;
    this.btnPatternHelp.Text = "?";
    this.btnPatternHelp.UseVisualStyleBackColor = true;
    this.btnPatternHelp.Click += new System.EventHandler (this.BtnPatternHelpClick);
    this.checkbox_copypathtoclipboard.Location = new System.Drawing.Point (12, 89);
    this.checkbox_copypathtoclipboard.Name = "checkbox_copypathtoclipboard";
    this.checkbox_copypathtoclipboard.Size = new System.Drawing.Size (394, 24);
    this.checkbox_copypathtoclipboard.TabIndex = 18;
    this.checkbox_copypathtoclipboard.Text = "Copy file path to clipboard every time an image is saved";
    this.checkbox_copypathtoclipboard.UseVisualStyleBackColor = true;
    this.groupbox_visualisation.Controls.Add (this.checkbox_playsound);
    this.groupbox_visualisation.Controls.Add (this.checkbox_showflashlight);
    this.groupbox_visualisation.Location = new System.Drawing.Point (3, 126);
    this.groupbox_visualisation.Name = "groupbox_visualisation";
    this.groupbox_visualisation.Size = new System.Drawing.Size (412, 69);
    this.groupbox_visualisation.TabIndex = 15;
    this.groupbox_visualisation.TabStop = false;
    this.groupbox_visualisation.Text = "Visualisation";
    this.checkbox_playsound.Location = new System.Drawing.Point (12, 39);
    this.checkbox_playsound.Name = "checkbox_playsound";
    this.checkbox_playsound.Size = new System.Drawing.Size (248, 24);
    this.checkbox_playsound.TabIndex = 12;
    this.checkbox_playsound.Text = "Play camera sound";
    this.checkbox_playsound.UseVisualStyleBackColor = true;
    this.checkbox_showflashlight.Location = new System.Drawing.Point (12, 18);
    this.checkbox_showflashlight.Name = "checkbox_showflashlight";
    this.checkbox_showflashlight.Size = new System.Drawing.Size (248, 24);
    this.checkbox_showflashlight.TabIndex = 11;
    this.checkbox_showflashlight.Text = "Show flashlight";
    this.checkbox_showflashlight.UseVisualStyleBackColor = true;
    this.groupbox_applicationsettings.Controls.Add (this.checkbox_desktopshortcut);
    this.groupbox_applicationsettings.Controls.Add (this.checkbox_autostartshortcut);
    this.groupbox_applicationsettings.Controls.Add (this.label_language);
    this.groupbox_applicationsettings.Controls.Add (this.combobox_language);
    this.groupbox_applicationsettings.Controls.Add (this.checkbox_registerhotkeys);
    this.groupbox_applicationsettings.Location = new System.Drawing.Point (2, 6);
    this.groupbox_applicationsettings.Name = "groupbox_applicationsettings";
    this.groupbox_applicationsettings.Size = new System.Drawing.Size (412, 117);
    this.groupbox_applicationsettings.TabIndex = 14;
    this.groupbox_applicationsettings.TabStop = false;
    this.groupbox_applicationsettings.Text = "Application Settings";
    this.checkbox_desktopshortcut.Location = new System.Drawing.Point (12, 88);
    this.checkbox_desktopshortcut.Name = "checkbox_desktopshortcut";
    this.checkbox_desktopshortcut.Size = new System.Drawing.Size (248, 25);
    this.checkbox_desktopshortcut.TabIndex = 16;
    this.checkbox_desktopshortcut.Text = "Shortcut on desktop";
    this.checkbox_desktopshortcut.UseVisualStyleBackColor = true;
    this.checkbox_autostartshortcut.Location = new System.Drawing.Point (12, 67);
    this.checkbox_autostartshortcut.Name = "checkbox_autostartshortcut";
    this.checkbox_autostartshortcut.Size = new System.Drawing.Size (248, 25);
    this.checkbox_autostartshortcut.TabIndex = 15;
    this.checkbox_autostartshortcut.Text = "Launch Greenshot on startup";
    this.checkbox_autostartshortcut.UseVisualStyleBackColor = true;
    this.checkbox_registerhotkeys.Location = new System.Drawing.Point (12, 46);
    this.checkbox_registerhotkeys.Name = "checkbox_registerhotkeys";
    this.checkbox_registerhotkeys.Size = new System.Drawing.Size (248, 25);
    this.checkbox_registerhotkeys.TabIndex = 14;
    this.checkbox_registerhotkeys.Text = "Register Hotkeys";
    this.checkbox_registerhotkeys.UseVisualStyleBackColor = true;
    this.checkbox_editor.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_editor.Location = new System.Drawing.Point (12, 19);
    this.checkbox_editor.Name = "checkbox_editor";
    this.checkbox_editor.Size = new System.Drawing.Size (162, 24);
    this.checkbox_editor.TabIndex = 14;
    this.checkbox_editor.Text = "Open in editor";
    this.checkbox_editor.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_editor.UseVisualStyleBackColor = true;
    this.groupbox_jpegsettings.Controls.Add (this.checkbox_alwaysshowjpegqualitydialog);
    this.groupbox_jpegsettings.Controls.Add (this.label_jpegquality);
    this.groupbox_jpegsettings.Controls.Add (this.textBoxJpegQuality);
    this.groupbox_jpegsettings.Controls.Add (this.trackBarJpegQuality);
    this.groupbox_jpegsettings.Location = new System.Drawing.Point (2, 234);
    this.groupbox_jpegsettings.Name = "groupbox_jpegsettings";
    this.groupbox_jpegsettings.Size = new System.Drawing.Size (412, 83);
    this.groupbox_jpegsettings.TabIndex = 14;
    this.groupbox_jpegsettings.TabStop = false;
    this.groupbox_jpegsettings.Text = "JPEG Settings";
    this.checkbox_alwaysshowjpegqualitydialog.Location = new System.Drawing.Point (12, 50);
    this.checkbox_alwaysshowjpegqualitydialog.Name = "checkbox_alwaysshowjpegqualitydialog";
    this.checkbox_alwaysshowjpegqualitydialog.Size = new System.Drawing.Size (394, 25);
    this.checkbox_alwaysshowjpegqualitydialog.TabIndex = 16;
    this.checkbox_alwaysshowjpegqualitydialog.Text = "Show quality dialog every time a JPEG image is saved";
    this.checkbox_alwaysshowjpegqualitydialog.UseVisualStyleBackColor = true;
    this.label_jpegquality.Location = new System.Drawing.Point (6, 24);
    this.label_jpegquality.Name = "label_jpegquality";
    this.label_jpegquality.Size = new System.Drawing.Size (116, 23);
    this.label_jpegquality.TabIndex = 13;
    this.label_jpegquality.Text = "JPEG Quality";
    this.textBoxJpegQuality.Location = new System.Drawing.Point (371, 21);
    this.textBoxJpegQuality.Name = "textBoxJpegQuality";
    this.textBoxJpegQuality.ReadOnly = true;
    this.textBoxJpegQuality.Size = new System.Drawing.Size (35, 20);
    this.textBoxJpegQuality.TabIndex = 13;
    this.textBoxJpegQuality.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
    this.trackBarJpegQuality.BackColor = System.Drawing.SystemColors.Control;
    this.trackBarJpegQuality.LargeChange = 10;
    this.trackBarJpegQuality.Location = new System.Drawing.Point (138, 21);
    this.trackBarJpegQuality.Maximum = 100;
    this.trackBarJpegQuality.Name = "trackBarJpegQuality";
    this.trackBarJpegQuality.Size = new System.Drawing.Size (233, 45);
    this.trackBarJpegQuality.TabIndex = 0;
    this.trackBarJpegQuality.TickFrequency = 10;
    this.trackBarJpegQuality.Scroll += new System.EventHandler (this.TrackBarJpegQualityScroll);
    this.checkbox_clipboard.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_clipboard.Location = new System.Drawing.Point (12, 41);
    this.checkbox_clipboard.Name = "checkbox_clipboard";
    this.checkbox_clipboard.Size = new System.Drawing.Size (179, 24);
    this.checkbox_clipboard.TabIndex = 15;
    this.checkbox_clipboard.Text = "Copy to clipboard";
    this.checkbox_clipboard.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_clipboard.UseVisualStyleBackColor = true;
    this.checkbox_file.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_file.Location = new System.Drawing.Point (176, 42);
    this.checkbox_file.Name = "checkbox_file";
    this.checkbox_file.Size = new System.Drawing.Size (230, 44);
    this.checkbox_file.TabIndex = 16;
    this.checkbox_file.Text = "Save directly (using settings below)";
    this.checkbox_file.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_file.UseVisualStyleBackColor = true;
    this.checkbox_printer.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_printer.Location = new System.Drawing.Point (12, 63);
    this.checkbox_printer.Name = "checkbox_printer";
    this.checkbox_printer.Size = new System.Drawing.Size (130, 24);
    this.checkbox_printer.TabIndex = 17;
    this.checkbox_printer.Text = "Send to printer";
    this.checkbox_printer.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_printer.UseVisualStyleBackColor = true;
    this.groupbox_destination.Controls.Add (this.checkbox_fileas);
    this.groupbox_destination.Controls.Add (this.checkbox_printer);
    this.groupbox_destination.Controls.Add (this.checkbox_editor);
    this.groupbox_destination.Controls.Add (this.checkbox_file);
    this.groupbox_destination.Controls.Add (this.checkbox_clipboard);
    this.groupbox_destination.Location = new System.Drawing.Point (2, 6);
    this.groupbox_destination.Name = "groupbox_destination";
    this.groupbox_destination.Size = new System.Drawing.Size (412, 94);
    this.groupbox_destination.TabIndex = 16;
    this.groupbox_destination.TabStop = false;
    this.groupbox_destination.Text = "Screenshot Destination";
    this.checkbox_fileas.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_fileas.Location = new System.Drawing.Point (176, 19);
    this.checkbox_fileas.Name = "checkbox_fileas";
    this.checkbox_fileas.Size = new System.Drawing.Size (230, 24);
    this.checkbox_fileas.TabIndex = 18;
    this.checkbox_fileas.Text = "Save as (displaying dialog)";
    this.checkbox_fileas.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_fileas.UseVisualStyleBackColor = true;
    this.tabcontrol.Controls.Add (this.tab_general);
    this.tabcontrol.Controls.Add (this.tab_output);
    this.tabcontrol.Location = new System.Drawing.Point (12, 13);
    this.tabcontrol.Name = "tabcontrol";
    this.tabcontrol.SelectedIndex = 0;
    this.tabcontrol.Size = new System.Drawing.Size (431, 492);
    this.tabcontrol.TabIndex = 17;
    this.tab_general.BackColor = System.Drawing.SystemColors.Control;
    this.tab_general.Controls.Add (this.groupbox_applicationsettings);
    this.tab_general.Controls.Add (this.groupbox_visualisation);
    this.tab_general.Location = new System.Drawing.Point (4, 22);
    this.tab_general.Name = "tab_general";
    this.tab_general.Padding = new System.Windows.Forms.Padding (3);
    this.tab_general.Size = new System.Drawing.Size (423, 466);
    this.tab_general.TabIndex = 0;
    this.tab_general.Text = "General";
    this.tab_output.BackColor = System.Drawing.SystemColors.Control;
    this.tab_output.Controls.Add (this.groupbox_printoptions);
    this.tab_output.Controls.Add (this.groupbox_destination);
    this.tab_output.Controls.Add (this.groupbox_jpegsettings);
    this.tab_output.Controls.Add (this.groupbox_preferredfilesettings);
    this.tab_output.Location = new System.Drawing.Point (4, 22);
    this.tab_output.Name = "tab_output";
    this.tab_output.Padding = new System.Windows.Forms.Padding (3);
    this.tab_output.Size = new System.Drawing.Size (423, 466);
    this.tab_output.TabIndex = 1;
    this.tab_output.Text = "Output";
    this.groupbox_printoptions.Controls.Add (this.checkbox_alwaysshowprintoptionsdialog);
    this.groupbox_printoptions.Controls.Add (this.checkboxAllowCenter);
    this.groupbox_printoptions.Controls.Add (this.checkboxAllowRotate);
    this.groupbox_printoptions.Controls.Add (this.checkboxAllowEnlarge);
    this.groupbox_printoptions.Controls.Add (this.checkboxAllowShrink);
    this.groupbox_printoptions.Location = new System.Drawing.Point (2, 324);
    this.groupbox_printoptions.Name = "groupbox_printoptions";
    this.groupbox_printoptions.Size = new System.Drawing.Size (412, 142);
    this.groupbox_printoptions.TabIndex = 17;
    this.groupbox_printoptions.TabStop = false;
    this.groupbox_printoptions.Text = "Print options";
    this.checkbox_alwaysshowprintoptionsdialog.Location = new System.Drawing.Point (12, 112);
    this.checkbox_alwaysshowprintoptionsdialog.Name = "checkbox_alwaysshowprintoptionsdialog";
    this.checkbox_alwaysshowprintoptionsdialog.Size = new System.Drawing.Size (394, 25);
    this.checkbox_alwaysshowprintoptionsdialog.TabIndex = 17;
    this.checkbox_alwaysshowprintoptionsdialog.Text = "Show quality dialog every time a JPEG image is saved";
    this.checkbox_alwaysshowprintoptionsdialog.UseVisualStyleBackColor = true;
    this.checkboxAllowCenter.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowCenter.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowCenter.Location = new System.Drawing.Point (12, 92);
    this.checkboxAllowCenter.Name = "checkboxAllowCenter";
    this.checkboxAllowCenter.Size = new System.Drawing.Size (394, 29);
    this.checkboxAllowCenter.TabIndex = 29;
    this.checkboxAllowCenter.Text = "Align printouts centered on the page.";
    this.checkboxAllowCenter.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowCenter.UseVisualStyleBackColor = true;
    this.checkboxAllowRotate.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowRotate.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowRotate.Location = new System.Drawing.Point (12, 69);
    this.checkboxAllowRotate.Name = "checkboxAllowRotate";
    this.checkboxAllowRotate.Size = new System.Drawing.Size (394, 39);
    this.checkboxAllowRotate.TabIndex = 28;
    this.checkboxAllowRotate.Text = "Rotate printouts to page orientation.";
    this.checkboxAllowRotate.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowRotate.UseVisualStyleBackColor = true;
    this.checkboxAllowEnlarge.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowEnlarge.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowEnlarge.Location = new System.Drawing.Point (12, 45);
    this.checkboxAllowEnlarge.Name = "checkboxAllowEnlarge";
    this.checkboxAllowEnlarge.Size = new System.Drawing.Size (394, 39);
    this.checkboxAllowEnlarge.TabIndex = 27;
    this.checkboxAllowEnlarge.Text = "Enlarge small printouts to paper size.";
    this.checkboxAllowEnlarge.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowEnlarge.UseVisualStyleBackColor = true;
    this.checkboxAllowShrink.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowShrink.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowShrink.Location = new System.Drawing.Point (12, 22);
    this.checkboxAllowShrink.Name = "checkboxAllowShrink";
    this.checkboxAllowShrink.Size = new System.Drawing.Size (394, 39);
    this.checkboxAllowShrink.TabIndex = 26;
    this.checkboxAllowShrink.Text = "Shrink large printouts to paper size.";
    this.checkboxAllowShrink.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowShrink.UseVisualStyleBackColor = true;
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (451, 546);
    this.Controls.Add (this.tabcontrol);
    this.Controls.Add (this.settings_okay);
    this.Controls.Add (this.settings_cancel);
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "SettingsForm";
    this.Text = "SettingsForm";
    this.groupbox_preferredfilesettings.ResumeLayout (false);
    this.groupbox_preferredfilesettings.PerformLayout ();
    this.groupbox_visualisation.ResumeLayout (false);
    this.groupbox_applicationsettings.ResumeLayout (false);
    this.groupbox_jpegsettings.ResumeLayout (false);
    this.groupbox_jpegsettings.PerformLayout ();
    ((System.ComponentModel.ISupportInitialize) (this.trackBarJpegQuality)).EndInit ();
    this.groupbox_destination.ResumeLayout (false);
    this.tabcontrol.ResumeLayout (false);
    this.tab_general.ResumeLayout (false);
    this.tab_output.ResumeLayout (false);
    this.groupbox_printoptions.ResumeLayout (false);
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.Designer.cs.ifdefed" startline="39" endline="218">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (TextInputForm));
    this.toolStripContainer1 = new System.Windows.Forms.ToolStripContainer ();
    this.btnCancel = new System.Windows.Forms.Button ();
    this.btnOk = new System.Windows.Forms.Button ();
    this.InputText = new System.Windows.Forms.TextBox ();
    this.toolStrip1 = new System.Windows.Forms.ToolStrip ();
    this.comboFonts = new System.Windows.Forms.ToolStripComboBox ();
    this.comboFontSize = new System.Windows.Forms.ToolStripComboBox ();
    this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnBold = new System.Windows.Forms.ToolStripButton ();
    this.btnItalic = new System.Windows.Forms.ToolStripButton ();
    this.btnUnderline = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnColor = new System.Windows.Forms.ToolStripButton ();
    this.toolStripContainer1.ContentPanel.SuspendLayout ();
    this.toolStripContainer1.TopToolStripPanel.SuspendLayout ();
    this.toolStripContainer1.SuspendLayout ();
    this.toolStrip1.SuspendLayout ();
    this.SuspendLayout ();
    this.toolStripContainer1.ContentPanel.Controls.Add (this.btnCancel);
    this.toolStripContainer1.ContentPanel.Controls.Add (this.btnOk);
    this.toolStripContainer1.ContentPanel.Controls.Add (this.InputText);
    this.toolStripContainer1.ContentPanel.Size = new System.Drawing.Size (418, 193);
    this.toolStripContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
    this.toolStripContainer1.Location = new System.Drawing.Point (0, 0);
    this.toolStripContainer1.Name = "toolStripContainer1";
    this.toolStripContainer1.Size = new System.Drawing.Size (418, 218);
    this.toolStripContainer1.TabIndex = 4;
    this.toolStripContainer1.Text = "toolStripContainer1";
    this.toolStripContainer1.TopToolStripPanel.Controls.Add (this.toolStrip1);
    this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
    this.btnCancel.Location = new System.Drawing.Point (318, 160);
    this.btnCancel.Name = "btnCancel";
    this.btnCancel.Size = new System.Drawing.Size (88, 27);
    this.btnCancel.TabIndex = 6;
    this.btnCancel.Text = "Cancel";
    this.btnCancel.UseVisualStyleBackColor = true;
    this.btnCancel.Click += new System.EventHandler (this.BtnCancelClick);
    this.btnOk.Location = new System.Drawing.Point (224, 160);
    this.btnOk.Name = "btnOk";
    this.btnOk.Size = new System.Drawing.Size (88, 27);
    this.btnOk.TabIndex = 5;
    this.btnOk.Text = "OK";
    this.btnOk.UseVisualStyleBackColor = true;
    this.btnOk.Click += new System.EventHandler (this.BtnOkClick);
    this.InputText.Font = new System.Drawing.Font ("Arial", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte) (0)));
    this.InputText.Location = new System.Drawing.Point (0, 3);
    this.InputText.Multiline = true;
    this.InputText.Name = "InputText";
    this.InputText.Size = new System.Drawing.Size (410, 151);
    this.InputText.TabIndex = 4;
    this.InputText.KeyDown += new System.Windows.Forms.KeyEventHandler (this.InputTextKeyDown);
    this.toolStrip1.Dock = System.Windows.Forms.DockStyle.None;
    this.toolStrip1.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.comboFonts, this.comboFontSize, this.toolStripSeparator2, this.btnBold, this.btnItalic, this.btnUnderline, this.toolStripSeparator1, this.btnColor});
    this.toolStrip1.Location = new System.Drawing.Point (3, 0);
    this.toolStrip1.Name = "toolStrip1";
    this.toolStrip1.Size = new System.Drawing.Size (395, 25);
    this.toolStrip1.TabIndex = 0;
    this.comboFonts.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
    this.comboFonts.MaxDropDownItems = 20;
    this.comboFonts.Name = "comboFonts";
    this.comboFonts.Size = new System.Drawing.Size (200, 25);
    this.comboFonts.SelectedIndexChanged += new System.EventHandler (this.ComboFontsSelectedIndexChanged);
    this.comboFontSize.MaxDropDownItems = 20;
    this.comboFontSize.Name = "comboFontSize";
    this.comboFontSize.Size = new System.Drawing.Size (75, 25);
    this.comboFontSize.TextChanged += new System.EventHandler (this.ComboFontSizeTextChanged);
    this.toolStripSeparator2.Name = "toolStripSeparator2";
    this.toolStripSeparator2.Size = new System.Drawing.Size (6, 25);
    this.btnBold.AutoToolTip = false;
    this.btnBold.CheckOnClick = true;
    this.btnBold.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnBold.Image = ((System.Drawing.Image) (resources.GetObject ("btnBold.Image")));
    this.btnBold.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnBold.Name = "btnBold";
    this.btnBold.Size = new System.Drawing.Size (23, 22);
    this.btnBold.Text = "B";
    this.btnBold.TextImageRelation = System.Windows.Forms.TextImageRelation.TextAboveImage;
    this.btnBold.ToolTipText = "Bold";
    this.btnBold.Click += new System.EventHandler (this.BtnBoldClick);
    this.btnItalic.CheckOnClick = true;
    this.btnItalic.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnItalic.Image = ((System.Drawing.Image) (resources.GetObject ("btnItalic.Image")));
    this.btnItalic.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnItalic.Name = "btnItalic";
    this.btnItalic.Size = new System.Drawing.Size (23, 22);
    this.btnItalic.Text = "toolStripButton2";
    this.btnItalic.Click += new System.EventHandler (this.BtnItalicClick);
    this.btnUnderline.CheckOnClick = true;
    this.btnUnderline.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnUnderline.Image = ((System.Drawing.Image) (resources.GetObject ("btnUnderline.Image")));
    this.btnUnderline.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnUnderline.Name = "btnUnderline";
    this.btnUnderline.Size = new System.Drawing.Size (23, 22);
    this.btnUnderline.Text = "toolStripButton3";
    this.btnUnderline.Click += new System.EventHandler (this.BtnUnderlineClick);
    this.toolStripSeparator1.Name = "toolStripSeparator1";
    this.toolStripSeparator1.Size = new System.Drawing.Size (6, 25);
    this.btnColor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnColor.Image = ((System.Drawing.Image) (resources.GetObject ("btnColor.Image")));
    this.btnColor.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnColor.Name = "btnColor";
    this.btnColor.Size = new System.Drawing.Size (23, 22);
    this.btnColor.Text = "toolStripDropDownButton1";
    this.btnColor.Click += new System.EventHandler (this.BtnColorClick);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (418, 218);
    this.Controls.Add (this.toolStripContainer1);
    this.Name = "TextInputForm";
    this.toolStripContainer1.ContentPanel.ResumeLayout (false);
    this.toolStripContainer1.ContentPanel.PerformLayout ();
    this.toolStripContainer1.TopToolStripPanel.ResumeLayout (false);
    this.toolStripContainer1.TopToolStripPanel.PerformLayout ();
    this.toolStripContainer1.ResumeLayout (false);
    this.toolStripContainer1.PerformLayout ();
    this.toolStrip1.ResumeLayout (false);
    this.toolStrip1.PerformLayout ();
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/BugReportForm.cs.ifdefed" startline="45" endline="50">
void UpdateUI () {
    this.Text = lang.GetString ("bugreport_title");
    this.labelBugReportInfo.Text = lang.GetString ("bugreport_info");
    this.btnClose.Text = lang.GetString ("bugreport_cancel");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/BugReportForm.cs.ifdefed" startline="52" endline="55">
void LinkLblBugsLinkClicked (object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e) {
    openLink ((LinkLabel) sender);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/BugReportForm.cs.ifdefed" startline="56" endline="67">
private void openLink (LinkLabel link) {
    try {
        link.LinkVisited = true;
        System.Diagnostics.Process.Start (link.Text);
    }
    catch (Exception) {
        MessageBox.Show (lang.GetString ("error_openlink"), lang.GetString ("error"));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.Designer.cs.ifdefed" startline="14" endline="24">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.Designer.cs.ifdefed" startline="31" endline="222">
private void InitializeComponent () {
    this.btnTransparent = new System.Windows.Forms.Button ();
    this.colorPanel = new System.Windows.Forms.Panel ();
    this.labelHtmlColor = new System.Windows.Forms.Label ();
    this.textBoxHtmlColor = new System.Windows.Forms.TextBox ();
    this.labelRed = new System.Windows.Forms.Label ();
    this.labelGreen = new System.Windows.Forms.Label ();
    this.labelBlue = new System.Windows.Forms.Label ();
    this.textBoxRed = new System.Windows.Forms.TextBox ();
    this.textBoxGreen = new System.Windows.Forms.TextBox ();
    this.textBoxBlue = new System.Windows.Forms.TextBox ();
    this.labelRecentColors = new System.Windows.Forms.Label ();
    this.textBoxAlpha = new System.Windows.Forms.TextBox ();
    this.labelAlpha = new System.Windows.Forms.Label ();
    this.btnApply = new System.Windows.Forms.Button ();
    this.SuspendLayout ();
    this.btnTransparent.BackColor = System.Drawing.Color.Transparent;
    this.btnTransparent.Location = new System.Drawing.Point (210, 4);
    this.btnTransparent.Name = "btnTransparent";
    this.btnTransparent.Size = new System.Drawing.Size (78, 23);
    this.btnTransparent.TabIndex = 0;
    this.btnTransparent.TabStop = false;
    this.btnTransparent.Text = "Transparent";
    this.btnTransparent.UseVisualStyleBackColor = false;
    this.btnTransparent.Click += new System.EventHandler (this.btnTransparentClick);
    this.colorPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
    this.colorPanel.Location = new System.Drawing.Point (210, 31);
    this.colorPanel.Name = "colorPanel";
    this.colorPanel.Size = new System.Drawing.Size (78, 23);
    this.colorPanel.TabIndex = 1;
    this.labelHtmlColor.Font = new System.Drawing.Font ("Tahoma", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.World);
    this.labelHtmlColor.Location = new System.Drawing.Point (210, 57);
    this.labelHtmlColor.Name = "labelHtmlColor";
    this.labelHtmlColor.Size = new System.Drawing.Size (78, 17);
    this.labelHtmlColor.TabIndex = 2;
    this.labelHtmlColor.Text = "HTML color";
    this.textBoxHtmlColor.Location = new System.Drawing.Point (210, 71);
    this.textBoxHtmlColor.Name = "textBoxHtmlColor";
    this.textBoxHtmlColor.Size = new System.Drawing.Size (78, 20);
    this.textBoxHtmlColor.TabIndex = 1;
    this.textBoxHtmlColor.Click += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxHtmlColor.GotFocus += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxHtmlColor.TextChanged += new System.EventHandler (this.TextBoxHexadecimalTextChanged);
    this.textBoxHtmlColor.KeyDown += new System.Windows.Forms.KeyEventHandler (this.TextBoxKeyDown);
    this.labelRed.Font = new System.Drawing.Font ("Tahoma", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.World);
    this.labelRed.Location = new System.Drawing.Point (210, 98);
    this.labelRed.Name = "labelRed";
    this.labelRed.Size = new System.Drawing.Size (78, 18);
    this.labelRed.TabIndex = 4;
    this.labelRed.Text = "Red";
    this.labelGreen.Font = new System.Drawing.Font ("Tahoma", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.World);
    this.labelGreen.Location = new System.Drawing.Point (210, 122);
    this.labelGreen.Name = "labelGreen";
    this.labelGreen.Size = new System.Drawing.Size (78, 18);
    this.labelGreen.TabIndex = 5;
    this.labelGreen.Text = "Green";
    this.labelBlue.Font = new System.Drawing.Font ("Tahoma", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.World);
    this.labelBlue.Location = new System.Drawing.Point (210, 146);
    this.labelBlue.Name = "labelBlue";
    this.labelBlue.Size = new System.Drawing.Size (78, 18);
    this.labelBlue.TabIndex = 6;
    this.labelBlue.Text = "Blue";
    this.textBoxRed.Location = new System.Drawing.Point (258, 95);
    this.textBoxRed.Name = "textBoxRed";
    this.textBoxRed.Size = new System.Drawing.Size (30, 20);
    this.textBoxRed.TabIndex = 2;
    this.textBoxRed.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
    this.textBoxRed.Click += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxRed.GotFocus += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxRed.TextChanged += new System.EventHandler (this.TextBoxRGBTextChanged);
    this.textBoxRed.KeyDown += new System.Windows.Forms.KeyEventHandler (this.TextBoxKeyDown);
    this.textBoxGreen.Location = new System.Drawing.Point (258, 119);
    this.textBoxGreen.Name = "textBoxGreen";
    this.textBoxGreen.Size = new System.Drawing.Size (30, 20);
    this.textBoxGreen.TabIndex = 3;
    this.textBoxGreen.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
    this.textBoxGreen.Click += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxGreen.GotFocus += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxGreen.TextChanged += new System.EventHandler (this.TextBoxRGBTextChanged);
    this.textBoxGreen.KeyDown += new System.Windows.Forms.KeyEventHandler (this.TextBoxKeyDown);
    this.textBoxBlue.Location = new System.Drawing.Point (258, 143);
    this.textBoxBlue.Name = "textBoxBlue";
    this.textBoxBlue.Size = new System.Drawing.Size (30, 20);
    this.textBoxBlue.TabIndex = 4;
    this.textBoxBlue.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
    this.textBoxBlue.Click += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxBlue.GotFocus += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxBlue.TextChanged += new System.EventHandler (this.TextBoxRGBTextChanged);
    this.textBoxBlue.KeyDown += new System.Windows.Forms.KeyEventHandler (this.TextBoxKeyDown);
    this.labelRecentColors.Location = new System.Drawing.Point (3, 175);
    this.labelRecentColors.Name = "labelRecentColors";
    this.labelRecentColors.Size = new System.Drawing.Size (148, 13);
    this.labelRecentColors.TabIndex = 10;
    this.labelRecentColors.Text = "Recently used colors";
    this.textBoxAlpha.Location = new System.Drawing.Point (258, 167);
    this.textBoxAlpha.Name = "textBoxAlpha";
    this.textBoxAlpha.Size = new System.Drawing.Size (30, 20);
    this.textBoxAlpha.TabIndex = 5;
    this.textBoxAlpha.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
    this.textBoxAlpha.Click += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxAlpha.GotFocus += new System.EventHandler (this.TextBoxGotFocus);
    this.textBoxAlpha.TextChanged += new System.EventHandler (this.TextBoxRGBTextChanged);
    this.textBoxAlpha.KeyDown += new System.Windows.Forms.KeyEventHandler (this.TextBoxKeyDown);
    this.labelAlpha.Font = new System.Drawing.Font ("Tahoma", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.World);
    this.labelAlpha.Location = new System.Drawing.Point (210, 170);
    this.labelAlpha.Name = "labelAlpha";
    this.labelAlpha.Size = new System.Drawing.Size (78, 18);
    this.labelAlpha.TabIndex = 11;
    this.labelAlpha.Text = "Alpha";
    this.btnApply.BackColor = System.Drawing.Color.Transparent;
    this.btnApply.Location = new System.Drawing.Point (210, 191);
    this.btnApply.Name = "btnApply";
    this.btnApply.Size = new System.Drawing.Size (78, 23);
    this.btnApply.TabIndex = 12;
    this.btnApply.TabStop = false;
    this.btnApply.Text = "Apply";
    this.btnApply.UseVisualStyleBackColor = false;
    this.btnApply.Click += new System.EventHandler (this.BtnApplyClick);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (292, 218);
    this.Controls.Add (this.btnApply);
    this.Controls.Add (this.textBoxAlpha);
    this.Controls.Add (this.labelAlpha);
    this.Controls.Add (this.labelRecentColors);
    this.Controls.Add (this.textBoxBlue);
    this.Controls.Add (this.textBoxGreen);
    this.Controls.Add (this.textBoxRed);
    this.Controls.Add (this.labelBlue);
    this.Controls.Add (this.labelGreen);
    this.Controls.Add (this.labelRed);
    this.Controls.Add (this.textBoxHtmlColor);
    this.Controls.Add (this.labelHtmlColor);
    this.Controls.Add (this.colorPanel);
    this.Controls.Add (this.btnTransparent);
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "ColorDialog";
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
    this.Text = "TestProject";
    this.ResumeLayout (false);
    this.PerformLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/LanguageDialog.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/LanguageDialog.Designer.cs.ifdefed" startline="39" endline="94">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (LanguageDialog));
    this.lblSelectLanguage = new System.Windows.Forms.Label ();
    this.comboBoxLanguage = new System.Windows.Forms.ComboBox ();
    this.btnOK = new System.Windows.Forms.Button ();
    this.SuspendLayout ();
    this.lblSelectLanguage.Location = new System.Drawing.Point (12, 9);
    this.lblSelectLanguage.Name = "lblSelectLanguage";
    this.lblSelectLanguage.Size = new System.Drawing.Size (300, 73);
    this.lblSelectLanguage.TabIndex = 0;
    this.lblSelectLanguage.Text = "Please choose your language. (You can change this setting later on in the \"Prefer" + "ences\" dialog.)\n\nBitte wählen Sie Ihre Sprache. (Sie können diese Einstellung sp" + "äter im Dialog \"Einstellungen\" ändern.)";
    this.comboBoxLanguage.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
    this.comboBoxLanguage.FormattingEnabled = true;
    this.comboBoxLanguage.Location = new System.Drawing.Point (13, 85);
    this.comboBoxLanguage.Name = "comboBoxLanguage";
    this.comboBoxLanguage.Size = new System.Drawing.Size (299, 21);
    this.comboBoxLanguage.TabIndex = 1;
    this.btnOK.Location = new System.Drawing.Point (126, 112);
    this.btnOK.Name = "btnOK";
    this.btnOK.Size = new System.Drawing.Size (75, 23);
    this.btnOK.TabIndex = 2;
    this.btnOK.Text = "OK";
    this.btnOK.UseVisualStyleBackColor = true;
    this.btnOK.Click += new System.EventHandler (this.BtnOKClick);
    this.AcceptButton = this.btnOK;
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (327, 147);
    this.ControlBox = false;
    this.Controls.Add (this.btnOK);
    this.Controls.Add (this.comboBoxLanguage);
    this.Controls.Add (this.lblSelectLanguage);
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "LanguageDialog";
    this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
    this.Text = "Choose language / Sprache wählen";
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="36" endline="86">
[STAThread] public static void Main (string [] args) {
    Application.ThreadException += new System.Threading.ThreadExceptionEventHandler (Application_ThreadException);
    AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler (CurrentDomain_UnhandledException);
    try {
        bool grantedOwnership;
        try {
            applicationMutex = new Mutex (true, @"Global\F48E86D3-E34C-4DB7-8F8F-9A0EA55F0D08", out grantedOwnership);
        }
        catch (UnauthorizedAccessException) {
            grantedOwnership = false;
        }
        if (args.Length > 0 && args [0].Contains ("uninstall")) {
            try {
                ShortcutManager.removeShortcut (Environment.SpecialFolder.Startup);
                ShortcutManager.removeShortcut (Environment.SpecialFolder.Desktop);
                Application.Exit ();
            }
            catch (Exception) {
            }
            return;
        }
        if (! grantedOwnership) {
            AppConfig conf = AppConfig.GetInstance ();
            Language lang = Language.GetInstance ();
            MessageBox.Show (lang.GetString ("error_multipleinstances"), lang.GetString ("error"));
            Application.Exit ();
            return;
        }
        Application.EnableVisualStyles ();
        Application.SetCompatibleTextRenderingDefault (false);
        Application.Run (new MainForm ());
    }
    catch (Exception ex) {
        Application_ThreadException (MainForm.ActiveForm, new ThreadExceptionEventArgs (ex));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="130" endline="135">
private void DoFirstLaunchThings () {
    ShortcutManager.createShortcut (Environment.SpecialFolder.Startup);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="138" endline="163">
protected override void WndProc (ref Message m) {
    if (m.Msg == User32.WM_HOTKEY) {
        if (Keys.Alt == Control.ModifierKeys) {
            initCapture (true);
        } else if (Keys.Control == Control.ModifierKeys) {
            CaptureImage (WindowCapture.CaptureWindow ());
        } else if (Keys.Shift == Control.ModifierKeys) {
            if (! RuntimeConfig.LastCapturedRegion.Equals (Rectangle.Empty)) {
                CaptureRectangularArea (RuntimeConfig.LastCapturedRegion);
            }
        } else {
            initCapture ();
        }
    }
    base.WndProc (ref m);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="165" endline="175">
private void RegisterHotkeys () {
    bool suc = RegisterHotKey (User32.MOD_NONE, User32.VK_SNAPSHOT);
    suc &= RegisterHotKey (User32.MOD_ALT, User32.VK_SNAPSHOT);
    suc &= RegisterHotKey (User32.MOD_CTRL, User32.VK_SNAPSHOT);
    suc &= RegisterHotKey (User32.MOD_SHIFT, User32.VK_SNAPSHOT);
    if (! suc) {
        MessageBox.Show (lang.GetString ("warning_hotkeys"), lang.GetString ("warning"));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="176" endline="188">
private bool RegisterHotKey (int modifierKeyCode, int virtualKeyCode) {
    int s = User32.RegisterHotKey ((int) this.Handle, hotKeyCounter, modifierKeyCode, virtualKeyCode);
    if (s != 0) {
        hotKeyCounter ++;
        return true;
    } else {
        return false;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="190" endline="196">
private void UnregisterHotkeys () {
    for (int i = 0; i < hotKeyCounter; i ++) {
        User32.UnregisterHotKey ((int) this.Handle, i);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="199" endline="211">
private void UpdateUI () {
    this.Text = lang.GetString ("application_title");
    this.contextmenu_settings.Text = lang.GetString ("contextmenu_settings");
    this.contextmenu_capturearea.Text = lang.GetString ("contextmenu_capturearea");
    this.contextmenu_capturelastregion.Text = lang.GetString ("contextmenu_capturelastregion");
    this.contextmenu_capturewindow.Text = lang.GetString ("contextmenu_capturewindow");
    this.contextmenu_capturefullscreen.Text = lang.GetString ("contextmenu_capturefullscreen");
    this.contextmenu_quicksettings.Text = lang.GetString ("contextmenu_quicksettings");
    this.contextmenu_help.Text = lang.GetString ("contextmenu_help");
    this.contextmenu_about.Text = lang.GetString ("contextmenu_about");
    this.contextmenu_exit.Text = lang.GetString ("contextmenu_exit");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="214" endline="231">
void initCapture (bool capturingWindows) {
    windows.Clear ();
    User32.EnumWindowsProc ewp = new User32.EnumWindowsProc (EvalWindow);
    User32.EnumWindows (ewp, 0);
    this.capturingWindows = capturingWindows;
    System.Threading.Thread.Sleep (200);
    this.SuspendLayout ();
    this.Visible = false;
    this.Bounds = GetScreenBounds ();
    Image img = WindowCapture.CaptureWindow ();
    pictureBox.Image = img;
    this.Visible = true;
    this.ResumeLayout ();
    string tt = capturingWindows ? lang.GetString ("capture_tooltip_windowmode") : lang.GetString ("capture_tooltip_regionmode");
    tooltip.SetToolTip (pictureBox, tt);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="232" endline="235">
void initCapture () {
    initCapture (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="237" endline="243">
void CaptureRectangularArea (Rectangle rect) {
    CaptureImage (WindowCapture.CaptureWindow (User32.GetDesktopWindow (), rect));
    RuntimeConfig.LastCapturedRegion = rect;
    this.contextmenu_capturelastregion.Enabled = true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="245" endline="276">
void CaptureImage (Image img) {
    DoCaptureFeedback ();
    this.Hide ();
    string fullPath = null;
    ImageOutput.PrepareClipboardObject ();
    if ((conf.Output_Destinations & ScreenshotDestinations.FileDefault) == ScreenshotDestinations.FileDefault) {
        string filename = FilenameHelper.GetFilenameFromPattern (conf.Output_File_FilenamePattern, conf.Output_File_Format);
        fullPath = Path.Combine (conf.Output_File_Path, filename);
        ImageOutput.Save (img, fullPath);
    }
    if ((conf.Output_Destinations & ScreenshotDestinations.FileWithDialog) == ScreenshotDestinations.FileWithDialog) {
        fullPath = ImageOutput.SaveWithDialog (img);
    }
    if ((conf.Output_Destinations & ScreenshotDestinations.Clipboard) == ScreenshotDestinations.Clipboard) {
        ImageOutput.CopyToClipboard (img);
    }
    if ((conf.Output_Destinations & ScreenshotDestinations.Printer) == ScreenshotDestinations.Printer) {
        new PrintHelper (img).PrintWithDialog ();
    }
    if ((conf.Output_Destinations & ScreenshotDestinations.Editor) == ScreenshotDestinations.Editor) {
        ImageEditorForm editor = new ImageEditorForm ();
        editor.SetImage (img);
        if (fullPath != null)
            editor.SetImagePath (fullPath);

        editor.Show ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="278" endline="301">
void DoCaptureFeedback () {
    if ((bool) conf.Ui_Effects_CameraSound) {
        if (soundPlayer == null) {
            soundPlayer = new SoundPlayer ();
            SoundPlayer sp = new SoundPlayer ();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (FlashlightForm));
            byte [] barr = (byte []) resources.GetObject ("camera");
            soundPlayer.Stream = new MemoryStream (barr);
        }
        soundPlayer.Play ();
    }
    if ((bool) conf.Ui_Effects_Flashlight) {
        if (flashlightForm == null) {
            flashlightForm = new FlashlightForm ();
        }
        flashlightForm.FadeIn ();
        flashlightForm.FadeOut ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="307" endline="319">
public static Rectangle GetScreenBounds () {
    Point topLeft = new Point (0, 0);
    Point bottomRight = new Point (0, 0);
    foreach (Screen screen in Screen.AllScreens) {
        if (screen.Bounds.X < topLeft.X)
            topLeft.X = screen.Bounds.X;

        if (screen.Bounds.Y < topLeft.Y)
            topLeft.Y = screen.Bounds.Y;

        if ((screen.Bounds.X + screen.Bounds.Width) > bottomRight.X)
            bottomRight.X = screen.Bounds.X + screen.Bounds.Width;

        if ((screen.Bounds.Y + screen.Bounds.Height) > bottomRight.Y)
            bottomRight.Y = screen.Bounds.Y + screen.Bounds.Height;

    }
    return new Rectangle (topLeft.X, topLeft.Y, (bottomRight.X + Math.Abs (topLeft.X)), (bottomRight.Y + Math.Abs (topLeft.Y)));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="323" endline="332">
void PictureBoxMouseDown (object sender, MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        mX = e.X;
        mY = e.Y;
        mouseDown = true;
        PictureBoxMouseMove (this, e);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="334" endline="345">
void PictureBoxMouseUp (object sender, MouseEventArgs e) {
    if (mouseDown) {
        mouseDown = false;
        capturingWindows = false;
        cursorPos.X = 0;
        cursorPos.Y = 0;
        pictureBox.Refresh ();
        CaptureRectangularArea (captureRect);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="347" endline="375">
void PictureBoxMouseMove (object sender, MouseEventArgs e) {
    cursorPos.X = e.X;
    cursorPos.Y = e.Y;
    if (capturingWindows) {
        IEnumerator enumerator = windows.GetEnumerator ();
        while (enumerator.MoveNext ()) {
            KeyValuePair < int, Rectangle > kv = (KeyValuePair < int, Rectangle >) enumerator.Current;
            int hwnd = kv.Key;
            Rectangle r = kv.Value;
            if (r.Contains (Cursor.Position)) {
                mouseOverHwnd = hwnd;
                captureRect = r;
                break;
            }
        }
    } else if (mouseDown) {
        Rectangle r = GuiRectangle.GetGuiRectangle (e.X + this.Left, e.Y + this.Top, mX - e.X, mY - e.Y);
        captureRect = r;
    }
    pictureBox.Invalidate ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="377" endline="482">
void PictureBoxPaint (object sender, PaintEventArgs e) {
    Graphics g = e.Graphics;
    if (mouseDown || capturingWindows) {
        Rectangle screenbounds = GetScreenBounds ();
        captureRect.Intersect (screenbounds);
        Rectangle fixedRect = new Rectangle (captureRect.X, captureRect.Y, captureRect.Width, captureRect.Height);
        fixedRect.X += Math.Abs (screenbounds.X);
        fixedRect.Y += Math.Abs (screenbounds.Y);
        g.FillRectangle (OverlayBrush, fixedRect);
        g.DrawRectangle (OverlayPen, fixedRect);
        int dist = 8;
        Pen rulerPen = new Pen (Color.SeaGreen);
        Brush bgBrush = new SolidBrush (Color.FromArgb (200, 217, 240, 227));
        Font f = new Font (FontFamily.GenericSansSerif, 8);
        int hSpace = TextRenderer.MeasureText (captureRect.Width.ToString (), f).Width + 3;
        int vSpace = TextRenderer.MeasureText (captureRect.Height.ToString (), f).Height + 3;
        if (fixedRect.Width > hSpace + 3) {
            GraphicsPath p = Drawing.RoundedRectangle.Create2 (fixedRect.X + (fixedRect.Width / 2 - hSpace / 2) + 3, fixedRect.Y - dist - 7, TextRenderer.MeasureText (captureRect.Width.ToString (), f).Width - 3, TextRenderer.MeasureText (captureRect.Width.ToString (), f).Height, 3);
            g.FillPath (bgBrush, p);
            g.DrawPath (rulerPen, p);
            g.DrawString (captureRect.Width.ToString (), f, rulerPen.Brush, fixedRect.X + (fixedRect.Width / 2 - hSpace / 2) + 3, fixedRect.Y - dist - 7);
            g.DrawLine (rulerPen, fixedRect.X, fixedRect.Y - dist, fixedRect.X + (fixedRect.Width / 2 - hSpace / 2), fixedRect.Y - dist);
            g.DrawLine (rulerPen, fixedRect.X + (fixedRect.Width / 2 + hSpace / 2), fixedRect.Y - dist, fixedRect.X + fixedRect.Width, fixedRect.Y - dist);
            g.DrawLine (rulerPen, fixedRect.X, fixedRect.Y - dist - 3, fixedRect.X, fixedRect.Y - dist + 3);
            g.DrawLine (rulerPen, fixedRect.X + fixedRect.Width, fixedRect.Y - dist - 3, fixedRect.X + fixedRect.Width, fixedRect.Y - dist + 3);
        }
        if (fixedRect.Height > vSpace + 3) {
            GraphicsPath p = Drawing.RoundedRectangle.Create2 (fixedRect.X - (TextRenderer.MeasureText (captureRect.Height.ToString (), f).Width) + 1, fixedRect.Y + (fixedRect.Height / 2 - vSpace / 2) + 2, TextRenderer.MeasureText (captureRect.Height.ToString (), f).Width - 3, TextRenderer.MeasureText (captureRect.Height.ToString (), f).Height - 1, 3);
            g.FillPath (bgBrush, p);
            g.DrawPath (rulerPen, p);
            g.DrawString (captureRect.Height.ToString (), f, rulerPen.Brush, fixedRect.X - (TextRenderer.MeasureText (captureRect.Height.ToString (), f).Width) + 1, fixedRect.Y + (fixedRect.Height / 2 - vSpace / 2) + 2);
            g.DrawLine (rulerPen, fixedRect.X - dist, fixedRect.Y, fixedRect.X - dist, fixedRect.Y + (fixedRect.Height / 2 - vSpace / 2));
            g.DrawLine (rulerPen, fixedRect.X - dist, fixedRect.Y + (fixedRect.Height / 2 + vSpace / 2), fixedRect.X - dist, fixedRect.Y + fixedRect.Height);
            g.DrawLine (rulerPen, fixedRect.X - dist - 3, fixedRect.Y, fixedRect.X - dist + 3, fixedRect.Y);
            g.DrawLine (rulerPen, fixedRect.X - dist - 3, fixedRect.Y + fixedRect.Height, fixedRect.X - dist + 3, fixedRect.Y + fixedRect.Height);
        }
        f = new Font (FontFamily.GenericSansSerif, 12);
        string t = captureRect.Width + " x " + captureRect.Height;
        SizeF extent = g.MeasureString (t, f);
        float hRatio = captureRect.Height / (extent.Height * 2);
        float wRatio = captureRect.Width / (extent.Width * 2);
        float ratio = (hRatio < wRatio ? hRatio : wRatio);
        float newSize = f.Size * ratio;
        if (newSize >= 4) {
            if (newSize > 20)
                newSize = 20;

            f = new Font (FontFamily.GenericSansSerif, newSize, FontStyle.Bold);
            g.DrawString (t, f, Brushes.LightSeaGreen, new PointF (fixedRect.X + (captureRect.Width / 2) - (TextRenderer.MeasureText (t, f).Width / 2), fixedRect.Y + (captureRect.Height / 2) - (f.GetHeight () / 2)));
        }
    } else {
        if (cursorPos.X > 0 || cursorPos.Y > 0) {
            Pen p = new Pen (Color.LightSeaGreen);
            p.DashStyle = DashStyle.Dot;
            Rectangle b = MainForm.GetScreenBounds ();
            g.DrawLine (p, cursorPos.X, b.Y, cursorPos.X, b.Height);
            g.DrawLine (p, b.X, cursorPos.Y, b.Width, cursorPos.Y);
            Font f = new Font (FontFamily.GenericSansSerif, 8);
            string xy = cursorPos.X.ToString () + " x " + cursorPos.Y.ToString ();
            Brush bgBrush = new SolidBrush (Color.FromArgb (200, 217, 240, 227));
            GraphicsPath gp = Drawing.RoundedRectangle.Create2 (cursorPos.X + 5, cursorPos.Y + 5, TextRenderer.MeasureText (xy, f).Width - 3, TextRenderer.MeasureText (xy, f).Height, 3);
            g.FillPath (bgBrush, gp);
            g.DrawPath (new Pen (Color.SeaGreen), gp);
            g.DrawString (xy, f, new Pen (Color.SeaGreen).Brush, cursorPos.X + 5, cursorPos.Y + 5);
        }
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="486" endline="494">
void MainFormFormClosing (object sender, FormClosingEventArgs e) {
    conf.Store ();
    UnregisterHotkeys ();
    if (applicationMutex != null) {
        applicationMutex.ReleaseMutex ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="496" endline="499">
void MainFormShown (object sender, EventArgs e) {
    this.Hide ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="501" endline="516">
void MainFormKeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode == Keys.Escape) {
        this.Hide ();
        this.mouseDown = false;
    } else if (e.KeyCode == Keys.Space) {
        capturingWindows = true;
    } else if (e.KeyCode == Keys.Return) {
        CaptureImage (WindowCapture.CaptureWindow ());
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="519" endline="538">
private bool EvalWindow (int hWnd, int lParam) {
    if (! User32.IsWindowVisible (hWnd))
        return true;

    if (this.Handle == new IntPtr (hWnd))
        return false;

    User32.RECT rect = new User32.RECT ();
    User32.GetWindowRect (new IntPtr (hWnd), ref rect);
    Rectangle r = GuiRectangle.GetGuiRectangle (rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
    windows.Enqueue (new KeyValuePair < int, Rectangle > (hWnd, r));
    return true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="541" endline="544">
void CaptureAreaToolStripMenuItemClick (object sender, EventArgs e) {
    initCapture ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="546" endline="550">
void CaptureFullScreenToolStripMenuItemClick (object sender, System.EventArgs e) {
    System.Threading.Thread.Sleep (200);
    CaptureImage (WindowCapture.CaptureWindow ());
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="552" endline="559">
void Contextmenu_capturelastregionClick (object sender, System.EventArgs e) {
    if (! RuntimeConfig.LastCapturedRegion.Equals (Rectangle.Empty)) {
        System.Threading.Thread.Sleep (200);
        CaptureRectangularArea (RuntimeConfig.LastCapturedRegion);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="560" endline="563">
void CaptureWindowToolStripMenuItemClick (object sender, System.EventArgs e) {
    initCapture (true);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="565" endline="571">
void Contextmenu_settingsClick (object sender, System.EventArgs e) {
    SettingsForm settings = new SettingsForm ();
    settings.ShowDialog ();
    InitializeQuickSettingsMenu ();
    this.Hide ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="573" endline="576">
void Contextmenu_aboutClick (object sender, EventArgs e) {
    new AboutForm ().Show ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="578" endline="582">
void Contextmenu_helpClick (object sender, System.EventArgs e) {
    HelpBrowserForm hpf = new HelpBrowserForm (conf.Ui_Language);
    hpf.Show ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="584" endline="587">
void Contextmenu_exitClick (object sender, EventArgs e) {
    Application.Exit ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="589" endline="618">
private void InitializeQuickSettingsMenu () {
    this.contextmenu_quicksettings.DropDownItems.Clear ();
    ToolStripMenuSelectList sel = new ToolStripMenuSelectList ("destination", true);
    sel.Text = lang.GetString ("settings_destination");
    sel.AddItem (lang.GetString ("settings_destination_editor"), ScreenshotDestinations.Editor, (conf.Output_Destinations & ScreenshotDestinations.Editor) == ScreenshotDestinations.Editor);
    sel.AddItem (lang.GetString ("settings_destination_clipboard"), ScreenshotDestinations.Clipboard, (conf.Output_Destinations & ScreenshotDestinations.Clipboard) == ScreenshotDestinations.Clipboard);
    sel.AddItem (lang.GetString ("quicksettings_destination_file"), ScreenshotDestinations.FileDefault, (conf.Output_Destinations & ScreenshotDestinations.FileDefault) == ScreenshotDestinations.FileDefault);
    sel.AddItem (lang.GetString ("settings_destination_fileas"), ScreenshotDestinations.FileWithDialog, (conf.Output_Destinations & ScreenshotDestinations.FileWithDialog) == ScreenshotDestinations.FileWithDialog);
    sel.AddItem (lang.GetString ("settings_destination_printer"), ScreenshotDestinations.Printer, (conf.Output_Destinations & ScreenshotDestinations.Printer) == ScreenshotDestinations.Printer);
    sel.CheckedChanged += new EventHandler (this.QuickSettingItemChanged);
    this.contextmenu_quicksettings.DropDownItems.Add (sel);
    sel = new ToolStripMenuSelectList ("printoptions", true);
    sel.Text = lang.GetString ("settings_printoptions");
    sel.AddItem (lang.GetString ("printoptions_allowshrink"), "AllowPrintShrink", (bool) conf.Output_Print_AllowShrink);
    sel.AddItem (lang.GetString ("printoptions_allowenlarge"), "AllowPrintEnlarge", (bool) conf.Output_Print_AllowEnlarge);
    sel.AddItem (lang.GetString ("printoptions_allowrotate"), "AllowPrintRotate", (bool) conf.Output_Print_AllowRotate);
    sel.AddItem (lang.GetString ("printoptions_allowcenter"), "AllowPrintCenter", (bool) conf.Output_Print_Center);
    sel.CheckedChanged += new EventHandler (this.QuickSettingItemChanged);
    this.contextmenu_quicksettings.DropDownItems.Add (sel);
    sel = new ToolStripMenuSelectList ("effects", true);
    sel.Text = lang.GetString ("settings_visualization");
    sel.AddItem (lang.GetString ("settings_playsound"), "PlaySound", (bool) conf.Ui_Effects_CameraSound);
    sel.AddItem (lang.GetString ("settings_showflashlight"), "ShowFlashlight", (bool) conf.Ui_Effects_Flashlight);
    sel.CheckedChanged += new EventHandler (this.QuickSettingItemChanged);
    this.contextmenu_quicksettings.DropDownItems.Add (sel);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="620" endline="650">
void QuickSettingItemChanged (object sender, EventArgs e) {
    ToolStripMenuSelectList selectList = (ToolStripMenuSelectList) sender;
    ToolStripMenuSelectListItem item = ((ItemCheckedChangedEventArgs) e).Item;
    if (selectList.Identifier.Equals ("destination")) {
        IEnumerator en = selectList.DropDownItems.GetEnumerator ();
        ScreenshotDestinations dest = 0;
        while (en.MoveNext ()) {
            ToolStripMenuSelectListItem i = (ToolStripMenuSelectListItem) en.Current;
            if (i.Checked)
                dest |= (ScreenshotDestinations) i.Data;

        }
        conf.Output_Destinations = dest;
        conf.Store ();
    } else if (selectList.Identifier.Equals ("printoptions")) {
        if (item.Data.Equals ("AllowPrintShrink"))
            conf.Output_Print_AllowShrink = (bool ?) item.Checked;
        else if (item.Data.Equals ("AllowPrintEnlarge"))
            conf.Output_Print_AllowEnlarge = (bool ?) item.Checked;
        else if (item.Data.Equals ("AllowPrintRotate"))
            conf.Output_Print_AllowRotate = (bool ?) item.Checked;
        else if (item.Data.Equals ("AllowPrintCenter"))
            conf.Output_Print_Center = (bool ?) item.Checked;

        conf.Store ();
    } else if (selectList.Identifier.Equals ("effects")) {
        if (item.Data.Equals ("PlaySound"))
            conf.Ui_Effects_CameraSound = (bool ?) item.Checked;
        else if (item.Data.Equals ("ShowFlashlight"))
            conf.Ui_Effects_Flashlight = (bool ?) item.Checked;

        conf.Store ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="653" endline="656">
private static void CurrentDomain_UnhandledException (object sender, UnhandledExceptionEventArgs e) {
    new BugReportForm (e.ExceptionObject as Exception).ShowDialog ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.cs.ifdefed" startline="658" endline="661">
private static void Application_ThreadException (object sender, ThreadExceptionEventArgs e) {
    new BugReportForm (e.Exception).ShowDialog ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/FlashlightForm.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/FlashlightForm.Designer.cs.ifdefed" startline="39" endline="60">
private void InitializeComponent () {
    this.SuspendLayout ();
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.BackColor = System.Drawing.Color.White;
    this.ClientSize = new System.Drawing.Size (292, 266);
    this.ControlBox = false;
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "FlashlightForm";
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.Text = "FlashlightForm";
    this.TopMost = true;
    this.Load += new System.EventHandler (this.FlashlightForm_Load);
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/PrintOptionsDialog.cs.ifdefed" startline="51" endline="59">
void UpdateUI () {
    this.Text = lang.GetString ("printoptions_title");
    this.checkboxAllowCenter.Text = lang.GetString ("printoptions_allowcenter");
    this.checkboxAllowEnlarge.Text = lang.GetString ("printoptions_allowenlarge");
    this.checkboxAllowRotate.Text = lang.GetString ("printoptions_allowrotate");
    this.checkboxAllowShrink.Text = lang.GetString ("printoptions_allowshrink");
    this.checkbox_dontaskagain.Text = lang.GetString ("printoptions_dontaskagain");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/PrintOptionsDialog.cs.ifdefed" startline="62" endline="77">
void Button_okClick (object sender, EventArgs e) {
    this.AllowPrintCenter = this.checkboxAllowCenter.Checked;
    this.AllowPrintEnlarge = this.checkboxAllowEnlarge.Checked;
    this.AllowPrintRotate = this.checkboxAllowRotate.Checked;
    this.AllowPrintShrink = this.checkboxAllowShrink.Checked;
    if (this.checkbox_dontaskagain.Checked) {
        conf.Output_Print_Center = (bool ?) this.AllowPrintCenter;
        conf.Output_Print_AllowEnlarge = (bool ?) this.AllowPrintEnlarge;
        conf.Output_Print_AllowRotate = (bool ?) this.AllowPrintRotate;
        conf.Output_Print_AllowShrink = (bool ?) this.AllowPrintShrink;
        conf.Output_Print_PromptOptions = false;
        conf.Store ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/LanguageDialog.cs.ifdefed" startline="33" endline="44">
private void FillLanguageCombo () {
    List < CultureInfo > langs = new List < CultureInfo > ();
    for (int i = 0; i < RuntimeConfig.SupportedLanguages.Length; i ++) {
        CultureInfo ci = new CultureInfo (RuntimeConfig.SupportedLanguages [i]);
        langs.Add (ci);
    }
    comboBoxLanguage.DataSource = langs;
    comboBoxLanguage.DisplayMember = "NativeName";
    comboBoxLanguage.ValueMember = "Name";
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/LanguageDialog.cs.ifdefed" startline="46" endline="49">
void BtnOKClick (object sender, EventArgs e) {
    this.Close ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.Designer.cs.ifdefed" startline="24" endline="34">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.Designer.cs.ifdefed" startline="41" endline="1039">
private void InitializeComponent () {
    this.components = new System.ComponentModel.Container ();
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (ImageEditorForm));
    this.toolStripContainer1 = new System.Windows.Forms.ToolStripContainer ();
    this.statusStrip1 = new System.Windows.Forms.StatusStrip ();
    this.statusLabel = new System.Windows.Forms.ToolStripStatusLabel ();
    this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel ();
    this.panel1 = new System.Windows.Forms.Panel ();
    this.toolStrip2 = new System.Windows.Forms.ToolStrip ();
    this.btnCursor = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnRect = new System.Windows.Forms.ToolStripButton ();
    this.btnEllipse = new System.Windows.Forms.ToolStripButton ();
    this.btnLine = new System.Windows.Forms.ToolStripButton ();
    this.btnArrow = new System.Windows.Forms.ToolStripButton ();
    this.btnText = new System.Windows.Forms.ToolStripButton ();
    this.menuStrip1 = new System.Windows.Forms.MenuStrip ();
    this.fileStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.saveToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.saveAsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.copyImageToClipboardToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.printToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator9 = new System.Windows.Forms.ToolStripSeparator ();
    this.closeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.editToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.cutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.copyToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.pasteToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator ();
    this.duplicateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator12 = new System.Windows.Forms.ToolStripSeparator ();
    this.preferencesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.objectToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.addRectangleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.addEllipseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.drawLineToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.drawArrowToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.addTextBoxToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator8 = new System.Windows.Forms.ToolStripSeparator ();
    this.removeObjectToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator ();
    this.arrangeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.upToTopToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.upOneLevelToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.downOneLevelToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.downToBottomToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.borderColorToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.backgroundColorToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.lineThicknessToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.lineThickness1ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.lineThickness2ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.lineThickness3ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.lineThickness4ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.lineThickness5ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsStartPointToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsEndPointToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsBothToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsNoneToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem ();
    this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.helpToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem ();
    this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStrip1 = new System.Windows.Forms.ToolStrip ();
    this.btnSave = new System.Windows.Forms.ToolStripButton ();
    this.btnClipboard = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnPrint = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnDelete = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnCut = new System.Windows.Forms.ToolStripButton ();
    this.btnCopy = new System.Windows.Forms.ToolStripButton ();
    this.btnPaste = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnBorderColor = new System.Windows.Forms.ToolStripButton ();
    this.btnBackColor = new System.Windows.Forms.ToolStripButton ();
    this.labelLineThickness = new System.Windows.Forms.ToolStripLabel ();
    this.comboBoxThickness = new System.Windows.Forms.ToolStripComboBox ();
    this.btnArrowHeads = new System.Windows.Forms.ToolStripDropDownButton ();
    this.arrowHeadsStartPointToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsEndPointToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsBothToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.arrowHeadsNoneToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator10 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnSettings = new System.Windows.Forms.ToolStripButton ();
    this.toolStripSeparator11 = new System.Windows.Forms.ToolStripSeparator ();
    this.btnHelp = new System.Windows.Forms.ToolStripButton ();
    this.printDialog1 = new System.Windows.Forms.PrintDialog ();
    this.fileSavedStatusContextMenu = new System.Windows.Forms.ContextMenuStrip (this.components);
    this.copyPathMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.openDirectoryMenuItem = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripContainer1.BottomToolStripPanel.SuspendLayout ();
    this.toolStripContainer1.ContentPanel.SuspendLayout ();
    this.toolStripContainer1.LeftToolStripPanel.SuspendLayout ();
    this.toolStripContainer1.TopToolStripPanel.SuspendLayout ();
    this.toolStripContainer1.SuspendLayout ();
    this.statusStrip1.SuspendLayout ();
    this.tableLayoutPanel1.SuspendLayout ();
    this.toolStrip2.SuspendLayout ();
    this.menuStrip1.SuspendLayout ();
    this.toolStrip1.SuspendLayout ();
    this.fileSavedStatusContextMenu.SuspendLayout ();
    this.SuspendLayout ();
    this.toolStripContainer1.BottomToolStripPanel.Controls.Add (this.statusStrip1);
    this.toolStripContainer1.ContentPanel.AutoScroll = true;
    this.toolStripContainer1.ContentPanel.Controls.Add (this.tableLayoutPanel1);
    this.toolStripContainer1.ContentPanel.Size = new System.Drawing.Size (604, 359);
    this.toolStripContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
    this.toolStripContainer1.LeftToolStripPanel.Controls.Add (this.toolStrip2);
    this.toolStripContainer1.Location = new System.Drawing.Point (0, 0);
    this.toolStripContainer1.Name = "toolStripContainer1";
    this.toolStripContainer1.Size = new System.Drawing.Size (628, 430);
    this.toolStripContainer1.TabIndex = 2;
    this.toolStripContainer1.Text = "toolStripContainer1";
    this.toolStripContainer1.TopToolStripPanel.Controls.Add (this.menuStrip1);
    this.toolStripContainer1.TopToolStripPanel.Controls.Add (this.toolStrip1);
    this.statusStrip1.Dock = System.Windows.Forms.DockStyle.None;
    this.statusStrip1.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.statusLabel});
    this.statusStrip1.Location = new System.Drawing.Point (0, 0);
    this.statusStrip1.Name = "statusStrip1";
    this.statusStrip1.Size = new System.Drawing.Size (628, 22);
    this.statusStrip1.SizingGrip = false;
    this.statusStrip1.TabIndex = 3;
    this.statusStrip1.Text = "statusStrip1";
    this.statusLabel.Name = "statusLabel";
    this.statusLabel.Size = new System.Drawing.Size (0, 17);
    this.statusLabel.MouseDown += new System.Windows.Forms.MouseEventHandler (this.StatusLabelClicked);
    this.tableLayoutPanel1.ColumnCount = 2;
    this.tableLayoutPanel1.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Percent, 50F));
    this.tableLayoutPanel1.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Absolute, 8F));
    this.tableLayoutPanel1.Controls.Add (this.panel1, 0, 0);
    this.tableLayoutPanel1.Dock = System.Windows.Forms.DockStyle.Fill;
    this.tableLayoutPanel1.Location = new System.Drawing.Point (0, 0);
    this.tableLayoutPanel1.Name = "tableLayoutPanel1";
    this.tableLayoutPanel1.RowCount = 1;
    this.tableLayoutPanel1.RowStyles.Add (new System.Windows.Forms.RowStyle (System.Windows.Forms.SizeType.Percent, 15.03268F));
    this.tableLayoutPanel1.Size = new System.Drawing.Size (604, 359);
    this.tableLayoutPanel1.TabIndex = 3;
    this.panel1.AutoScroll = true;
    this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
    this.panel1.Dock = System.Windows.Forms.DockStyle.Fill;
    this.panel1.Location = new System.Drawing.Point (3, 3);
    this.panel1.Name = "panel1";
    this.panel1.Size = new System.Drawing.Size (590, 353);
    this.panel1.TabIndex = 2;
    this.toolStrip2.Dock = System.Windows.Forms.DockStyle.None;
    this.toolStrip2.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.btnCursor, this.toolStripSeparator1, this.btnRect, this.btnEllipse, this.btnLine, this.btnArrow, this.btnText});
    this.toolStrip2.Location = new System.Drawing.Point (0, 3);
    this.toolStrip2.Name = "toolStrip2";
    this.toolStrip2.Size = new System.Drawing.Size (24, 155);
    this.toolStrip2.TabIndex = 0;
    this.btnCursor.Checked = true;
    this.btnCursor.CheckOnClick = true;
    this.btnCursor.CheckState = System.Windows.Forms.CheckState.Checked;
    this.btnCursor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnCursor.Image = ((System.Drawing.Image) (resources.GetObject ("btnCursor.Image")));
    this.btnCursor.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnCursor.Name = "btnCursor";
    this.btnCursor.Size = new System.Drawing.Size (22, 20);
    this.btnCursor.Text = "Selection tool";
    this.btnCursor.Click += new System.EventHandler (this.BtnCursorClick);
    this.toolStripSeparator1.Name = "toolStripSeparator1";
    this.toolStripSeparator1.Size = new System.Drawing.Size (22, 6);
    this.btnRect.CheckOnClick = true;
    this.btnRect.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnRect.Image = ((System.Drawing.Image) (resources.GetObject ("btnRect.Image")));
    this.btnRect.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnRect.Name = "btnRect";
    this.btnRect.Size = new System.Drawing.Size (22, 20);
    this.btnRect.Text = "Draw rectangle";
    this.btnRect.Click += new System.EventHandler (this.BtnRectClick);
    this.btnEllipse.CheckOnClick = true;
    this.btnEllipse.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnEllipse.Image = ((System.Drawing.Image) (resources.GetObject ("btnEllipse.Image")));
    this.btnEllipse.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnEllipse.Name = "btnEllipse";
    this.btnEllipse.Size = new System.Drawing.Size (22, 20);
    this.btnEllipse.Text = "Draw ellipse";
    this.btnEllipse.Click += new System.EventHandler (this.BtnEllipseClick);
    this.btnLine.CheckOnClick = true;
    this.btnLine.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnLine.Image = ((System.Drawing.Image) (resources.GetObject ("btnLine.Image")));
    this.btnLine.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnLine.Name = "btnLine";
    this.btnLine.Size = new System.Drawing.Size (22, 20);
    this.btnLine.Text = "Draw line";
    this.btnLine.Click += new System.EventHandler (this.BtnLineClick);
    this.btnArrow.CheckOnClick = true;
    this.btnArrow.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnArrow.Image = ((System.Drawing.Image) (resources.GetObject ("btnArrow.Image")));
    this.btnArrow.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnArrow.Name = "btnArrow";
    this.btnArrow.Size = new System.Drawing.Size (22, 20);
    this.btnArrow.Text = "Draw arrow";
    this.btnArrow.Click += new System.EventHandler (this.BtnArrowClick);
    this.btnText.CheckOnClick = true;
    this.btnText.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnText.Image = ((System.Drawing.Image) (resources.GetObject ("btnText.Image")));
    this.btnText.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnText.Name = "btnText";
    this.btnText.Size = new System.Drawing.Size (22, 20);
    this.btnText.Text = "Add text";
    this.btnText.Click += new System.EventHandler (this.BtnTextClick);
    this.menuStrip1.Dock = System.Windows.Forms.DockStyle.None;
    this.menuStrip1.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.fileStripMenuItem, this.editToolStripMenuItem, this.objectToolStripMenuItem, this.helpToolStripMenuItem});
    this.menuStrip1.Location = new System.Drawing.Point (0, 0);
    this.menuStrip1.Name = "menuStrip1";
    this.menuStrip1.Size = new System.Drawing.Size (628, 24);
    this.menuStrip1.TabIndex = 1;
    this.menuStrip1.Text = "menuStrip1";
    this.fileStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.saveToolStripMenuItem, this.saveAsToolStripMenuItem, this.copyImageToClipboardToolStripMenuItem, this.printToolStripMenuItem, this.toolStripSeparator9, this.closeToolStripMenuItem});
    this.fileStripMenuItem.Name = "fileStripMenuItem";
    this.fileStripMenuItem.Size = new System.Drawing.Size (35, 20);
    this.fileStripMenuItem.Text = "File";
    this.saveToolStripMenuItem.Enabled = false;
    this.saveToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("saveToolStripMenuItem.Image")));
    this.saveToolStripMenuItem.Name = "saveToolStripMenuItem";
    this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
    this.saveToolStripMenuItem.Size = new System.Drawing.Size (269, 22);
    this.saveToolStripMenuItem.Text = "Save";
    this.saveToolStripMenuItem.Click += new System.EventHandler (this.SaveToolStripMenuItemClick);
    this.saveAsToolStripMenuItem.Name = "saveAsToolStripMenuItem";
    this.saveAsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) (((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Shift) | System.Windows.Forms.Keys.S)));
    this.saveAsToolStripMenuItem.Size = new System.Drawing.Size (269, 22);
    this.saveAsToolStripMenuItem.Text = "Save as...";
    this.saveAsToolStripMenuItem.Click += new System.EventHandler (this.SaveAsToolStripMenuItemClick);
    this.copyImageToClipboardToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("copyImageToClipboardToolStripMenuItem.Image")));
    this.copyImageToClipboardToolStripMenuItem.Name = "copyImageToClipboardToolStripMenuItem";
    this.copyImageToClipboardToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) (((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Shift) | System.Windows.Forms.Keys.C)));
    this.copyImageToClipboardToolStripMenuItem.Size = new System.Drawing.Size (269, 22);
    this.copyImageToClipboardToolStripMenuItem.Text = "Copy image to clipboard";
    this.copyImageToClipboardToolStripMenuItem.Click += new System.EventHandler (this.CopyImageToClipboardToolStripMenuItemClick);
    this.printToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("printToolStripMenuItem.Image")));
    this.printToolStripMenuItem.Name = "printToolStripMenuItem";
    this.printToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.P)));
    this.printToolStripMenuItem.Size = new System.Drawing.Size (269, 22);
    this.printToolStripMenuItem.Text = "Print...";
    this.printToolStripMenuItem.Click += new System.EventHandler (this.PrintToolStripMenuItemClick);
    this.toolStripSeparator9.Name = "toolStripSeparator9";
    this.toolStripSeparator9.Size = new System.Drawing.Size (266, 6);
    this.closeToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("closeToolStripMenuItem.Image")));
    this.closeToolStripMenuItem.Name = "closeToolStripMenuItem";
    this.closeToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Alt | System.Windows.Forms.Keys.F4)));
    this.closeToolStripMenuItem.Size = new System.Drawing.Size (269, 22);
    this.closeToolStripMenuItem.Text = "Close";
    this.closeToolStripMenuItem.Click += new System.EventHandler (this.CloseToolStripMenuItemClick);
    this.editToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.cutToolStripMenuItem, this.copyToolStripMenuItem, this.pasteToolStripMenuItem, this.toolStripSeparator4, this.duplicateToolStripMenuItem, this.toolStripSeparator12, this.preferencesToolStripMenuItem});
    this.editToolStripMenuItem.Name = "editToolStripMenuItem";
    this.editToolStripMenuItem.Size = new System.Drawing.Size (37, 20);
    this.editToolStripMenuItem.Text = "Edit";
    this.cutToolStripMenuItem.Enabled = false;
    this.cutToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("cutToolStripMenuItem.Image")));
    this.cutToolStripMenuItem.Name = "cutToolStripMenuItem";
    this.cutToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.X)));
    this.cutToolStripMenuItem.Size = new System.Drawing.Size (168, 22);
    this.cutToolStripMenuItem.Text = "Cut";
    this.cutToolStripMenuItem.Click += new System.EventHandler (this.CutToolStripMenuItemClick);
    this.copyToolStripMenuItem.Enabled = false;
    this.copyToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("copyToolStripMenuItem.Image")));
    this.copyToolStripMenuItem.Name = "copyToolStripMenuItem";
    this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C)));
    this.copyToolStripMenuItem.Size = new System.Drawing.Size (168, 22);
    this.copyToolStripMenuItem.Text = "Copy";
    this.copyToolStripMenuItem.Click += new System.EventHandler (this.CopyToolStripMenuItemClick);
    this.pasteToolStripMenuItem.Enabled = false;
    this.pasteToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("pasteToolStripMenuItem.Image")));
    this.pasteToolStripMenuItem.Name = "pasteToolStripMenuItem";
    this.pasteToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.V)));
    this.pasteToolStripMenuItem.Size = new System.Drawing.Size (168, 22);
    this.pasteToolStripMenuItem.Text = "Paste";
    this.pasteToolStripMenuItem.Click += new System.EventHandler (this.PasteToolStripMenuItemClick);
    this.toolStripSeparator4.Name = "toolStripSeparator4";
    this.toolStripSeparator4.Size = new System.Drawing.Size (165, 6);
    this.duplicateToolStripMenuItem.Enabled = false;
    this.duplicateToolStripMenuItem.Name = "duplicateToolStripMenuItem";
    this.duplicateToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys) ((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.D)));
    this.duplicateToolStripMenuItem.Size = new System.Drawing.Size (168, 22);
    this.duplicateToolStripMenuItem.Text = "Duplicate";
    this.duplicateToolStripMenuItem.Click += new System.EventHandler (this.DuplicateToolStripMenuItemClick);
    this.toolStripSeparator12.Name = "toolStripSeparator12";
    this.toolStripSeparator12.Size = new System.Drawing.Size (165, 6);
    this.preferencesToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("preferencesToolStripMenuItem.Image")));
    this.preferencesToolStripMenuItem.Name = "preferencesToolStripMenuItem";
    this.preferencesToolStripMenuItem.Size = new System.Drawing.Size (168, 22);
    this.preferencesToolStripMenuItem.Text = "Preferences...";
    this.preferencesToolStripMenuItem.Click += new System.EventHandler (this.PreferencesToolStripMenuItemClick);
    this.objectToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.addRectangleToolStripMenuItem, this.addEllipseToolStripMenuItem, this.drawLineToolStripMenuItem, this.drawArrowToolStripMenuItem, this.addTextBoxToolStripMenuItem, this.toolStripSeparator8, this.removeObjectToolStripMenuItem, this.toolStripSeparator7, this.arrangeToolStripMenuItem, this.borderColorToolStripMenuItem, this.backgroundColorToolStripMenuItem, this.lineThicknessToolStripMenuItem, this.arrowHeadsToolStripMenuItem});
    this.objectToolStripMenuItem.Name = "objectToolStripMenuItem";
    this.objectToolStripMenuItem.Size = new System.Drawing.Size (51, 20);
    this.objectToolStripMenuItem.Text = "Object";
    this.addRectangleToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("addRectangleToolStripMenuItem.Image")));
    this.addRectangleToolStripMenuItem.Name = "addRectangleToolStripMenuItem";
    this.addRectangleToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.addRectangleToolStripMenuItem.Text = "Draw rectangle";
    this.addRectangleToolStripMenuItem.Click += new System.EventHandler (this.AddRectangleToolStripMenuItemClick);
    this.addEllipseToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("addEllipseToolStripMenuItem.Image")));
    this.addEllipseToolStripMenuItem.Name = "addEllipseToolStripMenuItem";
    this.addEllipseToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.addEllipseToolStripMenuItem.Text = "Draw ellipse";
    this.addEllipseToolStripMenuItem.Click += new System.EventHandler (this.AddEllipseToolStripMenuItemClick);
    this.drawLineToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("drawLineToolStripMenuItem.Image")));
    this.drawLineToolStripMenuItem.Name = "drawLineToolStripMenuItem";
    this.drawLineToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.drawLineToolStripMenuItem.Text = "Draw line";
    this.drawArrowToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("drawArrowToolStripMenuItem.Image")));
    this.drawArrowToolStripMenuItem.Name = "drawArrowToolStripMenuItem";
    this.drawArrowToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.drawArrowToolStripMenuItem.Text = "Draw arrow";
    this.drawArrowToolStripMenuItem.Click += new System.EventHandler (this.DrawArrowToolStripMenuItemClick);
    this.addTextBoxToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("addTextBoxToolStripMenuItem.Image")));
    this.addTextBoxToolStripMenuItem.Name = "addTextBoxToolStripMenuItem";
    this.addTextBoxToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.addTextBoxToolStripMenuItem.Text = "Add text box";
    this.addTextBoxToolStripMenuItem.Click += new System.EventHandler (this.AddTextBoxToolStripMenuItemClick);
    this.toolStripSeparator8.Name = "toolStripSeparator8";
    this.toolStripSeparator8.Size = new System.Drawing.Size (178, 6);
    this.removeObjectToolStripMenuItem.Enabled = false;
    this.removeObjectToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("removeObjectToolStripMenuItem.Image")));
    this.removeObjectToolStripMenuItem.Name = "removeObjectToolStripMenuItem";
    this.removeObjectToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.Delete;
    this.removeObjectToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.removeObjectToolStripMenuItem.Text = "Remove Object";
    this.removeObjectToolStripMenuItem.Click += new System.EventHandler (this.RemoveObjectToolStripMenuItemClick);
    this.toolStripSeparator7.Name = "toolStripSeparator7";
    this.toolStripSeparator7.Size = new System.Drawing.Size (178, 6);
    this.arrangeToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.upToTopToolStripMenuItem, this.upOneLevelToolStripMenuItem, this.downOneLevelToolStripMenuItem, this.downToBottomToolStripMenuItem});
    this.arrangeToolStripMenuItem.Enabled = false;
    this.arrangeToolStripMenuItem.Name = "arrangeToolStripMenuItem";
    this.arrangeToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.arrangeToolStripMenuItem.Text = "Arrange";
    this.upToTopToolStripMenuItem.Enabled = false;
    this.upToTopToolStripMenuItem.Name = "upToTopToolStripMenuItem";
    this.upToTopToolStripMenuItem.ShortcutKeyDisplayString = "Home";
    this.upToTopToolStripMenuItem.Size = new System.Drawing.Size (190, 22);
    this.upToTopToolStripMenuItem.Text = "Up to top";
    this.upToTopToolStripMenuItem.Click += new System.EventHandler (this.UpToTopToolStripMenuItemClick);
    this.upOneLevelToolStripMenuItem.Enabled = false;
    this.upOneLevelToolStripMenuItem.Name = "upOneLevelToolStripMenuItem";
    this.upOneLevelToolStripMenuItem.ShortcutKeyDisplayString = "PgUp";
    this.upOneLevelToolStripMenuItem.Size = new System.Drawing.Size (190, 22);
    this.upOneLevelToolStripMenuItem.Text = "Up one level";
    this.upOneLevelToolStripMenuItem.Click += new System.EventHandler (this.UpOneLevelToolStripMenuItemClick);
    this.downOneLevelToolStripMenuItem.Enabled = false;
    this.downOneLevelToolStripMenuItem.Name = "downOneLevelToolStripMenuItem";
    this.downOneLevelToolStripMenuItem.ShortcutKeyDisplayString = "PgDn";
    this.downOneLevelToolStripMenuItem.Size = new System.Drawing.Size (190, 22);
    this.downOneLevelToolStripMenuItem.Text = "Down one level";
    this.downOneLevelToolStripMenuItem.Click += new System.EventHandler (this.DownOneLevelToolStripMenuItemClick);
    this.downToBottomToolStripMenuItem.Enabled = false;
    this.downToBottomToolStripMenuItem.Name = "downToBottomToolStripMenuItem";
    this.downToBottomToolStripMenuItem.ShortcutKeyDisplayString = "End";
    this.downToBottomToolStripMenuItem.Size = new System.Drawing.Size (190, 22);
    this.downToBottomToolStripMenuItem.Text = "Down to bottom";
    this.downToBottomToolStripMenuItem.Click += new System.EventHandler (this.DownToBottomToolStripMenuItemClick);
    this.borderColorToolStripMenuItem.Enabled = false;
    this.borderColorToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("borderColorToolStripMenuItem.Image")));
    this.borderColorToolStripMenuItem.Name = "borderColorToolStripMenuItem";
    this.borderColorToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.borderColorToolStripMenuItem.Text = "Border color";
    this.borderColorToolStripMenuItem.Click += new System.EventHandler (this.SelectBorderColorToolStripMenuItemClick);
    this.backgroundColorToolStripMenuItem.Enabled = false;
    this.backgroundColorToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("backgroundColorToolStripMenuItem.Image")));
    this.backgroundColorToolStripMenuItem.Name = "backgroundColorToolStripMenuItem";
    this.backgroundColorToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.backgroundColorToolStripMenuItem.Text = "Background color";
    this.backgroundColorToolStripMenuItem.Click += new System.EventHandler (this.SelectBackgroundColorToolStripMenuItemClick);
    this.lineThicknessToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.lineThickness1ToolStripMenuItem, this.lineThickness2ToolStripMenuItem, this.lineThickness3ToolStripMenuItem, this.lineThickness4ToolStripMenuItem, this.lineThickness5ToolStripMenuItem});
    this.lineThicknessToolStripMenuItem.Enabled = false;
    this.lineThicknessToolStripMenuItem.Name = "lineThicknessToolStripMenuItem";
    this.lineThicknessToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.lineThicknessToolStripMenuItem.Text = "Line thickness";
    this.lineThickness1ToolStripMenuItem.Name = "lineThickness1ToolStripMenuItem";
    this.lineThickness1ToolStripMenuItem.Size = new System.Drawing.Size (91, 22);
    this.lineThickness1ToolStripMenuItem.Text = "1";
    this.lineThickness1ToolStripMenuItem.Click += new System.EventHandler (this.LineThicknessValueToolStripMenuItemClick);
    this.lineThickness2ToolStripMenuItem.Name = "lineThickness2ToolStripMenuItem";
    this.lineThickness2ToolStripMenuItem.Size = new System.Drawing.Size (91, 22);
    this.lineThickness2ToolStripMenuItem.Text = "2";
    this.lineThickness2ToolStripMenuItem.Click += new System.EventHandler (this.LineThicknessValueToolStripMenuItemClick);
    this.lineThickness3ToolStripMenuItem.Name = "lineThickness3ToolStripMenuItem";
    this.lineThickness3ToolStripMenuItem.Size = new System.Drawing.Size (91, 22);
    this.lineThickness3ToolStripMenuItem.Text = "3";
    this.lineThickness3ToolStripMenuItem.Click += new System.EventHandler (this.LineThicknessValueToolStripMenuItemClick);
    this.lineThickness4ToolStripMenuItem.Name = "lineThickness4ToolStripMenuItem";
    this.lineThickness4ToolStripMenuItem.Size = new System.Drawing.Size (91, 22);
    this.lineThickness4ToolStripMenuItem.Text = "4";
    this.lineThickness4ToolStripMenuItem.Click += new System.EventHandler (this.LineThicknessValueToolStripMenuItemClick);
    this.lineThickness5ToolStripMenuItem.Name = "lineThickness5ToolStripMenuItem";
    this.lineThickness5ToolStripMenuItem.Size = new System.Drawing.Size (91, 22);
    this.lineThickness5ToolStripMenuItem.Text = "5";
    this.lineThickness5ToolStripMenuItem.Click += new System.EventHandler (this.LineThicknessValueToolStripMenuItemClick);
    this.arrowHeadsToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.arrowHeadsStartPointToolStripMenuItem1, this.arrowHeadsEndPointToolStripMenuItem1, this.arrowHeadsBothToolStripMenuItem1, this.arrowHeadsNoneToolStripMenuItem1});
    this.arrowHeadsToolStripMenuItem.Enabled = false;
    this.arrowHeadsToolStripMenuItem.Image = ((System.Drawing.Image) (resources.GetObject ("arrowHeadsToolStripMenuItem.Image")));
    this.arrowHeadsToolStripMenuItem.Name = "arrowHeadsToolStripMenuItem";
    this.arrowHeadsToolStripMenuItem.Size = new System.Drawing.Size (181, 22);
    this.arrowHeadsToolStripMenuItem.Text = "Arrow heads";
    this.arrowHeadsStartPointToolStripMenuItem1.Name = "arrowHeadsStartPointToolStripMenuItem1";
    this.arrowHeadsStartPointToolStripMenuItem1.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsStartPointToolStripMenuItem1.Text = "Start point";
    this.arrowHeadsStartPointToolStripMenuItem1.Click += new System.EventHandler (this.ArrowHeadsStartPointToolStripMenuItemClick);
    this.arrowHeadsEndPointToolStripMenuItem1.Name = "arrowHeadsEndPointToolStripMenuItem1";
    this.arrowHeadsEndPointToolStripMenuItem1.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsEndPointToolStripMenuItem1.Text = "End point";
    this.arrowHeadsEndPointToolStripMenuItem1.Click += new System.EventHandler (this.ArrowHeadsEndPointToolStripMenuItemClick);
    this.arrowHeadsBothToolStripMenuItem1.Name = "arrowHeadsBothToolStripMenuItem1";
    this.arrowHeadsBothToolStripMenuItem1.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsBothToolStripMenuItem1.Text = "Both";
    this.arrowHeadsBothToolStripMenuItem1.Click += new System.EventHandler (this.ArrowHeadsBothToolStripMenuItemClick);
    this.arrowHeadsNoneToolStripMenuItem1.Name = "arrowHeadsNoneToolStripMenuItem1";
    this.arrowHeadsNoneToolStripMenuItem1.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsNoneToolStripMenuItem1.Text = "None";
    this.arrowHeadsNoneToolStripMenuItem1.Click += new System.EventHandler (this.ArrowHeadsNoneToolStripMenuItemClick);
    this.helpToolStripMenuItem.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.helpToolStripMenuItem1, this.aboutToolStripMenuItem});
    this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
    this.helpToolStripMenuItem.Size = new System.Drawing.Size (40, 20);
    this.helpToolStripMenuItem.Text = "Help";
    this.helpToolStripMenuItem1.Image = ((System.Drawing.Image) (resources.GetObject ("helpToolStripMenuItem1.Image")));
    this.helpToolStripMenuItem1.Name = "helpToolStripMenuItem1";
    this.helpToolStripMenuItem1.ShortcutKeys = System.Windows.Forms.Keys.F1;
    this.helpToolStripMenuItem1.Size = new System.Drawing.Size (125, 22);
    this.helpToolStripMenuItem1.Text = "Help";
    this.helpToolStripMenuItem1.Click += new System.EventHandler (this.HelpToolStripMenuItem1Click);
    this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
    this.aboutToolStripMenuItem.Size = new System.Drawing.Size (125, 22);
    this.aboutToolStripMenuItem.Text = "About";
    this.aboutToolStripMenuItem.Click += new System.EventHandler (this.AboutToolStripMenuItemClick);
    this.toolStrip1.Dock = System.Windows.Forms.DockStyle.None;
    this.toolStrip1.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.btnSave, this.btnClipboard, this.toolStripSeparator5, this.btnPrint, this.toolStripSeparator2, this.btnDelete, this.toolStripSeparator3, this.btnCut, this.btnCopy, this.btnPaste, this.toolStripSeparator6, this.btnBorderColor, this.btnBackColor, this.labelLineThickness, this.comboBoxThickness, this.btnArrowHeads, this.toolStripSeparator10, this.btnSettings, this.toolStripSeparator11, this.btnHelp});
    this.toolStrip1.Location = new System.Drawing.Point (3, 24);
    this.toolStrip1.Name = "toolStrip1";
    this.toolStrip1.Size = new System.Drawing.Size (435, 25);
    this.toolStrip1.TabIndex = 0;
    this.btnSave.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnSave.Image = ((System.Drawing.Image) (resources.GetObject ("btnSave.Image")));
    this.btnSave.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnSave.Name = "btnSave";
    this.btnSave.Size = new System.Drawing.Size (23, 22);
    this.btnSave.Text = "Save to default location";
    this.btnSave.Click += new System.EventHandler (this.BtnSaveClick);
    this.btnClipboard.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnClipboard.Image = ((System.Drawing.Image) (resources.GetObject ("btnClipboard.Image")));
    this.btnClipboard.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnClipboard.Name = "btnClipboard";
    this.btnClipboard.Size = new System.Drawing.Size (23, 22);
    this.btnClipboard.Text = "Copy to clipboard";
    this.btnClipboard.Click += new System.EventHandler (this.BtnClipboardClick);
    this.toolStripSeparator5.Name = "toolStripSeparator5";
    this.toolStripSeparator5.Size = new System.Drawing.Size (6, 25);
    this.btnPrint.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnPrint.Image = ((System.Drawing.Image) (resources.GetObject ("btnPrint.Image")));
    this.btnPrint.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnPrint.Name = "btnPrint";
    this.btnPrint.Size = new System.Drawing.Size (23, 22);
    this.btnPrint.Text = "Print";
    this.btnPrint.Click += new System.EventHandler (this.BtnPrintClick);
    this.toolStripSeparator2.Name = "toolStripSeparator2";
    this.toolStripSeparator2.Size = new System.Drawing.Size (6, 25);
    this.btnDelete.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnDelete.Enabled = false;
    this.btnDelete.Image = ((System.Drawing.Image) (resources.GetObject ("btnDelete.Image")));
    this.btnDelete.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnDelete.Name = "btnDelete";
    this.btnDelete.Size = new System.Drawing.Size (23, 22);
    this.btnDelete.Text = "Remove";
    this.btnDelete.Click += new System.EventHandler (this.BtnDeleteClick);
    this.toolStripSeparator3.Name = "toolStripSeparator3";
    this.toolStripSeparator3.Size = new System.Drawing.Size (6, 25);
    this.btnCut.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnCut.Enabled = false;
    this.btnCut.Image = ((System.Drawing.Image) (resources.GetObject ("btnCut.Image")));
    this.btnCut.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnCut.Name = "btnCut";
    this.btnCut.Size = new System.Drawing.Size (23, 22);
    this.btnCut.Text = "Cut selected element to clipboard";
    this.btnCut.Click += new System.EventHandler (this.BtnCutClick);
    this.btnCopy.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnCopy.Enabled = false;
    this.btnCopy.Image = ((System.Drawing.Image) (resources.GetObject ("btnCopy.Image")));
    this.btnCopy.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnCopy.Name = "btnCopy";
    this.btnCopy.Size = new System.Drawing.Size (23, 22);
    this.btnCopy.Text = "Copy selected element to clipboard";
    this.btnCopy.Click += new System.EventHandler (this.BtnCopyClick);
    this.btnPaste.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnPaste.Enabled = false;
    this.btnPaste.Image = ((System.Drawing.Image) (resources.GetObject ("btnPaste.Image")));
    this.btnPaste.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnPaste.Name = "btnPaste";
    this.btnPaste.Size = new System.Drawing.Size (23, 22);
    this.btnPaste.Text = "Paste element from clipboard";
    this.btnPaste.Click += new System.EventHandler (this.BtnPasteClick);
    this.toolStripSeparator6.Name = "toolStripSeparator6";
    this.toolStripSeparator6.Size = new System.Drawing.Size (6, 25);
    this.btnBorderColor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnBorderColor.Enabled = false;
    this.btnBorderColor.Image = ((System.Drawing.Image) (resources.GetObject ("btnBorderColor.Image")));
    this.btnBorderColor.ImageTransparentColor = System.Drawing.Color.Lime;
    this.btnBorderColor.Name = "btnBorderColor";
    this.btnBorderColor.Size = new System.Drawing.Size (23, 22);
    this.btnBorderColor.Text = "Border color";
    this.btnBorderColor.Click += new System.EventHandler (this.BtnBorderColorClick);
    this.btnBackColor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnBackColor.Enabled = false;
    this.btnBackColor.Image = ((System.Drawing.Image) (resources.GetObject ("btnBackColor.Image")));
    this.btnBackColor.ImageTransparentColor = System.Drawing.Color.Lime;
    this.btnBackColor.Name = "btnBackColor";
    this.btnBackColor.Size = new System.Drawing.Size (23, 22);
    this.btnBackColor.Text = "Background color";
    this.btnBackColor.Click += new System.EventHandler (this.BtnBackColorClick);
    this.labelLineThickness.Name = "labelLineThickness";
    this.labelLineThickness.Size = new System.Drawing.Size (73, 22);
    this.labelLineThickness.Text = "Line thickness";
    this.comboBoxThickness.AutoSize = false;
    this.comboBoxThickness.Enabled = false;
    this.comboBoxThickness.Items.AddRange (new object [] {"1", "2", "3", "4", "5"});
    this.comboBoxThickness.Name = "comboBoxThickness";
    this.comboBoxThickness.Size = new System.Drawing.Size (30, 21);
    this.comboBoxThickness.Text = "1";
    this.comboBoxThickness.TextChanged += new System.EventHandler (this.ThicknessComboBoxChanged);
    this.btnArrowHeads.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnArrowHeads.DropDownItems.AddRange (new System.Windows.Forms.ToolStripItem [] {this.arrowHeadsStartPointToolStripMenuItem, this.arrowHeadsEndPointToolStripMenuItem, this.arrowHeadsBothToolStripMenuItem, this.arrowHeadsNoneToolStripMenuItem});
    this.btnArrowHeads.Enabled = false;
    this.btnArrowHeads.Image = ((System.Drawing.Image) (resources.GetObject ("btnArrowHeads.Image")));
    this.btnArrowHeads.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnArrowHeads.Name = "btnArrowHeads";
    this.btnArrowHeads.Size = new System.Drawing.Size (29, 22);
    this.btnArrowHeads.Text = "Arrow heads";
    this.arrowHeadsStartPointToolStripMenuItem.Name = "arrowHeadsStartPointToolStripMenuItem";
    this.arrowHeadsStartPointToolStripMenuItem.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsStartPointToolStripMenuItem.Text = "Start point";
    this.arrowHeadsStartPointToolStripMenuItem.Click += new System.EventHandler (this.ArrowHeadsStartPointToolStripMenuItemClick);
    this.arrowHeadsEndPointToolStripMenuItem.Name = "arrowHeadsEndPointToolStripMenuItem";
    this.arrowHeadsEndPointToolStripMenuItem.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsEndPointToolStripMenuItem.Text = "End point";
    this.arrowHeadsEndPointToolStripMenuItem.Click += new System.EventHandler (this.ArrowHeadsEndPointToolStripMenuItemClick);
    this.arrowHeadsBothToolStripMenuItem.Name = "arrowHeadsBothToolStripMenuItem";
    this.arrowHeadsBothToolStripMenuItem.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsBothToolStripMenuItem.Text = "Both";
    this.arrowHeadsBothToolStripMenuItem.Click += new System.EventHandler (this.ArrowHeadsBothToolStripMenuItemClick);
    this.arrowHeadsNoneToolStripMenuItem.Name = "arrowHeadsNoneToolStripMenuItem";
    this.arrowHeadsNoneToolStripMenuItem.Size = new System.Drawing.Size (136, 22);
    this.arrowHeadsNoneToolStripMenuItem.Text = "None";
    this.arrowHeadsNoneToolStripMenuItem.Click += new System.EventHandler (this.ArrowHeadsNoneToolStripMenuItemClick);
    this.toolStripSeparator10.Name = "toolStripSeparator10";
    this.toolStripSeparator10.Size = new System.Drawing.Size (6, 25);
    this.btnSettings.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnSettings.Image = ((System.Drawing.Image) (resources.GetObject ("btnSettings.Image")));
    this.btnSettings.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnSettings.Name = "btnSettings";
    this.btnSettings.Size = new System.Drawing.Size (23, 22);
    this.btnSettings.Text = "Preferences";
    this.btnSettings.Click += new System.EventHandler (this.BtnSettingsClick);
    this.toolStripSeparator11.Name = "toolStripSeparator11";
    this.toolStripSeparator11.Size = new System.Drawing.Size (6, 25);
    this.btnHelp.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
    this.btnHelp.Image = ((System.Drawing.Image) (resources.GetObject ("btnHelp.Image")));
    this.btnHelp.ImageTransparentColor = System.Drawing.Color.Magenta;
    this.btnHelp.Name = "btnHelp";
    this.btnHelp.Size = new System.Drawing.Size (23, 22);
    this.btnHelp.Text = "Help";
    this.btnHelp.Click += new System.EventHandler (this.BtnHelpClick);
    this.printDialog1.UseEXDialog = true;
    this.fileSavedStatusContextMenu.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.copyPathMenuItem, this.openDirectoryMenuItem});
    this.fileSavedStatusContextMenu.Name = "contextMenuStrip1";
    this.fileSavedStatusContextMenu.Size = new System.Drawing.Size (258, 70);
    this.copyPathMenuItem.Name = "copyPathMenuItem";
    this.copyPathMenuItem.Size = new System.Drawing.Size (257, 22);
    this.copyPathMenuItem.Text = "Copy path to clipboard";
    this.copyPathMenuItem.Click += new System.EventHandler (this.CopyPathMenuItemClick);
    this.openDirectoryMenuItem.Name = "openDirectoryMenuItem";
    this.openDirectoryMenuItem.Size = new System.Drawing.Size (257, 22);
    this.openDirectoryMenuItem.Text = "Open directory in Windows Explorer";
    this.openDirectoryMenuItem.Click += new System.EventHandler (this.OpenDirectoryMenuItemClick);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (628, 430);
    this.Controls.Add (this.toolStripContainer1);
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.KeyPreview = true;
    this.Name = "ImageEditorForm";
    this.Activated += new System.EventHandler (this.ImageEditorFormActivated);
    this.KeyUp += new System.Windows.Forms.KeyEventHandler (this.ImageEditorFormKeyUp);
    this.FormClosing += new System.Windows.Forms.FormClosingEventHandler (this.ImageEditorFormFormClosing);
    this.toolStripContainer1.BottomToolStripPanel.ResumeLayout (false);
    this.toolStripContainer1.BottomToolStripPanel.PerformLayout ();
    this.toolStripContainer1.ContentPanel.ResumeLayout (false);
    this.toolStripContainer1.LeftToolStripPanel.ResumeLayout (false);
    this.toolStripContainer1.LeftToolStripPanel.PerformLayout ();
    this.toolStripContainer1.TopToolStripPanel.ResumeLayout (false);
    this.toolStripContainer1.TopToolStripPanel.PerformLayout ();
    this.toolStripContainer1.ResumeLayout (false);
    this.toolStripContainer1.PerformLayout ();
    this.statusStrip1.ResumeLayout (false);
    this.statusStrip1.PerformLayout ();
    this.tableLayoutPanel1.ResumeLayout (false);
    this.toolStrip2.ResumeLayout (false);
    this.toolStrip2.PerformLayout ();
    this.menuStrip1.ResumeLayout (false);
    this.menuStrip1.PerformLayout ();
    this.toolStrip1.ResumeLayout (false);
    this.toolStrip1.PerformLayout ();
    this.fileSavedStatusContextMenu.ResumeLayout (false);
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/JpegQualityDialog.cs.ifdefed" startline="40" endline="50">
void Button_okClick (object sender, System.EventArgs e) {
    Quality = this.trackBarJpegQuality.Value;
    if (this.checkbox_dontaskagain.Checked) {
        conf.Output_File_JpegQuality = Quality;
        conf.Output_File_PromptJpegQuality = false;
        conf.Store ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/JpegQualityDialog.cs.ifdefed" startline="52" endline="57">
void UpdateUI () {
    this.Text = lang.GetString ("jpegqualitydialog_title");
    this.label_choosejpegquality.Text = lang.GetString ("jpegqualitydialog_choosejpegquality");
    this.checkbox_dontaskagain.Text = lang.GetString ("jpegqualitydialog_dontaskagain");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/JpegQualityDialog.cs.ifdefed" startline="59" endline="62">
void TrackBarJpegQualityScroll (object sender, System.EventArgs e) {
    textBoxJpegQuality.Text = trackBarJpegQuality.Value.ToString ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="104" endline="117">
private void ItemCheckStateChanged (object sender, System.EventArgs e) {
    if (updateInProgress)
        return;

    ToolStripMenuSelectListItem tsmi = (ToolStripMenuSelectListItem) sender;
    updateInProgress = true;
    if (tsmi.Checked && ! multiCheckAllowed) {
        UncheckAll ();
        tsmi.Checked = true;
    }
    updateInProgress = false;
    if (CheckedChanged != null)
        CheckedChanged (this, new ItemCheckedChangedEventArgs (tsmi));

}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="126" endline="145">
public void AddItem (string label, Image image, Object data, bool isChecked) {
    ToolStripMenuSelectListItem newItem = new ToolStripMenuSelectListItem ();
    newItem.Text = label;
    newItem.Image = image;
    newItem.CheckOnClick = true;
    newItem.CheckStateChanged += new System.EventHandler (this.ItemCheckStateChanged);
    newItem.Data = data;
    if (isChecked) {
        if (! multiCheckAllowed) {
            updateInProgress = true;
            UncheckAll ();
            updateInProgress = false;
        }
        newItem.Checked = isChecked;
    }
    this.DropDownItems.Add (newItem);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="152" endline="155">
public void AddItem (string label, Image image) {
    AddItem (label, image, null, false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="162" endline="165">
public void AddItem (string label, Object data) {
    AddItem (label, null, data, false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="171" endline="174">
public void AddItem (string label) {
    AddItem (label, null, null, false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="184" endline="187">
public void AddItem (string label, Image image, bool isChecked) {
    AddItem (label, image, null, isChecked);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="195" endline="198">
public void AddItem (string label, Object data, bool isChecked) {
    AddItem (label, null, data, isChecked);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="205" endline="208">
public void AddItem (string label, bool isChecked) {
    AddItem (label, null, null, isChecked);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ToolStripMenuSelectList.cs.ifdefed" startline="213" endline="217">
public void UncheckAll () {
    IEnumerator items = DropDownItems.GetEnumerator ();
    while (items.MoveNext ())
        ((ToolStripMenuItem) items.Current).Checked = false;

}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/AboutForm.Designer.cs.ifdefed" startline="25" endline="35">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/AboutForm.Designer.cs.ifdefed" startline="42" endline="208">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (AboutForm));
    this.pictureBox1 = new System.Windows.Forms.PictureBox ();
    this.panel1 = new System.Windows.Forms.Panel ();
    this.lblTitle = new System.Windows.Forms.Label ();
    this.lblLicense = new System.Windows.Forms.Label ();
    this.lblHost = new System.Windows.Forms.Label ();
    this.linkLblLicense = new System.Windows.Forms.LinkLabel ();
    this.linkLblHost = new System.Windows.Forms.LinkLabel ();
    this.linkLblBugs = new System.Windows.Forms.LinkLabel ();
    this.lblBugs = new System.Windows.Forms.Label ();
    this.linkLblDonations = new System.Windows.Forms.LinkLabel ();
    this.lblDonations = new System.Windows.Forms.Label ();
    this.linkLblIcons = new System.Windows.Forms.LinkLabel ();
    this.lblIcons = new System.Windows.Forms.Label ();
    ((System.ComponentModel.ISupportInitialize) (this.pictureBox1)).BeginInit ();
    this.panel1.SuspendLayout ();
    this.SuspendLayout ();
    this.pictureBox1.Image = ((System.Drawing.Image) (resources.GetObject ("pictureBox1.Image")));
    this.pictureBox1.Location = new System.Drawing.Point (20, 20);
    this.pictureBox1.Name = "pictureBox1";
    this.pictureBox1.Size = new System.Drawing.Size (48, 48);
    this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
    this.pictureBox1.TabIndex = 0;
    this.pictureBox1.TabStop = false;
    this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
    this.panel1.Controls.Add (this.pictureBox1);
    this.panel1.Location = new System.Drawing.Point (12, 12);
    this.panel1.Name = "panel1";
    this.panel1.Size = new System.Drawing.Size (90, 90);
    this.panel1.TabIndex = 1;
    this.lblTitle.Font = new System.Drawing.Font ("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte) (0)));
    this.lblTitle.Location = new System.Drawing.Point (108, 12);
    this.lblTitle.Name = "lblTitle";
    this.lblTitle.Size = new System.Drawing.Size (227, 19);
    this.lblTitle.TabIndex = 2;
    this.lblTitle.Text = "Greenshot x.x.xxx";
    this.lblLicense.Location = new System.Drawing.Point (109, 34);
    this.lblLicense.Name = "lblLicense";
    this.lblLicense.Size = new System.Drawing.Size (369, 68);
    this.lblLicense.TabIndex = 3;
    this.lblLicense.Text = "Copyright (C) 2007 Thomas Braun, Jens Klingen";
    this.lblHost.Location = new System.Drawing.Point (12, 109);
    this.lblHost.Name = "lblHost";
    this.lblHost.Size = new System.Drawing.Size (466, 23);
    this.lblHost.TabIndex = 4;
    this.lblHost.Text = "Greenshot is hosted by sourceforge.net at";
    this.linkLblLicense.Location = new System.Drawing.Point (109, 85);
    this.linkLblLicense.Name = "linkLblLicense";
    this.linkLblLicense.Size = new System.Drawing.Size (369, 23);
    this.linkLblLicense.TabIndex = 5;
    this.linkLblLicense.TabStop = true;
    this.linkLblLicense.Text = "http://www.gnu.org/licenses/gpl.html";
    this.linkLblLicense.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.LinkLabelClicked);
    this.linkLblHost.Location = new System.Drawing.Point (13, 124);
    this.linkLblHost.Name = "linkLblHost";
    this.linkLblHost.Size = new System.Drawing.Size (465, 23);
    this.linkLblHost.TabIndex = 6;
    this.linkLblHost.TabStop = true;
    this.linkLblHost.Text = "http://sourceforge.net/projects/greenshot/";
    this.linkLblHost.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.LinkLabelClicked);
    this.linkLblBugs.Location = new System.Drawing.Point (13, 162);
    this.linkLblBugs.Name = "linkLblBugs";
    this.linkLblBugs.Size = new System.Drawing.Size (465, 23);
    this.linkLblBugs.TabIndex = 8;
    this.linkLblBugs.TabStop = true;
    this.linkLblBugs.Text = "http://sourceforge.net/tracker/?group_id=191585&atid=937972";
    this.linkLblBugs.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.LinkLabelClicked);
    this.lblBugs.Location = new System.Drawing.Point (12, 147);
    this.lblBugs.Name = "lblBugs";
    this.lblBugs.Size = new System.Drawing.Size (466, 23);
    this.lblBugs.TabIndex = 7;
    this.lblBugs.Text = "Please report bugs to";
    this.linkLblDonations.Location = new System.Drawing.Point (13, 201);
    this.linkLblDonations.Name = "linkLblDonations";
    this.linkLblDonations.Size = new System.Drawing.Size (465, 23);
    this.linkLblDonations.TabIndex = 10;
    this.linkLblDonations.TabStop = true;
    this.linkLblDonations.Text = "http://sourceforge.net/donate/index.php?group_id=191585";
    this.linkLblDonations.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.LinkLabelClicked);
    this.lblDonations.Location = new System.Drawing.Point (12, 186);
    this.lblDonations.Name = "lblDonations";
    this.lblDonations.Size = new System.Drawing.Size (466, 23);
    this.lblDonations.TabIndex = 9;
    this.lblDonations.Text = "If you like Greenshot, you might consider donating a dime or two at";
    this.linkLblIcons.Location = new System.Drawing.Point (13, 239);
    this.linkLblIcons.Name = "linkLblIcons";
    this.linkLblIcons.Size = new System.Drawing.Size (279, 23);
    this.linkLblIcons.TabIndex = 12;
    this.linkLblIcons.TabStop = true;
    this.linkLblIcons.Text = "http://www.famfamfam.com/lab/icons/silk/";
    this.linkLblIcons.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.LinkLabelClicked);
    this.lblIcons.Location = new System.Drawing.Point (12, 224);
    this.lblIcons.Name = "lblIcons";
    this.lblIcons.Size = new System.Drawing.Size (466, 23);
    this.lblIcons.TabIndex = 11;
    this.lblIcons.Text = "Greenshot uses icons from / derived from Mark James\' splendid Silk Icon Set on";
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (519, 271);
    this.Controls.Add (this.linkLblIcons);
    this.Controls.Add (this.lblIcons);
    this.Controls.Add (this.linkLblDonations);
    this.Controls.Add (this.lblDonations);
    this.Controls.Add (this.linkLblBugs);
    this.Controls.Add (this.lblBugs);
    this.Controls.Add (this.linkLblHost);
    this.Controls.Add (this.linkLblLicense);
    this.Controls.Add (this.lblHost);
    this.Controls.Add (this.lblLicense);
    this.Controls.Add (this.lblTitle);
    this.Controls.Add (this.panel1);
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "AboutForm";
    this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
    this.Text = "AboutForm";
    ((System.ComponentModel.ISupportInitialize) (this.pictureBox1)).EndInit ();
    this.panel1.ResumeLayout (false);
    this.panel1.PerformLayout ();
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/AboutForm.Designer.cs.ifdefed" startline="223" endline="226">
void LinkLabelClicked (object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e) {
    openLink ((LinkLabel) sender);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/AboutForm.Designer.cs.ifdefed" startline="227" endline="238">
private void openLink (LinkLabel link) {
    try {
        link.LinkVisited = true;
        System.Diagnostics.Process.Start (link.Text);
    }
    catch (Exception) {
        MessageBox.Show (lang.GetString ("error_openlink"), lang.GetString ("error"));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/JpegQualityDialog.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/JpegQualityDialog.Designer.cs.ifdefed" startline="39" endline="120">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (JpegQualityDialog));
    this.label_choosejpegquality = new System.Windows.Forms.Label ();
    this.textBoxJpegQuality = new System.Windows.Forms.TextBox ();
    this.trackBarJpegQuality = new System.Windows.Forms.TrackBar ();
    this.checkbox_dontaskagain = new System.Windows.Forms.CheckBox ();
    this.button_ok = new System.Windows.Forms.Button ();
    ((System.ComponentModel.ISupportInitialize) (this.trackBarJpegQuality)).BeginInit ();
    this.SuspendLayout ();
    this.label_choosejpegquality.Location = new System.Drawing.Point (12, 9);
    this.label_choosejpegquality.Name = "label_choosejpegquality";
    this.label_choosejpegquality.Size = new System.Drawing.Size (268, 32);
    this.label_choosejpegquality.TabIndex = 15;
    this.label_choosejpegquality.Text = "Choose JPEG Quality";
    this.textBoxJpegQuality.Location = new System.Drawing.Point (245, 44);
    this.textBoxJpegQuality.Name = "textBoxJpegQuality";
    this.textBoxJpegQuality.ReadOnly = true;
    this.textBoxJpegQuality.Size = new System.Drawing.Size (35, 20);
    this.textBoxJpegQuality.TabIndex = 16;
    this.textBoxJpegQuality.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
    this.trackBarJpegQuality.LargeChange = 10;
    this.trackBarJpegQuality.Location = new System.Drawing.Point (12, 44);
    this.trackBarJpegQuality.Maximum = 100;
    this.trackBarJpegQuality.Name = "trackBarJpegQuality";
    this.trackBarJpegQuality.Size = new System.Drawing.Size (233, 45);
    this.trackBarJpegQuality.TabIndex = 14;
    this.trackBarJpegQuality.TickFrequency = 10;
    this.trackBarJpegQuality.Scroll += new System.EventHandler (this.TrackBarJpegQualityScroll);
    this.checkbox_dontaskagain.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_dontaskagain.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_dontaskagain.Location = new System.Drawing.Point (12, 81);
    this.checkbox_dontaskagain.Name = "checkbox_dontaskagain";
    this.checkbox_dontaskagain.Size = new System.Drawing.Size (268, 39);
    this.checkbox_dontaskagain.TabIndex = 17;
    this.checkbox_dontaskagain.Text = "Save as default quality and do not ask again.";
    this.checkbox_dontaskagain.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_dontaskagain.UseVisualStyleBackColor = true;
    this.button_ok.DialogResult = System.Windows.Forms.DialogResult.Cancel;
    this.button_ok.Location = new System.Drawing.Point (205, 126);
    this.button_ok.Name = "button_ok";
    this.button_ok.Size = new System.Drawing.Size (75, 23);
    this.button_ok.TabIndex = 18;
    this.button_ok.Text = "OK";
    this.button_ok.UseVisualStyleBackColor = true;
    this.button_ok.Click += new System.EventHandler (this.Button_okClick);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (299, 161);
    this.Controls.Add (this.button_ok);
    this.Controls.Add (this.checkbox_dontaskagain);
    this.Controls.Add (this.label_choosejpegquality);
    this.Controls.Add (this.textBoxJpegQuality);
    this.Controls.Add (this.trackBarJpegQuality);
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "JpegQualityDialog";
    this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
    this.Text = "JpegQualityDialog";
    ((System.ComponentModel.ISupportInitialize) (this.trackBarJpegQuality)).EndInit ();
    this.ResumeLayout (false);
    this.PerformLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/BugReportForm.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/BugReportForm.Designer.cs.ifdefed" startline="39" endline="99">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (BugReportForm));
    this.labelBugReportInfo = new System.Windows.Forms.Label ();
    this.textBoxDescription = new System.Windows.Forms.TextBox ();
    this.btnClose = new System.Windows.Forms.Button ();
    this.linkLblBugs = new System.Windows.Forms.LinkLabel ();
    this.SuspendLayout ();
    this.labelBugReportInfo.Location = new System.Drawing.Point (12, 9);
    this.labelBugReportInfo.Name = "labelBugReportInfo";
    this.labelBugReportInfo.Size = new System.Drawing.Size (481, 112);
    this.labelBugReportInfo.TabIndex = 0;
    this.labelBugReportInfo.Text = resources.GetString ("labelBugReportInfo.Text");
    this.textBoxDescription.Location = new System.Drawing.Point (12, 153);
    this.textBoxDescription.Multiline = true;
    this.textBoxDescription.Name = "textBoxDescription";
    this.textBoxDescription.Size = new System.Drawing.Size (481, 190);
    this.textBoxDescription.TabIndex = 1;
    this.btnClose.DialogResult = System.Windows.Forms.DialogResult.Cancel;
    this.btnClose.Location = new System.Drawing.Point (354, 349);
    this.btnClose.Name = "btnClose";
    this.btnClose.Size = new System.Drawing.Size (139, 23);
    this.btnClose.TabIndex = 2;
    this.btnClose.Text = "Close";
    this.btnClose.UseVisualStyleBackColor = true;
    this.linkLblBugs.Location = new System.Drawing.Point (12, 127);
    this.linkLblBugs.Name = "linkLblBugs";
    this.linkLblBugs.Size = new System.Drawing.Size (465, 23);
    this.linkLblBugs.TabIndex = 9;
    this.linkLblBugs.TabStop = true;
    this.linkLblBugs.Text = "http://sourceforge.net/tracker/?group_id=191585&atid=937972";
    this.linkLblBugs.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler (this.LinkLblBugsLinkClicked);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.CancelButton = this.btnClose;
    this.ClientSize = new System.Drawing.Size (505, 384);
    this.Controls.Add (this.linkLblBugs);
    this.Controls.Add (this.btnClose);
    this.Controls.Add (this.textBoxDescription);
    this.Controls.Add (this.labelBugReportInfo);
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.Name = "BugReportForm";
    this.Text = "Error";
    this.ResumeLayout (false);
    this.PerformLayout ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="62" endline="67">
void BtnCancelClick (object sender, EventArgs e) {
    this.DialogResult = DialogResult.Cancel;
    InputText.Text = "";
    this.Hide ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="69" endline="75">
void BtnOkClick (object sender, EventArgs e) {
    AppConfig.GetInstance ().Editor_Font = InputText.Font;
    AppConfig.GetInstance ().Store ();
    this.DialogResult = DialogResult.OK;
    this.Hide ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="77" endline="84">
private void setFontStyle () {
    FontStyle style = FontStyle.Regular;
    if (btnBold.Checked)
        style |= FontStyle.Bold;

    if (btnItalic.Checked)
        style |= FontStyle.Italic;

    if (btnUnderline.Checked)
        style |= FontStyle.Underline;

    InputText.Font = new Font (InputText.Font, style);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="86" endline="91">
public void UpdateFromLabel (Label label) {
    updateFromFont (label.Font);
    InputText.ForeColor = label.ForeColor;
    InputText.Text = label.Text;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="93" endline="101">
private void updateFromFont (Font font) {
    comboFonts.Text = font.Name;
    comboFontSize.Text = font.Size.ToString ();
    btnBold.Checked = font.Bold;
    btnItalic.Checked = font.Italic;
    btnUnderline.Checked = font.Underline;
    InputText.Font = font;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="103" endline="106">
void BtnBoldClick (object sender, EventArgs e) {
    setFontStyle ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="108" endline="111">
void BtnItalicClick (object sender, EventArgs e) {
    setFontStyle ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="113" endline="116">
void BtnUnderlineClick (object sender, EventArgs e) {
    setFontStyle ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="118" endline="122">
void ComboFontsSelectedIndexChanged (object sender, EventArgs e) {
    InputText.Font = new Font (comboFonts.SelectedItem.ToString (), InputText.Font.Size);
    setFontStyle ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="124" endline="132">
void ComboFontSizeTextChanged (object sender, EventArgs e) {
    int result = 0;
    if (int.TryParse (comboFontSize.Text, out result)) {
        InputText.Font = new Font (InputText.Font.FontFamily, int.Parse (comboFontSize.Text));
        setFontStyle ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="134" endline="142">
void BtnColorClick (object sender, System.EventArgs e) {
    ColorDialog colorDialog = ColorDialog.GetInstance ();
    colorDialog.ShowDialog ();
    if (colorDialog.DialogResult != DialogResult.Cancel) {
        InputText.ForeColor = colorDialog.Color;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="144" endline="150">
void InputTextKeyDown (object sender, System.Windows.Forms.KeyEventArgs e) {
    if (e.Modifiers.Equals (Keys.Control) && e.KeyCode == Keys.Return) {
        this.BtnOkClick (sender, e);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/TextInputForm.cs.ifdefed" startline="152" endline="162">
private void updateUI () {
    Language lang = Language.GetInstance ();
    this.Text = lang.GetString ("texteditor_title");
    this.btnBold.Text = lang.GetString ("texteditor_bold");
    this.btnItalic.Text = lang.GetString ("texteditor_italic");
    this.btnUnderline.Text = lang.GetString ("texteditor_underline");
    this.btnColor.Text = lang.GetString ("texteditor_color");
    this.btnOk.Text = lang.GetString ("texteditor_apply");
    this.btnCancel.Text = lang.GetString ("texteditor_cancel");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/AboutForm.cs.ifdefed" startline="37" endline="45">
void updateUI () {
    this.Text = lang.GetString ("about_title");
    this.lblLicense.Text = lang.GetString ("about_license");
    this.lblHost.Text = lang.GetString ("about_host");
    this.lblBugs.Text = lang.GetString ("about_bugs");
    this.lblDonations.Text = lang.GetString ("about_donations");
    this.lblIcons.Text = lang.GetString ("about_icons");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/MainForm.Designer.cs.ifdefed" startline="39" endline="206">
private void InitializeComponent () {
    this.components = new System.ComponentModel.Container ();
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (MainForm));
    this.contextMenu = new System.Windows.Forms.ContextMenuStrip (this.components);
    this.contextmenu_capturearea = new System.Windows.Forms.ToolStripMenuItem ();
    this.contextmenu_capturelastregion = new System.Windows.Forms.ToolStripMenuItem ();
    this.contextmenu_capturewindow = new System.Windows.Forms.ToolStripMenuItem ();
    this.contextmenu_capturefullscreen = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator ();
    this.contextmenu_quicksettings = new System.Windows.Forms.ToolStripMenuItem ();
    this.contextmenu_settings = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator ();
    this.contextmenu_help = new System.Windows.Forms.ToolStripMenuItem ();
    this.contextmenu_about = new System.Windows.Forms.ToolStripMenuItem ();
    this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator ();
    this.contextmenu_exit = new System.Windows.Forms.ToolStripMenuItem ();
    this.notifyIcon = new System.Windows.Forms.NotifyIcon (this.components);
    this.pictureBox = new System.Windows.Forms.PictureBox ();
    this.contextMenu.SuspendLayout ();
    ((System.ComponentModel.ISupportInitialize) (this.pictureBox)).BeginInit ();
    this.SuspendLayout ();
    this.contextMenu.Items.AddRange (new System.Windows.Forms.ToolStripItem [] {this.contextmenu_capturearea, this.contextmenu_capturelastregion, this.contextmenu_capturewindow, this.contextmenu_capturefullscreen, this.toolStripSeparator2, this.contextmenu_quicksettings, this.contextmenu_settings, this.toolStripSeparator3, this.contextmenu_help, this.contextmenu_about, this.toolStripSeparator1, this.contextmenu_exit});
    this.contextMenu.Name = "contextMenu";
    this.contextMenu.Size = new System.Drawing.Size (243, 242);
    this.contextmenu_capturearea.Name = "contextmenu_capturearea";
    this.contextmenu_capturearea.ShortcutKeyDisplayString = "Print";
    this.contextmenu_capturearea.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_capturearea.Text = "Capture region";
    this.contextmenu_capturearea.Click += new System.EventHandler (this.CaptureAreaToolStripMenuItemClick);
    this.contextmenu_capturelastregion.Enabled = false;
    this.contextmenu_capturelastregion.Name = "contextmenu_capturelastregion";
    this.contextmenu_capturelastregion.ShortcutKeyDisplayString = "Shift + Print";
    this.contextmenu_capturelastregion.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_capturelastregion.Text = "Capture last region";
    this.contextmenu_capturelastregion.Click += new System.EventHandler (this.Contextmenu_capturelastregionClick);
    this.contextmenu_capturewindow.Name = "contextmenu_capturewindow";
    this.contextmenu_capturewindow.ShortcutKeyDisplayString = "Alt + Print";
    this.contextmenu_capturewindow.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_capturewindow.Text = "Capture window";
    this.contextmenu_capturewindow.Click += new System.EventHandler (this.CaptureWindowToolStripMenuItemClick);
    this.contextmenu_capturefullscreen.Name = "contextmenu_capturefullscreen";
    this.contextmenu_capturefullscreen.ShortcutKeyDisplayString = "Ctrl + Print";
    this.contextmenu_capturefullscreen.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_capturefullscreen.Text = "Capture full screen";
    this.contextmenu_capturefullscreen.Click += new System.EventHandler (this.CaptureFullScreenToolStripMenuItemClick);
    this.toolStripSeparator2.Name = "toolStripSeparator2";
    this.toolStripSeparator2.Size = new System.Drawing.Size (239, 6);
    this.contextmenu_quicksettings.Name = "contextmenu_quicksettings";
    this.contextmenu_quicksettings.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_quicksettings.Text = "Quick settings";
    this.contextmenu_settings.Image = ((System.Drawing.Image) (resources.GetObject ("contextmenu_settings.Image")));
    this.contextmenu_settings.Name = "contextmenu_settings";
    this.contextmenu_settings.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_settings.Text = "Settings";
    this.contextmenu_settings.Click += new System.EventHandler (this.Contextmenu_settingsClick);
    this.toolStripSeparator3.Name = "toolStripSeparator3";
    this.toolStripSeparator3.Size = new System.Drawing.Size (239, 6);
    this.contextmenu_help.Image = ((System.Drawing.Image) (resources.GetObject ("contextmenu_help.Image")));
    this.contextmenu_help.Name = "contextmenu_help";
    this.contextmenu_help.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_help.Text = "Help";
    this.contextmenu_help.Click += new System.EventHandler (this.Contextmenu_helpClick);
    this.contextmenu_about.Name = "contextmenu_about";
    this.contextmenu_about.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_about.Text = "About";
    this.contextmenu_about.Click += new System.EventHandler (this.Contextmenu_aboutClick);
    this.toolStripSeparator1.Name = "toolStripSeparator1";
    this.toolStripSeparator1.Size = new System.Drawing.Size (239, 6);
    this.contextmenu_exit.Image = ((System.Drawing.Image) (resources.GetObject ("contextmenu_exit.Image")));
    this.contextmenu_exit.Name = "contextmenu_exit";
    this.contextmenu_exit.Size = new System.Drawing.Size (242, 22);
    this.contextmenu_exit.Text = "Exit";
    this.contextmenu_exit.Click += new System.EventHandler (this.Contextmenu_exitClick);
    this.notifyIcon.ContextMenuStrip = this.contextMenu;
    this.notifyIcon.Icon = ((System.Drawing.Icon) (resources.GetObject ("notifyIcon.Icon")));
    this.notifyIcon.Text = "Greenshot";
    this.notifyIcon.Visible = true;
    this.pictureBox.Dock = System.Windows.Forms.DockStyle.Fill;
    this.pictureBox.Location = new System.Drawing.Point (0, 0);
    this.pictureBox.Name = "pictureBox";
    this.pictureBox.Size = new System.Drawing.Size (200, 200);
    this.pictureBox.TabIndex = 1;
    this.pictureBox.TabStop = false;
    this.pictureBox.MouseMove += new System.Windows.Forms.MouseEventHandler (this.PictureBoxMouseMove);
    this.pictureBox.MouseDown += new System.Windows.Forms.MouseEventHandler (this.PictureBoxMouseDown);
    this.pictureBox.Paint += new System.Windows.Forms.PaintEventHandler (this.PictureBoxPaint);
    this.pictureBox.MouseUp += new System.Windows.Forms.MouseEventHandler (this.PictureBoxMouseUp);
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (200, 200);
    this.Controls.Add (this.pictureBox);
    this.Cursor = System.Windows.Forms.Cursors.Cross;
    this.DoubleBuffered = true;
    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
    this.Name = "MainForm";
    this.ShowInTaskbar = false;
    this.Text = "Greenshot";
    this.TopMost = true;
    this.Shown += new System.EventHandler (this.MainFormShown);
    this.FormClosing += new System.Windows.Forms.FormClosingEventHandler (this.MainFormFormClosing);
    this.KeyDown += new System.Windows.Forms.KeyEventHandler (this.MainFormKeyDown);
    this.contextMenu.ResumeLayout (false);
    ((System.ComponentModel.ISupportInitialize) (this.pictureBox)).EndInit ();
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/PrintOptionsDialog.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/PrintOptionsDialog.Designer.cs.ifdefed" startline="39" endline="138">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (PrintOptionsDialog));
    this.checkbox_dontaskagain = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowShrink = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowEnlarge = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowCenter = new System.Windows.Forms.CheckBox ();
    this.checkboxAllowRotate = new System.Windows.Forms.CheckBox ();
    this.button_ok = new System.Windows.Forms.Button ();
    this.SuspendLayout ();
    this.checkbox_dontaskagain.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_dontaskagain.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_dontaskagain.Location = new System.Drawing.Point (12, 138);
    this.checkbox_dontaskagain.Name = "checkbox_dontaskagain";
    this.checkbox_dontaskagain.Size = new System.Drawing.Size (331, 39);
    this.checkbox_dontaskagain.TabIndex = 19;
    this.checkbox_dontaskagain.Text = "Save as default and do not ask again.";
    this.checkbox_dontaskagain.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkbox_dontaskagain.UseVisualStyleBackColor = true;
    this.checkboxAllowShrink.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowShrink.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowShrink.Location = new System.Drawing.Point (12, 20);
    this.checkboxAllowShrink.Name = "checkboxAllowShrink";
    this.checkboxAllowShrink.Size = new System.Drawing.Size (331, 39);
    this.checkboxAllowShrink.TabIndex = 21;
    this.checkboxAllowShrink.Text = "Shrink large printouts to paper size.";
    this.checkboxAllowShrink.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowShrink.UseVisualStyleBackColor = true;
    this.checkboxAllowEnlarge.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowEnlarge.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowEnlarge.Location = new System.Drawing.Point (12, 43);
    this.checkboxAllowEnlarge.Name = "checkboxAllowEnlarge";
    this.checkboxAllowEnlarge.Size = new System.Drawing.Size (331, 39);
    this.checkboxAllowEnlarge.TabIndex = 22;
    this.checkboxAllowEnlarge.Text = "Enlarge small printouts to paper size.";
    this.checkboxAllowEnlarge.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowEnlarge.UseVisualStyleBackColor = true;
    this.checkboxAllowCenter.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowCenter.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowCenter.Location = new System.Drawing.Point (12, 90);
    this.checkboxAllowCenter.Name = "checkboxAllowCenter";
    this.checkboxAllowCenter.Size = new System.Drawing.Size (331, 29);
    this.checkboxAllowCenter.TabIndex = 24;
    this.checkboxAllowCenter.Text = "Align printouts centered on the page.";
    this.checkboxAllowCenter.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowCenter.UseVisualStyleBackColor = true;
    this.checkboxAllowRotate.CheckAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowRotate.ImageAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowRotate.Location = new System.Drawing.Point (12, 67);
    this.checkboxAllowRotate.Name = "checkboxAllowRotate";
    this.checkboxAllowRotate.Size = new System.Drawing.Size (331, 39);
    this.checkboxAllowRotate.TabIndex = 23;
    this.checkboxAllowRotate.Text = "Rotate printouts to page orientation.";
    this.checkboxAllowRotate.TextAlign = System.Drawing.ContentAlignment.TopLeft;
    this.checkboxAllowRotate.UseVisualStyleBackColor = true;
    this.button_ok.DialogResult = System.Windows.Forms.DialogResult.Cancel;
    this.button_ok.Location = new System.Drawing.Point (268, 170);
    this.button_ok.Name = "button_ok";
    this.button_ok.Size = new System.Drawing.Size (75, 23);
    this.button_ok.TabIndex = 25;
    this.button_ok.Text = "OK";
    this.button_ok.UseVisualStyleBackColor = true;
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (355, 205);
    this.Controls.Add (this.button_ok);
    this.Controls.Add (this.checkbox_dontaskagain);
    this.Controls.Add (this.checkboxAllowCenter);
    this.Controls.Add (this.checkboxAllowRotate);
    this.Controls.Add (this.checkboxAllowEnlarge);
    this.Controls.Add (this.checkboxAllowShrink);
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = "PrintOptionsDialog";
    this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
    this.Text = "PrintOptionsDialog";
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="29" endline="36">
public static ColorDialog GetInstance () {
    if (uniqueInstance == null) {
        uniqueInstance = new ColorDialog ();
    }
    return uniqueInstance;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="74" endline="85">
private void updateUI () {
    this.Text = lang.GetString ("colorpicker_title");
    this.btnApply.Text = lang.GetString ("colorpicker_apply");
    this.btnTransparent.Text = lang.GetString ("colorpicker_transparent");
    this.labelHtmlColor.Text = lang.GetString ("colorpicker_htmlcolor");
    this.labelRed.Text = lang.GetString ("colorpicker_red");
    this.labelGreen.Text = lang.GetString ("colorpicker_green");
    this.labelBlue.Text = lang.GetString ("colorpicker_blue");
    this.labelAlpha.Text = lang.GetString ("colorpicker_alpha");
    this.labelRecentColors.Text = lang.GetString ("colorpicker_recentcolors");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="88" endline="117">
private void createColorPalette (int x, int y, int w, int h) {
    this.createColorButtonColumn (255, 0, 0, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (255, 255 / 2, 0, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (255, 255, 0, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (255 / 2, 255, 0, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (0, 255, 0, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (0, 255, 255 / 2, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (0, 255, 255, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (0, 255 / 2, 255, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (0, 0, 255, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (255 / 2, 0, 255, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (255, 0, 255, x, y, w, h, 11);
    x += w;
    this.createColorButtonColumn (255, 0, 255 / 2, x, y, w, h, 11);
    x += w + 5;
    this.createColorButtonColumn (255 / 2, 255 / 2, 255 / 2, x, y, w, h, 11);
    this.Controls.AddRange (this.colorButtons.ToArray ());
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="118" endline="126">
private void createColorButtonColumn (int red, int green, int blue, int x, int y, int w, int h, int shades) {
    int shadedColorsNum = (shades - 1) / 2;
    for (int i = 0; i <= shadedColorsNum; i ++) {
        colorButtons.Add (createColorButton (red * i / shadedColorsNum, green * i / shadedColorsNum, blue * i / shadedColorsNum, x, y + i * h, w, h));
        if (i > 0)
            colorButtons.Add (createColorButton (red + (255 - red) * i / shadedColorsNum, green + (255 - green) * i / shadedColorsNum, blue + (255 - blue) * i / shadedColorsNum, x, y + (i + shadedColorsNum) * h, w, h));

    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="127" endline="130">
private Button createColorButton (int red, int green, int blue, int x, int y, int w, int h) {
    return createColorButton (Color.FromArgb (255, red, green, blue), x, y, w, h);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="131" endline="143">
private Button createColorButton (Color color, int x, int y, int w, int h) {
    Button b = new Button ();
    b.BackColor = color;
    b.FlatAppearance.BorderSize = 0;
    b.FlatStyle = FlatStyle.Flat;
    b.Location = new Point (x, y);
    b.Size = new Size (w, h);
    b.TabStop = false;
    b.Click += new System.EventHandler (colorButtonClick);
    toolTip.SetToolTip (b, ColorTranslator.ToHtml (color) + " | R:" + color.R + ", G:" + color.G + ", B:" + color.B);
    return b;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="144" endline="154">
private void createLastUsedColorButtonRow (int x, int y, int w, int h) {
    for (int i = 0; i < 12; i ++) {
        Button b = this.createColorButton (Color.Transparent, x, y, w, h);
        b.Enabled = false;
        recentColorButtons.Add (b);
        x += w;
    }
    this.Controls.AddRange (this.recentColorButtons.ToArray ());
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="158" endline="165">
private void updateRecentColorsButtonRow () {
    for (int i = 0; i < recentColors.Count && i < 12; i ++) {
        recentColorButtons [i].BackColor = recentColors [i];
        recentColorButtons [i].Enabled = true;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="166" endline="192">
private void previewColor (Color c, Control trigger) {
    updateInProgress = true;
    this.colorPanel.BackColor = c;
    if (trigger != this.textBoxHtmlColor) {
        this.textBoxHtmlColor.Text = System.Drawing.ColorTranslator.ToHtml (c);
    } else {
        if (! this.textBoxHtmlColor.Text.StartsWith ("#")) {
            int selStart = this.textBoxHtmlColor.SelectionStart;
            int selLength = this.textBoxHtmlColor.SelectionLength;
            this.textBoxHtmlColor.Text = "#" + this.textBoxHtmlColor.Text;
            this.textBoxHtmlColor.Select (selStart + 1, selLength + 1);
        }
    }
    if (trigger != this.textBoxRed && trigger != this.textBoxGreen && trigger != this.textBoxBlue && trigger != this.textBoxAlpha) {
        this.textBoxRed.Text = c.R.ToString ();
        this.textBoxGreen.Text = c.G.ToString ();
        this.textBoxBlue.Text = c.B.ToString ();
        this.textBoxAlpha.Text = c.A.ToString ();
    }
    updateInProgress = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="194" endline="200">
private void addToRecentColors (Color c) {
    recentColors.Remove (c);
    recentColors.Insert (0, c);
    if (recentColors.Count > 12)
        recentColors.RemoveRange (12, recentColors.Count - 12);

    updateRecentColorsButtonRow ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="204" endline="214">
void TextBoxHexadecimalTextChanged (object sender, System.EventArgs e) {
    if (updateInProgress)
        return;

    TextBox tb = (TextBox) sender;
    string t = tb.Text.Replace ("#", "");
    int i = 0;
    Int32.TryParse (t, System.Globalization.NumberStyles.AllowHexSpecifier, Thread.CurrentThread.CurrentCulture, out i);
    Color c = Color.FromArgb (i);
    Color opaqueColor = Color.FromArgb (255, c.R, c.G, c.B);
    previewColor (opaqueColor, tb);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="215" endline="220">
void TextBoxRGBTextChanged (object sender, System.EventArgs e) {
    if (updateInProgress)
        return;

    TextBox tb = (TextBox) sender;
    previewColor (Color.FromArgb (getColorPartIntFromString (textBoxAlpha.Text), getColorPartIntFromString (textBoxRed.Text), getColorPartIntFromString (textBoxGreen.Text), getColorPartIntFromString (textBoxBlue.Text)), tb);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="221" endline="224">
void TextBoxGotFocus (object sender, System.EventArgs e) {
    this.textBoxHtmlColor.SelectAll ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="225" endline="231">
void TextBoxKeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode == Keys.Return || e.KeyCode == Keys.Enter) {
        addToRecentColors (colorPanel.BackColor);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="235" endline="239">
void colorButtonClick (object sender, System.EventArgs e) {
    Button b = (Button) sender;
    previewColor (b.BackColor, b);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="241" endline="244">
void btnTransparentClick (object sender, System.EventArgs e) {
    colorButtonClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="245" endline="250">
void BtnApplyClick (object sender, System.EventArgs e) {
    this.DialogResult = DialogResult.OK;
    this.Hide ();
    addToRecentColors (colorPanel.BackColor);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ColorDialog.cs.ifdefed" startline="254" endline="261">
private int getColorPartIntFromString (string s) {
    int ret = 0;
    Int32.TryParse (s, out ret);
    if (ret < 0)
        ret = 0;
    else if (ret > 255)
        ret = 255;

    return ret;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="67" endline="138">
private void updateUI () {
    this.Text = lang.GetString ("editor_title");
    this.fileStripMenuItem.Text = lang.GetString ("editor_file");
    this.btnSave.Text = lang.GetString ("editor_save");
    this.saveToolStripMenuItem.Text = lang.GetString ("editor_save");
    this.saveAsToolStripMenuItem.Text = lang.GetString ("editor_saveas");
    this.btnClipboard.Text = lang.GetString ("editor_copyimagetoclipboard");
    this.copyImageToClipboardToolStripMenuItem.Text = lang.GetString ("editor_copyimagetoclipboard");
    this.btnPrint.Text = lang.GetString ("editor_print");
    this.printToolStripMenuItem.Text = lang.GetString ("editor_print") + "...";
    this.closeToolStripMenuItem.Text = lang.GetString ("editor_close");
    this.editToolStripMenuItem.Text = lang.GetString ("editor_edit");
    this.btnCursor.Text = lang.GetString ("editor_cursortool");
    this.btnRect.Text = lang.GetString ("editor_drawrectangle");
    this.addRectangleToolStripMenuItem.Text = lang.GetString ("editor_drawrectangle");
    this.btnEllipse.Text = lang.GetString ("editor_drawellipse");
    this.addEllipseToolStripMenuItem.Text = lang.GetString ("editor_drawellipse");
    this.btnText.Text = lang.GetString ("editor_drawtextbox");
    this.addTextBoxToolStripMenuItem.Text = lang.GetString ("editor_drawtextbox");
    this.btnLine.Text = lang.GetString ("editor_drawline");
    this.drawLineToolStripMenuItem.Text = lang.GetString ("editor_drawline");
    this.btnArrow.Text = lang.GetString ("editor_drawarrow");
    this.drawArrowToolStripMenuItem.Text = lang.GetString ("editor_drawarrow");
    this.btnDelete.Text = lang.GetString ("editor_deleteelement");
    this.removeObjectToolStripMenuItem.Text = lang.GetString ("editor_deleteelement");
    this.btnSettings.Text = lang.GetString ("contextmenu_settings");
    this.preferencesToolStripMenuItem.Text = lang.GetString ("contextmenu_settings");
    this.objectToolStripMenuItem.Text = lang.GetString ("editor_object");
    this.btnCut.Text = lang.GetString ("editor_cuttoclipboard");
    this.cutToolStripMenuItem.Text = lang.GetString ("editor_cuttoclipboard");
    this.btnCopy.Text = lang.GetString ("editor_copytoclipboard");
    this.copyToolStripMenuItem.Text = lang.GetString ("editor_copytoclipboard");
    this.btnPaste.Text = lang.GetString ("editor_pastefromclipboard");
    this.pasteToolStripMenuItem.Text = lang.GetString ("editor_pastefromclipboard");
    this.duplicateToolStripMenuItem.Text = lang.GetString ("editor_duplicate");
    this.arrangeToolStripMenuItem.Text = lang.GetString ("editor_arrange");
    this.upToTopToolStripMenuItem.Text = lang.GetString ("editor_uptotop");
    this.upOneLevelToolStripMenuItem.Text = lang.GetString ("editor_uponelevel");
    this.downOneLevelToolStripMenuItem.Text = lang.GetString ("editor_downonelevel");
    this.downToBottomToolStripMenuItem.Text = lang.GetString ("editor_downtobottom");
    this.btnBorderColor.Text = lang.GetString ("editor_forecolor");
    this.borderColorToolStripMenuItem.Text = lang.GetString ("editor_forecolor");
    this.btnBackColor.Text = lang.GetString ("editor_backcolor");
    this.backgroundColorToolStripMenuItem.Text = lang.GetString ("editor_backcolor");
    this.labelLineThickness.Text = lang.GetString ("editor_thickness");
    this.lineThicknessToolStripMenuItem.Text = lang.GetString ("editor_thickness");
    this.btnArrowHeads.Text = lang.GetString ("editor_arrowheads");
    this.arrowHeadsToolStripMenuItem.Text = lang.GetString ("editor_arrowheads");
    this.arrowHeadsStartPointToolStripMenuItem.Text = lang.GetString ("editor_arrowheadsstartpoint");
    this.arrowHeadsStartPointToolStripMenuItem1.Text = lang.GetString ("editor_arrowheadsstartpoint");
    this.arrowHeadsEndPointToolStripMenuItem.Text = lang.GetString ("editor_arrowheadsendpoint");
    this.arrowHeadsEndPointToolStripMenuItem1.Text = lang.GetString ("editor_arrowheadsendpoint");
    this.arrowHeadsBothToolStripMenuItem.Text = lang.GetString ("editor_arrowheadsboth");
    this.arrowHeadsBothToolStripMenuItem1.Text = lang.GetString ("editor_arrowheadsboth");
    this.arrowHeadsNoneToolStripMenuItem.Text = lang.GetString ("editor_arrowheadsnone");
    this.arrowHeadsNoneToolStripMenuItem1.Text = lang.GetString ("editor_arrowheadsnone");
    this.helpToolStripMenuItem.Text = lang.GetString ("contextmenu_help");
    this.helpToolStripMenuItem1.Text = lang.GetString ("contextmenu_help");
    this.btnHelp.Text = lang.GetString ("contextmenu_help");
    this.aboutToolStripMenuItem.Text = lang.GetString ("contextmenu_about");
    this.copyPathMenuItem.Text = lang.GetString ("editor_copypathtoclipboard");
    this.openDirectoryMenuItem.Text = lang.GetString ("editor_opendirinexplorer");
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="140" endline="143">
public void SetImage (Image img) {
    surface.Image = img;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="144" endline="151">
public void SetImagePath (string fullpath) {
    this.lastSaveFullPath = fullpath;
    if (fullpath == null)
        return;

    updateStatusLabel (lang.GetString ("editor_imagesaved").Replace ("%storagelocation%", fullpath), fileSavedStatusContextMenu);
    this.Text = lang.GetString ("editor_title") + " - " + Path.GetFileName (fullpath);
    this.saveToolStripMenuItem.Enabled = true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="153" endline="182">
private void surfaceMovingElementChanged (object sender, DrawableContainerList selectedElements) {
    bool elementSelected = (selectedElements.Count > 0);
    this.btnCopy.Enabled = elementSelected;
    this.btnCut.Enabled = elementSelected;
    this.btnDelete.Enabled = elementSelected;
    this.copyToolStripMenuItem.Enabled = elementSelected;
    this.cutToolStripMenuItem.Enabled = elementSelected;
    this.duplicateToolStripMenuItem.Enabled = elementSelected;
    this.removeObjectToolStripMenuItem.Enabled = elementSelected;
    this.borderColorToolStripMenuItem.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.LINECOLOR));
    this.btnBorderColor.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.LINECOLOR));
    this.backgroundColorToolStripMenuItem.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.FILLCOLOR));
    this.btnBackColor.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.FILLCOLOR));
    this.lineThickness1ToolStripMenuItem.Enabled = this.lineThicknessToolStripMenuItem.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.THICKNESS));
    this.comboBoxThickness.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.THICKNESS));
    this.btnArrowHeads.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.ARROWHEADS));
    this.arrowHeadsToolStripMenuItem.Enabled = (elementSelected && selectedElements.PropertySupported (DrawableContainer.Property.ARROWHEADS));
    bool push = surface.CanPushSelectionDown ();
    bool pull = surface.CanPullSelectionUp ();
    this.arrangeToolStripMenuItem.Enabled = (push || pull);
    if (this.arrangeToolStripMenuItem.Enabled) {
        this.upToTopToolStripMenuItem.Enabled = pull;
        this.upOneLevelToolStripMenuItem.Enabled = pull;
        this.downToBottomToolStripMenuItem.Enabled = push;
        this.downOneLevelToolStripMenuItem.Enabled = push;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="185" endline="196">
void SaveToolStripMenuItemClick (object sender, System.EventArgs e) {
    try {
        ImageOutput.Save (surface.GetImageForExport (), lastSaveFullPath);
        updateStatusLabel (lang.GetString ("editor_imagesaved").Replace ("%storagelocation%", lastSaveFullPath), fileSavedStatusContextMenu);
    }
    catch (System.Runtime.InteropServices.ExternalException) {
        MessageBox.Show (lang.GetString ("error_nowriteaccess").Replace ("%path%", lastSaveFullPath).Replace (@"\\", @"\"), lang.GetString ("error"));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="197" endline="201">
void BtnSaveClick (object sender, EventArgs e) {
    if (lastSaveFullPath != null)
        SaveToolStripMenuItemClick (sender, e);
    else
        SaveAsToolStripMenuItemClick (sender, e);

}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="203" endline="215">
void SaveAsToolStripMenuItemClick (object sender, System.EventArgs e) {
    lastSaveFullPath = ImageOutput.SaveWithDialog (surface.GetImageForExport ());
    if (lastSaveFullPath != null) {
        SetImagePath (lastSaveFullPath);
        updateStatusLabel (lang.GetString ("editor_imagesaved").Replace ("%storagelocation%", lastSaveFullPath), fileSavedStatusContextMenu);
    } else {
        clearStatusLabel ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="217" endline="229">
void CopyImageToClipboardToolStripMenuItemClick (object sender, System.EventArgs e) {
    try {
        ImageOutput.PrepareClipboardObject ();
        ImageOutput.CopyToClipboard (surface.GetImageForExport ());
        updateStatusLabel (lang.GetString ("editor_storedtoclipboard"));
    }
    catch (Exception) {
        updateStatusLabel (lang.GetString ("editor_clipboardfailed"));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="230" endline="233">
void BtnClipboardClick (object sender, EventArgs e) {
    this.CopyImageToClipboardToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="234" endline="242">
void PrintToolStripMenuItemClick (object sender, EventArgs e) {
    PrintHelper ph = new PrintHelper (surface.GetImageForExport ());
    PrinterSettings ps = ph.PrintWithDialog ();
    if (ps != null) {
        updateStatusLabel (lang.GetString ("editor_senttoprinter").Replace ("%printername%", ps.PrinterName));
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="243" endline="246">
void BtnPrintClick (object sender, EventArgs e) {
    PrintToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="248" endline="251">
void CloseToolStripMenuItemClick (object sender, System.EventArgs e) {
    this.Close ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="255" endline="264">
void BtnEllipseClick (object sender, EventArgs e) {
    surface.DrawingMode = Surface.DrawingModes.Ellipse;
    btnCursor.Checked = false;
    btnRect.Checked = false;
    btnEllipse.Checked = true;
    btnText.Checked = false;
    btnLine.Checked = false;
    btnArrow.Checked = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="266" endline="275">
void BtnCursorClick (object sender, EventArgs e) {
    surface.DrawingMode = Surface.DrawingModes.None;
    btnCursor.Checked = true;
    btnRect.Checked = false;
    btnEllipse.Checked = false;
    btnText.Checked = false;
    btnLine.Checked = false;
    btnArrow.Checked = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="277" endline="286">
void BtnRectClick (object sender, EventArgs e) {
    surface.DrawingMode = Surface.DrawingModes.Rect;
    btnCursor.Checked = false;
    btnRect.Checked = true;
    btnEllipse.Checked = false;
    btnText.Checked = false;
    btnLine.Checked = false;
    btnArrow.Checked = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="288" endline="297">
void BtnTextClick (object sender, EventArgs e) {
    surface.DrawingMode = Surface.DrawingModes.Text;
    btnCursor.Checked = false;
    btnRect.Checked = false;
    btnEllipse.Checked = false;
    btnText.Checked = true;
    btnLine.Checked = false;
    btnArrow.Checked = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="299" endline="308">
void BtnLineClick (object sender, EventArgs e) {
    surface.DrawingMode = Surface.DrawingModes.Line;
    btnCursor.Checked = false;
    btnRect.Checked = false;
    btnEllipse.Checked = false;
    btnText.Checked = false;
    btnLine.Checked = true;
    btnArrow.Checked = false;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="310" endline="319">
void BtnArrowClick (object sender, EventArgs e) {
    surface.DrawingMode = Surface.DrawingModes.Arrow;
    btnCursor.Checked = false;
    btnRect.Checked = false;
    btnEllipse.Checked = false;
    btnText.Checked = false;
    btnLine.Checked = false;
    btnArrow.Checked = true;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="321" endline="324">
void AddRectangleToolStripMenuItemClick (object sender, System.EventArgs e) {
    BtnRectClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="326" endline="329">
void AddEllipseToolStripMenuItemClick (object sender, System.EventArgs e) {
    BtnEllipseClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="331" endline="334">
void AddTextBoxToolStripMenuItemClick (object sender, System.EventArgs e) {
    BtnTextClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="336" endline="339">
void DrawLineToolStripMenuItemClick (object sender, System.EventArgs e) {
    BtnLineClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="341" endline="344">
void DrawArrowToolStripMenuItemClick (object sender, EventArgs e) {
    BtnArrowClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="347" endline="350">
void RemoveObjectToolStripMenuItemClick (object sender, System.EventArgs e) {
    surface.RemoveSelectedElements ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="351" endline="354">
void BtnDeleteClick (object sender, EventArgs e) {
    RemoveObjectToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="358" endline="365">
void CutToolStripMenuItemClick (object sender, System.EventArgs e) {
    if (surface.CutSelectedElements ()) {
        this.btnPaste.Enabled = true;
        this.pasteToolStripMenuItem.Enabled = true;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="366" endline="369">
void BtnCutClick (object sender, System.EventArgs e) {
    CutToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="371" endline="378">
void CopyToolStripMenuItemClick (object sender, System.EventArgs e) {
    if (surface.CopySelectedElements ()) {
        this.btnPaste.Enabled = true;
        this.pasteToolStripMenuItem.Enabled = true;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="379" endline="382">
void BtnCopyClick (object sender, System.EventArgs e) {
    CopyToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="384" endline="387">
void PasteToolStripMenuItemClick (object sender, System.EventArgs e) {
    surface.PasteElementFromClipboard ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="388" endline="391">
void BtnPasteClick (object sender, System.EventArgs e) {
    PasteToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="393" endline="396">
void DuplicateToolStripMenuItemClick (object sender, System.EventArgs e) {
    surface.DuplicateSelectedElements ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="400" endline="403">
void UpOneLevelToolStripMenuItemClick (object sender, EventArgs e) {
    surface.PullElementsUp ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="405" endline="408">
void DownOneLevelToolStripMenuItemClick (object sender, EventArgs e) {
    surface.PushElementsDown ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="410" endline="413">
void UpToTopToolStripMenuItemClick (object sender, EventArgs e) {
    surface.PullElementsToTop ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="415" endline="418">
void DownToBottomToolStripMenuItemClick (object sender, EventArgs e) {
    surface.PushElementsToBottom ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="420" endline="423">
void BtnBorderColorClick (object sender, System.EventArgs e) {
    SelectBorderColorToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="424" endline="427">
void BtnBackColorClick (object sender, System.EventArgs e) {
    SelectBackgroundColorToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="429" endline="440">
void SelectBorderColorToolStripMenuItemClick (object sender, System.EventArgs e) {
    colorDialog.Color = surface.ForeColor;
    colorDialog.ShowDialog ();
    if (colorDialog.DialogResult != DialogResult.Cancel) {
        conf.Editor_ForeColor = colorDialog.Color;
        conf.Editor_RecentColors = colorDialog.RecentColors;
        conf.Store ();
        surface.ForeColor = colorDialog.Color;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="442" endline="453">
void SelectBackgroundColorToolStripMenuItemClick (object sender, System.EventArgs e) {
    colorDialog.Color = surface.BackColor;
    colorDialog.ShowDialog ();
    if (colorDialog.DialogResult != DialogResult.Cancel) {
        conf.Editor_BackColor = colorDialog.Color;
        conf.Editor_RecentColors = colorDialog.RecentColors;
        conf.Store ();
        surface.BackColor = colorDialog.Color;
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="454" endline="468">
void ThicknessComboBoxChanged (object sender, System.EventArgs e) {
    ToolStripComboBox cb = (ToolStripComboBox) sender;
    try {
        int t = Int32.Parse (cb.Text);
        surface.Thickness = t;
        conf.Editor_Thickness = t;
        conf.Store ();
    }
    catch (Exception) {
        cb.Text = conf.Editor_Thickness.ToString ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="470" endline="484">
void LineThicknessValueToolStripMenuItemClick (object sender, System.EventArgs e) {
    ToolStripMenuItem cb = (ToolStripMenuItem) sender;
    try {
        int t = Int32.Parse (cb.Text);
        surface.Thickness = t;
        conf.Editor_Thickness = t;
        conf.Store ();
    }
    catch (Exception) {
        cb.Text = conf.Editor_Thickness.ToString ();
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="486" endline="489">
void ArrowHeadsStartPointToolStripMenuItemClick (object sender, System.EventArgs e) {
    surface.ArrowHead = Surface.ArrowHeads.Start;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="491" endline="494">
void ArrowHeadsEndPointToolStripMenuItemClick (object sender, System.EventArgs e) {
    surface.ArrowHead = Surface.ArrowHeads.End;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="496" endline="499">
void ArrowHeadsBothToolStripMenuItemClick (object sender, EventArgs e) {
    surface.ArrowHead = Surface.ArrowHeads.Both;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="501" endline="504">
void ArrowHeadsNoneToolStripMenuItemClick (object sender, EventArgs e) {
    surface.ArrowHead = Surface.ArrowHeads.None;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="508" endline="511">
void HelpToolStripMenuItem1Click (object sender, System.EventArgs e) {
    new HelpBrowserForm (conf.Ui_Language).Show ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="512" endline="515">
void AboutToolStripMenuItemClick (object sender, System.EventArgs e) {
    new AboutForm ().Show ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="516" endline="519">
void PreferencesToolStripMenuItemClick (object sender, System.EventArgs e) {
    new SettingsForm ().Show ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="520" endline="523">
void BtnSettingsClick (object sender, System.EventArgs e) {
    PreferencesToolStripMenuItemClick (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="524" endline="527">
void BtnHelpClick (object sender, System.EventArgs e) {
    HelpToolStripMenuItem1Click (sender, e);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="531" endline="536">
void ImageEditorFormActivated (object sender, EventArgs e) {
    bool b = checkClipboardContents ();
    this.btnPaste.Enabled = b;
    this.pasteToolStripMenuItem.Enabled = b;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="538" endline="543">
void ImageEditorFormFormClosing (object sender, FormClosingEventArgs e) {
    conf.Editor_WindowSize = Size;
    conf.Store ();
    System.GC.Collect ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="545" endline="571">
void ImageEditorFormKeyUp (object sender, KeyEventArgs e) {
    if (Keys.Escape.Equals (e.KeyCode)) {
        BtnCursorClick (sender, e);
    } else if (Keys.R.Equals (e.KeyCode)) {
        BtnRectClick (sender, e);
    } else if (Keys.E.Equals (e.KeyCode)) {
        BtnEllipseClick (sender, e);
    } else if (Keys.L.Equals (e.KeyCode)) {
        BtnLineClick (sender, e);
    } else if (Keys.A.Equals (e.KeyCode)) {
        BtnArrowClick (sender, e);
    } else if (Keys.T.Equals (e.KeyCode)) {
        BtnTextClick (sender, e);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="575" endline="579">
protected override bool ProcessCmdKey (ref Message msg, Keys k) {
    surface.ProcessCmdKey (k);
    return base.ProcessCmdKey (ref msg, k);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="583" endline="589">
private bool checkClipboardContents () {
    IDataObject ido = Clipboard.GetDataObject ();
    string [] df = ido.GetFormats ();
    return ido.GetDataPresent (typeof (DrawableContainer));
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="595" endline="599">
private void updateStatusLabel (string text, ContextMenuStrip contextMenu) {
    statusLabel.Text = text;
    statusStrip1.ContextMenuStrip = contextMenu;
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="601" endline="604">
private void updateStatusLabel (string text) {
    updateStatusLabel (text, null);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="605" endline="608">
private void clearStatusLabel () {
    updateStatusLabel (null, null);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="610" endline="617">
void StatusLabelClicked (object sender, MouseEventArgs e) {
    ToolStrip ss = (StatusStrip) ((ToolStripStatusLabel) sender).Owner;
    if (ss.ContextMenuStrip != null) {
        ss.ContextMenuStrip.Show (ss, e.X, e.Y);
    }
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="619" endline="622">
void CopyPathMenuItemClick (object sender, EventArgs e) {
    Clipboard.SetText (lastSaveFullPath);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Forms/ImageEditorForm.cs.ifdefed" startline="624" endline="632">
void OpenDirectoryMenuItemClick (object sender, EventArgs e) {
    ProcessStartInfo psi = new ProcessStartInfo ("explorer");
    psi.Arguments = Path.GetDirectoryName (lastSaveFullPath);
    psi.UseShellExecute = false;
    Process p = new Process ();
    p.StartInfo = psi;
    p.Start ();
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Help/HelpBrowserForm.Designer.cs.ifdefed" startline="22" endline="32">
protected override void Dispose (bool disposing) {
    if (disposing) {
        if (components != null) {
            components.Dispose ();
        }
    }
    base.Dispose (disposing);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Help/HelpBrowserForm.Designer.cs.ifdefed" startline="39" endline="64">
private void InitializeComponent () {
    System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof (HelpBrowserForm));
    this.webBrowser1 = new System.Windows.Forms.WebBrowser ();
    this.SuspendLayout ();
    this.webBrowser1.Dock = System.Windows.Forms.DockStyle.Fill;
    this.webBrowser1.Location = new System.Drawing.Point (0, 0);
    this.webBrowser1.MinimumSize = new System.Drawing.Size (20, 20);
    this.webBrowser1.Name = "webBrowser1";
    this.webBrowser1.Size = new System.Drawing.Size (412, 560);
    this.webBrowser1.TabIndex = 0;
    this.AutoScaleDimensions = new System.Drawing.SizeF (6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size (412, 560);
    this.Controls.Add (this.webBrowser1);
    this.Icon = ((System.Drawing.Icon) (resources.GetObject ("$this.Icon")));
    this.Name = "HelpBrowserForm";
    this.Text = "Greenshot Help";
    this.ResumeLayout (false);
}
</source>
<source file="examples/cs/Greenshot-SRC-0.7.009/Help/HelpBrowserForm.cs.ifdefed" startline="45" endline="49">
private void updateUI () {
    this.Text = lang.GetString ("help_title");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="42" endline="69">
public string removeTAG (string HTML, string startTAG, string endTAG) {
    int startTAGPos, endTAGPos;
    bool bAgain;
    do
        {
            bAgain = false;
            startTAGPos = HTML.IndexOf (startTAG, 0, StringComparison.CurrentCultureIgnoreCase);
            if (startTAGPos >= 0) {
                endTAGPos = HTML.IndexOf (endTAG, startTAGPos + 1, StringComparison.CurrentCultureIgnoreCase);
                if (endTAGPos > startTAGPos) {
                    HTML = HTML.Remove (startTAGPos, endTAGPos - startTAGPos + endTAG.Length);
                    bAgain = true;
                }
            }
            System.Threading.Thread.Sleep (0);
        } while (bAgain);
    return HTML;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="74" endline="77">
private string removeHtmlEntity (string s) {
    return Regex.Replace (s, "&[^;]{,10}?;", " ");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="79" endline="90">
public string getTitle () {
    Regex regexExtractTitle = new Regex ("<title>\\s*(?<title>[^<]*)\\s*</title>", RegexOptions.IgnoreCase);
    MatchCollection mcTitle = regexExtractTitle.Matches (HTML);
    foreach (Match mMatch in mcTitle) {
        return mMatch.Groups ["title"].ToString ();
    }
    return string.Empty;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="92" endline="126">
public string checkMETA () {
    Regex regexExtractContent = new Regex ("content\\s*=\\s*(?:(?:[\\\"\\\'](?<text>[^\\\"\\\']*)[\\\"\\\'])|(?<text>[^\\s>]*))", RegexOptions.IgnoreCase);
    MatchCollection mcMETA = regexExtractMETA.Matches (HTML);
    string META_CONTENT;
    foreach (Match mMatch in mcMETA) {
        META_CONTENT = string.Empty;
        MatchCollection mcMETA_CONTENT = regexExtractContent.Matches (mMatch.Groups ["meta"].ToString ());
        foreach (Match mMatchContent in mcMETA_CONTENT) {
            META_CONTENT = mMatchContent.Groups ["text"].ToString ();
        }
        if (mMatch.Groups ["name"].ToString ().Equals ("robots", StringComparison.CurrentCultureIgnoreCase) == true) {
            handleMETA_ROBOTS (META_CONTENT);
        } else if (mMatch.Groups ["name"].ToString ().Equals ("description", StringComparison.CurrentCultureIgnoreCase) == true) {
        } else if (mMatch.Groups ["name"].ToString ().Equals ("keywords", StringComparison.CurrentCultureIgnoreCase) == true) {
        }
    }
    return string.Empty;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="128" endline="141">
public void handleMETA_ROBOTS (string meta_content) {
    string [] meta_robots_dir = meta_content.Split (',');
    for (int i = 0; i < meta_robots_dir.Length; i ++) {
        if (meta_robots_dir [i].Trim ().ToLower () == "noindex")
            META_ROBOTS_INDEX = false;

        if (meta_robots_dir [i].Trim ().ToLower () == "nofollow")
            META_ROBOTS_FOLLOW = false;

    }
    return;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="143" endline="150">
public string removeUnWantedChars (string HTML) {
    HTML = Regex.Replace (HTML, "[^\\w;&#@\\.:/\\?]", " ");
    return Regex.Replace (HTML, "\\s+", " ");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="153" endline="171">
public string UnHTML (string HTML) {
    HTML = removeTAG (HTML, "<!--", "-->");
    HTML = removeTAG (HTML, "<script", "</script>");
    HTML = removeTAG (HTML, "<style", "</style>");
    HTML = Regex.Replace (HTML, "<[^>]+?>", " ", RegexOptions.Multiline);
    HTML = removeHtmlEntity (HTML);
    HTML = removeUnWantedChars (HTML);
    HTML = HTML.Trim ();
    return HTML;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/html.cs.ifdefed" startline="188" endline="346">
public int GetURLs (string HTML, page parentPage) {
    int nRetURLs = 0;
    page baseURL = null;
    MatchCollection mcURLs = regexExtractURLs.Matches (HTML);
    try {
        foreach (Match mMatch in mcURLs) {
            string strURL = mMatch.Groups ["url"].ToString ().Trim ();
            string strAnchorText = UnHTML (mMatch.Groups ["anchor"].ToString ().Trim ());
            if (mMatch.Groups ["base"].ToString ().Length > 0 && strURL.Length > 0) {
                baseURL = new page (strURL, "base", null);
                if (! baseURL.isValidPage) {
                    nsGlobalOutput.output.write ("INVALID BASE URL FOUND: " + strURL);
                    baseURL = null;
                }
            }
            page pageNewPage;
            if (baseURL == null)
                pageNewPage = new page (strURL, strAnchorText, parentPage);
            else {
                pageNewPage = new page (strURL, strAnchorText, baseURL);
            }
            if (pageNewPage.isValidPage) {
                nRetURLs ++;
                GlobalVars.threadsVars.mutexRelsList.WaitOne ();
                try {
                    GlobalVars.relsList.addRel (parentPage, pageNewPage);
                }
                catch (Exception e) {
                    nsGlobalOutput.output.write ("Error Adding Rel: " + e.Message);
                }
                finally {
                    GlobalVars.threadsVars.mutexRelsList.ReleaseMutex ();
                }
                if (pageNewPage._hostname == GlobalVars.threadsVars.currentDomain._hostname && pageNewPage._port == GlobalVars.threadsVars.currentDomain._port) {
                    GlobalVars.threadsVars.mutexAccessURLList.WaitOne ();
                    try {
                        GlobalVars.urlsLists.addURL (pageNewPage);
                    }
                    catch (Exception e) {
                        nsGlobalOutput.output.write ("Error Adding URL: " + e.Message);
                    }
                    finally {
                        GlobalVars.threadsVars.mutexAccessURLList.ReleaseMutex ();
                    }
                } else {
                    if (GlobalVars.args.addExternalHosts == true) {
                        GlobalVars.threadsVars.mutexAccessExternURLList.WaitOne ();
                        try {
                            GlobalVars.externUrlsLists.addURL (pageNewPage);
                        }
                        catch (Exception e) {
                            nsGlobalOutput.output.write ("Error Adding External URL: " + e.Message);
                        }
                        finally {
                            GlobalVars.threadsVars.mutexAccessExternURLList.ReleaseMutex ();
                        }
                    }
                }
            }
        }
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("Error Adding External URL: " + e.Message);
    }
    if (GlobalVars.args.indexImages == true) {
        MatchCollection mcImages = regexExtractImages.Matches (HTML);
        foreach (Match mMatch in mcImages) {
            string strURL = mMatch.Groups ["url"].ToString ().Trim ();
            page pageNewPage;
            if (baseURL == null)
                pageNewPage = new page (strURL, "", parentPage);
            else {
                pageNewPage = new page (strURL, "", baseURL);
            }
            if (pageNewPage.isValidPage) {
                string imgAlt = regexExtractImagesALT.Match (mMatch.Value).Groups ["text"].ToString ();
                string imgTitle = regexExtractImagesTITLE.Match (mMatch.Value).Groups ["text"].ToString ();
                GlobalVars.threadsVars.mutexAccessURLList.WaitOne ();
                try {
                    GlobalVars.imagesLists.addURL (parentPage, pageNewPage, imgAlt, imgTitle);
                }
                catch (Exception e) {
                    nsGlobalOutput.output.write ("Error Adding URL: " + e.Message);
                }
                finally {
                    GlobalVars.threadsVars.mutexAccessURLList.ReleaseMutex ();
                }
            }
        }
    }
    return nRetURLs;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/http.cs.ifdefed" startline="33" endline="66">
public string binaryStream2MD5File (page p, BinaryReader binStream, string contentType, string contentLength) {
    string appPath = System.AppDomain.CurrentDomain.BaseDirectory.ToString ();
    md5 MD5 = new md5 ();
    string fullPath = appPath + MD5.compute (p._page);
    nsGlobalOutput.output.write ("\n + Downloading " + p.GenerateURL () + " ... ");
    nsGlobalOutput.output.write ("   - Content-Type: " + contentType);
    nsGlobalOutput.output.write ("   - Content-Length: " + contentLength + " bytes \n");
    try {
        int BUFFER_SIZE = 4096;
        byte [] buf = new byte [BUFFER_SIZE];
        System.IO.FileStream stream = new System.IO.FileStream (fullPath, System.IO.FileMode.Create);
        int n = binStream.Read (buf, 0, BUFFER_SIZE);
        while (n > 0) {
            stream.Write (buf, 0, n);
            n = binStream.Read (buf, 0, BUFFER_SIZE);
        }
        stream.Close ();
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("Error: " + e.Message);
    }
    finally {
        binStream.Close ();
    }
    return fullPath;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/http.cs.ifdefed" startline="68" endline="82">
public bool deleteFile (string filename) {
    try {
        FileInfo f = new FileInfo (filename);
        f.Delete ();
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("Error: " + e.Message);
        return false;
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/http.cs.ifdefed" startline="84" endline="212">
public string getURL (string URL, page p, bool followRedirects) {
    errorString = String.Empty;
    contentType = String.Empty;
    statusCode = 0;
    HTML = String.Empty;
    try {
        HttpWebRequest request = HttpWebRequest.Create (URL) as HttpWebRequest;
        request.UserAgent = GlobalVars.OpenWebSpider.USERAGENT;
        request.Timeout = GlobalVars.args.reqTimeout * 1000;
        if (followRedirects) {
            request.AllowAutoRedirect = true;
            request.MaximumAutomaticRedirections = 5;
        } else
            request.AllowAutoRedirect = false;

        HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
        if (response.CharacterSet == null)
            return HTML;

        Encoding responseEncoding;
        responseEncoding = Encoding.UTF8;
        if (response.CharacterSet.Trim () != "")
            responseEncoding = Encoding.GetEncoding (response.CharacterSet);

        StreamReader sr = new StreamReader (response.GetResponseStream (), responseEncoding);
        BinaryReader binaryStream = new BinaryReader (response.GetResponseStream ());
        statusCode = (int) response.StatusCode;
        contentType = response.Headers ["Content-Type"];
        if (contentType.StartsWith ("text", StringComparison.CurrentCultureIgnoreCase))
            HTML = sr.ReadToEnd ();
        else if (GlobalVars.args.indexMP3 && contentType.ToLower () == "audio/mpeg") {
            if (p != null)
                if (p.isValidPage && p._hostID > 0) {
                    string fullPath = binaryStream2MD5File (p, binaryStream, response.Headers ["Content-Type"], response.Headers ["Content-Length"]);
                    mp3 MP3 = new mp3 (fullPath);
                    deleteFile (fullPath);
                    MP3.mp3Size = int.Parse (response.Headers ["Content-Length"]);
                    db __db = new db ();
                    __db.indexMP3 (p, MP3);
                }

        } else if (GlobalVars.args.indexPDF && contentType.ToLower () == "application/pdf") {
            if (p != null)
                if (p.isValidPage && p._hostID > 0) {
                    string fullPath = binaryStream2MD5File (p, binaryStream, response.Headers ["Content-Type"], response.Headers ["Content-Length"]);
                    pdf PDF = new pdf (fullPath);
                    deleteFile (fullPath);
                    db __db = new db ();
                    __db.indexPDF (p, int.Parse (response.Headers ["Content-Length"]), PDF.pdfText);
                }

        } else
            HTML = string.Empty;

        Encoding utf8 = Encoding.Unicode;
        byte [] responseEncodingBytes = responseEncoding.GetBytes (HTML);
        byte [] utf8Bytes = Encoding.Convert (responseEncoding, utf8, responseEncodingBytes);
        HTML = utf8.GetString (utf8Bytes);
        sr.Close ();
    }
    catch (WebException e) {
        HttpWebResponse response = (HttpWebResponse) e.Response;
        if (response != null) {
            statusCode = (int) response.StatusCode;
            if (response.StatusCode == HttpStatusCode.Unauthorized) {
                string challenge = null;
                challenge = response.GetResponseHeader ("WWW-Authenticate");
                if (challenge != null)
                    errorString = "The following challenge was raised by the server:" + challenge;

            } else
                errorString = "The following WebException was raised : " + e.Message;

        } else
            errorString = "Response Received from server was null";

    }
    catch (Exception e) {
        errorString = "The following Exception was raised :" + e.Message;
    }
    return HTML;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/http.cs.ifdefed" startline="214" endline="217">
public string getURL (page p, bool followRedirects) {
    return getURL (p.GenerateURL (), p, followRedirects);
}
</source>
<source file="examples/cs/OpenWebSpiderCS/limits.cs.ifdefed" startline="58" endline="122">
public static bool checkLimits () {
    if (useHostlist_Extras_limits == true) {
        if (he_maxPages > 0 && curPages > he_maxPages) {
            nsGlobalOutput.output.write (" + Max number of indexed pages exceeded!");
            return false;
        }
        if (he_maxKb > 0 && (curBytes / 1024) > he_maxKb) {
            nsGlobalOutput.output.write (" + Max number of Kb downloaded exceeded!");
            return false;
        }
        if (he_maxSeconds > 0 && ((DateTime.Now.Ticks - startTime) / 10000000) > he_maxSeconds) {
            nsGlobalOutput.output.write (" + Max number of seconds exceeded!");
            return false;
        }
        if (he_maxErrorCodes > 0 && curErrorCodes > he_maxErrorCodes) {
            nsGlobalOutput.output.write (" + Max number of HTTP Error codes exceeded!");
            return false;
        }
    } else {
        if (maxPages > 0 && curPages > maxPages) {
            nsGlobalOutput.output.write (" + Max number of indexed pages exceeded!");
            return false;
        }
        if (maxKb > 0 && (curBytes / 1024) > maxKb) {
            nsGlobalOutput.output.write (" + Max number of Kb downloaded exceeded!");
            return false;
        }
        if (maxSeconds > 0 && ((DateTime.Now.Ticks - startTime) / 10000000) > maxSeconds) {
            nsGlobalOutput.output.write (" + Max number of seconds exceeded!");
            return false;
        }
        if (maxErrorCodes > 0 && curErrorCodes > maxErrorCodes) {
            nsGlobalOutput.output.write (" + Max number of HTTP Error codes exceeded!");
            return false;
        }
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/limits.cs.ifdefed" startline="127" endline="188">
public static void loadHostlistExtraLimits (int host_id) {
    IDataReader reader;
    useHostlist_Extras_limits = false;
    he_maxPages = 0;
    he_maxDepth = - 1;
    he_maxSeconds = 0;
    he_maxKb = 0;
    he_maxErrorCodes = 0;
    GlobalVars.limits.he_regex_include_pages = string.Empty;
    GlobalVars.limits.he_regex_exclude_pages = string.Empty;
    reader = GlobalVars.mysqlConn.connHostList.getSQLResult ("SELECT " + "  `max_pages`" + ", `max_level`" + ", `max_seconds`" + ", `max_bytes`" + ", `max_HTTP_errors`" + ", `include_pages_regex`" + ", `exclude_pages_regex`" + "  FROM hostlist_extras" + "  WHERE host_id = " + host_id + "  LIMIT 1");
    if (reader == null)
        return;

    try {
        if (reader.Read ()) {
            useHostlist_Extras_limits = true;
            he_maxPages = uint.Parse ((string) reader [0].ToString ());
            he_maxDepth = int.Parse ((string) reader [1].ToString ());
            he_maxSeconds = uint.Parse ((string) reader [2].ToString ());
            he_maxKb = uint.Parse ((string) reader [3].ToString ());
            he_maxErrorCodes = uint.Parse ((string) reader [4].ToString ());
            he_regex_include_pages = (string) reader [5].ToString ().Trim ();
            he_regex_exclude_pages = (string) reader [6].ToString ().Trim ();
        }
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("\n   - Error [loadHostlistExtraLimits()]: " + e.Message + "\n\n\n");
    }
    finally {
        reader.Close ();
        reader = null;
    }
    return;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/limits.cs.ifdefed" startline="190" endline="222">
public static void showLimits () {
    nsGlobalOutput.output.write ("");
    if (useHostlist_Extras_limits == false) {
        nsGlobalOutput.output.write ("\n + Limits [via command line or default]");
        nsGlobalOutput.output.write ("   - Max Pages        : " + GlobalVars.limits.maxPages);
        nsGlobalOutput.output.write ("   - Max Depth Level  : " + GlobalVars.limits.maxDepth);
        nsGlobalOutput.output.write ("   - Max Seconds      : " + GlobalVars.limits.maxSeconds);
        nsGlobalOutput.output.write ("   - Max Kb           : " + GlobalVars.limits.maxKb);
        nsGlobalOutput.output.write ("   - Max HTTP Errors  : " + GlobalVars.limits.maxErrorCodes);
    } else {
        nsGlobalOutput.output.write ("\n + Limits [via table hostlist_extras]");
        nsGlobalOutput.output.write ("   - Max Pages        : " + GlobalVars.limits.he_maxPages);
        nsGlobalOutput.output.write ("   - Max Depth Level  : " + GlobalVars.limits.he_maxDepth);
        nsGlobalOutput.output.write ("   - Max Seconds      : " + GlobalVars.limits.he_maxSeconds);
        nsGlobalOutput.output.write ("   - Max Kb           : " + GlobalVars.limits.he_maxKb);
        nsGlobalOutput.output.write ("   - Max HTTP Errors  : " + GlobalVars.limits.he_maxErrorCodes);
        if (GlobalVars.limits.he_regex_include_pages != "")
            nsGlobalOutput.output.write ("   - Include pages regex  : " + GlobalVars.limits.he_regex_include_pages);

        if (GlobalVars.limits.he_regex_exclude_pages != "")
            nsGlobalOutput.output.write ("   - Exclude pages regex  : " + GlobalVars.limits.he_regex_exclude_pages);

    }
    nsGlobalOutput.output.write ("");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="48" endline="73">
public bool readCommandLine (string [] _args) {
    if (GlobalVars.args.readArgs (_args) == false)
        return false;

    {
        if (! GlobalVars.args.startURL.StartsWith ("http://", StringComparison.CurrentCultureIgnoreCase))
            GlobalVars.args.startURL = "http://" + GlobalVars.args.startURL;

        page startPage = new page (GlobalVars.args.startURL, GlobalVars.args.startURL, null);
        if (startPage.isValidPage == false) {
            nsGlobalOutput.output.write ("Invalid URL [" + GlobalVars.args.startURL + "]");
            return false;
        }
        GlobalVars.threadsVars.currentDomain = startPage;
        return true;
    }}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="76" endline="86">
public bool readConfFile (string f) {
    GlobalVars.readConfFile.parseFile (f);
    if (GlobalVars.readConfFile.isConfFileParsed == false) {
        nsGlobalOutput.output.write ("Error(1) while reading configuration file.");
        return false;
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="88" endline="94">
public bool isMysqlNeeded () {
    if (GlobalVars.args.stressTest)
        return false;

    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="97" endline="132">
public bool mysqlConnect () {
    nsGlobalOutput.output.write ("");
    nsGlobalOutput.output.write (" + Connecting to MySQL Server [" + GlobalVars.readConfFile.mysqlServerHostList + "]; DB [" + GlobalVars.readConfFile.databaseHostList + "]");
    GlobalVars.mysqlConn.connHostList = new mysql ("Server=" + GlobalVars.readConfFile.mysqlServerHostList + ";" + "Database=" + GlobalVars.readConfFile.databaseHostList + ";" + "User ID=" + GlobalVars.readConfFile.mysqlUserNameHostList + ";" + "Password=" + GlobalVars.readConfFile.mysqlPassWordHostList + ";" + "Port=" + GlobalVars.readConfFile.mysqlServerPort1 + ";" + "charset=utf8;" + "Pooling=false");
    nsGlobalOutput.output.write (" + Connecting to MySQL Server [" + GlobalVars.readConfFile.mysqlServerPageList + "]; DB [" + GlobalVars.readConfFile.databasePageList + "]");
    GlobalVars.mysqlConn.connPageList = new mysql ("Server=" + GlobalVars.readConfFile.mysqlServerPageList + ";" + "Database=" + GlobalVars.readConfFile.databasePageList + ";" + "User ID=" + GlobalVars.readConfFile.mysqlUserNamePageList + ";" + "Password=" + GlobalVars.readConfFile.mysqlPassWordPageList + ";" + "Port=" + GlobalVars.readConfFile.mysqlServerPort2 + ";" + "charset=utf8;" + "Pooling=false");
    if (! GlobalVars.mysqlConn.connHostList.isConnected || ! GlobalVars.mysqlConn.connPageList.isConnected) {
        nsGlobalOutput.output.write ("   - Error(2) while trying to connect to one or more mysql server.");
        return false;
    } else
        nsGlobalOutput.output.write ("   - Connected to both MySQL Servers");

    nsGlobalOutput.output.write ("");
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="137" endline="146">
public void showBanner () {
    nsGlobalOutput.output.write ("");
    nsGlobalOutput.output.write (" + Parameters:");
    nsGlobalOutput.output.write ("   - Starting URL     : " + GlobalVars.threadsVars.currentDomain.GenerateURL ());
    nsGlobalOutput.output.write ("   - Single Host Mode : " + (GlobalVars.args.singleHostMode ? "On" : "Off"));
    nsGlobalOutput.output.write ("   - Crawl-Delay      : " + GlobalVars.args.crawlDelay + " seconds");
    nsGlobalOutput.output.write ("");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="149" endline="388">
public bool startCrawling () {
    GlobalVars.urlsLists.init ();
    GlobalVars.externUrlsLists.init ();
    GlobalVars.relsList.init ();
    GlobalVars.imagesLists.init ();
    threads = new threading ();
    bool haveToIndexSomething = true;
    db __db = new db ();
    nsGlobalOutput.output.handleCTRLC ();
    while (haveToIndexSomething) {
        nsGlobalOutput.output.write (" + Clearing structures...");
        GlobalVars.urlsLists.clear ();
        GlobalVars.externUrlsLists.l.Clear ();
        GlobalVars.relsList.rels.Clear ();
        GlobalVars.imagesLists.clear ();
        nsGlobalOutput.output.write ("");
        threads.initMutexes ();
        if (isMysqlNeeded ()) {
            nsGlobalOutput.output.write (" + Checking connection to MySQL servers...");
            if (GlobalVars.mysqlConn.connHostList.ping () == false || GlobalVars.mysqlConn.connPageList.ping () == false) {
                nsGlobalOutput.output.write ("   - One or both MySQL server disconnected, trying to reconnect!");
                if (mysqlConnect () == false) {
                    nsGlobalOutput.output.write ("   - Unable to connect to one or both MySQL server!");
                    break;
                }
            }
            GlobalVars.threadsVars.currentDomain._hostID = __db.startIndexThisSite (GlobalVars.threadsVars.currentDomain);
        }
        if (GlobalVars.args.add2Hostlist == true) {
            nsGlobalOutput.output.write ("\n\n");
            nsGlobalOutput.output.write (" + Host added to the table of the hosts!");
            nsGlobalOutput.output.write ("   - Hostname : " + GlobalVars.threadsVars.currentDomain._hostname);
            nsGlobalOutput.output.write ("   - Host ID  : " + GlobalVars.threadsVars.currentDomain._hostID);
            nsGlobalOutput.output.write ("\n\n");
            break;
        }
        if (isMysqlNeeded ()) {
            GlobalVars.limits.loadHostlistExtraLimits (GlobalVars.threadsVars.currentDomain._hostID);
        }
        GlobalVars.limits.showLimits ();
        GlobalVars.limits.startTime = DateTime.Now.Ticks;
        GlobalVars.limits.curPages = 0;
        GlobalVars.limits.curBytes = 0;
        GlobalVars.limits.curErrorCodes = 0;
        if (GlobalVars.args.stressTest == false) {
            {
                robots prb = new robots ();
                http tmpHttpRobotsTxt = new http ();
                string tmpsRobotsTxt;
                tmpsRobotsTxt = tmpHttpRobotsTxt.getURL ("http://" + GlobalVars.threadsVars.currentDomain._hostname + ":" + GlobalVars.threadsVars.currentDomain._port + "/robots.txt", null, false);
                if (tmpHttpRobotsTxt.statusCode == 200)
                    prb.parseRobotsTxt (tmpsRobotsTxt);
                else
                    nsGlobalOutput.output.write ("   - robots.txt not found");

            }}
        nsGlobalOutput.output.write ("");
        GlobalVars.urlsLists.addURL (GlobalVars.threadsVars.currentDomain);
        try {
            threads.createThreads ();
        }
        catch (Exception e) {
            nsGlobalOutput.output.write ("   - Error while creating threads: " + e.Message);
            threads.killThreads ();
            return false;
        }
        try {
            bool waitThreads = true;
            while (waitThreads) {
                System.Threading.Thread.Sleep (250);
                __db.checkCrawlerAct ();
                if (GlobalVars.OpenWebSpider.stopItGracefully == true)
                    waitThreads = false;

                GlobalVars.threadsVars.mutexAccessURLList.WaitOne ();
                try {
                    if (GlobalVars.urlsLists.getPageByStatus (0) == null && GlobalVars.urlsLists.getPageByStatus (2) == null)
                        waitThreads = false;

                }
                catch (Exception e) {
                    nsGlobalOutput.output.write ("   - Error 1 [Wait Threads]: " + e.Message);
                }
                finally {
                    GlobalVars.threadsVars.mutexAccessURLList.ReleaseMutex ();
                }
                if (GlobalVars.limits.checkLimits () == false)
                    waitThreads = false;

            }
        }
        catch (Exception e) {
            nsGlobalOutput.output.write ("   - Error 2 [Wait Threads]: " + e.Message);
        }
        threads.killThreads ();
        if (isMysqlNeeded ()) {
            nsGlobalOutput.output.write (" + Checking connection to MySQL servers...");
            if (GlobalVars.mysqlConn.connHostList.ping () == false || GlobalVars.mysqlConn.connPageList.ping () == false) {
                nsGlobalOutput.output.write ("   - One or both MySQL server disconnected, trying to reconnect!");
                if (mysqlConnect () == false) {
                    nsGlobalOutput.output.write ("   - Unable to connect to one or both MySQL server!");
                    break;
                }
            }
        }
        __db.stopIndexThisSite (GlobalVars.threadsVars.currentDomain);
        printCurDomainStats ();
        if (isMysqlNeeded ()) {
            if (! GlobalVars.args.keepDup) {
                __db.deleteDuplicatedPages (GlobalVars.threadsVars.currentDomain._hostID);
            }
            __db.swapExternURLs2DB ();
            __db.saveRels ();
            __db.saveImages ();
            new rank (GlobalVars.threadsVars.currentDomain._hostID);
        }
        if (GlobalVars.OpenWebSpider.stopItGracefully == true)
            break;

        if (GlobalVars.args.singleHostMode == true)
            haveToIndexSomething = false;
        else {
            page p = __db.getFirstAvailableURL ();
            if (p == null) {
                haveToIndexSomething = false;
                nsGlobalOutput.output.write (" + Nothing to do: no available website to index!!! (Try to add: --add-external to the command line arguments) ");
            } else {
                GlobalVars.threadsVars.currentDomain = p;
                haveToIndexSomething = true;
            }
        }
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="391" endline="406">
public void shutDown () {
    if (isMysqlNeeded ()) {
        GlobalVars.mysqlConn.connHostList.disconnect ();
        GlobalVars.mysqlConn.connPageList.disconnect ();
        nsGlobalOutput.output.write (" + MySQL Servers Disconnected! ");
    }
    nsGlobalOutput.output.write ("");
    nsGlobalOutput.output.write ("Bye bye");
    nsGlobalOutput.output.write ("");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/ows.cs.ifdefed" startline="408" endline="415">
public void printCurDomainStats () {
    nsGlobalOutput.output.write ("\n + Stats ");
    nsGlobalOutput.output.write ("   - Hostname: " + GlobalVars.threadsVars.currentDomain._hostname + "  [Port: " + GlobalVars.threadsVars.currentDomain._port + "]");
    nsGlobalOutput.output.write ("   - Pages Indexed: " + GlobalVars.limits.curPages + " [" + GlobalVars.limits.curBytes / 1024 + " Kb] in " + ((DateTime.Now.Ticks - GlobalVars.limits.startTime) / 10000000) + " seconds");
    nsGlobalOutput.output.write ("\n");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/robots.txt.cs.ifdefed" startline="38" endline="116">
public bool parseRobotsTxt (string t) {
    string singleUserAgentArea = string.Empty;
    Regex regexExtractUserAgents = new Regex ("(?<agents>User-agent[\\s\\t]*:[\\s\\t]*(?<robot>[^\\n\\r]+).*?(?=User-agent[\\s\\t]*:|$))", RegexOptions.IgnoreCase | RegexOptions.Singleline);
    for (int i = 0; i < 2; i ++) {
        MatchCollection mcUserAgents = regexExtractUserAgents.Matches (t);
        foreach (Match mMatch in mcUserAgents) {
            if (i == 0 && String.Equals (mMatch.Groups ["robot"].ToString ().Trim (), "*", StringComparison.CurrentCultureIgnoreCase)) {
                singleUserAgentArea = mMatch.Value;
            }
            if (i == 1 && String.Equals (mMatch.Groups ["robot"].ToString ().Trim (), GlobalVars.OpenWebSpider.NAME, StringComparison.CurrentCultureIgnoreCase)) {
                singleUserAgentArea = mMatch.Value;
            }
        }
    }
    Regex regexExtractDisallows = new Regex ("disallow\\s*:\\s*(?<url>[^\\n]*)", RegexOptions.IgnoreCase);
    MatchCollection mcDisallows = regexExtractDisallows.Matches (singleUserAgentArea);
    foreach (Match mMatch in mcDisallows) {
        string __disallow = mMatch.Groups ["url"].ToString ().Replace ("\r", "").Replace ("\n", "").Trim ();
        if (__disallow != "") {
            GlobalVars.robotsTxtDisallows.disallowList.Add (__disallow);
            nsGlobalOutput.output.write ("   - Disallow [" + __disallow + "] ");
        }
    }
    Regex regexExtractCrawlDelay = new Regex ("crawl-delay\\s*:\\s*(?<crawldelay>[^\\D]*)", RegexOptions.IgnoreCase);
    MatchCollection mcCrawlDelay = regexExtractCrawlDelay.Matches (singleUserAgentArea);
    foreach (Match mMatch in mcCrawlDelay) {
        try {
            GlobalVars.robotstxtVars.robotstxtCrawlDelay = int.Parse (mMatch.Groups ["crawldelay"].ToString ());
            nsGlobalOutput.output.write ("   - Crawl-Delay: " + GlobalVars.robotstxtVars.robotstxtCrawlDelay + " seconds ");
        }
        catch {
            GlobalVars.robotstxtVars.robotstxtCrawlDelay = 0;
        }
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/out.cs.ifdefed" startline="20" endline="26">
public static bool init (int t, bool b) {
    type = t;
    debugMode = b;
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/out.cs.ifdefed" startline="28" endline="40">
public static void handleCTRLC () {
    if (type == 1) {
        Console.TreatControlCAsInput = false;
        Console.CancelKeyPress += new ConsoleCancelEventHandler (CTRLCHandler);
        write ("\n\n == Press CTRL+C to quit gracefully ==\n\n");
    }
}
</source>
<source file="examples/cs/OpenWebSpiderCS/out.cs.ifdefed" startline="42" endline="52">
protected static void CTRLCHandler (object sender, ConsoleCancelEventArgs args) {
    args.Cancel = true;
    GlobalVars.OpenWebSpider.stopItGracefully = true;
    write ("\n\n == Caught CTRL+C: Quitting gracefully! ==\n\n");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/out.cs.ifdefed" startline="54" endline="57">
public static void write (string s) {
    write (s, false);
}
</source>
<source file="examples/cs/OpenWebSpiderCS/out.cs.ifdefed" startline="59" endline="67">
public static void write (string s, bool isDebug) {
    if (isDebug == false || (isDebug == true && debugMode == true))
        if (type == 1) {
            Console.WriteLine (s);
        }

}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="28" endline="31">
public string myMySQLEscapeString (string s) {
    return s.Replace ("\\", "\\\\").Replace ("'", "\\'");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="33" endline="71">
public page getFirstAvailableURL () {
    int hostID;
    string url;
    try {
        if (GlobalVars.readConfFile.sqlWhereHostlist == "")
            GlobalVars.readConfFile.sqlWhereHostlist = "1=1";

        hostID = int.Parse (GlobalVars.mysqlConn.connHostList.getValueFromTable ("hostlist", "id", "status=0 AND ( " + GlobalVars.readConfFile.sqlWhereHostlist + " ) ORDER by priority DESC"));
        if (hostID > 0) {
            GlobalVars.mysqlConn.connHostList.executeSQLQuery ("UPDATE hostlist SET status = 2, crawler_id = '" + myMySQLEscapeString (GlobalVars.OpenWebSpider.ID) + "' WHERE id = " + hostID);
            url = GlobalVars.mysqlConn.connHostList.getValueFromTable ("hostlist", "CONCAT('http://', hostname, ':', port)", "id = " + hostID);
            nsGlobalOutput.output.write ("\n\n\n");
            nsGlobalOutput.output.write (" + Indexing new domain:  " + url);
            nsGlobalOutput.output.write ("\n");
            page ret = new page (url, url, null);
            ret._hostID = hostID;
            return ret;
        }
    }
    catch {
        return null;
    }
    return null;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="73" endline="89">
public int GetHostId (page p) {
    int hostID;
    try {
        hostID = int.Parse (GlobalVars.mysqlConn.connHostList.getValueFromTable ("hostlist", "id", " hostname = '" + p._hostname + "' AND port = " + p._port + " "));
        if (hostID > 0)
            return hostID;

    }
    catch {
    }
    return 0;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="95" endline="149">
public int startIndexThisSite (page p) {
    if (p._hostID == 0)
        p._hostID = GetHostId (p);

    int status = 2;
    if (GlobalVars.args.add2Hostlist == true)
        status = 0;

    if (p._hostID == 0) {
        GlobalVars.mysqlConn.connHostList.executeSQLQuery ("INSERT IGNORE INTO hostlist (hostname, port, status, lastvisit, crawler_id) VALUES('" + myMySQLEscapeString (p._hostname) + "', " + p._port + ", " + status + ", curdate(), '" + myMySQLEscapeString (GlobalVars.OpenWebSpider.ID) + "')");
        p._hostID = GetHostId (p);
    } else
        GlobalVars.mysqlConn.connHostList.executeSQLQuery ("UPDATE hostlist SET status = " + status + ", lastvisit=curdate(), crawler_id = '" + myMySQLEscapeString (GlobalVars.OpenWebSpider.ID) + "' WHERE id = " + p._hostID + " limit 1");

    if (GlobalVars.args.add2Hostlist == true)
        return p._hostID;

    if (p._hostID != 0) {
        GlobalVars.mysqlConn.connPageList.executeSQLQuery ("DELETE FROM pages where host_id = " + p._hostID);
        GlobalVars.mysqlConn.connHostList.executeSQLQuery ("DELETE FROM rels where host_id = " + p._hostID);
        if (GlobalVars.args.indexImages == true)
            GlobalVars.mysqlConn.connPageList.executeSQLQuery ("DELETE FROM images where src_host_id = " + p._hostID);

        if (GlobalVars.args.indexMP3 == true)
            GlobalVars.mysqlConn.connPageList.executeSQLQuery ("DELETE FROM mp3 where host_id = " + p._hostID);

        if (GlobalVars.args.indexPDF == true)
            GlobalVars.mysqlConn.connPageList.executeSQLQuery ("DELETE FROM pdf where host_id = " + p._hostID);

    }
    return p._hostID;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="154" endline="169">
public bool stopIndexThisSite (page p) {
    if (p._hostID > 0)
        GlobalVars.mysqlConn.connHostList.executeSQLQuery (" UPDATE hostlist SET " + "  status = 1 " + ", indexed_pages = " + GlobalVars.limits.curPages + ", time_sec = " + ((DateTime.Now.Ticks - GlobalVars.limits.startTime) / 10000000) + ", bytes_downloaded = " + GlobalVars.limits.curBytes + ", error_pages = " + GlobalVars.limits.curErrorCodes + ", crawler_id = '' " + " WHERE id = " + p._hostID + " limit 1");
    else
        return false;

    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="171" endline="227">
public bool indexThisPage (page p, html h) {
    if (GlobalVars.args.noIndex)
        return false;

    string text2Index = string.Empty;
    try {
        if (GlobalVars.limits.useHostlist_Extras_limits == true) {
            if (GlobalVars.limits.he_regex_include_pages != "") {
                Regex testIncludePageRegex = new Regex (GlobalVars.limits.he_regex_include_pages, RegexOptions.IgnoreCase);
                if (! testIncludePageRegex.IsMatch (p._page))
                    return false;

            }
            if (GlobalVars.limits.he_regex_exclude_pages != "") {
                Regex testExcludePageRegex = new Regex (GlobalVars.limits.he_regex_exclude_pages, RegexOptions.IgnoreCase);
                if (testExcludePageRegex.IsMatch (p._page))
                    return false;

            }
        }
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("\n\n + Error while parsing hostlist_extras regex: " + e.Message + "\n\n");
    }
    if (p.isValidPage && h.HTML != "") {
        if (h.contentType.StartsWith ("text/html", StringComparison.CurrentCultureIgnoreCase)) {
            text2Index = h.UnHTML (h.HTML);
        } else if (h.contentType.StartsWith ("text/", StringComparison.CurrentCultureIgnoreCase)) {
            text2Index = h.removeUnWantedChars (h.HTML).Trim ();
        } else
            return false;

        return addContent2Index (p._hostID, p._hostname, p._page, p._title, p._anchorText, p._depthLevel, text2Index, h.HTML);
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="229" endline="268">
public bool addContent2Index (int i_host_id, string i_hostname, string i_page, string i_title, string i_anchorText, uint i_depthLevel, string i_text, string i_cache) {
    bool ret = true;
    md5 MD5 = new md5 ();
    string sql = "INSERT DELAYED INTO pages SET " + "  host_id = " + i_host_id + ", hostname = '" + myMySQLEscapeString (i_hostname) + "'" + ", page='" + myMySQLEscapeString (i_page) + "'" + ", title='" + myMySQLEscapeString (i_title) + "'" + ", anchor_text='" + myMySQLEscapeString (i_anchorText) + "'" + ", date=curdate(),time=curtime()" + ", level=" + i_depthLevel + ",`text`= '" + myMySQLEscapeString (i_text) + "'";
    sql += ",`html_md5`= '" + MD5.compute (i_text) + "' ";
    if (GlobalVars.args.cachingMode == 1)
        sql += ",`cache`= '" + myMySQLEscapeString (i_cache) + "'";
    else if (GlobalVars.args.cachingMode == 2)
        sql += ",`cache`= COMPRESS('" + myMySQLEscapeString (i_cache) + "')";

    GlobalVars.threadsVars.mutexMySQLPageList.WaitOne ();
    try {
        ret = GlobalVars.mysqlConn.connPageList.executeSQLQuery (sql);
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("SQL Error: " + e.Message + "\n\nSQL: -===[\n" + sql.Substring (0, 1000) + "\n]===-\n\n");
        ret = false;
    }
    finally {
        GlobalVars.threadsVars.mutexMySQLPageList.ReleaseMutex ();
    }
    return ret;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="273" endline="288">
public bool swapExternURLs2DB () {
    nsGlobalOutput.output.write (" + Swapping External URLs to DB [ " + GlobalVars.externUrlsLists.l.Count + " ]...");
    if (GlobalVars.externUrlsLists.isInitialized && GlobalVars.externUrlsLists.l.Count > 0) {
        foreach (page __p in GlobalVars.externUrlsLists.l) {
            GlobalVars.mysqlConn.connHostList.executeSQLQuery ("INSERT IGNORE INTO hostlist (hostname, port, status, lastvisit) " + "VALUES('" + __p._hostname + "', " + __p._port + ", 0, null)");
        }
        return true;
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="293" endline="321">
public bool saveRels () {
    nsGlobalOutput.output.write (" + Saving rels [ " + GlobalVars.relsList.rels.Count + " ]...");
    foreach (GlobalVars.relsList.node __nodeInList in GlobalVars.relsList.rels) {
        if (__nodeInList.__linkedPage._hostID == 0)
            __nodeInList.__linkedPage._hostID = GetHostId (__nodeInList.__linkedPage);

        if (__nodeInList.__linkedPage._hostID > 0) {
            if (GlobalVars.args.relsMode == 1) {
                GlobalVars.mysqlConn.connHostList.executeSQLQuery ("INSERT IGNORE INTO rels (host_id, page, linkedhost_id, linkedpage, textlink) " + "VALUES('" + __nodeInList.__page._hostID + "', '/', " + __nodeInList.__linkedPage._hostID + ", '/', '" + myMySQLEscapeString (__nodeInList.__linkedPage._anchorText) + "')");
            } else if (GlobalVars.args.relsMode == 2) {
                GlobalVars.mysqlConn.connHostList.executeSQLQuery ("INSERT IGNORE INTO rels (host_id, page, linkedhost_id, linkedpage, textlink) " + "VALUES('" + __nodeInList.__page._hostID + "', '" + myMySQLEscapeString (__nodeInList.__page._page) + "', " + __nodeInList.__linkedPage._hostID + ", '" + myMySQLEscapeString (__nodeInList.__linkedPage._page) + "', '" + myMySQLEscapeString (__nodeInList.__linkedPage._anchorText) + "')");
            }
        }
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="349" endline="359">
public void deleteDuplicatedPages (int host_id) {
    nsGlobalOutput.output.write (" + Deleting duplicated pages...");
    GlobalVars.mysqlConn.connPageList.executeSQLQuery (" DELETE FROM pages " + " WHERE host_id = " + host_id + " AND id NOT IN " + " ( " + "   SELECT id FROM view_unique_pages WHERE host_id = " + host_id + " )");
    return;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="364" endline="404">
public bool saveImages () {
    if (GlobalVars.args.indexImages == false)
        return false;

    nsGlobalOutput.output.write (" + Saving images [ " + GlobalVars.imagesLists.l.Count + " ]...");
    if (GlobalVars.imagesLists.isInitialized && GlobalVars.imagesLists.l.Count > 0) {
        foreach (GlobalVars.imagesLists.imageStruct __is in GlobalVars.imagesLists.l) {
            if (__is.imagePage._hostID == 0) {
                __is.imagePage._hostID = GetHostId (__is.imagePage);
                if (__is.imagePage._hostID == 0) {
                    GlobalVars.mysqlConn.connHostList.executeSQLQuery ("INSERT IGNORE INTO hostlist (hostname, port, status, lastvisit) VALUES('" + myMySQLEscapeString (__is.imagePage._hostname) + "', " + __is.imagePage._port + ", 0, curdate())");
                    __is.imagePage._hostID = GetHostId (__is.imagePage);
                }
            }
            if (__is.imagePage._hostID > 0) {
                GlobalVars.mysqlConn.connPageList.executeSQLQuery ("INSERT INTO images (src_host_id, src_page, image_host_id, image, alt_text, title_text) " + "VALUES(" + __is.srcPage._hostID + ", " + "'" + myMySQLEscapeString (__is.srcPage._page) + "', " + __is.imagePage._hostID + ", " + "'" + myMySQLEscapeString (__is.imagePage._page) + "', " + "'" + myMySQLEscapeString (__is.alt_text) + "', " + "'" + myMySQLEscapeString (__is.title_text) + "')");
            }
        }
        return true;
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="409" endline="449">
public bool indexPDF (page p, int pdfSize, string pdf2text) {
    string outStr;
    string sql;
    bool ret;
    outStr = "\n";
    outStr += " + Indexing PDF [ " + p.GenerateURL () + " ]\n";
    nsGlobalOutput.output.write (outStr);
    html htmp = new html ();
    pdf2text = htmp.removeUnWantedChars (pdf2text);
    addContent2Index (p._hostID, p._hostname, p._page, p._title, p._anchorText, p._depthLevel, pdf2text, pdf2text);
    sql = "INSERT INTO pdf (host_id, filename, pdf_size, pdf_text) " + "VALUES(" + p._hostID + ", " + "'" + myMySQLEscapeString (p._page) + "', " + "'" + pdfSize + "', " + "'" + myMySQLEscapeString (pdf2text) + "') ";
    GlobalVars.threadsVars.mutexMySQLPageList.WaitOne ();
    try {
        ret = GlobalVars.mysqlConn.connPageList.executeSQLQuery (sql);
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("SQL Error: " + e.Message + "\n\nSQL: -===[\n" + sql.Substring (0, 1000) + "\n]===-\n\n");
        ret = false;
    }
    finally {
        GlobalVars.threadsVars.mutexMySQLPageList.ReleaseMutex ();
    }
    return ret;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="454" endline="498">
public bool indexMP3 (page p, mp3 MP3Info) {
    string outStr;
    string sql;
    bool ret;
    outStr = "\n";
    outStr += " + Indexing MP3 [ " + p.GenerateURL () + " ]\n";
    outStr += "   - Title   : " + MP3Info.mp3Title + "\n";
    outStr += "   - Artist  : " + MP3Info.mp3Artist + "\n";
    outStr += "   - Album   : " + MP3Info.mp3Album + "\n";
    outStr += "   - Genre   : " + MP3Info.mp3Genre + "\n";
    outStr += "   - Duration: " + MP3Info.mp3Length + " seconds\n";
    outStr += "\n";
    nsGlobalOutput.output.write (outStr);
    sql = "INSERT INTO mp3 (host_id, filename, mp3_size, mp3_artist, mp3_title, mp3_album, mp3_genre, mp3_duration) " + "VALUES(" + p._hostID + ", " + "'" + myMySQLEscapeString (p._page) + "', " + "'" + MP3Info.mp3Size + "', " + "'" + myMySQLEscapeString (MP3Info.mp3Artist) + "', " + "'" + myMySQLEscapeString (MP3Info.mp3Title) + "', " + "'" + myMySQLEscapeString (MP3Info.mp3Album) + "', " + "'" + myMySQLEscapeString (MP3Info.mp3Genre) + "', " + MP3Info.mp3Length + ")";
    GlobalVars.threadsVars.mutexMySQLPageList.WaitOne ();
    try {
        ret = GlobalVars.mysqlConn.connPageList.executeSQLQuery (sql);
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("SQL Error: " + e.Message + "\n\nSQL: -===[\n" + sql.Substring (0, 1000) + "\n]===-\n\n");
        ret = false;
    }
    finally {
        GlobalVars.threadsVars.mutexMySQLPageList.ReleaseMutex ();
    }
    return ret;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/db.cs.ifdefed" startline="507" endline="545">
public void checkCrawlerAct () {
    int act = 0;
    try {
        act = int.Parse (GlobalVars.mysqlConn.connHostList.getValueFromTable ("crawler_act", "act", " crawler_id = '" + myMySQLEscapeString (GlobalVars.OpenWebSpider.ID) + "' "));
    }
    catch {
        act = 0;
    }
    finally {
        if (act == 1) {
            GlobalVars.OpenWebSpider.stopItGracefully = true;
            System.Threading.Thread.Sleep (1000);
            GlobalVars.mysqlConn.connHostList.executeSQLQuery ("UPDATE crawler_act SET act = 0 WHERE crawler_id = '" + myMySQLEscapeString (GlobalVars.OpenWebSpider.ID) + "' LIMIT 1 ");
        } else if (act == 2) {
            GlobalVars.OpenWebSpider.crawlerActPAUSE = true;
        } else {
            GlobalVars.OpenWebSpider.crawlerActPAUSE = false;
        }
    }
    return;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/md5.cs.ifdefed" startline="9" endline="27">
public string compute (string text) {
    Byte [] originalBytes;
    Byte [] encodedBytes;
    System.Security.Cryptography.MD5 md5;
    md5 = new System.Security.Cryptography.MD5CryptoServiceProvider ();
    originalBytes = System.Text.ASCIIEncoding.Default.GetBytes (text);
    encodedBytes = md5.ComputeHash (originalBytes);
    System.Text.StringBuilder s = new System.Text.StringBuilder ();
    foreach (byte b in encodedBytes) {
        s.Append (b.ToString ("x2").ToLower ());
    }
    return s.ToString ();
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="18" endline="31">
public static bool init () {
    try {
        l = new ArrayList ();
        isInitialized = true;
    }
    catch {
        isInitialized = false;
    }
    return isInitialized;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="33" endline="36">
public static void clear () {
    l.Clear ();
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="41" endline="76">
public static bool addURL (OpenWebSpiderCS.page p) {
    if (isInitialized) {
        if (p.checkAddablePage ()) {
            if (GlobalVars.limits.useHostlist_Extras_limits == true) {
                if (GlobalVars.limits.he_maxDepth > - 1 && p._depthLevel > GlobalVars.limits.he_maxDepth)
                    return false;

            } else {
                if (GlobalVars.limits.maxDepth > - 1 && p._depthLevel > GlobalVars.limits.maxDepth)
                    return false;

            }
            if (pageExists (p._hostname, p._page, p._port) == false)
                l.Add (p);

        } else
            return false;

    } else {
        return false;
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="81" endline="93">
public static bool pageExists (string h, string p, uint port) {
    if (isInitialized && l.Count > 0) {
        foreach (OpenWebSpiderCS.page __p in l) {
            if (__p._hostname == h && __p._page == p && __p._port == port)
                return true;

        }
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="98" endline="110">
public static OpenWebSpiderCS.page getPageByStatus (uint isIndexed) {
    if (isInitialized && l.Count > 0) {
        foreach (OpenWebSpiderCS.page __p in l) {
            if (__p.isIndexed == isIndexed)
                return __p;

        }
    }
    return null;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="115" endline="121">
public static uint count () {
    if (isInitialized)
        return (uint) l.Count;

    return 0;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="133" endline="146">
public static bool init () {
    try {
        l = new ArrayList ();
        isInitialized = true;
    }
    catch {
        isInitialized = false;
    }
    return isInitialized;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="148" endline="151">
public static void clear () {
    l.Clear ();
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="156" endline="175">
public static bool addURL (OpenWebSpiderCS.page p) {
    if (isInitialized) {
        if (p.isValidPage) {
            if (pageExists (p._hostname, p._page, p._port) == false)
                l.Add (p);

        } else
            return false;

    } else {
        return false;
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="180" endline="192">
public static bool pageExists (string h, string p, uint port) {
    if (isInitialized && l.Count > 0) {
        foreach (OpenWebSpiderCS.page __p in l) {
            if (__p._hostname == h && __p._page == p && __p._port == port)
                return true;

        }
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="197" endline="203">
public static uint count () {
    if (isInitialized)
        return (uint) l.Count;

    return 0;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="215" endline="231">
public static bool init () {
    if (isInitialized)
        disallowList.Clear ();

    try {
        disallowList = new ArrayList ();
        isInitialized = true;
    }
    catch {
        isInitialized = false;
    }
    return isInitialized;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="253" endline="269">
public static bool init () {
    if (isInitialized)
        rels.Clear ();

    try {
        rels = new ArrayList ();
        isInitialized = true;
    }
    catch {
        isInitialized = false;
    }
    return isInitialized;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="271" endline="286">
public static bool addRel (OpenWebSpiderCS.page _p, OpenWebSpiderCS.page _linkedPage) {
    if (GlobalVars.args.relsMode == 1 || GlobalVars.args.relsMode == 2) {
        node n = new node (_p, _linkedPage);
        if (relExists (n) == false) {
            if (n != null) {
                relsList.rels.Add (n);
                return true;
            }
        }
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="288" endline="317">
public static bool relExists (node _newNode) {
    if (GlobalVars.args.relsMode == 1) {
        foreach (node __nodeInList in rels) {
            if (__nodeInList.__linkedPage._hostname == _newNode.__linkedPage._hostname && __nodeInList.__page._hostname == _newNode.__page._hostname)
                return true;

        }
    } else if (GlobalVars.args.relsMode == 2) {
        foreach (node __nodeInList in rels) {
            if (__nodeInList.__linkedPage._hostname == _newNode.__linkedPage._hostname && __nodeInList.__linkedPage._page == _newNode.__linkedPage._page && __nodeInList.__page._hostname == _newNode.__page._hostname && __nodeInList.__page._page == _newNode.__page._page)
                return true;

        }
    } else
        return true;

    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="355" endline="368">
public static bool init () {
    try {
        l = new ArrayList ();
        isInitialized = true;
    }
    catch {
        isInitialized = false;
    }
    return isInitialized;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="370" endline="373">
public static void clear () {
    l.Clear ();
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="378" endline="399">
public static bool addURL (OpenWebSpiderCS.page srcPage, OpenWebSpiderCS.page image, string imgAlt, string imgTitle) {
    if (isInitialized) {
        if (image.isValidPage) {
            if (imageExists (image._hostname, image._page, image._port) == false) {
                l.Add (new imageStruct (srcPage, image, imgAlt, imgTitle));
            }
        } else
            return false;

    } else {
        return false;
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/lists.cs.ifdefed" startline="404" endline="416">
public static bool imageExists (string h, string p, uint port) {
    if (isInitialized && l.Count > 0) {
        foreach (imageStruct __is in l) {
            if (__is.imagePage._hostname == h && __is.imagePage._page == p && __is.imagePage._port == port)
                return true;

        }
    }
    return false;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/threading.cs.ifdefed" startline="51" endline="70">
public void createThreads () {
    _shouldStop = false;
    nsGlobalOutput.output.write (" + Creating Threads...");
    try {
        for (int i = 0; i < GlobalVars.threadsVars.nThreads; i ++) {
            ThreadArray [i] = new Thread (new ParameterizedThreadStart (this.DoWork));
            ThreadArray [i].Start ((object) i);
        }
        nsGlobalOutput.output.write ("   - " + GlobalVars.threadsVars.nThreads + " threads created!");
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("   - Error while creating Threads: " + e.Message);
    }
}
</source>
<source file="examples/cs/OpenWebSpiderCS/threading.cs.ifdefed" startline="77" endline="101">
public void killThreads () {
    _shouldStop = true;
    nsGlobalOutput.output.write (" + Killing threads...");
    System.Threading.Thread.Sleep (1000);
    for (int i = 0; i < GlobalVars.threadsVars.nThreads; i ++) {
        if (ThreadArray [i].IsAlive) {
            ThreadArray [i].Abort ();
            nsGlobalOutput.output.write ("   - Thread " + i + " killed");
        }
    }
    System.Threading.Thread.Sleep (1000);
}
</source>
<source file="examples/cs/OpenWebSpiderCS/threading.cs.ifdefed" startline="103" endline="130">
public void initMutexes () {
    try {
        GlobalVars.threadsVars.mutexCrawlDelay.Close ();
        GlobalVars.threadsVars.mutexCrawlDelay = new Mutex ();
        GlobalVars.threadsVars.mutexAccessURLList.Close ();
        GlobalVars.threadsVars.mutexAccessURLList = new Mutex ();
        GlobalVars.threadsVars.mutexAccessExternURLList.Close ();
        GlobalVars.threadsVars.mutexAccessExternURLList = new Mutex ();
        GlobalVars.threadsVars.mutexRelsList.Close ();
        GlobalVars.threadsVars.mutexRelsList = new Mutex ();
        GlobalVars.threadsVars.mutexMySQLHostList.Close ();
        GlobalVars.threadsVars.mutexMySQLHostList = new Mutex ();
        GlobalVars.threadsVars.mutexMySQLPageList.Close ();
        GlobalVars.threadsVars.mutexMySQLPageList = new Mutex ();
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("Error[initMutexes()]: " + e.Message + "\n");
    }
}
</source>
<source file="examples/cs/OpenWebSpiderCS/threading.cs.ifdefed" startline="133" endline="311">
public void DoWork (object threadID) {
    page pageToIndex;
    string outStr;
    db __db = new db ();
    while (! _shouldStop) {
        System.Threading.Thread.Sleep (50);
        System.Threading.Thread.Sleep (0);
        if (GlobalVars.OpenWebSpider.crawlerActPAUSE) {
            System.Threading.Thread.Sleep (300);
            continue;
        }
        outStr = string.Empty;
        GlobalVars.threadsVars.mutexAccessURLList.WaitOne ();
        if (GlobalVars.args.stressTest == true)
            pageToIndex = GlobalVars.threadsVars.currentDomain;
        else
            pageToIndex = GlobalVars.urlsLists.getPageByStatus (0);

        if (pageToIndex == null) {
            GlobalVars.threadsVars.mutexAccessURLList.ReleaseMutex ();
            continue;
        } else {
            try {
                pageToIndex.isIndexed = 2;
                GlobalVars.threadsVars.mutexAccessURLList.ReleaseMutex ();
                html htmlPage = new html ();
                outStr = outStr + "\nT[" + (int) threadID + "] \t Downloading... [ " + pageToIndex.GenerateURL () + " ] [Depth Level: " + pageToIndex._depthLevel + "]\n";
                if (GlobalVars.robotstxtVars.robotstxtCrawlDelay > 0 || GlobalVars.args.crawlDelay > 0) {
                    GlobalVars.threadsVars.mutexCrawlDelay.WaitOne ();
                    int crawlDelay2Use = (GlobalVars.robotstxtVars.robotstxtCrawlDelay > 0) ? GlobalVars.robotstxtVars.robotstxtCrawlDelay * 1000 : GlobalVars.args.crawlDelay * 1000;
                    System.Threading.Thread.Sleep (crawlDelay2Use);
                }
                long curTick = DateTime.Now.Ticks;
                htmlPage.getURL (pageToIndex, true);
                if (GlobalVars.robotstxtVars.robotstxtCrawlDelay > 0 || GlobalVars.args.crawlDelay > 0) {
                    GlobalVars.threadsVars.mutexCrawlDelay.ReleaseMutex ();
                }
                outStr = outStr + "T[" + (int) threadID + "] \t Downloaded ";
                if (htmlPage.HTML.Length > 0)
                    outStr = outStr + htmlPage.HTML.Length / 1024 + " Kb (" + htmlPage.HTML.Length + " bytes)";

                outStr = outStr + " in " + ((DateTime.Now.Ticks - curTick) / 10000) + " ms\n";
                outStr = outStr + "T[" + (int) threadID + "] \t HTTP Status Code: " + htmlPage.statusCode + " -][- Content-Type: " + htmlPage.contentType + "\n";
                if (htmlPage.errorString != "")
                    outStr = outStr + "T[" + (int) threadID + "] \t Error: " + htmlPage.errorString + "\n";

                if (GlobalVars.args.stressTest == false) {
                    if (htmlPage.statusCode == 200) {
                        if (htmlPage.contentType.StartsWith ("text/html")) {
                            htmlPage.checkMETA ();
                            string __title = htmlPage.getTitle ();
                            if (__title != string.Empty) {
                                pageToIndex._title = __title;
                                if (pageToIndex._title.Length > GlobalVars.dbLimits.maxTitleLength)
                                    pageToIndex._title = pageToIndex._title.Substring (0, 255);

                                outStr = outStr + "T[" + (int) threadID + "] \t Page Title: " + __title + "\n";
                            }
                            curTick = DateTime.Now.Ticks;
                            outStr = outStr + "T[" + (int) threadID + "] \t Getting URLs...";
                            if (htmlPage.META_ROBOTS_FOLLOW) {
                                int nValidURLs = htmlPage.GetURLs (htmlPage.HTML, pageToIndex);
                                outStr = outStr + "OK [" + ((DateTime.Now.Ticks - curTick) / 10000) + " ms]  ( " + nValidURLs + " valid URLs found )\n";
                            } else {
                                outStr = outStr + "NOFOLLOW (META ROBOTS)\n";
                            }
                        }
                        curTick = DateTime.Now.Ticks;
                        outStr = outStr + "T[" + (int) threadID + "] \t Indexing...";
                        if (htmlPage.META_ROBOTS_INDEX) {
                            if (__db.indexThisPage (pageToIndex, htmlPage) == true)
                                outStr = outStr + "OK [" + ((DateTime.Now.Ticks - curTick) / 10000) + " ms]\n";
                            else
                                outStr = outStr + "NOT INDEXED [" + ((DateTime.Now.Ticks - curTick) / 10000) + " ms ]\n";

                        } else {
                            outStr = outStr + "NOINDEX (META ROBOTS)\n";
                        }
                    } else {
                        GlobalVars.limits.curErrorCodes ++;
                        Console.WriteLine (" ##  Error code: " + htmlPage.statusCode + "  ## ");
                    }
                }
                GlobalVars.limits.curPages ++;
                GlobalVars.limits.curBytes += htmlPage.HTML.Length;
            }
            catch (Exception e) {
                outStr += "Error: " + e.Message + "\n";
            }
            finally {
                if (GlobalVars.args.stressTest == false)
                    pageToIndex.isIndexed = 1;
                else
                    pageToIndex.isIndexed = 0;

                nsGlobalOutput.output.write (outStr);
            }
        }
    }
    nsGlobalOutput.output.write ("T[" + (int) threadID + "] \t Worker thread: terminating gracefully.");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/mysql.cs.ifdefed" startline="68" endline="75">
public void disconnect () {
    if (dbcon != null) {
        dbcon.Close ();
        dbcon = null;
    }
}
</source>
<source file="examples/cs/OpenWebSpiderCS/mysql.cs.ifdefed" startline="80" endline="113">
public bool ping () {
    bool connState = true;
    if (isConnected == false || ! (dbcon.State == System.Data.ConnectionState.Open))
        connState = false;

    if (connState == true) {
        IDbCommand dbcmd = dbcon.CreateCommand ();
        dbcmd.CommandText = "SELECT 1+1";
        dbcmd.CommandTimeout = iMySQLMAXQueryTimeout;
        try {
            dbcmd.ExecuteNonQuery ();
        }
        catch (Exception e) {
            connState = false;
            nsGlobalOutput.output.write ("   - Error: " + e.Message);
        }
        finally {
            dbcmd.Dispose ();
            dbcmd = null;
        }
    }
    return connState;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/mysql.cs.ifdefed" startline="118" endline="160">
public string getValueFromTable (string table, string field, string where) {
    string strReturn = string.Empty;
    if (isConnected == false || ! (dbcon.State == System.Data.ConnectionState.Open))
        return strReturn;

    string sql = "SELECT CAST( " + field + " as CHAR )" + " FROM " + table + " WHERE 1=1 AND " + where + " LIMIT 1";
    IDbCommand dbcmd = dbcon.CreateCommand ();
    dbcmd.CommandText = sql;
    dbcmd.CommandTimeout = iMySQLMAXQueryTimeout;
    try {
        IDataReader reader = dbcmd.ExecuteReader ();
        if (reader.Read ()) {
            strReturn = (string) reader [0].ToString ();
        }
        reader.Close ();
        reader = null;
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("Unable to execute SQL Query: " + sql + "\nError [getValueFromTable()]: " + e.Message + "\n\n\n");
    }
    finally {
        dbcmd.Dispose ();
        dbcmd = null;
    }
    return strReturn;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/mysql.cs.ifdefed" startline="162" endline="203">
public bool executeSQLQuery (string SQL) {
    if (isConnected == false || ! (dbcon.State == System.Data.ConnectionState.Open))
        return false;

    IDbCommand dbcmd = dbcon.CreateCommand ();
    dbcmd.CommandType = CommandType.Text;
    dbcmd.CommandText = SQL;
    dbcmd.CommandTimeout = iMySQLMAXQueryTimeout;
    bool ret = true;
    try {
        dbcmd.ExecuteNonQuery ();
    }
    catch (Exception e) {
        ret = false;
        if (GlobalVars.mysqlConn.connHostList == null)
            nsGlobalOutput.output.write ("GlobalVars.mysqlConn.connHostList = null");

        if (GlobalVars.mysqlConn.connPageList == null)
            nsGlobalOutput.output.write ("GlobalVars.mysqlConn.connPageList = null");

        nsGlobalOutput.output.write ("Unable to execute SQL Query: " + SQL.Substring (0, 1000) + "\nMysql1 Connected: " + GlobalVars.mysqlConn.connHostList.isConnected + "\nMysql2 Connected: " + GlobalVars.mysqlConn.connPageList.isConnected + "\nError [executeSQLQuery()]: " + e.Message + "\n\n\n");
    }
    finally {
        dbcmd.Dispose ();
        dbcmd = null;
    }
    return ret;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/mysql.cs.ifdefed" startline="205" endline="237">
public IDataReader getSQLResult (string sql) {
    if (isConnected == false || ! (dbcon.State == System.Data.ConnectionState.Open))
        return null;

    IDbCommand dbcmd = dbcon.CreateCommand ();
    dbcmd.CommandText = sql;
    dbcmd.CommandTimeout = iMySQLMAXQueryTimeout;
    IDataReader reader = null;
    try {
        reader = dbcmd.ExecuteReader ();
    }
    catch (Exception e) {
        reader = null;
        nsGlobalOutput.output.write ("Unable to execute SQL Query: " + sql + "\nError [getSQLResult()]: " + e.Message + "\n\n\n");
    }
    finally {
        dbcmd.Dispose ();
        dbcmd = null;
    }
    return reader;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/openwebspider.cs.ifdefed" startline="18" endline="51">
static int Main (String [] args) {
    ows spider = new ows (1);
    if (spider.readCommandLine (args) == false)
        return 0;

    if (spider.readConfFile (GlobalVars.args.confFileName) == false)
        return 0;

    if (spider.isMysqlNeeded ())
        if (spider.mysqlConnect () == false)
            return 0;

    spider.showBanner ();
    spider.startCrawling ();
    spider.shutDown ();
    return 1;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/page.cs.ifdefed" startline="206" endline="223">
public string GetDir (string page) {
    string retDir = page;
    int lastSlash = 0;
    int hasQuestionMark = retDir.IndexOf ('?');
    if (hasQuestionMark > 0)
        retDir = retDir.Substring (0, hasQuestionMark);

    lastSlash = retDir.LastIndexOf ('/');
    retDir = (lastSlash == 0) ? "/" : retDir.Substring (0, lastSlash);
    if (retDir [retDir.Length - 1] != '/')
        retDir = retDir + "/";

    return retDir;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/page.cs.ifdefed" startline="229" endline="256">
public uint getPortNum (ref string h) {
    int colonPos;
    uint uiPort = 80;
    colonPos = h.LastIndexOf (':');
    try {
        if (colonPos > 0) {
            if (colonPos > 1 && colonPos + 1 < h.Length) {
                uiPort = UInt32.Parse (h.Substring ((colonPos + 1), h.Length - (colonPos + 1)));
                h = h.Remove (colonPos, h.Length - colonPos);
            } else {
                uiPort = 0;
            }
        }
    }
    catch {
        uiPort = 0;
    }
    return uiPort;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/page.cs.ifdefed" startline="293" endline="341">
public bool normalizePage () {
    if (! isValidPage)
        return false;

    for (int i = 1; i < _page.Length - 1; i ++) {
        if (_page [i - 1] != '.' && _page [i] == '.' && _page [i + 1] == '/') {
            _page = _page.Remove (i, 2);
            i -= 2;
        }
        if (i < 0)
            i = 0;

    }
    int dblPoint;
    while ((dblPoint = _page.IndexOf ("..")) > 0) {
        string tmpCurPath = _page.Substring (0, dblPoint - 1);
        int lastSlashBefore = tmpCurPath.LastIndexOf ('/');
        if (lastSlashBefore >= 0) {
            if (_page.Length >= dblPoint + 3)
                _page = _page.Remove (lastSlashBefore + 1, dblPoint - lastSlashBefore + 2);
            else
                _page = _page.Remove (lastSlashBefore + 1, dblPoint - lastSlashBefore + 1);

        } else {
            if (_page.Length > 3)
                _page = _page.Remove (dblPoint, 3);
            else
                _page = _page.Remove (dblPoint, 2);

        }
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/page.cs.ifdefed" startline="343" endline="346">
public string GenerateURL () {
    return "http://" + _hostname + ":" + _port + _page;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/page.cs.ifdefed" startline="352" endline="368">
public bool checkAddablePage () {
    if (! isValidPage)
        return false;

    if (GlobalVars.robotsTxtDisallows.isInitialized) {
        foreach (string __disallow in GlobalVars.robotsTxtDisallows.disallowList) {
            if (_page.StartsWith (__disallow, StringComparison.CurrentCultureIgnoreCase)) {
                return false;
            }
        }
    }
    return true;
}
</source>
<source file="examples/cs/OpenWebSpiderCS/conf.cs.ifdefed" startline="28" endline="208">
public static void parseFile (String filename) {
    nsGlobalOutput.output.write (" + Parsing Configuration File  [ " + filename + " ]");
    if (! File.Exists (filename)) {
        nsGlobalOutput.output.write ("   - " + filename + " not found!");
        return;
    }
    String line;
    String [] arguments;
    int iLine = 0;
    int iErrorNumber = 0;
    int sep;
    try {
        StreamReader sr = new StreamReader (filename);
        do
            {
                line = sr.ReadLine ();
                if (line == null)
                    continue;

                iLine ++;
                line = line.Trim ();
                if (line.Length == 0)
                    continue;

                if (line [0] == '#' || line [0] == '\r' || line [0] == '\n' || line [0] == 0)
                    continue;

                sep = line.IndexOf ('=');
                if (sep < 0) {
                    iErrorNumber ++;
                    nsGlobalOutput.output.write ("   - Error while parsing " + filename + " (Line: " + iLine + ")");
                    continue;
                }
                arguments = new String [2];
                arguments [0] = line.Substring (0, sep);
                arguments [1] = line.Substring (sep + 1, line.Length - sep - 1);
                arguments [0] = arguments [0].Trim ();
                arguments [1] = arguments [1].Trim ();
                if (arguments [0] == "mysqlserver1") {
                    mysqlServerHostList = arguments [1];
                    nsGlobalOutput.output.write ("   - Server[1]: " + arguments [1]);
                } else if (arguments [0] == "mysqlserver2") {
                    mysqlServerPageList = arguments [1];
                    nsGlobalOutput.output.write ("   - Server[2]: " + arguments [1]);
                } else if (arguments [0] == "port1") {
                    mysqlServerPort1 = arguments [1];
                    nsGlobalOutput.output.write ("   - Server[1] port: " + arguments [1]);
                } else if (arguments [0] == "port2") {
                    mysqlServerPort2 = arguments [1];
                    nsGlobalOutput.output.write ("   - Server[2] port: " + arguments [1]);
                } else if (arguments [0] == "db1") {
                    databaseHostList = arguments [1];
                    nsGlobalOutput.output.write ("   - Database[1]: " + arguments [1]);
                } else if (arguments [0] == "db2") {
                    databasePageList = arguments [1];
                    nsGlobalOutput.output.write ("   - Database[2]: " + arguments [1]);
                } else if (arguments [0] == "userdb1") {
                    mysqlUserNameHostList = arguments [1];
                    nsGlobalOutput.output.write ("   - Username[1]: " + arguments [1]);
                } else if (arguments [0] == "userdb2") {
                    mysqlUserNamePageList = arguments [1];
                    nsGlobalOutput.output.write ("   - Username[2]: " + arguments [1]);
                } else if (arguments [0] == "passdb1") {
                    mysqlPassWordHostList = arguments [1];
                    nsGlobalOutput.output.write ("   - Password[1]: ******");
                } else if (arguments [0] == "passdb2") {
                    mysqlPassWordPageList = arguments [1];
                    nsGlobalOutput.output.write ("   - Password[2]: ******");
                } else if (arguments [0] == "crawler_name") {
                    GlobalVars.OpenWebSpider.NAME = arguments [1];
                    nsGlobalOutput.output.write ("   - Crawler Name: " + GlobalVars.OpenWebSpider.NAME);
                } else if (arguments [0] == "crawler_version") {
                    GlobalVars.OpenWebSpider.VERSION = arguments [1];
                    nsGlobalOutput.output.write ("   - Crawler Version: " + GlobalVars.OpenWebSpider.VERSION);
                } else if (arguments [0] == "crawler_id") {
                    GlobalVars.OpenWebSpider.ID = arguments [1];
                    nsGlobalOutput.output.write ("   - Crawler ID: " + GlobalVars.OpenWebSpider.ID);
                } else if (arguments [0] == "sql_hostlist_where") {
                    sqlWhereHostlist = arguments [1];
                    nsGlobalOutput.output.write ("   - sql_hostlist_where: " + sqlWhereHostlist);
                } else {
                    iErrorNumber ++;
                    nsGlobalOutput.output.write ("\n   - Error while parsing " + filename + " (Line: " + iLine + ")");
                }
            } while (line != null);
        sr.Close ();
    }
    catch (Exception e) {
        nsGlobalOutput.output.write ("   - Exception: " + e.Message);
        return;
    }
    finally {
        if (iErrorNumber == 0) {
            if (databaseHostList.Length > 0 && databasePageList.Length > 0 && mysqlServerHostList.Length > 0 && mysqlServerPageList.Length > 0 && mysqlUserNameHostList.Length > 0 && mysqlUserNamePageList.Length > 0) {
                isConfFileParsed = true;
                GlobalVars.OpenWebSpider.USERAGENT = GlobalVars.OpenWebSpider.NAME + " v" + GlobalVars.OpenWebSpider.VERSION + " (http://www.openwebspider.org/)";
            } else {
                nsGlobalOutput.output.write ("   - Needed field(s) in " + filename + " missing! ");
            }
        }
    }
}
</source>
<source file="examples/cs/OpenWebSpiderCS/args.cs.ifdefed" startline="30" endline="65">
public static void showArgs () {
    nsGlobalOutput.output.write ("");
    nsGlobalOutput.output.write ("Usage:");
    nsGlobalOutput.output.write ("       " + System.AppDomain.CurrentDomain + " <arguments>");
    nsGlobalOutput.output.write ("\n Arguments:");
    nsGlobalOutput.output.write ("    --index, -i [URL]              Indexes this website");
    nsGlobalOutput.output.write ("    --add-hostlist                 Doesn't index the URL; it simply adds the hostname to the list of the Hosts (hostlist), prints its ID and and exits");
    nsGlobalOutput.output.write ("    --threads, -t [1-100]          Sets number of threads");
    nsGlobalOutput.output.write ("    -s                             Single Mode: On (Default: Off)");
    nsGlobalOutput.output.write ("    --images                       Indexes images");
    nsGlobalOutput.output.write ("    --pdf                          Indexes PDFs");
    nsGlobalOutput.output.write ("    --mp3                          Indexes MP3s");
    nsGlobalOutput.output.write ("    --cache                        Saves a copy of each indexed page (Default: Doesn't save cache)");
    nsGlobalOutput.output.write ("    --cache-compressed             Saves a compressed copy of each indexed page");
    nsGlobalOutput.output.write ("    --rels, -r [1,2]               Saves relationships between pages (Default: Doesn't save rels)");
    nsGlobalOutput.output.write ("                                       1: saves only hostnames");
    nsGlobalOutput.output.write ("                                       2: saves hostnames and pages");
    nsGlobalOutput.output.write ("    --add-external, -e             Adds External Hosts (Default: Doesn't add external hosts)");
    nsGlobalOutput.output.write ("    --conf-file [filename]         Sets a configuration file (Default: openwebspider.conf)");
    nsGlobalOutput.output.write ("    --no-index                     Doesen't index crawled pages");
    nsGlobalOutput.output.write ("    --keep-dup                     Doesen't delete duplicated pages");
    nsGlobalOutput.output.write ("    --crawl-delay [1-20]           Seconds between the download of a page and the next one");
    nsGlobalOutput.output.write ("    --stress-test [1-10000]        Simply downloads the same page x-times and exits");
    nsGlobalOutput.output.write ("    --req-timeout [1-1000]         HTTP Request Timeout (in seconds) (Default: 60 seconds)");
    nsGlobalOutput.output.write ("\n  Limits:");
    nsGlobalOutput.output.write ("    --max-depth, -m [0-1000]       Sets Max Depth Level");
    nsGlobalOutput.output.write ("    --max-pages, -l [1-1000000]    Sets Max Pages to Index (per domain)");
    nsGlobalOutput.output.write ("    --max-seconds, -c [1-100000]   Sets Max Seconds (per domain)");
    nsGlobalOutput.output.write ("    --max-kb, -k [1-100000]        Sets Max Kb to Download (per domain)");
    nsGlobalOutput.output.write ("    --errors [1-1000]              Sets Max HTTP Errors Code (per domain)");
    nsGlobalOutput.output.write ("\n  Help:");
    nsGlobalOutput.output.write ("    --help, -h                     This help!");
    nsGlobalOutput.output.write ("");
}
</source>
<source file="examples/cs/OpenWebSpiderCS/args.cs.ifdefed" startline="68" endline="489">
public static bool readArgs (String [] a) {
    nsGlobalOutput.output.write (" + Parsing Command Line Arguments...");
    startURL = string.Empty;
    singleHostMode = false;
    cachingMode = 0;
    relsMode = 0;
    addExternalHosts = false;
    crawlDelay = 0;
    confFileName = "openwebspider.conf";
    add2Hostlist = false;
    noIndex = false;
    stressTest = false;
    reqTimeout = 60;
    indexImages = false;
    indexPDF = false;
    indexMP3 = false;
    keepDup = false;
    for (int i = 0; i < a.Length; i ++) {
        switch (a [i]) {
            case "--index" : case "-i" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-i <URL>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    startURL = a [i];
                }
                break;
            case "--threads" : case "-t" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-t <n. threads[1-100]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.threadsVars.nThreads = int.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (-t <n. threads[1-100]>) Invalid number of threads");
                        return false;
                    }
                    if (GlobalVars.threadsVars.nThreads < 1 || GlobalVars.threadsVars.nThreads > 100) {
                        nsGlobalOutput.output.write ("   - (-t <n. threads[1-100]>) Invalid number of threads");
                        return false;
                    }
                }
                break;
            case "-s" :
                singleHostMode = true;
                break;
            case "--images" :
                indexImages = true;
                break;
            case "--pdf" :
                indexPDF = true;
                break;
            case "--mp3" :
                indexMP3 = true;
                break;
            case "--keep-dup" :
                keepDup = true;
                break;
            case "-m" : case "--max-depth" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-m <Max depth level[0-1000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.limits.maxDepth = int.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (-m <Max depth level[0-1000]>) Invalid number");
                        return false;
                    }
                    if (GlobalVars.limits.maxDepth < 0 || GlobalVars.limits.maxDepth > 1000) {
                        nsGlobalOutput.output.write ("   - (-m <Max depth level[0-1000]>) Invalid number");
                        return false;
                    }
                }
                break;
            case "-l" : case "--max-pages" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-l <Max Pages[1-1000000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.limits.maxPages = uint.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (-l <Max Pages[1-1000000]>) Invalid number");
                        return false;
                    }
                    if (GlobalVars.limits.maxPages < 1 || GlobalVars.limits.maxPages > 1000000) {
                        nsGlobalOutput.output.write ("   - (-l <Max Pages[1-1000000]>) Invalid number");
                        return false;
                    }
                }
                break;
            case "-c" : case "--max-seconds" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-c <Max seconds[1-100000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.limits.maxSeconds = uint.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (-c <Max seconds[1-100000]>) Invalid number");
                        return false;
                    }
                    if (GlobalVars.limits.maxSeconds < 1 || GlobalVars.limits.maxSeconds > 1000) {
                        nsGlobalOutput.output.write ("   - (-c <Max seconds[1-100000]>) Invalid number");
                        return false;
                    }
                }
                break;
            case "-k" : case "--max-kb" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-k <Max Kb[1-100000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.limits.maxKb = uint.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (-k <Max Kb[1-100000]>) Invalid number");
                        return false;
                    }
                    if (GlobalVars.limits.maxKb < 1 || GlobalVars.limits.maxKb > 100000) {
                        nsGlobalOutput.output.write ("   - (-k <Max Kb[1-100000]>) Invalid number");
                        return false;
                    }
                }
                break;
            case "--errors" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (--errors <Max HTTP Errors[1-1000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.limits.maxErrorCodes = uint.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (--errors <Max HTTP Errors[1-1000]>) Invalid number");
                        return false;
                    }
                    if (GlobalVars.limits.maxErrorCodes < 1 || GlobalVars.limits.maxErrorCodes > 1000) {
                        nsGlobalOutput.output.write ("   - (--errors <Max HTTP Errors[1-1000]>) Invalid number");
                        return false;
                    }
                }
                break;
            case "--cache" :
                cachingMode = 1;
                break;
            case "--cache-compressed" :
                cachingMode = 2;
                break;
            case "--conf-file" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (--conf-file <filename>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    confFileName = a [i];
                }
                break;
            case "-r" : case "--rels" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (-r <1: host rels; 2: page rels>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        relsMode = int.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (-r <1: host rels; 2: page rels>) Invalid value");
                        return false;
                    }
                    if (relsMode != 1 && relsMode != 2) {
                        nsGlobalOutput.output.write ("   - (-r <1: host rels; 2: page rels>) Invalid value");
                        return false;
                    }
                }
                break;
            case "--crawl-delay" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (--crawl-delay <seconds[1-20]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        crawlDelay = int.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (--crawl-delay <seconds[1-20]>) Invalid value");
                        return false;
                    }
                    if (crawlDelay < 1 || crawlDelay > 20) {
                        nsGlobalOutput.output.write ("   - (--crawl-delay <seconds[1-20]>) Invalid value");
                        return false;
                    }
                }
                break;
            case "--add-external" : case "-e" :
                addExternalHosts = true;
                break;
            case "--add-hostlist" :
                add2Hostlist = true;
                break;
            case "--no-index" :
                noIndex = true;
                break;
            case "--stress-test" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (--stress-test <times[1-10000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        GlobalVars.limits.maxPages = uint.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (--stress-test <times[1-10000]>) Invalid value");
                        return false;
                    }
                    if (GlobalVars.limits.maxPages < 1 || GlobalVars.limits.maxPages > 10000) {
                        nsGlobalOutput.output.write ("   - (--stress-test <times[1-10000]>) Invalid value");
                        return false;
                    }
                    stressTest = true;
                    singleHostMode = true;
                }
                break;
            case "--req-timeout" :
                if (i + 1 >= a.Length) {
                    nsGlobalOutput.output.write ("   - (--req-timeout <seconds[1-1000]>) No enough arguments");
                    return false;
                } else {
                    i ++;
                    try {
                        reqTimeout = int.Parse (a [i]);
                    }
                    catch {
                        nsGlobalOutput.output.write ("   - (--req-timeout <seconds[1-1000]>) Invalid value");
                        return false;
                    }
                    if (reqTimeout < 1 || reqTimeout > 1000) {
                        nsGlobalOutput.output.write ("   - (--req-timeout <seconds[1-1000]>) Invalid value");
                        return false;
                    }
                }
                break;
            case "-h" : case "--help" :
                showArgs ();
                break;
            default :
                nsGlobalOutput.output.write ("   - Unknown option argument [" + a [i] + "]\n\n");
                return false;
        }
    }
    if (startURL == string.Empty) {
        nsGlobalOutput.output.write ("   - (--index) Start URL needed!");
        return false;
    } else
        return true;

}
</source>
