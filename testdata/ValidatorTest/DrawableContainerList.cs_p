using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace Greenshot.Drawing
{
    [Serializable ()] public class DrawableContainerList : List < DrawableContainer >
    {
        public DrawableContainerList ()
        {
        }

        public Color ForeColor {
            get {
                if (Count > 0)
                    return this [Count - 1].ForeColor;

                return Color.Empty;
            }
            set {
                foreach (DrawableContainer dc in this)
                    dc.ForeColor = value;

            }
        }

        public Color BackColor {
            get {
                if (Count > 0)
                    return this [Count - 1].BackColor;

                return Color.Empty;
            }
            set {
                foreach (DrawableContainer dc in this)
                    dc.BackColor = value;

            }
        }

        public int Thickness {
            get {
                if (Count > 0)
                    return this [Count - 1].Thickness;

                return 0;
            }
            set {
                foreach (DrawableContainer dc in this)
                    dc.Thickness = value;

            }
        }

        public bool Selected {
            get {
                bool ret = true;
                foreach (DrawableContainer dc in this)
                    ret &= dc.Selected;

                return ret;
            }
            set {
                foreach (DrawableContainer dc in this)
                    dc.Selected = value;

            }
        }

        public Control Parent {
            get {
                if (Count > 0)
                    return this [Count - 1].Parent;

                return null;
            }
            set {
                foreach (DrawableContainer dc in this)
                    dc.Parent = value;

            }
        }
        public void MoveBy (int dx, int dy)
        {
            foreach (DrawableContainer dc in this) {
                dc.Left += dx;
                dc.Top += dy;
            }
        }

        public bool PropertySupported (DrawableContainer.Property prop)
        {
            foreach (DrawableContainer dc in this) {
                if (! dc.PropertySupported (prop))
                    return false;

            }
            return true;
        }

        public bool PropertySupportedBySome (DrawableContainer.Property prop)
        {
            bool ret = false;
            foreach (DrawableContainer dc in this) {
                ret |= dc.PropertySupported (prop);
            }
            return ret;
        }

        public void HideGrippers ()
        {
            foreach (DrawableContainer dc in this) {
                dc.HideGrippers ();
            }
        }

        public void ShowGrippers ()
        {
            foreach (DrawableContainer dc in this) {
                dc.ShowGrippers ();
            }
        }

        public bool ClickableAt (int x, int y)
        {
            bool ret = false;
            foreach (DrawableContainer dc in this) {
                ret |= dc.ClickableAt (x, y);
            }
            return ret;
        }

        public DrawableContainer ClickableElementAt (int x, int y)
        {
            for (int i = Count - 1; i >= 0; i --) {
                if (this [i].ClickableAt (x, y))
                    return this [i];

            }
            return null;
        }

        public void OnDoubleClick ()
        {
            foreach (DrawableContainer dc in this) {
                dc.OnDoubleClick ();
            }
        }

        public void Draw (Graphics g, DrawableContainer.RenderMode rm)
        {
            foreach (DrawableContainer dc in this) {
                dc.Draw (g, rm);
            }
        }

        public bool CanPullUp (DrawableContainerList elements)
        {
            if (elements.Count == 0 || elements.Count == this.Count)
                return false;

            foreach (DrawableContainer element in elements) {
                if (this.IndexOf (element) < this.Count - elements.Count)
                    return true;

            }
            return false;
        }

        public void PullElementsUp (DrawableContainerList elements)
        {
            for (int i = this.Count - 1; i >= 0; i --) {
                DrawableContainer dc = this [i];
                if (elements.Contains (dc)) {
                    if (Count > (i + 1) && ! elements.Contains (this [i + 1]))
                        SwapElements (i, i + 1);

                }
            }
        }

        public void PullElementsToTop (DrawableContainerList elements)
        {
            DrawableContainer [] dcs = this.ToArray ();
            for (int i = 0; i < dcs.Length; i ++) {
                DrawableContainer dc = dcs [i];
                if (elements.Contains (dc)) {
                    this.Remove (dc);
                    this.Add (dc);
                }
            }
        }

        public bool CanPushDown (DrawableContainerList elements)
        {
            if (elements.Count == 0 || elements.Count == this.Count)
                return false;

            foreach (DrawableContainer element in elements) {
                if (this.IndexOf (element) >= elements.Count)
                    return true;

            }
            return false;
        }

        public void PushElementsDown (DrawableContainerList elements)
        {
            for (int i = 0; i < Count; i ++) {
                DrawableContainer dc = this [i];
                if (elements.Contains (dc)) {
                    if ((i > 0) && ! elements.Contains (this [i - 1]))
                        SwapElements (i, i - 1);

                }
            }
        }

        public void PushElementsToBottom (DrawableContainerList elements)
        {
            DrawableContainer [] dcs = this.ToArray ();
            for (int i = dcs.Length - 1; i >= 0; i --) {
                DrawableContainer dc = dcs [i];
                if (elements.Contains (dc)) {
                    this.Remove (dc);
                    this.Insert (0, dc);
                }
            }
        }

        private void SwapElements (int index1, int index2)
        {
            if (index1 >= 0 && index1 < Count && index2 >= 0 && index2 < Count && index1 != index2) {
                DrawableContainer dc = this [index1];
                this [index1] = this [index2];
                this [index2] = dc;
            }
        }

    }

}

