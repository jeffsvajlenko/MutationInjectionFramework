<source file="examples/monit-4.2/alert.c.ifdefed" startline="80" endline="193">
{
    Service_T s;
    ASSERT (E);
    s = Event_get_source (E);
    if (s->maillist || Run.maillist) {
        Mail_T m;
        Mail_T n;
        sigset_t ns, os;
        Mail_T list = NULL;
        set_signal_block (& ns, & os);
        for (m = s->maillist; m; m = m->next) {
            if (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED)) {
                Mail_T tmp;
                NEW (tmp);
                copy_mail (tmp, m);
                if (Event_get_message (E)) {
                    tmp->opt_message = xstrdup (Event_get_message (E));
                }
                substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
                replace_bare_linefeed (& tmp);
                tmp->next = list;
                list = tmp;
                DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
            }
        }
        for (m = Run.maillist; m; m = m->next) {
            int skip = FALSE;
            for (n = s->maillist; n; n = n->next) {
                if (IS (m->to, n->to)) {
                    skip = TRUE;
                    break;
                }
            }
            if (!skip && (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED))) {
                Mail_T tmp;
                NEW (tmp);
                copy_mail (tmp, m);
                if (Event_get_message (E))
                    tmp->opt_message = xstrdup (Event_get_message (E));
                substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
                replace_bare_linefeed (& tmp);
                tmp->next = list;
                list = tmp;
                DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
            }
        }
        if (list) {
            sendmail (list);
            gc_mail_list (& list);
        }
        unset_signal_block (& os);
    }
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="89" endline="191">
{
    Mail_T m;
    Mail_T n;
    sigset_t ns, os;
    Mail_T list = NULL;
    set_signal_block (& ns, & os);
    for (m = s->maillist; m; m = m->next) {
        if (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED)) {
            Mail_T tmp;
            NEW (tmp);
            copy_mail (tmp, m);
            if (Event_get_message (E)) {
                tmp->opt_message = xstrdup (Event_get_message (E));
            }
            substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
            replace_bare_linefeed (& tmp);
            tmp->next = list;
            list = tmp;
            DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
        }
    }
    for (m = Run.maillist; m; m = m->next) {
        int skip = FALSE;
        for (n = s->maillist; n; n = n->next) {
            if (IS (m->to, n->to)) {
                skip = TRUE;
                break;
            }
        }
        if (!skip && (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED))) {
            Mail_T tmp;
            NEW (tmp);
            copy_mail (tmp, m);
            if (Event_get_message (E))
                tmp->opt_message = xstrdup (Event_get_message (E));
            substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
            replace_bare_linefeed (& tmp);
            tmp->next = list;
            list = tmp;
            DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
        }
    }
    if (list) {
        sendmail (list);
        gc_mail_list (& list);
    }
    unset_signal_block (& os);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="103" endline="132">
{
    if (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED)) {
        Mail_T tmp;
        NEW (tmp);
        copy_mail (tmp, m);
        if (Event_get_message (E)) {
            tmp->opt_message = xstrdup (Event_get_message (E));
        }
        substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
        replace_bare_linefeed (& tmp);
        tmp->next = list;
        list = tmp;
        DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
    }
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="108" endline="130">
{
    Mail_T tmp;
    NEW (tmp);
    copy_mail (tmp, m);
    if (Event_get_message (E)) {
        tmp->opt_message = xstrdup (Event_get_message (E));
    }
    substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
    replace_bare_linefeed (& tmp);
    tmp->next = list;
    list = tmp;
    DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="117" endline="119">
{
    tmp->opt_message = xstrdup (Event_get_message (E));
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="140" endline="179">
{
    int skip = FALSE;
    for (n = s->maillist; n; n = n->next) {
        if (IS (m->to, n->to)) {
            skip = TRUE;
            break;
        }
    }
    if (!skip && (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED))) {
        Mail_T tmp;
        NEW (tmp);
        copy_mail (tmp, m);
        if (Event_get_message (E))
            tmp->opt_message = xstrdup (Event_get_message (E));
        substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
        replace_bare_linefeed (& tmp);
        tmp->next = list;
        list = tmp;
        DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
    }
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="145" endline="151">
{
    if (IS (m->to, n->to)) {
        skip = TRUE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="147" endline="150">
{
    skip = TRUE;
    break;
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="157" endline="177">
{
    Mail_T tmp;
    NEW (tmp);
    copy_mail (tmp, m);
    if (Event_get_message (E))
        tmp->opt_message = xstrdup (Event_get_message (E));
    substitute (& tmp, s -> name, EVENT_DESCRIPTION (E));
    replace_bare_linefeed (& tmp);
    tmp->next = list;
    list = tmp;
    DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m -> to);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="182" endline="187">
{
    sendmail (list);
    gc_mail_list (& list);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="197" endline="223">
{
    char host [STRLEN];
    char *now = get_RFC822date (NULL);
    ASSERT (m && name && event);
    if (gethostname (host, sizeof (host)) < 0) {
        snprintf (host, STRLEN, "%s", LOCALHOST);
    }
    replace_string (& (* m) -> from, "$HOST", host);
    replace_string (& (* m) -> subject, "$DATE", now);
    replace_string (& (* m) -> message, "$DATE", now);
    replace_string (& (* m) -> subject, "$HOST", host);
    replace_string (& (* m) -> message, "$HOST", host);
    replace_string (& (* m) -> subject, "$PROGRAM", name);
    replace_string (& (* m) -> message, "$PROGRAM", name);
    replace_string (& (* m) -> subject, "$SERVICE", name);
    replace_string (& (* m) -> message, "$SERVICE", name);
    replace_string (& (* m) -> subject, "$EVENT", event);
    replace_string (& (* m) -> message, "$EVENT", event);
    FREE (now);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="205" endline="207">
{
    snprintf (host, STRLEN, "%s", LOCALHOST);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="227" endline="252">
{
    ASSERT (n && o);
    n->to = xstrdup (o->to);
    n->from = o->from ? xstrdup (o->from) : Run.MailFormat.from ? xstrdup (Run.MailFormat.from) : xstrdup (ALERT_FROM);
    n->subject = o->subject ? xstrdup (o->subject) : Run.MailFormat.subject ? xstrdup (Run.MailFormat.subject) : xstrdup (ALERT_SUBJECT);
    n->message = o->message ? xstrdup (o->message) : Run.MailFormat.message ? xstrdup (Run.MailFormat.message) : xstrdup (ALERT_MESSAGE);
    n->opt_message = NULL;
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="256" endline="266">
{
    replace_string (& (* m) -> message, "\r\n", "\n");
    replace_string (& (* m) -> message, "\n", "\r\n");
    if ((*m)->opt_message) {
        replace_string (& (* m) -> opt_message, "\r\n", "\n");
        replace_string (& (* m) -> opt_message, "\n", "\r\n");
    }
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="261" endline="264">
{
    replace_string (& (* m) -> opt_message, "\r\n", "\n");
    replace_string (& (* m) -> opt_message, "\n", "\r\n");
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="91" endline="113">
{
    Service_T s;
    ASSERT (action);
    for (s = servicelist; s; s = s->next) {
        if (s->visited)
            continue;
        if (exist_daemon ()) {
            d_check_service (s -> name, action);
        }
        else {
            check_service (s -> name, action);
        }
    }
    reset_depend ();
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="98" endline="109">
{
    if (s->visited)
        continue;
    if (exist_daemon ()) {
        d_check_service (s -> name, action);
    }
    else {
        check_service (s -> name, action);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="102" endline="104">
{
    d_check_service (s -> name, action);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="106" endline="108">
{
    check_service (s -> name, action);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="122" endline="148">
{
    Service_T s;
    ASSERT (G);
    ASSERT (action);
    for (s = servicelist; s; s = s->next) {
        if (s->visited)
            continue;
        if (IS (s->group, G)) {
            if (exist_daemon ()) {
                d_check_service (s -> name, action);
            }
            else {
                check_service (s -> name, action);
            }
        }
    }
    reset_depend ();
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="130" endline="144">
{
    if (s->visited)
        continue;
    if (IS (s->group, G)) {
        if (exist_daemon ()) {
            d_check_service (s -> name, action);
        }
        else {
            check_service (s -> name, action);
        }
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="134" endline="143">
{
    if (exist_daemon ()) {
        d_check_service (s -> name, action);
    }
    else {
        check_service (s -> name, action);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="136" endline="138">
{
    d_check_service (s -> name, action);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="140" endline="142">
{
    check_service (s -> name, action);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="157" endline="180">
{
    Service_T s;
    ASSERT (P);
    ASSERT (action);
    if (NULL == (s = get_service (P))) {
        log ("%s: Cannot %s program '%s' -- not found in %s\n", prog, action, P, Run.controlfile);
        return;
    }
    if (exist_daemon ()) {
        d_check_service (P, action);
    }
    else {
        check_service (P, action);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="165" endline="169">
{
    log ("%s: Cannot %s program '%s' -- not found in %s\n", prog, action, P, Run.controlfile);
    return;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="172" endline="174">
{
    d_check_service (P, action);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="176" endline="178">
{
    check_service (P, action);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="189" endline="220">
{
    Socket_T s;
    char *auth = get_basic_authentication_header ();
    ASSERT (P);
    ASSERT (action);
    s = socket_new (Run.bind_addr ? Run.bind_addr : "localhost", Run.httpdport, SOCKET_TCP, Run.httpdssl);
    if (!s) {
        log ("%s: Cannot connect to the monit daemon. " "Did you start it with http support?\n", prog);
        goto error;
    }
    else {
        socket_print (s, "GET /%s?action=%s HTTP/1.0\r\n%s\r\n", P, action, auth);
        socket_free (& s);
    }
error :
    FREE (auth);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="202" endline="208">
{
    log ("%s: Cannot connect to the monit daemon. " "Did you start it with http support?\n", prog);
    goto error;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="210" endline="215">
{
    socket_print (s, "GET /%s?action=%s HTTP/1.0\r\n%s\r\n", P, action, auth);
    socket_free (& s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="230" endline="322">
{
    Service_T s = NULL;
    ASSERT (P);
    ASSERT (action);
    if (NULL == (s = get_service (P))) {
        log ("%s: Cannot %s program '%s' -- not found in %s\n", prog, action, P, Run.controlfile);
        return;
    }
    if (IS (action, "start")) {
        if (s->type == TYPE_PROCESS && is_process_running (s)) {
            DEBUG ("%s: Process already running -- process %s\n", prog, P);
            monitor_set (s);
            return;
        }
        if (s->type == TYPE_PROCESS && !s->start) {
            DEBUG ("%s: Start method not defined -- process %s\n", prog, P);
            monitor_set (s);
            return;
        }
        do_depend (s, "stop");
        do_start (s);
        do_depend (s, "start");
    }
    else if (IS (action, "stop")) {
        if (s->type == TYPE_PROCESS && !s->stop) {
            DEBUG ("%s: Stop method not defined -- process %s\n", prog, P);
            monitor_unset (s);
            return;
        }
        do_depend (s, "stop");
        do_stop (s);
    }
    else if (IS (action, "restart")) {
        if (s->type == TYPE_PROCESS && (!s->start || !s->stop)) {
            DEBUG ("%s: Start or stop method not defined -- process %s\n", prog, P);
            monitor_set (s);
            return;
        }
        else {
            log ("Trying to restart '%s'\n", s -> name);
        }
        do_depend (s, "stop");
        if (do_stop (s)) {
            do_start (s);
            do_depend (s, "start");
        }
    }
    else if (IS (action, "monitor")) {
        do_monitor (s);
    }
    else if (IS (action, "unmonitor")) {
        do_depend (s, "unmonitor");
        do_unmonitor (s);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="238" endline="242">
{
    log ("%s: Cannot %s program '%s' -- not found in %s\n", prog, action, P, Run.controlfile);
    return;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="245" endline="265">
{
    if (s->type == TYPE_PROCESS && is_process_running (s)) {
        DEBUG ("%s: Process already running -- process %s\n", prog, P);
        monitor_set (s);
        return;
    }
    if (s->type == TYPE_PROCESS && !s->start) {
        DEBUG ("%s: Start method not defined -- process %s\n", prog, P);
        monitor_set (s);
        return;
    }
    do_depend (s, "stop");
    do_start (s);
    do_depend (s, "start");
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="248" endline="252">
{
    DEBUG ("%s: Process already running -- process %s\n", prog, P);
    monitor_set (s);
    return;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="255" endline="259">
{
    DEBUG ("%s: Start method not defined -- process %s\n", prog, P);
    monitor_set (s);
    return;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="267" endline="279">
{
    if (s->type == TYPE_PROCESS && !s->stop) {
        DEBUG ("%s: Stop method not defined -- process %s\n", prog, P);
        monitor_unset (s);
        return;
    }
    do_depend (s, "stop");
    do_stop (s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="270" endline="274">
{
    DEBUG ("%s: Stop method not defined -- process %s\n", prog, P);
    monitor_unset (s);
    return;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="281" endline="302">
{
    if (s->type == TYPE_PROCESS && (!s->start || !s->stop)) {
        DEBUG ("%s: Start or stop method not defined -- process %s\n", prog, P);
        monitor_set (s);
        return;
    }
    else {
        log ("Trying to restart '%s'\n", s -> name);
    }
    do_depend (s, "stop");
    if (do_stop (s)) {
        do_start (s);
        do_depend (s, "start");
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="284" endline="288">
{
    DEBUG ("%s: Start or stop method not defined -- process %s\n", prog, P);
    monitor_set (s);
    return;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="290" endline="292">
{
    log ("Trying to restart '%s'\n", s -> name);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="296" endline="300">
{
    do_start (s);
    do_depend (s, "start");
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="304" endline="311">
{
    do_monitor (s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="313" endline="320">
{
    do_depend (s, "unmonitor");
    do_unmonitor (s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="329" endline="339">
{
    Service_T s;
    for (s = servicelist; s; s = s->next) {
        s->visited = FALSE;
        s->depend_visited = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="334" endline="337">
{
    s->visited = FALSE;
    s->depend_visited = FALSE;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="351" endline="398">
{
    ASSERT (s);
    if (s->visited)
        return;
    s->visited = TRUE;
    if (s->dependantlist) {
        Dependant_T d;
        for (d = s->dependantlist; d; d = d->next) {
            Service_T parent = get_service (d->dependant);
            ASSERT (parent);
            do_start (parent);
        }
    }
    if (s->start && (s->type != TYPE_PROCESS || !is_process_running (s))) {
        int status;
        pthread_t thread;
        log ("start: (%s) %s\n", s -> name, s -> start -> arg [0]);
        spawn (s, s -> start, "Started");
        if (s->type == TYPE_PROCESS) {
            status = pthread_create (&thread, NULL, wait_start, s);
            if (status != 0) {
                log ("Warning: Failed to create the start controller thread. " "Thread error -- %s.\n", strerror (status));
            }
        }
    }
    monitor_set (s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="361" endline="374">
{
    Dependant_T d;
    for (d = s->dependantlist; d; d = d->next) {
        Service_T parent = get_service (d->dependant);
        ASSERT (parent);
        do_start (parent);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="366" endline="372">
{
    Service_T parent = get_service (d->dependant);
    ASSERT (parent);
    do_start (parent);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="377" endline="394">
{
    int status;
    pthread_t thread;
    log ("start: (%s) %s\n", s -> name, s -> start -> arg [0]);
    spawn (s, s -> start, "Started");
    if (s->type == TYPE_PROCESS) {
        status = pthread_create (&thread, NULL, wait_start, s);
        if (status != 0) {
            log ("Warning: Failed to create the start controller thread. " "Thread error -- %s.\n", strerror (status));
        }
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="384" endline="393">
{
    status = pthread_create (&thread, NULL, wait_start, s);
    if (status != 0) {
        log ("Warning: Failed to create the start controller thread. " "Thread error -- %s.\n", strerror (status));
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="389" endline="392">
{
    log ("Warning: Failed to create the start controller thread. " "Thread error -- %s.\n", strerror (status));
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="407" endline="439">
{
    ASSERT (s);
    if (s->depend_visited)
        return TRUE;
    s->depend_visited = TRUE;
    monitor_unset (s);
    if (s->type == TYPE_PROCESS) {
        memset (s -> procinfo, 0, sizeof * (s -> procinfo));
    }
    if (s->stop && (s->type != TYPE_PROCESS || is_process_running (s))) {
        log ("stop: (%s) %s\n", s -> name, s -> stop -> arg [0]);
        spawn (s, s -> stop, "Stopped");
        if (s->type == TYPE_PROCESS) {
            return wait_stop (s);
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="419" endline="422">
{
    memset (s -> procinfo, 0, sizeof * (s -> procinfo));
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="425" endline="435">
{
    log ("stop: (%s) %s\n", s -> name, s -> stop -> arg [0]);
    spawn (s, s -> stop, "Stopped");
    if (s->type == TYPE_PROCESS) {
        return wait_stop (s);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="430" endline="433">
{
    return wait_stop (s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="448" endline="474">
{
    ASSERT (s);
    if (s->visited)
        return;
    s->visited = TRUE;
    if (s->dependantlist) {
        Dependant_T d;
        for (d = s->dependantlist; d; d = d->next) {
            Service_T parent = get_service (d->dependant);
            ASSERT (parent);
            do_monitor (parent);
        }
    }
    monitor_set (s);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="458" endline="470">
{
    Dependant_T d;
    for (d = s->dependantlist; d; d = d->next) {
        Service_T parent = get_service (d->dependant);
        ASSERT (parent);
        do_monitor (parent);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="463" endline="469">
{
    Service_T parent = get_service (d->dependant);
    ASSERT (parent);
    do_monitor (parent);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="482" endline="499">
{
    ASSERT (s);
    if (s->depend_visited)
        return;
    s->depend_visited = TRUE;
    monitor_unset (s);
    if (s->type == TYPE_PROCESS) {
        memset (s -> procinfo, 0, sizeof * (s -> procinfo));
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="494" endline="497">
{
    memset (s -> procinfo, 0, sizeof * (s -> procinfo));
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="507" endline="519">
{
    ASSERT (s);
    if (!s->do_monitor) {
        LOCK (Run.mutex)
        s->do_monitor = TRUE;
        END_LOCK;
        DEBUG ("Monitoring enabled -- service %s\n", s -> name);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="512" endline="517">
{
    LOCK (Run.mutex)
    s->do_monitor = TRUE;
    END_LOCK;
    DEBUG ("Monitoring enabled -- service %s\n", s -> name);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="527" endline="539">
{
    ASSERT (s);
    if (s->do_monitor) {
        LOCK (Run.mutex)
        s->do_monitor = FALSE;
        END_LOCK;
        DEBUG ("Monitoring disabled -- service %s\n", s -> name);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="532" endline="537">
{
    LOCK (Run.mutex)
    s->do_monitor = FALSE;
    END_LOCK;
    DEBUG ("Monitoring disabled -- service %s\n", s -> name);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="552" endline="590">
{
    Service_T child;
    ASSERT (s);
    for (child = servicelist; child; child = child->next) {
        if (child->dependantlist) {
            Dependant_T d;
            for (d = child->dependantlist; d; d = d->next) {
                if (IS (d->dependant, s->name)) {
                    if (IS (action, "start"))
                        do_start (child);
                    else if (IS (action, "monitor"))
                        do_monitor (child);
                    do_depend (child, action);
                    if (IS (action, "stop"))
                        do_stop (child);
                    else if (IS (action, "unmonitor"))
                        do_unmonitor (child);
                    break;
                }
            }
        }
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="559" endline="589">
{
    if (child->dependantlist) {
        Dependant_T d;
        for (d = child->dependantlist; d; d = d->next) {
            if (IS (d->dependant, s->name)) {
                if (IS (action, "start"))
                    do_start (child);
                else if (IS (action, "monitor"))
                    do_monitor (child);
                do_depend (child, action);
                if (IS (action, "stop"))
                    do_stop (child);
                else if (IS (action, "unmonitor"))
                    do_unmonitor (child);
                break;
            }
        }
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="562" endline="588">
{
    Dependant_T d;
    for (d = child->dependantlist; d; d = d->next) {
        if (IS (d->dependant, s->name)) {
            if (IS (action, "start"))
                do_start (child);
            else if (IS (action, "monitor"))
                do_monitor (child);
            do_depend (child, action);
            if (IS (action, "stop"))
                do_stop (child);
            else if (IS (action, "unmonitor"))
                do_unmonitor (child);
            break;
        }
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="567" endline="587">
{
    if (IS (d->dependant, s->name)) {
        if (IS (action, "start"))
            do_start (child);
        else if (IS (action, "monitor"))
            do_monitor (child);
        do_depend (child, action);
        if (IS (action, "stop"))
            do_stop (child);
        else if (IS (action, "unmonitor"))
            do_unmonitor (child);
        break;
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="570" endline="586">
{
    if (IS (action, "start"))
        do_start (child);
    else if (IS (action, "monitor"))
        do_monitor (child);
    do_depend (child, action);
    if (IS (action, "stop"))
        do_stop (child);
    else if (IS (action, "unmonitor"))
        do_unmonitor (child);
    break;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="600" endline="623">
{
    Service_T s = service;
    int max_tries = Run.polltime;
    ASSERT (s);
    pthread_detach (pthread_self ());
    while (max_tries-- && !Run.stopped) {
        if (is_process_running (s))
            break;
        sleep (1);
    }
    if (!is_process_running (s)) {
        Event_post (s, EVENT_FAILED, "Failed to start '%s'\n", s -> name);
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="610" endline="614">
{
    if (is_process_running (s))
        break;
    sleep (1);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="617" endline="619">
{
    Event_post (s, EVENT_FAILED, "Failed to start '%s'\n", s -> name);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="636" endline="657">
{
    int max_tries = Run.polltime;
    ASSERT (s);
    while (max_tries-- && !Run.stopped) {
        if (!is_process_running (s))
            break;
        sleep (1);
    }
    if (is_process_running (s)) {
        Event_post (s, EVENT_FAILED, "Failed to stop '%s'\n", s -> name);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="643" endline="647">
{
    if (!is_process_running (s))
        break;
    sleep (1);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="650" endline="653">
{
    Event_post (s, EVENT_FAILED, "Failed to stop '%s'\n", s -> name);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="82" endline="143">
{
    pid_t pid;
    umask (0);
    if ((pid = fork ()) < 0) {
        log ("Cannot fork of a new process\n");
        exit (1);
    }
    else if (pid != 0) {
        _exit (0);
    }
    setsid ();
    if ((pid = fork ()) < 0) {
        log ("Cannot fork of a new process\n");
        exit (1);
    }
    else if (pid != 0) {
        _exit (0);
    }
    if (chdir ("/") < 0) {
        log ("Cannot chdir to / -- %s\n", STRERROR);
        exit (1);
    }
    redirect_stdfd ();
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="95" endline="100">
{
    log ("Cannot fork of a new process\n");
    exit (1);
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="102" endline="106">
{
    _exit (0);
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="111" endline="116">
{
    log ("Cannot fork of a new process\n");
    exit (1);
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="118" endline="122">
{
    _exit (0);
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="130" endline="135">
{
    log ("Cannot chdir to / -- %s\n", STRERROR);
    exit (1);
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="152" endline="186">
{
    pid_t pid;
    if ((pid = exist_daemon ()) > 0) {
        if (kill (pid, sig) < 0) {
            log ("%s: Cannot send signal to daemon process -- %s\n", prog, STRERROR);
            return FALSE;
        }
    }
    else {
        log ("%s: No daemon process found\n", prog);
        return TRUE;
    }
    if (sig == SIGTERM) {
        fprintf (stdout, "%s daemon with pid [%d] killed\n", prog, (int) pid);
        fflush (stdout);
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="157" endline="167">
{
    if (kill (pid, sig) < 0) {
        log ("%s: Cannot send signal to daemon process -- %s\n", prog, STRERROR);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="160" endline="165">
{
    log ("%s: Cannot send signal to daemon process -- %s\n", prog, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="169" endline="174">
{
    log ("%s: No daemon process found\n", prog);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="177" endline="182">
{
    fprintf (stdout, "%s daemon with pid [%d] killed\n", prog, (int) pid);
    fflush (stdout);
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="194" endline="206">
{
    pid_t pid;
    errno = 0;
    if ((pid = get_pid (Run.pidfile)))
        if ((getpgid (pid)) > -1 || (errno == EPERM))
            return ((int) pid);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="83" endline="113">
{
    struct stat buf;
    ASSERT (devinfo);
    ASSERT (object);
    if (stat (object, &buf) != 0) {
        log ("%s: Cannot stat '%s' -- %s\n", prog, object, STRERROR);
        return NULL;
    }
    if (S_ISREG (buf.st_mode) || S_ISDIR (buf.st_mode)) {
        return strncpy (devinfo->mntpath, object, sizeof (devinfo->mntpath));
    }
    else if (S_ISBLK (buf.st_mode)) {
        return DeviceInfo_MountPoint_sysdep (devinfo, object);
    }
    log ("%s: Not file, directory or block special device: '%s'", prog, object);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="91" endline="94">
{
    log ("%s: Cannot stat '%s' -- %s\n", prog, object, STRERROR);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="97" endline="101">
{
    return strncpy (devinfo->mntpath, object, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="103" endline="107">
{
    return DeviceInfo_MountPoint_sysdep (devinfo, object);
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="126" endline="138">
{
    ASSERT (devinfo);
    ASSERT (object);
    if (!DeviceInfo_Path (devinfo, object)) {
        return FALSE;
    }
    return DeviceInfo_Usage_sysdep (devinfo);
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="132" endline="134">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_AIX.c.ifdefed" startline="44" endline="50">
{
    log ("%s: Unsupported mounted filesystem information method", prog);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_AIX.c.ifdefed" startline="60" endline="66">
{
    log ("%s: Unsupported filesystem informations gathering method\n", prog);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_DARWIN.c.ifdefed" startline="66" endline="82">
{
    struct statfs usage;
    ASSERT (devinfo);
    ASSERT (blockdev);
    if (statfs (blockdev, &usage) != 0) {
        log ("%s: Error getting mountpoint for device '%s' -- %s\n", prog, blockdev, STRERROR);
        return NULL;
    }
    return strncpy (devinfo->mntpath, usage.f_mntonname, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/sysdep_DARWIN.c.ifdefed" startline="74" endline="78">
{
    log ("%s: Error getting mountpoint for device '%s' -- %s\n", prog, blockdev, STRERROR);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_DARWIN.c.ifdefed" startline="93" endline="115">
{
    struct statfs usage;
    ASSERT (devinfo);
    if (statfs (devinfo->mntpath, &usage) != 0) {
        log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
        return FALSE;
    }
    devinfo->f_bsize = usage.f_bsize;
    devinfo->f_blocks = usage.f_blocks;
    devinfo->f_blocksfree = usage.f_bavail;
    devinfo->f_blocksfreetotal = usage.f_bfree;
    devinfo->f_files = usage.f_files;
    devinfo->f_filesfree = usage.f_ffree;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_DARWIN.c.ifdefed" startline="100" endline="104">
{
    log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_FREEBSD.c.ifdefed" startline="66" endline="82">
{
    struct statfs usage;
    ASSERT (devinfo);
    ASSERT (blockdev);
    if (statfs (blockdev, &usage) != 0) {
        log ("%s: Error getting mountpoint for device '%s' -- %s\n", prog, blockdev, STRERROR);
        return NULL;
    }
    return strncpy (devinfo->mntpath, usage.f_mntonname, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/sysdep_FREEBSD.c.ifdefed" startline="74" endline="78">
{
    log ("%s: Error getting mountpoint for device '%s' -- %s\n", prog, blockdev, STRERROR);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_FREEBSD.c.ifdefed" startline="93" endline="115">
{
    struct statfs usage;
    ASSERT (devinfo);
    if (statfs (devinfo->mntpath, &usage) != 0) {
        log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
        return FALSE;
    }
    devinfo->f_bsize = usage.f_bsize;
    devinfo->f_blocks = usage.f_blocks;
    devinfo->f_blocksfree = usage.f_bavail;
    devinfo->f_blocksfreetotal = usage.f_bfree;
    devinfo->f_files = usage.f_files;
    devinfo->f_filesfree = usage.f_ffree;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_FREEBSD.c.ifdefed" startline="100" endline="104">
{
    log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="63" endline="96">
{
    struct mntent *mnt;
    FILE *mntfd;
    ASSERT (devinfo);
    ASSERT (blockdev);
    if ((mntfd = setmntent ("/etc/mnttab", "r")) == NULL) {
        log ("%s: Cannot open /etc/mnttab file", prog);
        return NULL;
    }
    while ((mnt = getmntent (mntfd)) != NULL) {
        if (IS (blockdev, mnt->mnt_fsname)) {
            endmntent (mntfd);
            return strncpy (devinfo->mntpath, mnt->mnt_dir, sizeof (devinfo->mntpath));
        }
    }
    endmntent (mntfd);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="73" endline="76">
{
    log ("%s: Cannot open /etc/mnttab file", prog);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="80" endline="90">
{
    if (IS (blockdev, mnt->mnt_fsname)) {
        endmntent (mntfd);
        return strncpy (devinfo->mntpath, mnt->mnt_dir, sizeof (devinfo->mntpath));
    }
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="83" endline="88">
{
    endmntent (mntfd);
    return strncpy (devinfo->mntpath, mnt->mnt_dir, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="107" endline="129">
{
    struct statfs usage;
    ASSERT (devinfo);
    if (statfsdev (devinfo->mntpath, &usage) != 0) {
        log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
        return FALSE;
    }
    devinfo->f_bsize = usage.f_bsize;
    devinfo->f_blocks = usage.f_blocks;
    devinfo->f_blocksfree = usage.f_bavail;
    devinfo->f_blocksfreetotal = usage.f_bfree;
    devinfo->f_files = usage.f_files;
    devinfo->f_filesfree = usage.f_ffree;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="114" endline="118">
{
    log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="71" endline="104">
{
    struct mntent *mnt;
    FILE *mntfd;
    ASSERT (devinfo);
    ASSERT (blockdev);
    if ((mntfd = setmntent ("/etc/mtab", "r")) == NULL) {
        log ("%s: Cannot open /etc/mtab file", prog);
        return NULL;
    }
    while ((mnt = getmntent (mntfd)) != NULL) {
        if (IS (blockdev, mnt->mnt_fsname)) {
            endmntent (mntfd);
            return strncpy (devinfo->mntpath, mnt->mnt_dir, sizeof (devinfo->mntpath));
        }
    }
    endmntent (mntfd);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="81" endline="84">
{
    log ("%s: Cannot open /etc/mtab file", prog);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="88" endline="98">
{
    if (IS (blockdev, mnt->mnt_fsname)) {
        endmntent (mntfd);
        return strncpy (devinfo->mntpath, mnt->mnt_dir, sizeof (devinfo->mntpath));
    }
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="91" endline="96">
{
    endmntent (mntfd);
    return strncpy (devinfo->mntpath, mnt->mnt_dir, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="115" endline="137">
{
    struct statfs usage;
    ASSERT (devinfo);
    if (statfs (devinfo->mntpath, &usage) != 0) {
        log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
        return FALSE;
    }
    devinfo->f_bsize = usage.f_bsize;
    devinfo->f_blocks = usage.f_blocks;
    devinfo->f_blocksfree = usage.f_bavail;
    devinfo->f_blocksfreetotal = usage.f_bfree;
    devinfo->f_files = usage.f_files;
    devinfo->f_filesfree = usage.f_ffree;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="122" endline="126">
{
    log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_OPENBSD.c.ifdefed" startline="66" endline="82">
{
    struct statfs usage;
    ASSERT (devinfo);
    ASSERT (blockdev);
    if (statfs (blockdev, &usage) != 0) {
        log ("%s: Error getting mountpoint for device '%s' -- %s\n", prog, blockdev, STRERROR);
        return NULL;
    }
    return strncpy (devinfo->mntpath, usage.f_mntonname, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/sysdep_OPENBSD.c.ifdefed" startline="74" endline="78">
{
    log ("%s: Error getting mountpoint for device '%s' -- %s\n", prog, blockdev, STRERROR);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_OPENBSD.c.ifdefed" startline="93" endline="115">
{
    struct statfs usage;
    ASSERT (devinfo);
    if (statfs (devinfo->mntpath, &usage) != 0) {
        log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
        return FALSE;
    }
    devinfo->f_bsize = usage.f_bsize;
    devinfo->f_blocks = usage.f_blocks;
    devinfo->f_blocksfree = usage.f_bavail;
    devinfo->f_blocksfreetotal = usage.f_bfree;
    devinfo->f_files = usage.f_files;
    devinfo->f_filesfree = usage.f_ffree;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_OPENBSD.c.ifdefed" startline="100" endline="104">
{
    log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="71" endline="104">
{
    struct mnttab mnt;
    FILE *mntfd;
    ASSERT (devinfo);
    ASSERT (blockdev);
    if ((mntfd = fopen ("/etc/mnttab", "r")) == NULL) {
        log ("%s: Cannot open /etc/mnttab file", prog);
        return NULL;
    }
    while (getmntent (mntfd, &mnt) == 0) {
        if (IS (blockdev, mnt.mnt_special)) {
            fclose (mntfd);
            return strncpy (devinfo->mntpath, mnt.mnt_mountp, sizeof (devinfo->mntpath));
        }
    }
    fclose (mntfd);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="81" endline="84">
{
    log ("%s: Cannot open /etc/mnttab file", prog);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="88" endline="98">
{
    if (IS (blockdev, mnt.mnt_special)) {
        fclose (mntfd);
        return strncpy (devinfo->mntpath, mnt.mnt_mountp, sizeof (devinfo->mntpath));
    }
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="91" endline="96">
{
    fclose (mntfd);
    return strncpy (devinfo->mntpath, mnt.mnt_mountp, sizeof (devinfo->mntpath));
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="115" endline="137">
{
    struct statvfs usage;
    ASSERT (devinfo);
    if (statvfs (devinfo->mntpath, &usage) != 0) {
        log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
        return FALSE;
    }
    devinfo->f_bsize = usage.f_bsize;
    devinfo->f_blocks = usage.f_blocks / (usage.f_frsize ? (usage.f_bsize / usage.f_frsize) : 1);
    devinfo->f_blocksfree = usage.f_bavail / (usage.f_frsize ? (usage.f_bsize / usage.f_frsize) : 1);
    devinfo->f_blocksfreetotal = usage.f_bfree / (usage.f_frsize ? (usage.f_bsize / usage.f_frsize) : 1);
    devinfo->f_files = usage.f_files;
    devinfo->f_filesfree = usage.f_ffree;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="122" endline="126">
{
    log ("%s: Error getting usage statistics for device '%s' -- %s\n", prog, devinfo -> mntpath, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/device/sysdep_UNKNOWN.c.ifdefed" startline="44" endline="50">
{
    log ("%s: Unsupported mounted filesystem information method", prog);
    return NULL;
}
</source>
<source file="examples/monit-4.2/device/sysdep_UNKNOWN.c.ifdefed" startline="60" endline="66">
{
    log ("%s: Unsupported filesystem informations gathering method\n", prog);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="84" endline="95">
{
    set_sandbox ();
    set_environment ();
    atexit (destroy_env);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="102" endline="110">
{
    FREE (Run.Env.cwd);
    FREE (Run.Env.home);
    FREE (Run.Env.user);
    FREE (Run.localhostname);
    FREE (Run.controlfile);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="148" endline="189">
{
    int i;
    struct stat st;
    extern char **environ;
    char *path = "PATH=/bin:/usr/bin:/sbin:/usr/sbin";
    environ[0] = 0;
    if (putenv (path)) {
        log ("%s: cannot set the PATH variable -- %s\n", prog, STRERROR);
        exit (1);
    }
    for (i = 0; i < 3; i++) {
        if (fstat (i, &st) == -1 && open ("/dev/null", O_RDWR) != i) {
            log ("Cannot open /dev/null -- %s\n", STRERROR);
            exit (1);
        }
    }
    fd_close ();
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="163" endline="168">
{
    log ("%s: cannot set the PATH variable -- %s\n", prog, STRERROR);
    exit (1);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="175" endline="185">
{
    if (fstat (i, &st) == -1 && open ("/dev/null", O_RDWR) != i) {
        log ("Cannot open /dev/null -- %s\n", STRERROR);
        exit (1);
    }
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="178" endline="183">
{
    log ("Cannot open /dev/null -- %s\n", STRERROR);
    exit (1);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="196" endline="241">
{
    char cwd [STRLEN];
    struct passwd *pw;
    char localhost [STRLEN];
    if (!(pw = getpwuid (geteuid ()))) {
        log ("%s: You don't exist. Go away.\n", prog);
        exit (1);
    }
    if (!(getcwd (cwd, sizeof (cwd)))) {
        log ("%s: Cannot read current directory -- %s\n", prog, STRERROR);
        exit (1);
    }
    if (gethostname (localhost, sizeof (localhost)) < 0) {
        snprintf (localhost, STRLEN, "%s", LOCALHOST);
    }
    Run.umask = umask (0);
    Run.Env.cwd = xstrdup (cwd);
    Run.Env.home = xstrdup (pw->pw_dir);
    Run.Env.user = xstrdup (pw->pw_name);
    Run.localhostname = xstrdup (localhost);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="204" endline="209">
{
    log ("%s: You don't exist. Go away.\n", prog);
    exit (1);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="213" endline="218">
{
    log ("%s: Cannot read current directory -- %s\n", prog, STRERROR);
    exit (1);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="224" endline="226">
{
    snprintf (localhost, STRLEN, "%s", LOCALHOST);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="112" endline="136">
{
    long l;
    Event_T e;
    ASSERT (source);
    NEW (e);
    e->id = id;
    e->message = NULL;
    e->source = source;
    if (s) {
        va_list ap;
        va_start (ap, s);
        e->message = format (s, ap, &l);
        va_end (ap);
    }
    LOCK (handle_mutex) handle_event (e);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="125" endline="130">
{
    va_list ap;
    va_start (ap, s);
    e->message = format (s, ap, &l);
    va_end (ap);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="144" endline="151">
{
    ASSERT (E && * E);
    FREE ((* E) -> message);
    FREE (*E);
    (*E) = NULL;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="163" endline="169">
{
    ASSERT (E);
    return E->source;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="178" endline="184">
{
    ASSERT (E);
    return E->id;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="194" endline="200">
{
    ASSERT (E);
    return E->message;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="213" endline="235">
{
    int i, event;
    int size = sizeof (Event_Table) / sizeof (Event_Table [0]);
    ASSERT (E);
    event = (E->source->mode == MODE_PASSIVE && ((E->id == EVENT_START) || (E->id == EVENT_STOP) || (E->id == EVENT_RESTART))) ? EVENT_FAILED : E->id;
    for (i = 0; i < size; i++)
        if (event == Event_Table[i].id)
            return Event_Table[i].description;
    return NULL;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="246" endline="305">
{
    ASSERT (E);
    if (E->message) {
        log ("%s", E -> message);
    }
    switch (E->id) {
    case EVENT_UID :
        handle_uid (E);
        break;
    case EVENT_GID :
        handle_gid (E);
        break;
    case EVENT_SIZE :
        handle_size (E);
        break;
    case EVENT_STOP :
        handle_stop (E);
        break;
    case EVENT_START :
        handle_start (E);
        break;
    case EVENT_RESTART :
        handle_restart (E);
        break;
    case EVENT_TIMEOUT :
        handle_timeout (E);
        break;
    case EVENT_RESOURCE :
        handle_resource (E);
        break;
    case EVENT_CHECKSUM :
        handle_checksum (E);
        break;
    case EVENT_TIMESTAMP :
        handle_timestamp (E);
        break;
    case EVENT_CONNECTION :
        handle_connection (E);
        break;
    case EVENT_PERMISSION :
        handle_permission (E);
        break;
    case EVENT_UNMONITOR :
        handle_unmonitor (E);
        break;
    }
    if (E->id != EVENT_NULL) {
        handle_alert (E);
    }
    Event_free (& E);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="251" endline="253">
{
    log ("%s", E -> message);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="256" endline="296">
{
case EVENT_UID :
    handle_uid (E);
    break;
case EVENT_GID :
    handle_gid (E);
    break;
case EVENT_SIZE :
    handle_size (E);
    break;
case EVENT_STOP :
    handle_stop (E);
    break;
case EVENT_START :
    handle_start (E);
    break;
case EVENT_RESTART :
    handle_restart (E);
    break;
case EVENT_TIMEOUT :
    handle_timeout (E);
    break;
case EVENT_RESOURCE :
    handle_resource (E);
    break;
case EVENT_CHECKSUM :
    handle_checksum (E);
    break;
case EVENT_TIMESTAMP :
    handle_timestamp (E);
    break;
case EVENT_CONNECTION :
    handle_connection (E);
    break;
case EVENT_PERMISSION :
    handle_permission (E);
    break;
case EVENT_UNMONITOR :
    handle_unmonitor (E);
    break;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="299" endline="301">
{
    handle_alert (E);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="312" endline="319">
{
    if ((E->source->mode != MODE_PASSIVE)) {
        check_service (E -> source -> name, "stop");
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="315" endline="317">
{
    check_service (E -> source -> name, "stop");
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="323" endline="333">
{
    if (E->source->def_timeout)
        E->source->nstart++;
    if ((E->source->mode != MODE_PASSIVE)) {
        check_service (E -> source -> name, "start");
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="329" endline="331">
{
    check_service (E -> source -> name, "start");
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="337" endline="347">
{
    if (E->source->def_timeout)
        E->source->nstart++;
    if ((E->source->mode != MODE_PASSIVE)) {
        check_service (E -> source -> name, "restart");
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="343" endline="345">
{
    check_service (E -> source -> name, "restart");
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="351" endline="355">
{
    E->source->do_monitor = FALSE;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="359" endline="385">
{
    Device_T d;
    Resource_T r;
    Service_T s = E->source;
    for (d = s->devicelist; d; d = d->next) {
        if (d->event_flag && d->exec != NULL) {
            d->event_flag = FALSE;
            spawn (s, d -> exec, EVENT_DESCRIPTION (E));
        }
    }
    for (r = s->resourcelist; r; r = r->next) {
        if (r->event_flag && r->exec != NULL) {
            r->event_flag = FALSE;
            spawn (s, r -> exec, EVENT_DESCRIPTION (E));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="366" endline="372">
{
    if (d->event_flag && d->exec != NULL) {
        d->event_flag = FALSE;
        spawn (s, d -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="368" endline="371">
{
    d->event_flag = FALSE;
    spawn (s, d -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="375" endline="383">
{
    if (r->event_flag && r->exec != NULL) {
        r->event_flag = FALSE;
        spawn (s, r -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="377" endline="382">
{
    r->event_flag = FALSE;
    spawn (s, r -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="389" endline="406">
{
    Timestamp_T t;
    Service_T s = E->source;
    for (t = s->timestamplist; t; t = t->next) {
        if (t->event_flag && t->exec != NULL) {
            t->event_flag = FALSE;
            spawn (s, t -> exec, EVENT_DESCRIPTION (E));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="396" endline="404">
{
    if (t->event_flag && t->exec != NULL) {
        t->event_flag = FALSE;
        spawn (s, t -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="398" endline="403">
{
    t->event_flag = FALSE;
    spawn (s, t -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="410" endline="427">
{
    Size_T sl;
    Service_T s = E->source;
    for (sl = s->sizelist; sl; sl = sl->next) {
        if (sl->event_flag && sl->exec != NULL) {
            sl->event_flag = FALSE;
            spawn (s, sl -> exec, EVENT_DESCRIPTION (E));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="417" endline="425">
{
    if (sl->event_flag && sl->exec != NULL) {
        sl->event_flag = FALSE;
        spawn (s, sl -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="419" endline="424">
{
    sl->event_flag = FALSE;
    spawn (s, sl -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="431" endline="459">
{
    Port_T p;
    Icmp_T i;
    Service_T s = E->source;
    for (p = s->portlist; p; p = p->next) {
        if (p->event_flag && p->exec != NULL) {
            p->event_flag = FALSE;
            spawn (s, p -> exec, EVENT_DESCRIPTION (E));
        }
    }
    for (i = s->icmplist; i; i = i->next) {
        if (i->event_flag && i->exec != NULL) {
            i->event_flag = FALSE;
            spawn (s, i -> exec, EVENT_DESCRIPTION (E));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="439" endline="447">
{
    if (p->event_flag && p->exec != NULL) {
        p->event_flag = FALSE;
        spawn (s, p -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="441" endline="446">
{
    p->event_flag = FALSE;
    spawn (s, p -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="451" endline="457">
{
    if (i->event_flag && i->exec != NULL) {
        i->event_flag = FALSE;
        spawn (s, i -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="453" endline="456">
{
    i->event_flag = FALSE;
    spawn (s, i -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="463" endline="473">
{
    Service_T s = E->source;
    if (s->checksum->event_flag && s->checksum->exec != NULL) {
        s->checksum->event_flag = FALSE;
        spawn (s, s -> checksum -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="468" endline="471">
{
    s->checksum->event_flag = FALSE;
    spawn (s, s -> checksum -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="477" endline="489">
{
    Service_T s = E->source;
    s->perm->has_error = TRUE;
    if (s->perm->event_flag && s->perm->exec != NULL) {
        s->perm->event_flag = FALSE;
        spawn (s, s -> perm -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="484" endline="487">
{
    s->perm->event_flag = FALSE;
    spawn (s, s -> perm -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="493" endline="505">
{
    Service_T s = E->source;
    s->uid->has_error = TRUE;
    if (s->uid->event_flag && s->uid->exec != NULL) {
        s->uid->event_flag = FALSE;
        spawn (s, s -> uid -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="500" endline="503">
{
    s->uid->event_flag = FALSE;
    spawn (s, s -> uid -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="509" endline="520">
{
    Service_T s = E->source;
    s->gid->has_error = TRUE;
    if (s->gid->event_flag && s->gid->exec != NULL) {
        s->gid->event_flag = FALSE;
        spawn (s, s -> gid -> exec, EVENT_DESCRIPTION (E));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="515" endline="518">
{
    s->gid->event_flag = FALSE;
    spawn (s, s -> gid -> exec, EVENT_DESCRIPTION (E));
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="524" endline="528">
{
    check_service (E -> source -> name, "unmonitor");
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="80" endline="117">
{
    char pidfile [STRLEN];
    char statefile [STRLEN];
    if (Run.pidfile == NULL) {
        if (!getuid ()) {
            snprintf (pidfile, STRLEN, "%s/%s", MYPIDDIR, MYPIDFILE);
        }
        else {
            snprintf (pidfile, STRLEN, "%s/.%s", Run.Env.home, MYPIDFILE);
        }
        Run.pidfile = xstrdup (pidfile);
    }
    if (Run.statefile == NULL) {
        snprintf (statefile, STRLEN, "%s/.%s", Run.Env.home, MYSTATEFILE);
        Run.statefile = xstrdup (statefile);
    }
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="87" endline="105">
{
    if (!getuid ()) {
        snprintf (pidfile, STRLEN, "%s/%s", MYPIDDIR, MYPIDFILE);
    }
    else {
        snprintf (pidfile, STRLEN, "%s/.%s", Run.Env.home, MYPIDFILE);
    }
    Run.pidfile = xstrdup (pidfile);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="91" endline="95">
{
    snprintf (pidfile, STRLEN, "%s/%s", MYPIDDIR, MYPIDFILE);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="97" endline="101">
{
    snprintf (pidfile, STRLEN, "%s/.%s", Run.Env.home, MYPIDFILE);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="109" endline="115">
{
    snprintf (statefile, STRLEN, "%s/.%s", Run.Env.home, MYSTATEFILE);
    Run.statefile = xstrdup (statefile);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="124" endline="129">
{
    unlink (Run.pidfile);
    unlink (Run.statefile);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="140" endline="170">
{
    struct stat buf;
    ASSERT (object);
    if (!stat (object, &buf)) {
        if (((type == S_IFREG) && S_ISREG (buf.st_mode)) || ((type == S_IFDIR) && S_ISDIR (buf.st_mode)) || ((type == (S_IFREG | S_IFDIR)) && (S_ISREG (buf.st_mode) || S_ISDIR (buf.st_mode)))) {
            return MAX (buf.st_mtime, buf.st_ctime);
        }
        else {
            log ("%s: Invalid object type - %s\n", prog, object);
        }
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="147" endline="166">
{
    if (((type == S_IFREG) && S_ISREG (buf.st_mode)) || ((type == S_IFDIR) && S_ISDIR (buf.st_mode)) || ((type == (S_IFREG | S_IFDIR)) && (S_ISREG (buf.st_mode) || S_ISDIR (buf.st_mode)))) {
        return MAX (buf.st_mtime, buf.st_ctime);
    }
    else {
        log ("%s: Invalid object type - %s\n", prog, object);
    }
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="154" endline="158">
{
    return MAX (buf.st_mtime, buf.st_ctime);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="160" endline="164">
{
    log ("%s: Invalid object type - %s\n", prog, object);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="180" endline="218">
{
    char *rcfile = xmalloc (STRLEN);
    snprintf (rcfile, STRLEN, "%s/.%s", Run.Env.home, MONITRC);
    if (exist_file (rcfile)) {
        return (rcfile);
    }
    memset (rcfile, 0, STRLEN);
    snprintf (rcfile, STRLEN, "/etc/%s", MONITRC);
    if (exist_file (rcfile)) {
        return (rcfile);
    }
    if (exist_file (MONITRC)) {
        memset (rcfile, 0, STRLEN);
        snprintf (rcfile, STRLEN, "%s/%s", Run.Env.cwd, MONITRC);
        return (rcfile);
    }
    log ("%s: Cannot find the control file at ~/.%s, /etc/%s or at ./%s \n", prog, MONITRC, MONITRC, MONITRC);
    exit (1);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="187" endline="191">
{
    return (rcfile);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="197" endline="201">
{
    return (rcfile);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="204" endline="211">
{
    memset (rcfile, 0, STRLEN);
    snprintf (rcfile, STRLEN, "%s/%s", Run.Env.cwd, MONITRC);
    return (rcfile);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="228" endline="253">
{
    FILE *F = NULL;
    ASSERT (pidfile);
    umask (MYPIDMASK);
    unlink (pidfile);
    if ((F = fopen (pidfile, "w")) == (FILE *) NULL) {
        log ("%s: Error opening pidfile '%s' for writing -- %s\n", prog, pidfile, STRERROR);
        return (FALSE);
    }
    fprintf (F, "%d\n", (int) getpid ());
    fclose (F);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="239" endline="246">
{
    log ("%s: Error opening pidfile '%s' for writing -- %s\n", prog, pidfile, STRERROR);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="265" endline="271">
{
    ASSERT (rcfile);
    return check_file_stat (rcfile, "control file", S_IRUSR | S_IWUSR | S_IXUSR);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="280" endline="288">
{
    struct stat buf;
    ASSERT (file);
    return (stat (file, &buf) == 0 && S_ISREG (buf.st_mode));
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="297" endline="305">
{
    struct stat buf;
    ASSERT (file);
    return (stat (file, &buf) == 0);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="319" endline="411">
{
    struct stat buf;
    errno = 0;
    ASSERT (filename);
    ASSERT (description);
    if (lstat (filename, &buf) < 0) {
        log ("%s: Cannot stat the %s '%s' -- %s\n", prog, description, filename, STRERROR);
        return FALSE;
    }
    if (S_ISLNK (buf.st_mode)) {
        log ("%s: The %s '%s' must not be a symbolic link.\n", prog, description, filename);
        return (FALSE);
    }
    if (!S_ISREG (buf.st_mode)) {
        log ("%s: The %s '%s' is not a regular file.\n", prog, description, filename);
        return FALSE;
    }
    if (buf.st_uid != geteuid ()) {
        log ("%s: The %s '%s' must be owned by you.\n", prog, description, filename);
        return FALSE;
    }
    if ((buf.st_mode & 0777) & ~permmask) {
        log ("%s: The %s '%s' must have permissions no more " "than -%c%c%c%c%c%c%c%c%c (0%o); " "right now permissions are -%c%c%c%c%c%c%c%c%c (0%o).\n", prog, description, filename, permmask & S_IRUSR ? 'r' : '-', permmask & S_IWUSR ? 'w' : '-', permmask & S_IXUSR ? 'x' : '-', permmask & S_IRGRP ? 'r' : '-', permmask & S_IWGRP ? 'w' : '-', permmask & S_IXGRP ? 'x' : '-', permmask & S_IROTH ? 'r' : '-', permmask & S_IWOTH ? 'w' : '-', permmask & S_IXOTH ? 'x' : '-', permmask & 0777, buf.st_mode & S_IRUSR ? 'r' : '-', buf.st_mode & S_IWUSR ? 'w' : '-', buf.st_mode & S_IXUSR ? 'x' : '-', buf.st_mode & S_IRGRP ? 'r' : '-', buf.st_mode & S_IWGRP ? 'w' : '-', buf.st_mode & S_IXGRP ? 'x' : '-', buf.st_mode & S_IROTH ? 'r' : '-', buf.st_mode & S_IWOTH ? 'w' : '-', buf.st_mode & S_IXOTH ? 'x' : '-', buf.st_mode & 0777);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="328" endline="335">
{
    log ("%s: Cannot stat the %s '%s' -- %s\n", prog, description, filename, STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="338" endline="345">
{
    log ("%s: The %s '%s' must not be a symbolic link.\n", prog, description, filename);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="348" endline="355">
{
    log ("%s: The %s '%s' is not a regular file.\n", prog, description, filename);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="358" endline="365">
{
    log ("%s: The %s '%s' must be owned by you.\n", prog, description, filename);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="368" endline="407">
{
    log ("%s: The %s '%s' must have permissions no more " "than -%c%c%c%c%c%c%c%c%c (0%o); " "right now permissions are -%c%c%c%c%c%c%c%c%c (0%o).\n", prog, description, filename, permmask & S_IRUSR ? 'r' : '-', permmask & S_IWUSR ? 'w' : '-', permmask & S_IXUSR ? 'x' : '-', permmask & S_IRGRP ? 'r' : '-', permmask & S_IWGRP ? 'w' : '-', permmask & S_IXGRP ? 'x' : '-', permmask & S_IROTH ? 'r' : '-', permmask & S_IWOTH ? 'w' : '-', permmask & S_IXOTH ? 'x' : '-', permmask & 0777, buf.st_mode & S_IRUSR ? 'r' : '-', buf.st_mode & S_IWUSR ? 'w' : '-', buf.st_mode & S_IXUSR ? 'x' : '-', buf.st_mode & S_IRGRP ? 'r' : '-', buf.st_mode & S_IWGRP ? 'w' : '-', buf.st_mode & S_IXGRP ? 'x' : '-', buf.st_mode & S_IROTH ? 'r' : '-', buf.st_mode & S_IWOTH ? 'w' : '-', buf.st_mode & S_IXOTH ? 'x' : '-', buf.st_mode & 0777);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="74" endline="100">
{
    destroy_hosts_allow ();
    gc_protocols ();
    if (servicelist)
        _gc_service_list (&servicelist);
    if (Run.credentials)
        _gcath (&Run.credentials);
    if (Run.maillist)
        gc_mail_list (&Run.maillist);
    if (Run.mailservers)
        _gc_mail_server (&Run.mailservers);
    FREE (Run.mygroup);
    FREE (Run.httpsslpem);
    FREE (Run.httpsslclientpem);
    FREE (Run.bind_addr);
    FREE (Run.MailFormat.from);
    FREE (Run.MailFormat.subject);
    FREE (Run.MailFormat.message);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="104" endline="118">
{
    ASSERT (m);
    if ((*m)->next)
        gc_mail_list (&(*m)->next);
    FREE ((* m) -> to);
    FREE ((* m) -> from);
    FREE ((* m) -> subject);
    FREE ((* m) -> message);
    FREE ((* m) -> opt_message);
    FREE (*m);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="125" endline="136">
{
    ASSERT (s && * s);
    if ((*s)->next) {
        _gc_service_list (& (* s) -> next);
    }
    _gc_service (& (* s));
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="130" endline="132">
{
    _gc_service_list (& (* s) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="140" endline="234">
{
    ASSERT (s && * s);
    if ((*s)->portlist) {
        _gcppl (& (* s) -> portlist);
    }
    if ((*s)->devicelist) {
        _gcdevice (& (* s) -> devicelist);
    }
    if ((*s)->icmplist) {
        _gcicmp (& (* s) -> icmplist);
    }
    if ((*s)->maillist) {
        gc_mail_list (& (* s) -> maillist);
    }
    if ((*s)->resourcelist) {
        _gcpql (& (* s) -> resourcelist);
    }
    if ((*s)->procinfo) {
        _gcppil (& (* s) -> procinfo);
    }
    if ((*s)->devinfo) {
        _gcpdil (& (* s) -> devinfo);
    }
    if ((*s)->timestamplist) {
        _gcptl (& (* s) -> timestamplist);
    }
    if ((*s)->sizelist) {
        _gcso (& (* s) -> sizelist);
    }
    if ((*s)->checksum) {
        _gcchecksum (& (* s) -> checksum);
    }
    if ((*s)->perm) {
        _gcperm (& (* s) -> perm);
    }
    if ((*s)->uid) {
        _gcuid (& (* s) -> uid);
    }
    if ((*s)->gid) {
        _gcgid (& (* s) -> gid);
    }
    if ((*s)->dependantlist) {
        _gcpdl (& (* s) -> dependantlist);
    }
    if ((*s)->start) {
        _gccmd (& (* s) -> start);
    }
    if ((*s)->stop) {
        _gccmd (& (* s) -> stop);
    }
    FREE ((* s) -> name);
    FREE ((* s) -> path);
    FREE ((* s) -> group);
    (*s)->next = NULL;
    pthread_mutex_destroy (& (* s) -> mutex);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="145" endline="147">
{
    _gcppl (& (* s) -> portlist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="150" endline="152">
{
    _gcdevice (& (* s) -> devicelist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="155" endline="157">
{
    _gcicmp (& (* s) -> icmplist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="160" endline="162">
{
    gc_mail_list (& (* s) -> maillist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="165" endline="167">
{
    _gcpql (& (* s) -> resourcelist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="170" endline="172">
{
    _gcppil (& (* s) -> procinfo);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="175" endline="177">
{
    _gcpdil (& (* s) -> devinfo);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="180" endline="182">
{
    _gcptl (& (* s) -> timestamplist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="185" endline="187">
{
    _gcso (& (* s) -> sizelist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="190" endline="192">
{
    _gcchecksum (& (* s) -> checksum);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="195" endline="197">
{
    _gcperm (& (* s) -> perm);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="200" endline="202">
{
    _gcuid (& (* s) -> uid);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="205" endline="207">
{
    _gcgid (& (* s) -> gid);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="210" endline="212">
{
    _gcpdl (& (* s) -> dependantlist);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="215" endline="217">
{
    _gccmd (& (* s) -> start);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="220" endline="222">
{
    _gccmd (& (* s) -> stop);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="238" endline="250">
{
    if (!s && !*s)
        return;
    if ((*s)->next) {
        _gc_mail_server (& (* s) -> next);
    }
    FREE ((* s) -> host);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="243" endline="245">
{
    _gc_mail_server (& (* s) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="254" endline="264">
{
    int i;
    ASSERT (c && * c);
    for (i = 0; (*c)->arg[i]; i++)
        FREE ((*c)->arg[i]);
    FREE (*c);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="268" endline="295">
{
    ASSERT (p && * p);
    if ((*p)->next) {
        _gcppl (& (* p) -> next);
    }
    if ((*p)->exec) {
        _gccmd (& (* p) -> exec);
    }
    if ((*p)->generic) {
        _gcgrc (& (* p) -> generic);
    }
    FREE ((* p) -> address);
    FREE ((* p) -> request);
    FREE ((* p) -> hostname);
    FREE ((* p) -> pathname);
    FREE ((* p) -> SSL.certmd5);
    FREE ((* p) -> request_checksum);
    FREE (*p);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="273" endline="275">
{
    _gcppl (& (* p) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="278" endline="280">
{
    _gccmd (& (* p) -> exec);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="283" endline="285">
{
    _gcgrc (& (* p) -> generic);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="299" endline="315">
{
    ASSERT (d && * d);
    if ((*d)->next) {
        _gcdevice (& (* d) -> next);
    }
    if ((*d)->exec) {
        _gccmd (& (* d) -> exec);
    }
    FREE (*d);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="304" endline="306">
{
    _gcdevice (& (* d) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="309" endline="311">
{
    _gccmd (& (* d) -> exec);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="319" endline="335">
{
    ASSERT (i && * i);
    if ((*i)->next) {
        _gcicmp (& (* i) -> next);
    }
    if ((*i)->exec) {
        _gccmd (& (* i) -> exec);
    }
    FREE (*i);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="324" endline="326">
{
    _gcicmp (& (* i) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="329" endline="331">
{
    _gccmd (& (* i) -> exec);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="339" endline="355">
{
    ASSERT (q);
    if ((*q)->next) {
        _gcpql (& (* q) -> next);
    }
    if ((*q)->exec) {
        _gccmd (& (* q) -> exec);
    }
    FREE (*q);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="344" endline="346">
{
    _gcpql (& (* q) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="349" endline="351">
{
    _gccmd (& (* q) -> exec);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="359" endline="365">
{
    ASSERT (pi);
    FREE (*pi);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="369" endline="375">
{
    ASSERT (di);
    FREE (*di);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="379" endline="394">
{
    ASSERT (p);
    if ((*p)->next) {
        _gcptl (& (* p) -> next);
    }
    if ((*p)->exec) {
        _gccmd (& (* p) -> exec);
    }
    FREE (*p);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="384" endline="386">
{
    _gcptl (& (* p) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="389" endline="391">
{
    _gccmd (& (* p) -> exec);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="398" endline="410">
{
    ASSERT (s);
    if ((*s)->next)
        _gcso (&(*s)->next);
    if ((*s)->exec)
        _gccmd (&(*s)->exec);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="414" endline="424">
{
    ASSERT (s);
    if ((*s)->exec)
        _gccmd (&(*s)->exec);
    FREE ((* s) -> hash);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="428" endline="437">
{
    ASSERT (s);
    if ((*s)->exec)
        _gccmd (&(*s)->exec);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="441" endline="450">
{
    ASSERT (s);
    if ((*s)->exec)
        _gccmd (&(*s)->exec);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="454" endline="463">
{
    ASSERT (s);
    if ((*s)->exec)
        _gccmd (&(*s)->exec);
    FREE (*s);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="467" endline="479">
{
    ASSERT (d);
    if ((*d)->next) {
        _gcpdl (& (* d) -> next);
    }
    FREE ((* d) -> dependant);
    FREE (*d);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="472" endline="474">
{
    _gcpdl (& (* d) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="483" endline="502">
{
    ASSERT (g);
    if ((*g)->next) {
        _gcgrc (& (* g) -> next);
    }
    FREE ((* g) -> send);
    FREE ((* g) -> expect);
    FREE (*g);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="488" endline="490">
{
    _gcgrc (& (* g) -> next);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="506" endline="519">
{
    ASSERT (c);
    if ((*c)->next) {
        _gcath (& (* c) -> next);
    }
    FREE ((* c) -> uname);
    FREE ((* c) -> passwd);
    FREE (*c);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="511" endline="513">
{
    _gcath (& (* c) -> next);
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="67" endline="125">
{
    int i;
    char *out, *p;
    if (!src)
        return NULL;
    if (!size)
        size = strlen ((char *) src);
    out = xcalloc (sizeof (char), size *4 / 3 + 4);
    p = out;
    for (i = 0; i < size; i += 3) {
        unsigned char b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, b7 = 0;
        b1 = src[i];
        if (i + 1 < size)
            b2 = src[i + 1];
        if (i + 2 < size)
            b3 = src[i + 2];
        b4 = b1 >> 2;
        b5 = ((b1 & 0x3) << 4) | (b2 >> 4);
        b6 = ((b2 & 0xf) << 2) | (b3 >> 6);
        b7 = b3 & 0x3f;
        *p++ = encode (b4);
        *p++ = encode (b5);
        if (i + 1 < size) {
            *p++ = encode (b6);
        }
        else {
            *p++ = '=';
        }
        if (i + 2 < size) {
            *p++ = encode (b7);
        }
        else {
            *p++ = '=';
        }
    }
    return out;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="83" endline="121">
{
    unsigned char b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, b7 = 0;
    b1 = src[i];
    if (i + 1 < size)
        b2 = src[i + 1];
    if (i + 2 < size)
        b3 = src[i + 2];
    b4 = b1 >> 2;
    b5 = ((b1 & 0x3) << 4) | (b2 >> 4);
    b6 = ((b2 & 0xf) << 2) | (b3 >> 6);
    b7 = b3 & 0x3f;
    *p++ = encode (b4);
    *p++ = encode (b5);
    if (i + 1 < size) {
        *p++ = encode (b6);
    }
    else {
        *p++ = '=';
    }
    if (i + 2 < size) {
        *p++ = encode (b7);
    }
    else {
        *p++ = '=';
    }
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="104" endline="106">
{
    *p++ = encode (b6);
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="108" endline="110">
{
    *p++ = '=';
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="113" endline="115">
{
    *p++ = encode (b7);
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="117" endline="119">
{
    *p++ = '=';
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="138" endline="221">
{
    if (src) {
        unsigned char *p = dest;
        int k, l = strlen (src) + 1;
        unsigned char *buf = xmalloc (l);
        for (k = 0, l = 0; src[k]; k++) {
            if (is_base64 (src[k])) {
                buf[l++] = src[k];
            }
        }
        for (k = 0; k < l; k += 4) {
            char c1 = 'A', c2 = 'A', c3 = 'A', c4 = 'A';
            unsigned char b1 = 0, b2 = 0, b3 = 0, b4 = 0;
            c1 = buf[k];
            if (k + 1 < l) {
                c2 = buf[k + 1];
            }
            if (k + 2 < l) {
                c3 = buf[k + 2];
            }
            if (k + 3 < l) {
                c4 = buf[k + 3];
            }
            b1 = decode (c1);
            b2 = decode (c2);
            b3 = decode (c3);
            b4 = decode (c4);
            *p++ = ((b1 << 2) | (b2 >> 4));
            if (c3 != '=') {
                *p++ = (((b2 & 0xf) << 4) | (b3 >> 2));
            }
            if (c4 != '=') {
                *p++ = (((b3 & 0x3) << 6) | b4);
            }
        }
        FREE (buf);
        return (p - dest);
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="141" endline="217">
{
    unsigned char *p = dest;
    int k, l = strlen (src) + 1;
    unsigned char *buf = xmalloc (l);
    for (k = 0, l = 0; src[k]; k++) {
        if (is_base64 (src[k])) {
            buf[l++] = src[k];
        }
    }
    for (k = 0; k < l; k += 4) {
        char c1 = 'A', c2 = 'A', c3 = 'A', c4 = 'A';
        unsigned char b1 = 0, b2 = 0, b3 = 0, b4 = 0;
        c1 = buf[k];
        if (k + 1 < l) {
            c2 = buf[k + 1];
        }
        if (k + 2 < l) {
            c3 = buf[k + 2];
        }
        if (k + 3 < l) {
            c4 = buf[k + 3];
        }
        b1 = decode (c1);
        b2 = decode (c2);
        b3 = decode (c3);
        b4 = decode (c4);
        *p++ = ((b1 << 2) | (b2 >> 4));
        if (c3 != '=') {
            *p++ = (((b2 & 0xf) << 4) | (b3 >> 2));
        }
        if (c4 != '=') {
            *p++ = (((b3 & 0x3) << 6) | b4);
        }
    }
    FREE (buf);
    return (p - dest);
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="150" endline="159">
{
    if (is_base64 (src[k])) {
        buf[l++] = src[k];
    }
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="153" endline="157">
{
    buf[l++] = src[k];
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="162" endline="211">
{
    char c1 = 'A', c2 = 'A', c3 = 'A', c4 = 'A';
    unsigned char b1 = 0, b2 = 0, b3 = 0, b4 = 0;
    c1 = buf[k];
    if (k + 1 < l) {
        c2 = buf[k + 1];
    }
    if (k + 2 < l) {
        c3 = buf[k + 2];
    }
    if (k + 3 < l) {
        c4 = buf[k + 3];
    }
    b1 = decode (c1);
    b2 = decode (c2);
    b3 = decode (c3);
    b4 = decode (c4);
    *p++ = ((b1 << 2) | (b2 >> 4));
    if (c3 != '=') {
        *p++ = (((b2 & 0xf) << 4) | (b3 >> 2));
    }
    if (c4 != '=') {
        *p++ = (((b3 & 0x3) << 6) | b4);
    }
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="170" endline="174">
{
    c2 = buf[k + 1];
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="177" endline="181">
{
    c3 = buf[k + 2];
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="184" endline="188">
{
    c4 = buf[k + 3];
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="198" endline="202">
{
    *p++ = (((b2 & 0xf) << 4) | (b3 >> 2));
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="205" endline="209">
{
    *p++ = (((b3 & 0x3) << 6) | b4);
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="231" endline="240">
{
    if (u < 26)
        return 'A' + u;
    if (u < 52)
        return 'a' + (u - 26);
    if (u < 62)
        return '0' + (u - 52);
    if (u == 62)
        return '+';
    return '/';
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="247" endline="256">
{
    if (c >= 'A' && c <= 'Z')
        return (c - 'A');
    if (c >= 'a' && c <= 'z')
        return (c - 'a' + 26);
    if (c >= '0' && c <= '9')
        return (c - '0' + 52);
    if (c == '+')
        return 62;
    return 63;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="263" endline="276">
{
    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '+') || (c == '/') || (c == '=')) {
        return TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="268" endline="272">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="156" endline="160">
{
    add_Impl ((void *) doGet, (void *) doPost);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="171" endline="175">
{
    doGet (req, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="183" endline="245">
{
    set_content_type (res, "text/html");
    if (ACTION (HOME)) {
        LOCK (Run.mutex)
        do_home (req, res);
        END_LOCK;
    }
    else if (ACTION (RUN)) {
        LOCK (Run.mutex)
        do_runtime (req, res);
        END_LOCK;
    }
    else if (ACTION (TEST)) {
        is_monit_running (req, res);
    }
    else if (ACTION (VIEWLOG)) {
        do_viewlog (req, res);
    }
    else if (ACTION (ABOUT)) {
        do_about (req, res);
    }
    else if (ACTION (STOP)) {
        if (is_readonly (req)) {
            send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
        }
        else {
            send_error (res, SC_SERVICE_UNAVAILABLE, "The monit http server is stopped");
            stop_httpd ();
        }
    }
    else if (ACTION (PIXEL)) {
        printPixel (res);
    }
    else if (ACTION (STATUS)) {
        const char *format = get_parameter (req, "format");
        if (format && starts_with (format, "xml"))
            print_status (res, XML_STATUS);
        else {
            print_status (res, TEXT_STATUS);
        }
    }
    else {
        handle_action (req, res);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="188" endline="192">
{
    LOCK (Run.mutex)
    do_home (req, res);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="194" endline="198">
{
    LOCK (Run.mutex)
    do_runtime (req, res);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="200" endline="202">
{
    is_monit_running (req, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="204" endline="206">
{
    do_viewlog (req, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="208" endline="210">
{
    do_about (req, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="212" endline="224">
{
    if (is_readonly (req)) {
        send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
    }
    else {
        send_error (res, SC_SERVICE_UNAVAILABLE, "The monit http server is stopped");
        stop_httpd ();
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="214" endline="217">
{
    send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="219" endline="223">
{
    send_error (res, SC_SERVICE_UNAVAILABLE, "The monit http server is stopped");
    stop_httpd ();
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="226" endline="228">
{
    printPixel (res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="230" endline="239">
{
    const char *format = get_parameter (req, "format");
    if (format && starts_with (format, "xml"))
        print_status (res, XML_STATUS);
    else {
        print_status (res, TEXT_STATUS);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="235" endline="238">
{
    print_status (res, TEXT_STATUS);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="241" endline="243">
{
    handle_action (req, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="252" endline="268">
{
    int status;
    int monit = exist_daemon ();
    if (monit) {
        status = SC_OK;
    }
    else {
        status = SC_GONE;
    }
    set_status (res, status);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="258" endline="260">
{
    status = SC_OK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="262" endline="264">
{
    status = SC_GONE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="272" endline="303">
{
    char *uptime = get_process_uptime (Run.pidfile, "&nbsp;");
    HEAD ("", Run.polltime)
    out_print (res, "<table cellspacing=\"0\" cellpadding=\"5\" width=\"100%%\" border=\"0\">" " <tr bgcolor=\"#BBDDFF\">" "  <td colspan=2 valign=\"top\" align=\"left\" bgcolor=\"#EFF7FF\" width=\"100%%\">" "  <br><h2 align=\"center\">Monit Service Manager</h2>" "  <p align=\"center\">Monit is <a href='/_runtime'>running</a> on %s " "  with <i>uptime, %s</i> and monitoring:</p><br>" "  </td>" " </tr>" "</table>" "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%%\" border=\"0\">" "  <tr valign=\"middle\" bgcolor=\"#6F6F6F\">" "    <td><img src=\"/_pixel\" width=\"1\" height=\"1\" alt=\"\"></td>" "  </tr>" "</table>", Run.localhostname, uptime);
    FREE (uptime);
    do_home_process (req, res);
    do_home_device (req, res);
    do_home_file (req, res);
    do_home_directory (req, res);
    do_home_remote (req, res);
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="307" endline="339">
{
    out_print (res, "<html><head><title>about monit</title><body bgcolor=white>" "<br><br><center><a href='http://www.tildeslash.com/monit/'><font size=+2>" "monit " VERSION "</font></a></center><br><br>");
    out_print (res, "<ul>" "<li>Copyright &copy; 2000-2004 by <a " "href=\"http://www.tildeslash.com/monit/who.html\">the monit " "project group</a>. All Rights Reserved.<br> </small><p>" "<li>Portions of this software are copyright &copy; 1995, 1996 " "<a href='http://www.gnu.org/'>Free Software Foundation, Inc.</a></ul>");
    out_print (res, "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%%\" border=\"0\">" " <tr bgcolor=\"#6F6F6F\">" " <td valign=\"bottom\"><img src=\"/_pixel\" width=\"1\" height=\"1\" " "alt=\"\"></td></tr></table>");
    out_print (res, "<p>This program is free software; you can redistribute it and/or " "modify it under the terms of the GNU General Public License " "as published by the Free Software Foundation; either version 2 of " "the License, or (at your option) any later version.<p>" "This program is distributed in the hope that it will be useful, but " "WITHOUT ANY WARRANTY; without even the implied warranty of " "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the " "<a href='http://www.tildeslash.com/gpl.html'>GNU " "General Public License</a> for more details." "<p><br><center><p><i>Please consider making a " "<a class=grey href=\"http://www.tildeslash.com/monit/index.html#support\">" "donation</a> and support our continued work with monit.</i></center>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="343" endline="477">
{
    int pid = exist_daemon ();
    HEAD ("_runtime", 1000)
    out_print (res, "<center><h3>monit runtime status</h3><center><br>");
    out_print (res, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"40%\"><b>Parameter</b></td>" "<td width=\"60%\"><b>Value</b></td></tr>");
    out_print (res, "<tr><td>Host</td><td>%s</td></tr>", Run.localhostname);
    out_print (res, "<tr><td>Process id</td><td>%d</td></tr>", pid);
    out_print (res, "<tr><td>Effective user running monit</td>" "<td>%s</td></tr>", Run.Env.user);
    out_print (res, "<tr><td>Controlfile</td><td>%s</td></tr>", Run.controlfile);
    if (Run.logfile)
        out_print (res, "<tr><td>Logfile</td><td>%s</td></tr>", Run.logfile);
    out_print (res, "<tr><td>Pidfile</td><td>%s</td></tr>", Run.pidfile);
    out_print (res, "<tr><td>State file</td><td>%s</td></tr>", Run.statefile);
    out_print (res, "<tr><td>Debug</td><td>%s</td></tr>", Run.debug ? "True" : "False");
    out_print (res, "<tr><td>Log</td><td>%s</td></tr>", Run.dolog ? "True" : "False");
    out_print (res, "<tr><td>Use syslog</td><td>%s</td></tr>", Run.use_syslog ? "True" : "False");
    out_print (res, "<tr><td>Mail server(s)</td><td>");
    if (Run.mailservers) {
        MailServer_T mta = Run.mailservers;
        for (mta = Run.mailservers; mta; mta = mta->next)
            out_print (res, "%s&nbsp;", mta->host);
        out_print (res, "</td></tr>");
    }
    else {
        out_print (res, "localhost</td></tr>");
    }
    if (Run.MailFormat.from)
        out_print (res, "<tr><td>Default mail from</td><td>%s</td></tr>", Run.MailFormat.from);
    if (Run.MailFormat.subject)
        out_print (res, "<tr><td>Default mail subject</td><td>%s</td></tr>", Run.MailFormat.subject);
    if (Run.MailFormat.message)
        out_print (res, "<tr><td>Default mail message</td><td>%s</td></tr>", Run.MailFormat.message);
    out_print (res, "<tr><td>Poll time</td><td>%d seconds</td></tr>", Run.polltime);
    out_print (res, "<tr><td>httpd bind address</td><td>%s</td></tr>", Run.bind_addr ? Run.bind_addr : "Any/All");
    out_print (res, "<tr><td>httpd portnumber</td><td>%d</td></tr>", Run.httpdport);
    out_print (res, "<tr><td>httpd signature</td><td>%d</td></tr>", Run.httpdsig ? "True" : "False");
    out_print (res, "<tr><td>Use ssl encryption</td><td>%s</td></tr>", Run.httpdssl ? "True" : "False");
    if (Run.httpdssl) {
        out_print (res, "<tr><td>PEM key/certificate file</td><td>%s</td></tr>", Run.httpsslpem);
        if (Run.httpsslclientpem != NULL) {
            out_print (res, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Enabled");
            out_print (res, "<tr><td>Client PEM key/certificate file" "</td><td>%s</td></tr>", Run.httpsslclientpem);
        }
        else {
            out_print (res, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Disabled");
        }
        out_print (res, "<tr><td>Allow self certified certificates " "</td><td>%s</td></tr>", Run.allowselfcert ? "True" : "False");
    }
    out_print (res, "<tr><td>httpd auth. style</td><td>%s</td></tr>", (Run.credentials != NULL) && has_hosts_allow () ? "Basic Authentication and Host allow list" : (Run.credentials != NULL) ? "Basic Authentication" : has_hosts_allow () ? "Host allow list" : "No authentication");
    print_alerts (res, Run.maillist);
    out_print (res, "</table>");
    if (!is_readonly (req)) {
        out_print (res, "<table cellspacing=16><tr nowrap><td><font size=+1>" "<font color='#f0000'>Stop monit http server?</font></font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", STOP);
        if (Run.dolog && !Run.use_syslog) {
            out_print (res, "<td><font size=+1>" "View monit logfile?</font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", VIEWLOG);
        }
    }
    out_print (res, "</tr></table>");
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="381" endline="386">
{
    MailServer_T mta = Run.mailservers;
    for (mta = Run.mailservers; mta; mta = mta->next)
        out_print (res, "%s&nbsp;", mta->host);
    out_print (res, "</td></tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="388" endline="390">
{
    out_print (res, "localhost</td></tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="420" endline="443">
{
    out_print (res, "<tr><td>PEM key/certificate file</td><td>%s</td></tr>", Run.httpsslpem);
    if (Run.httpsslclientpem != NULL) {
        out_print (res, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Enabled");
        out_print (res, "<tr><td>Client PEM key/certificate file" "</td><td>%s</td></tr>", Run.httpsslclientpem);
    }
    else {
        out_print (res, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Disabled");
    }
    out_print (res, "<tr><td>Allow self certified certificates " "</td><td>%s</td></tr>", Run.allowselfcert ? "True" : "False");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="426" endline="433">
{
    out_print (res, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Enabled");
    out_print (res, "<tr><td>Client PEM key/certificate file" "</td><td>%s</td></tr>", Run.httpsslclientpem);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="435" endline="439">
{
    out_print (res, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Disabled");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="458" endline="472">
{
    out_print (res, "<table cellspacing=16><tr nowrap><td><font size=+1>" "<font color='#f0000'>Stop monit http server?</font></font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", STOP);
    if (Run.dolog && !Run.use_syslog) {
        out_print (res, "<td><font size=+1>" "View monit logfile?</font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", VIEWLOG);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="465" endline="471">
{
    out_print (res, "<td><font size=+1>" "View monit logfile?</font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", VIEWLOG);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="481" endline="559">
{
    if (is_readonly (req)) {
        send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
        return;
    }
    HEAD ("_viewlog", 100)
    if (Run.dolog && !Run.use_syslog) {
        struct stat sb;
        if (!stat (Run.logfile, &sb)) {
            FILE *f = fopen (Run.logfile, "r");
            if (f) {
                int n;
                char buf [8192];
                out_print (res, "<br><p><form><textarea cols=80 rows=30>");
                while ((n = fread (buf, sizeof (char), 8192, f)) > 0) {
                    buf[n] = 0;
                    out_print (res, "%s", buf);
                }
                fclose (f);
                out_print (res, "</textarea></form>");
            }
            else {
                out_print (res, "Error opening logfile: %s", STRERROR);
            }
        }
        else {
            out_print (res, "Error stating logfile: %s", STRERROR);
        }
    }
    else {
        out_print (res, "<b>Cannot view logfile:</b><br>");
        if (!Run.dolog) {
            out_print (res, "monit was started without logging");
        }
        else {
            out_print (res, "monit uses syslog");
        }
    }
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="484" endline="488">
{
    send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
    return;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="493" endline="536">
{
    struct stat sb;
    if (!stat (Run.logfile, &sb)) {
        FILE *f = fopen (Run.logfile, "r");
        if (f) {
            int n;
            char buf [8192];
            out_print (res, "<br><p><form><textarea cols=80 rows=30>");
            while ((n = fread (buf, sizeof (char), 8192, f)) > 0) {
                buf[n] = 0;
                out_print (res, "%s", buf);
            }
            fclose (f);
            out_print (res, "</textarea></form>");
        }
        else {
            out_print (res, "Error opening logfile: %s", STRERROR);
        }
    }
    else {
        out_print (res, "Error stating logfile: %s", STRERROR);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="498" endline="528">
{
    FILE *f = fopen (Run.logfile, "r");
    if (f) {
        int n;
        char buf [8192];
        out_print (res, "<br><p><form><textarea cols=80 rows=30>");
        while ((n = fread (buf, sizeof (char), 8192, f)) > 0) {
            buf[n] = 0;
            out_print (res, "%s", buf);
        }
        fclose (f);
        out_print (res, "</textarea></form>");
    }
    else {
        out_print (res, "Error opening logfile: %s", STRERROR);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="502" endline="520">
{
    int n;
    char buf [8192];
    out_print (res, "<br><p><form><textarea cols=80 rows=30>");
    while ((n = fread (buf, sizeof (char), 8192, f)) > 0) {
        buf[n] = 0;
        out_print (res, "%s", buf);
    }
    fclose (f);
    out_print (res, "</textarea></form>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="510" endline="515">
{
    buf[n] = 0;
    out_print (res, "%s", buf);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="522" endline="526">
{
    out_print (res, "Error opening logfile: %s", STRERROR);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="530" endline="534">
{
    out_print (res, "Error stating logfile: %s", STRERROR);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="538" endline="555">
{
    out_print (res, "<b>Cannot view logfile:</b><br>");
    if (!Run.dolog) {
        out_print (res, "monit was started without logging");
    }
    else {
        out_print (res, "monit uses syslog");
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="543" endline="547">
{
    out_print (res, "monit was started without logging");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="549" endline="553">
{
    out_print (res, "monit uses syslog");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="563" endline="691">
{
    char *name = req->url;
    const char *action = get_parameter (req, "action");
    if (exist_service (++name)) {
        if (action) {
            Service_T s = get_service (name);
            if (is_readonly (req)) {
                send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
                return;
            }
            if (IS (action, "start")) {
                if (s->start) {
                    LOCK (s -> mutex)
                    check_service (name, action);
                    if (s->type == TYPE_PROCESS) {
                        int max_tries = Run.polltime;
                        while (max_tries-- && !Run.stopped) {
                            if (is_process_running (s))
                                break;
                            sleep (1);
                        }
                    }
                    END_LOCK;
                    if (s->type == TYPE_PROCESS && !is_process_running (s)) {
                        send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not start the service");
                        goto quit;
                    }
                }
                else {
                    send_error (res, SC_BAD_REQUEST, "Start method not defined for the service");
                    goto quit;
                }
            }
            else if (IS (action, "stop")) {
                if (s->stop) {
                    LOCK (s -> mutex)
                    check_service (name, action);
                    END_LOCK;
                }
                else {
                    send_error (res, SC_BAD_REQUEST, "Stop method not defined for the service");
                    goto quit;
                }
            }
            else if (IS (action, "restart")) {
                if (s->start && s->stop) {
                    LOCK (s -> mutex)
                    check_service (name, action);
                    if (s->type == TYPE_PROCESS) {
                        int max_tries = Run.polltime;
                        while (max_tries-- && !Run.stopped) {
                            if (is_process_running (s))
                                break;
                            sleep (1);
                        }
                    }
                    END_LOCK;
                    if (s->type == TYPE_PROCESS && !is_process_running (s)) {
                        send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not restart the service");
                        goto quit;
                    }
                }
                else {
                    send_error (res, SC_BAD_REQUEST, "Start or stop method not defined for the service");
                    goto quit;
                }
            }
            else if (IS (action, "monitor")) {
                LOCK (s -> mutex)
                check_service (name, action);
                END_LOCK;
            }
            else if (IS (action, "unmonitor")) {
                LOCK (s -> mutex)
                check_service (name, action);
                END_LOCK;
            }
        }
        LOCK (Run.mutex)
        do_service (req, res, name);
        END_LOCK;
    }
    else {
        not_found (req, res);
    }
quit :
    reset_depend ();
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="569" endline="680">
{
    if (action) {
        Service_T s = get_service (name);
        if (is_readonly (req)) {
            send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
            return;
        }
        if (IS (action, "start")) {
            if (s->start) {
                LOCK (s -> mutex)
                check_service (name, action);
                if (s->type == TYPE_PROCESS) {
                    int max_tries = Run.polltime;
                    while (max_tries-- && !Run.stopped) {
                        if (is_process_running (s))
                            break;
                        sleep (1);
                    }
                }
                END_LOCK;
                if (s->type == TYPE_PROCESS && !is_process_running (s)) {
                    send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not start the service");
                    goto quit;
                }
            }
            else {
                send_error (res, SC_BAD_REQUEST, "Start method not defined for the service");
                goto quit;
            }
        }
        else if (IS (action, "stop")) {
            if (s->stop) {
                LOCK (s -> mutex)
                check_service (name, action);
                END_LOCK;
            }
            else {
                send_error (res, SC_BAD_REQUEST, "Stop method not defined for the service");
                goto quit;
            }
        }
        else if (IS (action, "restart")) {
            if (s->start && s->stop) {
                LOCK (s -> mutex)
                check_service (name, action);
                if (s->type == TYPE_PROCESS) {
                    int max_tries = Run.polltime;
                    while (max_tries-- && !Run.stopped) {
                        if (is_process_running (s))
                            break;
                        sleep (1);
                    }
                }
                END_LOCK;
                if (s->type == TYPE_PROCESS && !is_process_running (s)) {
                    send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not restart the service");
                    goto quit;
                }
            }
            else {
                send_error (res, SC_BAD_REQUEST, "Start or stop method not defined for the service");
                goto quit;
            }
        }
        else if (IS (action, "monitor")) {
            LOCK (s -> mutex)
            check_service (name, action);
            END_LOCK;
        }
        else if (IS (action, "unmonitor")) {
            LOCK (s -> mutex)
            check_service (name, action);
            END_LOCK;
        }
    }
    LOCK (Run.mutex)
    do_service (req, res, name);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="571" endline="674">
{
    Service_T s = get_service (name);
    if (is_readonly (req)) {
        send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
        return;
    }
    if (IS (action, "start")) {
        if (s->start) {
            LOCK (s -> mutex)
            check_service (name, action);
            if (s->type == TYPE_PROCESS) {
                int max_tries = Run.polltime;
                while (max_tries-- && !Run.stopped) {
                    if (is_process_running (s))
                        break;
                    sleep (1);
                }
            }
            END_LOCK;
            if (s->type == TYPE_PROCESS && !is_process_running (s)) {
                send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not start the service");
                goto quit;
            }
        }
        else {
            send_error (res, SC_BAD_REQUEST, "Start method not defined for the service");
            goto quit;
        }
    }
    else if (IS (action, "stop")) {
        if (s->stop) {
            LOCK (s -> mutex)
            check_service (name, action);
            END_LOCK;
        }
        else {
            send_error (res, SC_BAD_REQUEST, "Stop method not defined for the service");
            goto quit;
        }
    }
    else if (IS (action, "restart")) {
        if (s->start && s->stop) {
            LOCK (s -> mutex)
            check_service (name, action);
            if (s->type == TYPE_PROCESS) {
                int max_tries = Run.polltime;
                while (max_tries-- && !Run.stopped) {
                    if (is_process_running (s))
                        break;
                    sleep (1);
                }
            }
            END_LOCK;
            if (s->type == TYPE_PROCESS && !is_process_running (s)) {
                send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not restart the service");
                goto quit;
            }
        }
        else {
            send_error (res, SC_BAD_REQUEST, "Start or stop method not defined for the service");
            goto quit;
        }
    }
    else if (IS (action, "monitor")) {
        LOCK (s -> mutex)
        check_service (name, action);
        END_LOCK;
    }
    else if (IS (action, "unmonitor")) {
        LOCK (s -> mutex)
        check_service (name, action);
        END_LOCK;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="576" endline="580">
{
    send_error (res, SC_FORBIDDEN, "You do not have sufficent privilegs to access this page");
    return;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="583" endline="613">
{
    if (s->start) {
        LOCK (s -> mutex)
        check_service (name, action);
        if (s->type == TYPE_PROCESS) {
            int max_tries = Run.polltime;
            while (max_tries-- && !Run.stopped) {
                if (is_process_running (s))
                    break;
                sleep (1);
            }
        }
        END_LOCK;
        if (s->type == TYPE_PROCESS && !is_process_running (s)) {
            send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not start the service");
            goto quit;
        }
    }
    else {
        send_error (res, SC_BAD_REQUEST, "Start method not defined for the service");
        goto quit;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="585" endline="606">
{
    LOCK (s -> mutex)
    check_service (name, action);
    if (s->type == TYPE_PROCESS) {
        int max_tries = Run.polltime;
        while (max_tries-- && !Run.stopped) {
            if (is_process_running (s))
                break;
            sleep (1);
        }
    }
    END_LOCK;
    if (s->type == TYPE_PROCESS && !is_process_running (s)) {
        send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not start the service");
        goto quit;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="589" endline="598">
{
    int max_tries = Run.polltime;
    while (max_tries-- && !Run.stopped) {
        if (is_process_running (s))
            break;
        sleep (1);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="593" endline="597">
{
    if (is_process_running (s))
        break;
    sleep (1);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="601" endline="605">
{
    send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not start the service");
    goto quit;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="608" endline="612">
{
    send_error (res, SC_BAD_REQUEST, "Start method not defined for the service");
    goto quit;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="615" endline="628">
{
    if (s->stop) {
        LOCK (s -> mutex)
        check_service (name, action);
        END_LOCK;
    }
    else {
        send_error (res, SC_BAD_REQUEST, "Stop method not defined for the service");
        goto quit;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="617" endline="621">
{
    LOCK (s -> mutex)
    check_service (name, action);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="623" endline="627">
{
    send_error (res, SC_BAD_REQUEST, "Stop method not defined for the service");
    goto quit;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="630" endline="660">
{
    if (s->start && s->stop) {
        LOCK (s -> mutex)
        check_service (name, action);
        if (s->type == TYPE_PROCESS) {
            int max_tries = Run.polltime;
            while (max_tries-- && !Run.stopped) {
                if (is_process_running (s))
                    break;
                sleep (1);
            }
        }
        END_LOCK;
        if (s->type == TYPE_PROCESS && !is_process_running (s)) {
            send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not restart the service");
            goto quit;
        }
    }
    else {
        send_error (res, SC_BAD_REQUEST, "Start or stop method not defined for the service");
        goto quit;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="632" endline="653">
{
    LOCK (s -> mutex)
    check_service (name, action);
    if (s->type == TYPE_PROCESS) {
        int max_tries = Run.polltime;
        while (max_tries-- && !Run.stopped) {
            if (is_process_running (s))
                break;
            sleep (1);
        }
    }
    END_LOCK;
    if (s->type == TYPE_PROCESS && !is_process_running (s)) {
        send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not restart the service");
        goto quit;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="636" endline="645">
{
    int max_tries = Run.polltime;
    while (max_tries-- && !Run.stopped) {
        if (is_process_running (s))
            break;
        sleep (1);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="640" endline="644">
{
    if (is_process_running (s))
        break;
    sleep (1);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="648" endline="652">
{
    send_error (res, SC_INTERNAL_SERVER_ERROR, "Could not restart the service");
    goto quit;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="655" endline="659">
{
    send_error (res, SC_BAD_REQUEST, "Start or stop method not defined for the service");
    goto quit;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="662" endline="666">
{
    LOCK (s -> mutex)
    check_service (name, action);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="668" endline="672">
{
    LOCK (s -> mutex)
    check_service (name, action);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="682" endline="686">
{
    not_found (req, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="695" endline="731">
{
    Service_T s = get_service (name);
    HEAD (name, 1000)
    switch (s->type) {
    case TYPE_DEVICE :
        do_service_device (req, res, s);
        break;
    case TYPE_DIRECTORY :
        do_service_directory (req, res, s);
        break;
    case TYPE_FILE :
        do_service_file (req, res, s);
        break;
    case TYPE_PROCESS :
        do_service_process (req, res, s);
        break;
    case TYPE_REMOTE :
        do_service_host (req, res, s);
        break;
    default :
        break;
    }
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="702" endline="727">
{
case TYPE_DEVICE :
    do_service_device (req, res, s);
    break;
case TYPE_DIRECTORY :
    do_service_directory (req, res, s);
    break;
case TYPE_FILE :
    do_service_file (req, res, s);
    break;
case TYPE_PROCESS :
    do_service_process (req, res, s);
    break;
case TYPE_REMOTE :
    do_service_host (req, res, s);
    break;
default :
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="738" endline="759">
{
    static int l;
    Socket_T S = res->S;
    static unsigned char *pixel = NULL;
    if (!pixel) {
        pixel = xcalloc (sizeof (unsigned char), strlen (PIXEL_GIF));
        l = decode_base64 (pixel, PIXEL_GIF);
    }
    if (l) {
        res->is_committed = TRUE;
        socket_print (S, "HTTP/1.0 200 OK\r\n");
        socket_print (S, "Content-length: %d\r\n", l);
        socket_print (S, "Content-Type: image/gif\r\n");
        socket_print (S, "Connection: close\r\n\r\n");
        socket_write (S, pixel, l);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="745" endline="748">
{
    pixel = xcalloc (sizeof (unsigned char), strlen (PIXEL_GIF));
    l = decode_base64 (pixel, PIXEL_GIF);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="750" endline="757">
{
    res->is_committed = TRUE;
    socket_print (S, "HTTP/1.0 200 OK\r\n");
    socket_print (S, "Content-length: %d\r\n", l);
    socket_print (S, "Content-Type: image/gif\r\n");
    socket_print (S, "Connection: close\r\n\r\n");
    socket_write (S, pixel, l);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="763" endline="768">
{
    send_error (res, SC_NOT_FOUND, "The requested URL was not found on this server");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="772" endline="886">
{
    int on = TRUE;
    int header = TRUE;
    Service_T s;
    for (s = servicelist_conf; s; s = s->next_conf) {
        int isrunning;
        char *uptime;
        if (s->type != TYPE_PROCESS)
            continue;
        if (header) {
            if (Run.doprocess) {
                out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Process</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Uptime</b></h3></td>" "<td align=\"right\"><h3><b>CPU</b></h3></td>" "<td align=\"right\"><h3><b>Memory</b></h3></td>" "</tr>");
            }
            else {
                out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Service</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "</tr>");
            }
            header = FALSE;
        }
        isrunning = is_process_running (s);
        uptime = get_process_uptime (s->path, "&nbsp;");
        if (Run.doprocess) {
            ProcInfo_T pi = s->procinfo;
            if (isrunning) {
                out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td><td align=\"right\">%s</td>" "<td align=\"right\">%.1f%%</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;kB]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color='#00ff00'>running</font>" : "<font color='#ff0000'>not running</font>", uptime, pi -> cpu_percent / 10.0, pi -> mem_percent / 10.0, pi -> mem_kbyte);
            }
            else {
                out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">- </td>" "<td align=\"right\">- [-]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not running</font>");
            }
        }
        else {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s %s</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color=green>running</font>" : "<font color=red>not running</font>", isrunning ? uptime : "");
        }
        on = on ? FALSE : TRUE;
        FREE (uptime);
    }
    if (!header)
        out_print (res, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="779" endline="881">
{
    int isrunning;
    char *uptime;
    if (s->type != TYPE_PROCESS)
        continue;
    if (header) {
        if (Run.doprocess) {
            out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Process</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Uptime</b></h3></td>" "<td align=\"right\"><h3><b>CPU</b></h3></td>" "<td align=\"right\"><h3><b>Memory</b></h3></td>" "</tr>");
        }
        else {
            out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Service</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "</tr>");
        }
        header = FALSE;
    }
    isrunning = is_process_running (s);
    uptime = get_process_uptime (s->path, "&nbsp;");
    if (Run.doprocess) {
        ProcInfo_T pi = s->procinfo;
        if (isrunning) {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td><td align=\"right\">%s</td>" "<td align=\"right\">%.1f%%</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;kB]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color='#00ff00'>running</font>" : "<font color='#ff0000'>not running</font>", uptime, pi -> cpu_percent / 10.0, pi -> mem_percent / 10.0, pi -> mem_kbyte);
        }
        else {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">- </td>" "<td align=\"right\">- [-]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not running</font>");
        }
    }
    else {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s %s</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color=green>running</font>" : "<font color=red>not running</font>", isrunning ? uptime : "");
    }
    on = on ? FALSE : TRUE;
    FREE (uptime);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="787" endline="819">
{
    if (Run.doprocess) {
        out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Process</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Uptime</b></h3></td>" "<td align=\"right\"><h3><b>CPU</b></h3></td>" "<td align=\"right\"><h3><b>Memory</b></h3></td>" "</tr>");
    }
    else {
        out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Service</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "</tr>");
    }
    header = FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="790" endline="803">
{
    out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Process</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Uptime</b></h3></td>" "<td align=\"right\"><h3><b>CPU</b></h3></td>" "<td align=\"right\"><h3><b>Memory</b></h3></td>" "</tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="805" endline="815">
{
    out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Service</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "</tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="825" endline="861">
{
    ProcInfo_T pi = s->procinfo;
    if (isrunning) {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td><td align=\"right\">%s</td>" "<td align=\"right\">%.1f%%</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;kB]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color='#00ff00'>running</font>" : "<font color='#ff0000'>not running</font>", uptime, pi -> cpu_percent / 10.0, pi -> mem_percent / 10.0, pi -> mem_kbyte);
    }
    else {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">- </td>" "<td align=\"right\">- [-]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not running</font>");
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="828" endline="845">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td><td align=\"right\">%s</td>" "<td align=\"right\">%.1f%%</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;kB]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color='#00ff00'>running</font>" : "<font color='#ff0000'>not running</font>", uptime, pi -> cpu_percent / 10.0, pi -> mem_percent / 10.0, pi -> mem_kbyte);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="847" endline="860">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">- </td>" "<td align=\"right\">- [-]</td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not running</font>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="863" endline="876">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s %s</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : isrunning ? "<font color=green>running</font>" : "<font color=red>not running</font>", isrunning ? uptime : "");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="890" endline="1000">
{
    Service_T s;
    int on = TRUE;
    int header = TRUE;
    for (s = servicelist_conf; s; s = s->next_conf) {
        if (s->type != TYPE_DEVICE)
            continue;
        if (header) {
            out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Device</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Space usage</b></h3></td>" "<td align=\"right\"><h3><b>Inodes usage</b></h3></td>" "</tr>");
            header = FALSE;
        }
        if (!DeviceInfo_Usage (s->devinfo, s->path)) {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">- [-]</td>" "<td align=\"right\">- [-]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not accessible</font>");
        }
        else {
            if (s->devinfo->f_files > 0) {
                out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;objects]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize, (float) 100 * (s -> devinfo -> f_files - s -> devinfo -> f_filesfree) / s -> devinfo -> f_files, s -> devinfo -> f_files - s -> devinfo -> f_filesfree);
            }
            else {
                out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\"><font color=red>not supported by " "filesystem</font></td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize);
            }
        }
        on = on ? FALSE : TRUE;
    }
    if (!header)
        out_print (res, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="897" endline="995">
{
    if (s->type != TYPE_DEVICE)
        continue;
    if (header) {
        out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Device</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Space usage</b></h3></td>" "<td align=\"right\"><h3><b>Inodes usage</b></h3></td>" "</tr>");
        header = FALSE;
    }
    if (!DeviceInfo_Usage (s->devinfo, s->path)) {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">- [-]</td>" "<td align=\"right\">- [-]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not accessible</font>");
    }
    else {
        if (s->devinfo->f_files > 0) {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;objects]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize, (float) 100 * (s -> devinfo -> f_files - s -> devinfo -> f_filesfree) / s -> devinfo -> f_files, s -> devinfo -> f_files - s -> devinfo -> f_filesfree);
        }
        else {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\"><font color=red>not supported by " "filesystem</font></td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize);
        }
    }
    on = on ? FALSE : TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="902" endline="916">
{
    out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Device</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Space usage</b></h3></td>" "<td align=\"right\"><h3><b>Inodes usage</b></h3></td>" "</tr>");
    header = FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="919" endline="931">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">- [-]</td>" "<td align=\"right\">- [-]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not accessible</font>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="933" endline="991">
{
    if (s->devinfo->f_files > 0) {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;objects]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize, (float) 100 * (s -> devinfo -> f_files - s -> devinfo -> f_filesfree) / s -> devinfo -> f_files, s -> devinfo -> f_files - s -> devinfo -> f_filesfree);
    }
    else {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\"><font color=red>not supported by " "filesystem</font></td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="936" endline="963">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;objects]</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize, (float) 100 * (s -> devinfo -> f_files - s -> devinfo -> f_filesfree) / s -> devinfo -> f_files, s -> devinfo -> f_files - s -> devinfo -> f_filesfree);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="965" endline="990">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\"><font color=red>not supported by " "filesystem</font></td></tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / s -> devinfo -> f_blocks, (float) (s -> devinfo -> f_blocks - s -> devinfo -> f_blocksfreetotal) / 1048576 * s -> devinfo -> f_bsize);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1004" endline="1090">
{
    Service_T s;
    int on = TRUE;
    int header = TRUE;
    struct stat stat_buf;
    for (s = servicelist_conf; s; s = s->next_conf) {
        if (s->type != TYPE_FILE)
            continue;
        if (header) {
            out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>File</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Size</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
            header = FALSE;
        }
        if ((stat (s->path, &stat_buf) != 0) || !S_ISREG (stat_buf.st_mode)) {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
        }
        else {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%lu&nbsp;B</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (unsigned long) stat_buf.st_size, stat_buf.st_mode & 07777, stat_buf.st_uid, stat_buf.st_gid);
        }
        on = on ? FALSE : TRUE;
    }
    if (!header)
        out_print (res, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1012" endline="1085">
{
    if (s->type != TYPE_FILE)
        continue;
    if (header) {
        out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>File</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Size</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
        header = FALSE;
    }
    if ((stat (s->path, &stat_buf) != 0) || !S_ISREG (stat_buf.st_mode)) {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
    }
    else {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%lu&nbsp;B</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (unsigned long) stat_buf.st_size, stat_buf.st_mode & 07777, stat_buf.st_uid, stat_buf.st_gid);
    }
    on = on ? FALSE : TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1017" endline="1033">
{
    out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>File</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Size</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
    header = FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1036" endline="1052">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1054" endline="1081">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%lu&nbsp;B</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (unsigned long) stat_buf.st_size, stat_buf.st_mode & 07777, stat_buf.st_uid, stat_buf.st_gid);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1094" endline="1176">
{
    Service_T s;
    int on = TRUE;
    int header = TRUE;
    struct stat stat_buf;
    for (s = servicelist_conf; s; s = s->next_conf) {
        if (s->type != TYPE_DIRECTORY)
            continue;
        if (header) {
            out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Directory</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
            header = FALSE;
        }
        if ((stat (s->path, &stat_buf) != 0) || !S_ISDIR (stat_buf.st_mode)) {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
        }
        else {
            out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", stat_buf.st_mode & 07777, stat_buf.st_uid, stat_buf.st_gid);
        }
        on = on ? FALSE : TRUE;
    }
    if (!header)
        out_print (res, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1102" endline="1171">
{
    if (s->type != TYPE_DIRECTORY)
        continue;
    if (header) {
        out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Directory</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
        header = FALSE;
    }
    if ((stat (s->path, &stat_buf) != 0) || !S_ISDIR (stat_buf.st_mode)) {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
    }
    else {
        out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", stat_buf.st_mode & 07777, stat_buf.st_uid, stat_buf.st_gid);
    }
    on = on ? FALSE : TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1107" endline="1122">
{
    out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Directory</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
    header = FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1125" endline="1140">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1142" endline="1167">
{
    out_print (res, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name, (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", stat_buf.st_mode & 07777, stat_buf.st_uid, stat_buf.st_gid);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1180" endline="1283">
{
    Port_T port;
    Service_T s;
    Icmp_T icmp;
    int on = TRUE;
    int header = TRUE;
    for (s = servicelist_conf; s; s = s->next_conf) {
        if (s->type != TYPE_REMOTE)
            continue;
        if (header) {
            out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Host</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Protocol(s)</b></h3></td>" "</tr>");
            header = FALSE;
        }
        out_print (res, "<tr %s><td width=\"20%\"><a href='/%s'>%s</a></td>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name);
        if (s->portlist) {
            int available = TRUE;
            for (port = s->portlist; port; port = port->next) {
                if (!port->is_available) {
                    available = FALSE;
                    break;
                }
            }
            if (available) {
                out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#00ff00'>available</font>");
                for (port = s->portlist; port; port = port->next) {
                    if (port != s->portlist)
                        out_print (res, "&nbsp;&nbsp;<b>|</b>&nbsp;&nbsp;");
                    out_print (res, "[%s] at port %d", port -> protocol -> name, port -> port);
                }
                out_print (res, "</td>");
            }
            else {
                out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">[%s] at port %d</td>", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#ff0000'>not available</font>", port -> protocol -> name, port -> port);
            }
        }
        else if (s->icmplist) {
            int available = TRUE;
            for (icmp = s->icmplist; icmp; icmp = icmp->next) {
                if (!icmp->is_available) {
                    available = FALSE;
                    break;
                }
            }
            if (available) {
                out_print (res, "<td align=\"left\">" "<font color='#00ff00'>available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
            }
            else {
                out_print (res, "<td align=\"left\">" "<font color='#ff0000'>not available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
            }
        }
        out_print (res, "</tr>");
        on = on ? FALSE : TRUE;
    }
    if (!header)
        out_print (res, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1189" endline="1278">
{
    if (s->type != TYPE_REMOTE)
        continue;
    if (header) {
        out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Host</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Protocol(s)</b></h3></td>" "</tr>");
        header = FALSE;
    }
    out_print (res, "<tr %s><td width=\"20%\"><a href='/%s'>%s</a></td>", on ? "bgcolor=\"#EFEFEF\"" : "", s -> name, s -> name);
    if (s->portlist) {
        int available = TRUE;
        for (port = s->portlist; port; port = port->next) {
            if (!port->is_available) {
                available = FALSE;
                break;
            }
        }
        if (available) {
            out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#00ff00'>available</font>");
            for (port = s->portlist; port; port = port->next) {
                if (port != s->portlist)
                    out_print (res, "&nbsp;&nbsp;<b>|</b>&nbsp;&nbsp;");
                out_print (res, "[%s] at port %d", port -> protocol -> name, port -> port);
            }
            out_print (res, "</td>");
        }
        else {
            out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">[%s] at port %d</td>", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#ff0000'>not available</font>", port -> protocol -> name, port -> port);
        }
    }
    else if (s->icmplist) {
        int available = TRUE;
        for (icmp = s->icmplist; icmp; icmp = icmp->next) {
            if (!icmp->is_available) {
                available = FALSE;
                break;
            }
        }
        if (available) {
            out_print (res, "<td align=\"left\">" "<font color='#00ff00'>available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
        }
        else {
            out_print (res, "<td align=\"left\">" "<font color='#ff0000'>not available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
        }
    }
    out_print (res, "</tr>");
    on = on ? FALSE : TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1194" endline="1207">
{
    out_print (res, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Host</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Protocol(s)</b></h3></td>" "</tr>");
    header = FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1214" endline="1248">
{
    int available = TRUE;
    for (port = s->portlist; port; port = port->next) {
        if (!port->is_available) {
            available = FALSE;
            break;
        }
    }
    if (available) {
        out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#00ff00'>available</font>");
        for (port = s->portlist; port; port = port->next) {
            if (port != s->portlist)
                out_print (res, "&nbsp;&nbsp;<b>|</b>&nbsp;&nbsp;");
            out_print (res, "[%s] at port %d", port -> protocol -> name, port -> port);
        }
        out_print (res, "</td>");
    }
    else {
        out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">[%s] at port %d</td>", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#ff0000'>not available</font>", port -> protocol -> name, port -> port);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1218" endline="1224">
{
    if (!port->is_available) {
        available = FALSE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1220" endline="1223">
{
    available = FALSE;
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1227" endline="1239">
{
    out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#00ff00'>available</font>");
    for (port = s->portlist; port; port = port->next) {
        if (port != s->portlist)
            out_print (res, "&nbsp;&nbsp;<b>|</b>&nbsp;&nbsp;");
        out_print (res, "[%s] at port %d", port -> protocol -> name, port -> port);
    }
    out_print (res, "</td>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1233" endline="1237">
{
    if (port != s->portlist)
        out_print (res, "&nbsp;&nbsp;<b>|</b>&nbsp;&nbsp;");
    out_print (res, "[%s] at port %d", port -> protocol -> name, port -> port);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1241" endline="1247">
{
    out_print (res, "<td align=\"left\">%s</td>" "<td align=\"right\">[%s] at port %d</td>", ! s -> do_monitor ? "<font color='#ff8800'>not monitored</font>" : "<font color='#ff0000'>not available</font>", port -> protocol -> name, port -> port);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1250" endline="1273">
{
    int available = TRUE;
    for (icmp = s->icmplist; icmp; icmp = icmp->next) {
        if (!icmp->is_available) {
            available = FALSE;
            break;
        }
    }
    if (available) {
        out_print (res, "<td align=\"left\">" "<font color='#00ff00'>available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
    }
    else {
        out_print (res, "<td align=\"left\">" "<font color='#ff0000'>not available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1254" endline="1260">
{
    if (!icmp->is_available) {
        available = FALSE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1256" endline="1259">
{
    available = FALSE;
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1262" endline="1266">
{
    out_print (res, "<td align=\"left\">" "<font color='#00ff00'>available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1268" endline="1272">
{
    out_print (res, "<td align=\"left\">" "<font color='#ff0000'>not available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1287" endline="1444">
{
    struct stat stat_buf;
    int state = (DeviceInfo_Usage (s->devinfo, s->path) && stat (s->path, &stat_buf) == 0);
    out_print (res, "<p><br><h3>Device status</h3><br>");
    out_print (res, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td><td width=\"70%\">" "<b>Value</b></td></tr>");
    out_print (res, "<tr><td>Name</td><td>%s</td></tr>", s -> name);
    out_print (res, "<tr><td>Device status</td><td>%s</td></tr>", (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : state ? "<font color='#00ff00'>Accessible</font>" : "<font color='#ff0000'>Not Accessible</font>");
    out_print (res, "<tr><td>Path</td><td>%s</td></tr>", s -> path);
    print_service_common_params (res, s);
    if (s->perm)
        out_print (res, "<tr><td>Associated permission</td>" "<td>if failed %o then %s</td></tr>", s->perm->perm, actionnames[s->perm->action]);
    if (s->uid)
        out_print (res, "<tr><td>Associated UID</td><td>if failed %d then %s</td>" "</tr>", (int) s->uid->uid, actionnames[s->uid->action]);
    if (s->gid)
        out_print (res, "<tr><td>Associated GID</td><td>if failed %d then %s</td>" "</tr>", (int) s->gid->gid, actionnames[s->gid->action]);
    out_print (res, "<tr><td>Permission</td><td>%s%o</font></td></tr>", (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>" : "<font>", stat_buf.st_mode & 07777);
    out_print (res, "<tr><td>UID</td><td>%s%d</font></td></tr>", (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>" : "<font>", (int) stat_buf.st_uid);
    out_print (res, "<tr><td>GID</td><td>%s%d</font></td></tr>", (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>" : "<font>", (int) stat_buf.st_gid);
    {
        Device_T dl;
        if (s->devicelist) {
            for (dl = s->devicelist; dl; dl = dl->next) {
                if (dl->resource == RESOURCE_ID_INODE) {
                    out_print (res, "<tr><td>Inodes usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
                }
                else if (dl->resource == RESOURCE_ID_SPACE) {
                    out_print (res, "<tr><td>Space usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
                }
            }
        }
        if (state) {
            out_print (res, "<tr><td>Blocks total</td><td>%ld [%.1f MB]</td></tr>", s -> devinfo -> f_blocks, (float) s -> devinfo -> f_blocks / 1048576 * s -> devinfo -> f_bsize);
            out_print (res, "<tr><td>Blocks free for non superuser</td>" "<td>%ld [%.1f MB] [%.1f%%]</font></td></tr>", s -> devinfo -> f_blocksfree, (float) s -> devinfo -> f_blocksfree / 1048576 * s -> devinfo -> f_bsize, (float) 100 * s -> devinfo -> f_blocksfree / s -> devinfo -> f_blocks);
            out_print (res, "<tr><td>Blocks free total</td><td>%ld [%.1f MB] [%.1f%%]" "</td></tr>", s -> devinfo -> f_blocksfreetotal, (float) s -> devinfo -> f_blocksfreetotal / 1048576 * s -> devinfo -> f_bsize, (float) 100 * s -> devinfo -> f_blocksfreetotal / s -> devinfo -> f_blocks);
            out_print (res, "<tr><td>Block size</td><td>%ld B</td></tr>", s -> devinfo -> f_bsize);
            if (s->devinfo->f_files > 0) {
                out_print (res, "<tr><td>Inodes total</td><td>%ld</td></tr>", s -> devinfo -> f_files);
                out_print (res, "<tr><td>Inodes free</td><td>%ld [%.1f%%]</font>" "</td></tr>", s -> devinfo -> f_filesfree, (float) 100 * s -> devinfo -> f_filesfree / s -> devinfo -> f_files);
            }
        }
        else {
            out_print (res, "<tr><td>Blocks total</td><td>-</td></tr>");
            out_print (res, "<tr><td>Blocks free for non superuser</td>" "<td>-</font></td></tr>");
            out_print (res, "<tr><td>Blocks free total</td><td>-</td></tr>");
            out_print (res, "<tr><td>Block size</td><td>-</td></tr>");
            out_print (res, "<tr><td>Inodes total</td><td>-</td></tr>");
            out_print (res, "<tr><td>Inodes free</td><td>-</font></td></tr>");
        }
    }
    print_alerts (res, s -> maillist);
    out_print (res, "</table>");
    print_buttons (req, res, s);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1348" endline="1436">
{
    Device_T dl;
    if (s->devicelist) {
        for (dl = s->devicelist; dl; dl = dl->next) {
            if (dl->resource == RESOURCE_ID_INODE) {
                out_print (res, "<tr><td>Inodes usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
            }
            else if (dl->resource == RESOURCE_ID_SPACE) {
                out_print (res, "<tr><td>Space usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
            }
        }
    }
    if (state) {
        out_print (res, "<tr><td>Blocks total</td><td>%ld [%.1f MB]</td></tr>", s -> devinfo -> f_blocks, (float) s -> devinfo -> f_blocks / 1048576 * s -> devinfo -> f_bsize);
        out_print (res, "<tr><td>Blocks free for non superuser</td>" "<td>%ld [%.1f MB] [%.1f%%]</font></td></tr>", s -> devinfo -> f_blocksfree, (float) s -> devinfo -> f_blocksfree / 1048576 * s -> devinfo -> f_bsize, (float) 100 * s -> devinfo -> f_blocksfree / s -> devinfo -> f_blocks);
        out_print (res, "<tr><td>Blocks free total</td><td>%ld [%.1f MB] [%.1f%%]" "</td></tr>", s -> devinfo -> f_blocksfreetotal, (float) s -> devinfo -> f_blocksfreetotal / 1048576 * s -> devinfo -> f_bsize, (float) 100 * s -> devinfo -> f_blocksfreetotal / s -> devinfo -> f_blocks);
        out_print (res, "<tr><td>Block size</td><td>%ld B</td></tr>", s -> devinfo -> f_bsize);
        if (s->devinfo->f_files > 0) {
            out_print (res, "<tr><td>Inodes total</td><td>%ld</td></tr>", s -> devinfo -> f_files);
            out_print (res, "<tr><td>Inodes free</td><td>%ld [%.1f%%]</font>" "</td></tr>", s -> devinfo -> f_filesfree, (float) 100 * s -> devinfo -> f_filesfree / s -> devinfo -> f_files);
        }
    }
    else {
        out_print (res, "<tr><td>Blocks total</td><td>-</td></tr>");
        out_print (res, "<tr><td>Blocks free for non superuser</td>" "<td>-</font></td></tr>");
        out_print (res, "<tr><td>Blocks free total</td><td>-</td></tr>");
        out_print (res, "<tr><td>Block size</td><td>-</td></tr>");
        out_print (res, "<tr><td>Inodes total</td><td>-</td></tr>");
        out_print (res, "<tr><td>Inodes free</td><td>-</font></td></tr>");
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1353" endline="1384">
{
    for (dl = s->devicelist; dl; dl = dl->next) {
        if (dl->resource == RESOURCE_ID_INODE) {
            out_print (res, "<tr><td>Inodes usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
        }
        else if (dl->resource == RESOURCE_ID_SPACE) {
            out_print (res, "<tr><td>Space usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1356" endline="1382">
{
    if (dl->resource == RESOURCE_ID_INODE) {
        out_print (res, "<tr><td>Inodes usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
    }
    else if (dl->resource == RESOURCE_ID_SPACE) {
        out_print (res, "<tr><td>Space usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1359" endline="1369">
{
    out_print (res, "<tr><td>Inodes usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1371" endline="1380">
{
    out_print (res, "<tr><td>Space usage limit</td><td>if %s %ld %s " "then %s</td></tr>", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1387" endline="1419">
{
    out_print (res, "<tr><td>Blocks total</td><td>%ld [%.1f MB]</td></tr>", s -> devinfo -> f_blocks, (float) s -> devinfo -> f_blocks / 1048576 * s -> devinfo -> f_bsize);
    out_print (res, "<tr><td>Blocks free for non superuser</td>" "<td>%ld [%.1f MB] [%.1f%%]</font></td></tr>", s -> devinfo -> f_blocksfree, (float) s -> devinfo -> f_blocksfree / 1048576 * s -> devinfo -> f_bsize, (float) 100 * s -> devinfo -> f_blocksfree / s -> devinfo -> f_blocks);
    out_print (res, "<tr><td>Blocks free total</td><td>%ld [%.1f MB] [%.1f%%]" "</td></tr>", s -> devinfo -> f_blocksfreetotal, (float) s -> devinfo -> f_blocksfreetotal / 1048576 * s -> devinfo -> f_bsize, (float) 100 * s -> devinfo -> f_blocksfreetotal / s -> devinfo -> f_blocks);
    out_print (res, "<tr><td>Block size</td><td>%ld B</td></tr>", s -> devinfo -> f_bsize);
    if (s->devinfo->f_files > 0) {
        out_print (res, "<tr><td>Inodes total</td><td>%ld</td></tr>", s -> devinfo -> f_files);
        out_print (res, "<tr><td>Inodes free</td><td>%ld [%.1f%%]</font>" "</td></tr>", s -> devinfo -> f_filesfree, (float) 100 * s -> devinfo -> f_filesfree / s -> devinfo -> f_files);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1410" endline="1418">
{
    out_print (res, "<tr><td>Inodes total</td><td>%ld</td></tr>", s -> devinfo -> f_files);
    out_print (res, "<tr><td>Inodes free</td><td>%ld [%.1f%%]</font>" "</td></tr>", s -> devinfo -> f_filesfree, (float) 100 * s -> devinfo -> f_filesfree / s -> devinfo -> f_files);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1421" endline="1435">
{
    out_print (res, "<tr><td>Blocks total</td><td>-</td></tr>");
    out_print (res, "<tr><td>Blocks free for non superuser</td>" "<td>-</font></td></tr>");
    out_print (res, "<tr><td>Blocks free total</td><td>-</td></tr>");
    out_print (res, "<tr><td>Block size</td><td>-</td></tr>");
    out_print (res, "<tr><td>Inodes total</td><td>-</td></tr>");
    out_print (res, "<tr><td>Inodes free</td><td>-</font></td></tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1449" endline="1538">
{
    struct stat stat_buf;
    int state = ((stat (s->path, &stat_buf) == 0) && S_ISDIR (stat_buf.st_mode));
    out_print (res, "<p><br><h3>Directory status</h3><br>");
    out_print (res, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td>" "<td width=\"70%\"><b>Value</b></td></tr>");
    out_print (res, "<tr><td>Name</td><td>%s</td></tr>", s -> name);
    out_print (res, "<tr><td>Directory status</td><td>%s</td></tr>", (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : state ? "<font color='#00ff00'>Exist</font>" : "<font color='#ff0000'>Doesn't Exist</font>");
    out_print (res, "<tr><td>Path</td><td>%s</td></tr>", s -> path);
    print_service_common_params (res, s);
    {
        struct mytimestamp *t;
        for (t = s->timestamplist; t; t = t->next) {
            if (t->test_changes) {
                out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
            }
            else {
                out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
            }
        }
    }
    if (s->perm)
        out_print (res, "<tr><td>Associated permission</td><td>" "if failed %o then %s</td></tr>", s->perm->perm, actionnames[s->perm->action]);
    if (s->uid)
        out_print (res, "<tr><td>Associated UID</td><td>" "if failed %d then %s</td></tr>", (int) s->uid->uid, actionnames[s->uid->action]);
    if (s->gid)
        out_print (res, "<tr><td>Associated GID</td><td>" "if failed %d then %s</td></tr>", (int) s->gid->gid, actionnames[s->gid->action]);
    out_print (res, "<tr><td>Permission</td><td>%s%o</font></td></tr>", (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>" : "<font>", stat_buf.st_mode & 07777);
    out_print (res, "<tr><td>UID</td><td>%s%d</font></td></tr>", (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>" : "<font>", (int) stat_buf.st_uid);
    out_print (res, "<tr><td>GID</td><td>%s%d</font></td></tr>", (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>" : "<font>", (int) stat_buf.st_gid);
    print_alerts (res, s -> maillist);
    out_print (res, "</table>");
    print_buttons (req, res, s);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1479" endline="1499">
{
    struct mytimestamp *t;
    for (t = s->timestamplist; t; t = t->next) {
        if (t->test_changes) {
            out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
        }
        else {
            out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1482" endline="1498">
{
    if (t->test_changes) {
        out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
    }
    else {
        out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1484" endline="1489">
{
    out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1491" endline="1497">
{
    out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1542" endline="1676">
{
    struct stat stat_buf;
    int state = ((stat (s->path, &stat_buf) == 0) && S_ISREG (stat_buf.st_mode));
    out_print (res, "<p><br><h3>File status</h3><br>");
    out_print (res, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td><td width=\"70%\">" "<b>Value</b></td></tr>");
    out_print (res, "<tr><td>Name</td><td>%s</td></tr>", s -> name);
    out_print (res, "<tr><td>File status</td><td>%s</td></tr>", (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>Permission Error</font>" : (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>UID Error</font>" : (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>GID Error</font>" : state ? "<font color='#00ff00'>Exist</font>" : "<font color='#ff0000'>Doesn't Exist</font>");
    out_print (res, "<tr><td>Path</td><td>%s</td></tr>", s -> path);
    print_service_common_params (res, s);
    {
        struct mytimestamp *t;
        for (t = s->timestamplist; t; t = t->next) {
            if (t->test_changes) {
                out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
            }
            else {
                out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
            }
        }
    }
    {
        Size_T sl;
        for (sl = s->sizelist; sl; sl = sl->next) {
            if (sl->test_changes) {
                out_print (res, "<tr><td>Associated size</td>" "<td>If changed then %s</td></tr>", actionnames [sl -> action]);
            }
            else {
                out_print (res, "<tr><td>Associated size</td>" "<td>If %s %lu byte(s) then %s</td></tr>", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
            }
        }
    }
    if (s->checksum) {
        switch (s->checksum->type) {
        case HASH_MD5 :
            out_print (res, "<tr><td>Associated checksum</td><td>" "if failed MD5(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
            break;
        case HASH_SHA1 :
            out_print (res, "<tr><td>Associated checksum</td><td>" "if failed SHA1(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
            break;
        default :
            out_print (res, "<tr><td>Associated checksum</td><td>" "if failed UNKNOWN(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
            break;
        }
    }
    if (s->perm)
        out_print (res, "<tr><td>Associated permission</td><td>" "if failed %o then %s</td></tr>", s->perm->perm, actionnames[s->perm->action]);
    if (s->uid)
        out_print (res, "<tr><td>Associated UID</td><td>" "if failed %d then %s</td></tr>", (int) s->uid->uid, actionnames[s->uid->action]);
    if (s->gid)
        out_print (res, "<tr><td>Associated GID</td><td>" "if failed %d then %s</td></tr>", (int) s->gid->gid, actionnames[s->gid->action]);
    out_print (res, "<tr><td>Size</td><td>%lu B</td></tr>", (unsigned long) stat_buf.st_size);
    out_print (res, "<tr><td>Permission</td><td>%s%o</td></tr>", (s -> perm && s -> perm -> has_error) ? "<font color='#ff0000'>" : "<font>", stat_buf.st_mode & 07777);
    out_print (res, "<tr><td>UID</td><td>%s%d</font></td></tr>", (s -> uid && s -> uid -> has_error) ? "<font color='#ff0000'>" : "<font>", (int) stat_buf.st_uid);
    out_print (res, "<tr><td>GID</td><td>%s%d</font></td></tr>", (s -> gid && s -> gid -> has_error) ? "<font color='#ff0000'>" : "<font>", (int) stat_buf.st_gid);
    print_alerts (res, s -> maillist);
    out_print (res, "</table>");
    print_buttons (req, res, s);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1571" endline="1591">
{
    struct mytimestamp *t;
    for (t = s->timestamplist; t; t = t->next) {
        if (t->test_changes) {
            out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
        }
        else {
            out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1574" endline="1590">
{
    if (t->test_changes) {
        out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
    }
    else {
        out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1576" endline="1581">
{
    out_print (res, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", actionnames [t -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1583" endline="1589">
{
    out_print (res, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", operatornames [t -> operator], t -> time, actionnames [t -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1592" endline="1612">
{
    Size_T sl;
    for (sl = s->sizelist; sl; sl = sl->next) {
        if (sl->test_changes) {
            out_print (res, "<tr><td>Associated size</td>" "<td>If changed then %s</td></tr>", actionnames [sl -> action]);
        }
        else {
            out_print (res, "<tr><td>Associated size</td>" "<td>If %s %lu byte(s) then %s</td></tr>", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1595" endline="1611">
{
    if (sl->test_changes) {
        out_print (res, "<tr><td>Associated size</td>" "<td>If changed then %s</td></tr>", actionnames [sl -> action]);
    }
    else {
        out_print (res, "<tr><td>Associated size</td>" "<td>If %s %lu byte(s) then %s</td></tr>", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1597" endline="1602">
{
    out_print (res, "<tr><td>Associated size</td>" "<td>If changed then %s</td></tr>", actionnames [sl -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1604" endline="1610">
{
    out_print (res, "<tr><td>Associated size</td>" "<td>If %s %lu byte(s) then %s</td></tr>", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1615" endline="1634">
{
    switch (s->checksum->type) {
    case HASH_MD5 :
        out_print (res, "<tr><td>Associated checksum</td><td>" "if failed MD5(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
        break;
    case HASH_SHA1 :
        out_print (res, "<tr><td>Associated checksum</td><td>" "if failed SHA1(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
        break;
    default :
        out_print (res, "<tr><td>Associated checksum</td><td>" "if failed UNKNOWN(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1617" endline="1633">
{
case HASH_MD5 :
    out_print (res, "<tr><td>Associated checksum</td><td>" "if failed MD5(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
    break;
case HASH_SHA1 :
    out_print (res, "<tr><td>Associated checksum</td><td>" "if failed SHA1(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
    break;
default :
    out_print (res, "<tr><td>Associated checksum</td><td>" "if failed UNKNOWN(%s) then %s</td></tr>", s->checksum->hash, actionnames[s->checksum->action]);
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1680" endline="1855">
{
    int run = is_process_running (s);
    out_print (res, "<p><br><h3>Process status</h3><br>");
    out_print (res, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td>" "<td width=\"70%\"><b>Value</b></td></tr>");
    out_print (res, "<tr><td>Name</td><td>%s</td></tr>", s -> name);
    out_print (res, "<tr><td>Process id </td><td>%d</td></tr>", run);
    out_print (res, "<tr><td>Process status</td><td>%s</td></tr>", run ? "<font color='#00ff00'>Running</font>" : "<font color='#ff0000'>Not Running</font>");
    out_print (res, "<tr><td>Pid file</td><td>%s</td></tr>", s -> path);
    print_service_common_params (res, s);
    if (Run.doprocess) {
        ProcInfo_T pi = s->procinfo;
        out_print (res, "<tr><td>CPU usage</td><td>%.1f%%</td></tr>", pi -> cpu_percent / 10.0);
        out_print (res, "<tr><td>Memory usage</td><td>%.1f%% [%ldkB]</td></tr>", pi -> mem_percent / 10.0, pi -> mem_kbyte);
        out_print (res, "<tr><td>Children</td><td>%d</td></tr>", pi -> children);
        out_print (res, "<tr><td>Total memory usage (incl. children) </td>" "<td>%.1f%% [%ldkB]</td></tr>", pi -> total_mem_percent / 10.0, pi -> total_mem_kbyte);
    }
    {
        Port_T n;
        for (n = s->portlist; n; n = n->next) {
            if (n->family == AF_INET) {
                if (n->SSL.use_ssl) {
                    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td>" "</tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
                    if (n->SSL.certmd5 != NULL) {
                        out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
                    }
                }
                else {
                    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
                }
            }
            else if (n->family == AF_UNIX) {
                out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
            }
        }
    }
    {
        Resource_T q;
        for (q = s->resourcelist; q; q = q->next) {
            switch (q->resource_id) {
            case RESOURCE_ID_CPU_PERCENT :
                out_print (res, "<tr><td>CPU usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_MEM_PERCENT :
                out_print (res, "<tr><td>Memory usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_MEM_KBYTE :
                out_print (res, "<tr><td>Memory amount limit</td>" "<td>If %s %ld for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_LOAD1 :
                out_print (res, "<tr><td>Load average (1min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_LOAD5 :
                out_print (res, "<tr><td>Load average (5min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_LOAD15 :
                out_print (res, "<tr><td>Load average (15min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_CHILDREN :
                out_print (res, "<tr><td>Children</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_TOTAL_MEM_KBYTE :
                out_print (res, "<tr><td>Memory amount limit (incl. children)</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
                break;
            case RESOURCE_ID_TOTAL_MEM_PERCENT :
                out_print (res, "<tr><td>Memory usage limit (incl. children)</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
                break;
            }
        }
    }
    print_alerts (res, s -> maillist);
    out_print (res, "</table>");
    print_buttons (req, res, s);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1704" endline="1720">
{
    ProcInfo_T pi = s->procinfo;
    out_print (res, "<tr><td>CPU usage</td><td>%.1f%%</td></tr>", pi -> cpu_percent / 10.0);
    out_print (res, "<tr><td>Memory usage</td><td>%.1f%% [%ldkB]</td></tr>", pi -> mem_percent / 10.0, pi -> mem_kbyte);
    out_print (res, "<tr><td>Children</td><td>%d</td></tr>", pi -> children);
    out_print (res, "<tr><td>Total memory usage (incl. children) </td>" "<td>%.1f%% [%ldkB]</td></tr>", pi -> total_mem_percent / 10.0, pi -> total_mem_kbyte);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1721" endline="1759">
{
    Port_T n;
    for (n = s->portlist; n; n = n->next) {
        if (n->family == AF_INET) {
            if (n->SSL.use_ssl) {
                out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td>" "</tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
                if (n->SSL.certmd5 != NULL) {
                    out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
                }
            }
            else {
                out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
            }
        }
        else if (n->family == AF_UNIX) {
            out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1724" endline="1758">
{
    if (n->family == AF_INET) {
        if (n->SSL.use_ssl) {
            out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td>" "</tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
            if (n->SSL.certmd5 != NULL) {
                out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
            }
        }
        else {
            out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
        }
    }
    else if (n->family == AF_UNIX) {
        out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1726" endline="1750">
{
    if (n->SSL.use_ssl) {
        out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td>" "</tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
        if (n->SSL.certmd5 != NULL) {
            out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
        }
    }
    else {
        out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1728" endline="1741">
{
    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td>" "</tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
    if (n->SSL.certmd5 != NULL) {
        out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1736" endline="1740">
{
    out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1743" endline="1749">
{
    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1752" endline="1757">
{
    out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1760" endline="1847">
{
    Resource_T q;
    for (q = s->resourcelist; q; q = q->next) {
        switch (q->resource_id) {
        case RESOURCE_ID_CPU_PERCENT :
            out_print (res, "<tr><td>CPU usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_MEM_PERCENT :
            out_print (res, "<tr><td>Memory usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_MEM_KBYTE :
            out_print (res, "<tr><td>Memory amount limit</td>" "<td>If %s %ld for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_LOAD1 :
            out_print (res, "<tr><td>Load average (1min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_LOAD5 :
            out_print (res, "<tr><td>Load average (5min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_LOAD15 :
            out_print (res, "<tr><td>Load average (15min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_CHILDREN :
            out_print (res, "<tr><td>Children</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_TOTAL_MEM_KBYTE :
            out_print (res, "<tr><td>Memory amount limit (incl. children)</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_TOTAL_MEM_PERCENT :
            out_print (res, "<tr><td>Memory usage limit (incl. children)</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1764" endline="1846">
{
    switch (q->resource_id) {
    case RESOURCE_ID_CPU_PERCENT :
        out_print (res, "<tr><td>CPU usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_MEM_PERCENT :
        out_print (res, "<tr><td>Memory usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_MEM_KBYTE :
        out_print (res, "<tr><td>Memory amount limit</td>" "<td>If %s %ld for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_LOAD1 :
        out_print (res, "<tr><td>Load average (1min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_LOAD5 :
        out_print (res, "<tr><td>Load average (5min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_LOAD15 :
        out_print (res, "<tr><td>Load average (15min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_CHILDREN :
        out_print (res, "<tr><td>Children</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_TOTAL_MEM_KBYTE :
        out_print (res, "<tr><td>Memory amount limit (incl. children)</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_TOTAL_MEM_PERCENT :
        out_print (res, "<tr><td>Memory usage limit (incl. children)</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1766" endline="1845">
{
case RESOURCE_ID_CPU_PERCENT :
    out_print (res, "<tr><td>CPU usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_MEM_PERCENT :
    out_print (res, "<tr><td>Memory usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_MEM_KBYTE :
    out_print (res, "<tr><td>Memory amount limit</td>" "<td>If %s %ld for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_LOAD1 :
    out_print (res, "<tr><td>Load average (1min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_LOAD5 :
    out_print (res, "<tr><td>Load average (5min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_LOAD15 :
    out_print (res, "<tr><td>Load average (15min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_CHILDREN :
    out_print (res, "<tr><td>Children</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_TOTAL_MEM_KBYTE :
    out_print (res, "<tr><td>Memory amount limit (incl. children)</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_TOTAL_MEM_PERCENT :
    out_print (res, "<tr><td>Memory usage limit (incl. children)</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1859" endline="1951">
{
    Icmp_T icmp;
    Port_T port;
    int available = TRUE;
    for (icmp = s->icmplist; icmp; icmp = icmp->next) {
        if (!icmp->is_available) {
            available = FALSE;
            break;
        }
    }
    for (port = s->portlist; port; port = port->next) {
        if (!port->is_available) {
            available = FALSE;
            break;
        }
    }
    out_print (res, "<p><br><h3>Host status</h3><br>");
    out_print (res, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td>" "<td width=\"70%\"><b>Value</b></td></tr>");
    out_print (res, "<tr><td>Name</td><td>%s</td></tr>", s -> name);
    out_print (res, "<tr><td>Remote status</td><td>%s</td></tr>", available ? "<font color='#00ff00'>Available</font>" : "<font color='#ff0000'>Not available</font>");
    print_service_common_params (res, s);
    {
        Port_T n;
        for (n = s->portlist; n; n = n->next) {
            if (n->family == AF_INET) {
                if (n->SSL.use_ssl) {
                    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
                    if (n->SSL.certmd5 != NULL) {
                        out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
                    }
                }
                else {
                    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
                }
            }
            else if (n->family == AF_UNIX) {
                out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
            }
        }
    }
    {
        Icmp_T n;
        for (n = s->icmplist; n; n = n->next)
            out_print (res, "<tr><td>ICMP</td>" "<td>if failed %s with timeout %d seconds then %s</td></tr>", icmpnames[n->type], n->timeout, actionnames[n->action]);
    }
    print_alerts (res, s -> maillist);
    out_print (res, "</table>");
    print_buttons (req, res, s);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1866" endline="1872">
{
    if (!icmp->is_available) {
        available = FALSE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1868" endline="1871">
{
    available = FALSE;
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1875" endline="1881">
{
    if (!port->is_available) {
        available = FALSE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1877" endline="1880">
{
    available = FALSE;
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1897" endline="1935">
{
    Port_T n;
    for (n = s->portlist; n; n = n->next) {
        if (n->family == AF_INET) {
            if (n->SSL.use_ssl) {
                out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
                if (n->SSL.certmd5 != NULL) {
                    out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
                }
            }
            else {
                out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
            }
        }
        else if (n->family == AF_UNIX) {
            out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1900" endline="1934">
{
    if (n->family == AF_INET) {
        if (n->SSL.use_ssl) {
            out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
            if (n->SSL.certmd5 != NULL) {
                out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
            }
        }
        else {
            out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
        }
    }
    else if (n->family == AF_UNIX) {
        out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1902" endline="1926">
{
    if (n->SSL.use_ssl) {
        out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
        if (n->SSL.certmd5 != NULL) {
            out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
        }
    }
    else {
        out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1904" endline="1917">
{
    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
    if (n->SSL.certmd5 != NULL) {
        out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1912" endline="1916">
{
    out_print (res, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", n -> SSL.certmd5);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1919" endline="1925">
{
    out_print (res, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, actionnames [n -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1928" endline="1933">
{
    out_print (res, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", n -> pathname, n -> protocol -> name, actionnames [n -> action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1936" endline="1943">
{
    Icmp_T n;
    for (n = s->icmplist; n; n = n->next)
        out_print (res, "<tr><td>ICMP</td>" "<td>if failed %s with timeout %d seconds then %s</td></tr>", icmpnames[n->type], n->timeout, actionnames[n->action]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1958" endline="2009">
{
    Mail_T r;
    for (r = s; r; r = r->next) {
        out_print (res, "<tr bgcolor=\"#EFEFEF\"><td>Alert mail to</td>" "<td>%s</td></tr>", r -> to ? r -> to : "");
        out_print (res, "<tr><td>Alert on</td><td>");
        if (r->events == (~((unsigned int) 0))) {
            out_print (res, "All events");
        }
        else {
            if (IS_EVENT_SET (r->events, EVENT_START))
                out_print (res, "Start ");
            if (IS_EVENT_SET (r->events, EVENT_STOP))
                out_print (res, "Stop ");
            if (IS_EVENT_SET (r->events, EVENT_RESTART))
                out_print (res, "Restart ");
            if (IS_EVENT_SET (r->events, EVENT_CHECKSUM))
                out_print (res, "Checksum ");
            if (IS_EVENT_SET (r->events, EVENT_RESOURCE))
                out_print (res, "Resource ");
            if (IS_EVENT_SET (r->events, EVENT_TIMEOUT))
                out_print (res, "Timeout ");
            if (IS_EVENT_SET (r->events, EVENT_TIMESTAMP))
                out_print (res, "Timestamp ");
            if (IS_EVENT_SET (r->events, EVENT_SIZE))
                out_print (res, "Size ");
            if (IS_EVENT_SET (r->events, EVENT_CONNECTION))
                out_print (res, "Connection ");
            if (IS_EVENT_SET (r->events, EVENT_PERMISSION))
                out_print (res, "Permission ");
            if (IS_EVENT_SET (r->events, EVENT_UID))
                out_print (res, "Uid ");
            if (IS_EVENT_SET (r->events, EVENT_GID))
                out_print (res, "Gid ");
            if (IS_EVENT_SET (r->events, EVENT_UNMONITOR))
                out_print (res, "Unmonitor ");
        }
        out_print (res, "</td></tr>");
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1963" endline="2007">
{
    out_print (res, "<tr bgcolor=\"#EFEFEF\"><td>Alert mail to</td>" "<td>%s</td></tr>", r -> to ? r -> to : "");
    out_print (res, "<tr><td>Alert on</td><td>");
    if (r->events == (~((unsigned int) 0))) {
        out_print (res, "All events");
    }
    else {
        if (IS_EVENT_SET (r->events, EVENT_START))
            out_print (res, "Start ");
        if (IS_EVENT_SET (r->events, EVENT_STOP))
            out_print (res, "Stop ");
        if (IS_EVENT_SET (r->events, EVENT_RESTART))
            out_print (res, "Restart ");
        if (IS_EVENT_SET (r->events, EVENT_CHECKSUM))
            out_print (res, "Checksum ");
        if (IS_EVENT_SET (r->events, EVENT_RESOURCE))
            out_print (res, "Resource ");
        if (IS_EVENT_SET (r->events, EVENT_TIMEOUT))
            out_print (res, "Timeout ");
        if (IS_EVENT_SET (r->events, EVENT_TIMESTAMP))
            out_print (res, "Timestamp ");
        if (IS_EVENT_SET (r->events, EVENT_SIZE))
            out_print (res, "Size ");
        if (IS_EVENT_SET (r->events, EVENT_CONNECTION))
            out_print (res, "Connection ");
        if (IS_EVENT_SET (r->events, EVENT_PERMISSION))
            out_print (res, "Permission ");
        if (IS_EVENT_SET (r->events, EVENT_UID))
            out_print (res, "Uid ");
        if (IS_EVENT_SET (r->events, EVENT_GID))
            out_print (res, "Gid ");
        if (IS_EVENT_SET (r->events, EVENT_UNMONITOR))
            out_print (res, "Unmonitor ");
    }
    out_print (res, "</td></tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1970" endline="1974">
{
    out_print (res, "All events");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1976" endline="2003">
{
    if (IS_EVENT_SET (r->events, EVENT_START))
        out_print (res, "Start ");
    if (IS_EVENT_SET (r->events, EVENT_STOP))
        out_print (res, "Stop ");
    if (IS_EVENT_SET (r->events, EVENT_RESTART))
        out_print (res, "Restart ");
    if (IS_EVENT_SET (r->events, EVENT_CHECKSUM))
        out_print (res, "Checksum ");
    if (IS_EVENT_SET (r->events, EVENT_RESOURCE))
        out_print (res, "Resource ");
    if (IS_EVENT_SET (r->events, EVENT_TIMEOUT))
        out_print (res, "Timeout ");
    if (IS_EVENT_SET (r->events, EVENT_TIMESTAMP))
        out_print (res, "Timestamp ");
    if (IS_EVENT_SET (r->events, EVENT_SIZE))
        out_print (res, "Size ");
    if (IS_EVENT_SET (r->events, EVENT_CONNECTION))
        out_print (res, "Connection ");
    if (IS_EVENT_SET (r->events, EVENT_PERMISSION))
        out_print (res, "Permission ");
    if (IS_EVENT_SET (r->events, EVENT_UID))
        out_print (res, "Uid ");
    if (IS_EVENT_SET (r->events, EVENT_GID))
        out_print (res, "Gid ");
    if (IS_EVENT_SET (r->events, EVENT_UNMONITOR))
        out_print (res, "Unmonitor ");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2013" endline="2056">
{
    char *action [] = {"monitor", "unmonitor"};
    char *label [] = {"Enable monitoring", "Disable monitoring"};
    if (is_readonly (req)) {
        return;
    }
    out_print (res, "<table cellspacing=16><tr nowrap><td><font size=+1>");
    if (s->start)
        out_print (res, "<td><form method=GET action=/%s>" "<input type=hidden value='start' name=action>" "<input type=submit value='Start service' style='font-size: " "12pt'></form></td>", s->name);
    if (s->stop)
        out_print (res, "<td><form method=GET action=/%s>" "<input type=hidden value='stop' name=action>" "<input type=submit value='Stop service' style='font-size: " "12pt'></form></td>", s->name);
    if (s->start && s->stop)
        out_print (res, "<td><form method=GET action=/%s>" "<input type=hidden value='restart' name=action>" "<input type=submit value='Restart service' style='font-size: " "12pt'></form></td>", s->name);
    out_print (res, "<td><form method=GET action=/%s>" "<input type=hidden value='%s' name=action>" "<input type=submit value='%s' style='font-size: 12pt'>" "</form></td></tr></table>", s -> name, action [s -> do_monitor], label [s -> do_monitor]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2019" endline="2024">
{
    return;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2060" endline="2118">
{
    Dependant_T d;
    if (s->group)
        out_print (res, "<tr><td>Group</td><td><font color='#0000ff'>%s" "</font></td></tr>", s->group);
    out_print (res, "<tr><td>Monitoring mode</td><td>%s</td></tr>", modenames [s -> mode]);
    out_print (res, "<tr><td>Monitoring status</td><td><font color='#ff8800'>%s" "</font></td></tr>", statusnames [s -> do_monitor]);
    for (d = s->dependantlist; d; d = d->next) {
        if (d->dependant != NULL) {
            out_print (res, "<tr><td>Depends on service </td>" "<td> <a href=%s> %s </a></td></tr>", d -> dependant, d -> dependant);
        }
    }
    if (s->start) {
        int i = 0;
        out_print (res, "<tr><td>Start program</td><td>");
        while (s->start->arg[i])
            out_print (res, "%s ", s->start->arg[i++]);
        out_print (res, "</td></tr>");
    }
    if (s->stop) {
        int i = 0;
        out_print (res, "<tr><td>Stop program</td><td>");
        while (s->stop->arg[i])
            out_print (res, "%s ", s->stop->arg[i++]);
        out_print (res, "</td></tr>");
    }
    out_print (res, "<tr><td>Check service</td><td>Every %d cycle</td></tr>", s -> every ? s -> every : 1);
    if (s->def_timeout) {
        out_print (res, "<tr><td>Timeout</td><td>" "Timeout if %d restart within %d cycles</td></tr>", s -> to_start, s -> to_cycle);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2079" endline="2086">
{
    if (d->dependant != NULL) {
        out_print (res, "<tr><td>Depends on service </td>" "<td> <a href=%s> %s </a></td></tr>", d -> dependant, d -> dependant);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2081" endline="2085">
{
    out_print (res, "<tr><td>Depends on service </td>" "<td> <a href=%s> %s </a></td></tr>", d -> dependant, d -> dependant);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2089" endline="2095">
{
    int i = 0;
    out_print (res, "<tr><td>Start program</td><td>");
    while (s->start->arg[i])
        out_print (res, "%s ", s->start->arg[i++]);
    out_print (res, "</td></tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2098" endline="2104">
{
    int i = 0;
    out_print (res, "<tr><td>Stop program</td><td>");
    while (s->stop->arg[i])
        out_print (res, "%s ", s->stop->arg[i++]);
    out_print (res, "</td></tr>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2111" endline="2116">
{
    out_print (res, "<tr><td>Timeout</td><td>" "Timeout if %d restart within %d cycles</td></tr>", s -> to_start, s -> to_cycle);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2122" endline="2131">
{
    if (req->remote_user) {
        return ((Auth_T) get_user_credentials (req->remote_user))->is_readonly;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2125" endline="2127">
{
    return ((Auth_T) get_user_credentials (req->remote_user))->is_readonly;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2138" endline="2158">
{
    Service_T s;
    set_content_type (res, "text/plain");
    status_start (res, format);
    for (s = servicelist_conf; s; s = s->next_conf) {
        if (format == XML_STATUS) {
            status_service_xml (s, res);
        }
        else {
            status_service_text (s, res);
        }
    }
    status_stop (res, format);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2145" endline="2155">
{
    if (format == XML_STATUS) {
        status_service_xml (s, res);
    }
    else {
        status_service_text (s, res);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2147" endline="2149">
{
    status_service_xml (s, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2151" endline="2154">
{
    status_service_text (s, res);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2162" endline="2181">
{
    char *uptime = get_process_uptime (Run.pidfile, " ");
    if (format == XML_STATUS) {
        out_print (res, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n");
        out_print (res, "<monit>\r\n\t<server>\r\n\t\t<version>%s</version>" "\r\n\t\t<uptime>%s</uptime>\r\n\t</server>\r\n", VERSION, trim (uptime));
    }
    else {
        out_print (res, "The monit daemon uptime: %s\n\n", uptime);
    }
    FREE (uptime);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2167" endline="2172">
{
    out_print (res, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n");
    out_print (res, "<monit>\r\n\t<server>\r\n\t\t<version>%s</version>" "\r\n\t\t<uptime>%s</uptime>\r\n\t</server>\r\n", VERSION, trim (uptime));
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2174" endline="2177">
{
    out_print (res, "The monit daemon uptime: %s\n\n", uptime);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2185" endline="2190">
{
    if (format == XML_STATUS)
        out_print (res, "</monit>\r\n");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2194" endline="2202">
{
    out_print (res, "\t<service>\r\n\t\t<type>%s</type>\r\n\t\t<name>%s</name>" "\r\n\t\t<status>%d</status>\r\n\t\t<monitored>%d</monitored>" "\r\n\t</service>\r\n", status_text [s -> type].type, s -> name, get_service_status (s), s -> do_monitor);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2206" endline="2216">
{
    char prefix [STRLEN];
    snprintf (prefix, STRLEN, "%s '%s'", status_text [s -> type].type, s -> name);
    out_print (res, "%-35s %s\n", prefix, ! s -> do_monitor ? "not monitored" : get_service_status (s) ? status_text [s -> type].up : status_text [s -> type].down);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2220" endline="2305">
{
    struct stat stat_buf;
    switch (s->type) {
    case TYPE_PROCESS :
        return (is_process_running (s) > 0);
        break;
    case TYPE_DEVICE :
        if (DeviceInfo_Usage (s->devinfo, s->path) && stat (s->path, &stat_buf) == 0) {
            if (s->uid && s->uid->has_error)
                return FALSE;
            else if (s->gid && s->gid->has_error)
                return FALSE;
            else
                return TRUE;
        }
        else {
            return FALSE;
        }
        break;
    case TYPE_FILE :
        if ((stat (s->path, &stat_buf) == 0) && S_ISREG (stat_buf.st_mode)) {
            if (s->perm && s->perm->has_error)
                return FALSE;
            else if (s->uid && s->uid->has_error)
                return FALSE;
            else if (s->gid && s->gid->has_error)
                return FALSE;
            else
                return TRUE;
        }
        else {
            return FALSE;
        }
        break;
    case TYPE_DIRECTORY :
        if ((stat (s->path, &stat_buf) == 0) && S_ISDIR (stat_buf.st_mode)) {
            if (s->perm && s->perm->has_error)
                return FALSE;
            else if (s->uid && s->uid->has_error)
                return FALSE;
            else if (s->gid && s->gid->has_error)
                return FALSE;
            else
                return TRUE;
        }
        else {
            return FALSE;
        }
        break;
    case TYPE_REMOTE :
        if (s->portlist) {
            Port_T port;
            int available = TRUE;
            for (port = s->portlist; port; port = port->next) {
                if (!port->is_available) {
                    available = FALSE;
                    break;
                }
            }
            return available;
        }
        else {
            return FALSE;
        }
        break;
    default :
        break;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2225" endline="2301">
{
case TYPE_PROCESS :
    return (is_process_running (s) > 0);
    break;
case TYPE_DEVICE :
    if (DeviceInfo_Usage (s->devinfo, s->path) && stat (s->path, &stat_buf) == 0) {
        if (s->uid && s->uid->has_error)
            return FALSE;
        else if (s->gid && s->gid->has_error)
            return FALSE;
        else
            return TRUE;
    }
    else {
        return FALSE;
    }
    break;
case TYPE_FILE :
    if ((stat (s->path, &stat_buf) == 0) && S_ISREG (stat_buf.st_mode)) {
        if (s->perm && s->perm->has_error)
            return FALSE;
        else if (s->uid && s->uid->has_error)
            return FALSE;
        else if (s->gid && s->gid->has_error)
            return FALSE;
        else
            return TRUE;
    }
    else {
        return FALSE;
    }
    break;
case TYPE_DIRECTORY :
    if ((stat (s->path, &stat_buf) == 0) && S_ISDIR (stat_buf.st_mode)) {
        if (s->perm && s->perm->has_error)
            return FALSE;
        else if (s->uid && s->uid->has_error)
            return FALSE;
        else if (s->gid && s->gid->has_error)
            return FALSE;
        else
            return TRUE;
    }
    else {
        return FALSE;
    }
    break;
case TYPE_REMOTE :
    if (s->portlist) {
        Port_T port;
        int available = TRUE;
        for (port = s->portlist; port; port = port->next) {
            if (!port->is_available) {
                available = FALSE;
                break;
            }
        }
        return available;
    }
    else {
        return FALSE;
    }
    break;
default :
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2232" endline="2239">
{
    if (s->uid && s->uid->has_error)
        return FALSE;
    else if (s->gid && s->gid->has_error)
        return FALSE;
    else
        return TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2241" endline="2243">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2247" endline="2256">
{
    if (s->perm && s->perm->has_error)
        return FALSE;
    else if (s->uid && s->uid->has_error)
        return FALSE;
    else if (s->gid && s->gid->has_error)
        return FALSE;
    else
        return TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2258" endline="2260">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2264" endline="2273">
{
    if (s->perm && s->perm->has_error)
        return FALSE;
    else if (s->uid && s->uid->has_error)
        return FALSE;
    else if (s->gid && s->gid->has_error)
        return FALSE;
    else
        return TRUE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2275" endline="2277">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2281" endline="2293">
{
    Port_T port;
    int available = TRUE;
    for (port = s->portlist; port; port = port->next) {
        if (!port->is_available) {
            available = FALSE;
            break;
        }
    }
    return available;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2285" endline="2291">
{
    if (!port->is_available) {
        available = FALSE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2287" endline="2290">
{
    available = FALSE;
    break;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2295" endline="2297">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="143" endline="214">
{
    Socket_T S;
    stopped = Run.stopped;
    if ((myServerSocket = create_server_socket (port, backlog, bindAddr)) < 0) {
        log ("http server: Could not create a server socket at port %d -- %s\n", port, STRERROR);
        log ("monit HTTP server not available\n");
        if (Run.init) {
            sleep (1);
            kill_daemon (SIGTERM);
        }
    }
    else {
        initialize_service ();
        if (Run.httpdssl) {
            mySSLServerConnection = init_ssl_server (Run.httpsslpem, Run.httpsslclientpem);
            if (mySSLServerConnection == NULL) {
                log ("http server: Could not initilize SSL engine\n");
                log ("monit HTTP server not available\n");
                return;
            }
        }
        while (!stopped) {
            if (!(S = socket_producer (myServerSocket, port, mySSLServerConnection))) {
                continue;
            }
            http_processor (S);
        }
        if (S) {
            socket_free (& S);
        }
        delete_ssl_server_socket (mySSLServerConnection);
        close_socket (myServerSocket);
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="150" endline="165">
{
    log ("http server: Could not create a server socket at port %d -- %s\n", port, STRERROR);
    log ("monit HTTP server not available\n");
    if (Run.init) {
        sleep (1);
        kill_daemon (SIGTERM);
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="158" endline="163">
{
    sleep (1);
    kill_daemon (SIGTERM);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="167" endline="212">
{
    initialize_service ();
    if (Run.httpdssl) {
        mySSLServerConnection = init_ssl_server (Run.httpsslpem, Run.httpsslclientpem);
        if (mySSLServerConnection == NULL) {
            log ("http server: Could not initilize SSL engine\n");
            log ("monit HTTP server not available\n");
            return;
        }
    }
    while (!stopped) {
        if (!(S = socket_producer (myServerSocket, port, mySSLServerConnection))) {
            continue;
        }
        http_processor (S);
    }
    if (S) {
        socket_free (& S);
    }
    delete_ssl_server_socket (mySSLServerConnection);
    close_socket (myServerSocket);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="172" endline="190">
{
    mySSLServerConnection = init_ssl_server (Run.httpsslpem, Run.httpsslclientpem);
    if (mySSLServerConnection == NULL) {
        log ("http server: Could not initilize SSL engine\n");
        log ("monit HTTP server not available\n");
        return;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="178" endline="185">
{
    log ("http server: Could not initilize SSL engine\n");
    log ("monit HTTP server not available\n");
    return;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="193" endline="202">
{
    if (!(S = socket_producer (myServerSocket, port, mySSLServerConnection))) {
        continue;
    }
    http_processor (S);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="196" endline="198">
{
    continue;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="205" endline="207">
{
    socket_free (& S);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="221" endline="225">
{
    stopped = TRUE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="238" endline="299">
{
    struct hostent *hp;
    if (!(hp = gethostbyname (name))) {
        return FALSE;
    }
    else {
        HostsAllow h;
        NEW (h);
        while (*hp->h_addr_list) {
            h->name = xstrdup (inet_ntoa (*(structin_addr*) *hp->h_addr_list++));
            LOCK (hostlist_mutex)
            if (hostlist) {
                HostsAllow p, n;
                for (n = p = hostlist; p; n = p, p = p->next) {
                    if (!strcasecmp (p->name, name)) {
                        destroy_host_allow (h);
                        goto done;
                    }
                }
                n->next = h;
            }
            else {
                hostlist = h;
            }
        done :
            END_LOCK;
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="243" endline="247">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="249" endline="295">
{
    HostsAllow h;
    NEW (h);
    while (*hp->h_addr_list) {
        h->name = xstrdup (inet_ntoa (*(structin_addr*) *hp->h_addr_list++));
        LOCK (hostlist_mutex)
        if (hostlist) {
            HostsAllow p, n;
            for (n = p = hostlist; p; n = p, p = p->next) {
                if (!strcasecmp (p->name, name)) {
                    destroy_host_allow (h);
                    goto done;
                }
            }
            n->next = h;
        }
        else {
            hostlist = h;
        }
    done :
        END_LOCK;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="256" endline="293">
{
    h->name = xstrdup (inet_ntoa (*(structin_addr*) *hp->h_addr_list++));
    LOCK (hostlist_mutex)
    if (hostlist) {
        HostsAllow p, n;
        for (n = p = hostlist; p; n = p, p = p->next) {
            if (!strcasecmp (p->name, name)) {
                destroy_host_allow (h);
                goto done;
            }
        }
        n->next = h;
    }
    else {
        hostlist = h;
    }
done :
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="263" endline="282">
{
    HostsAllow p, n;
    for (n = p = hostlist; p; n = p, p = p->next) {
        if (!strcasecmp (p->name, name)) {
            destroy_host_allow (h);
            goto done;
        }
    }
    n->next = h;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="268" endline="278">
{
    if (!strcasecmp (p->name, name)) {
        destroy_host_allow (h);
        goto done;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="271" endline="276">
{
    destroy_host_allow (h);
    goto done;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="284" endline="288">
{
    hostlist = h;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="307" endline="317">
{
    int rv;
    LOCK (hostlist_mutex)
    rv = (hostlist != NULL);
    END_LOCK;
    return rv;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="324" endline="336">
{
    if (has_hosts_allow ()) {
        LOCK (hostlist_mutex) destroy_host_allow (hostlist);
        hostlist = NULL;
        END_LOCK;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="327" endline="334">
{
    LOCK (hostlist_mutex) destroy_host_allow (hostlist);
    hostlist = NULL;
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="349" endline="354">
{
    init_service ();
    check_Impl ();
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="361" endline="371">
{
    if ((Impl.doGet == 0) || (Impl.doPost == 0)) {
        log ("http server: Service Methods not implemented\n");
        _exit (1);
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="364" endline="369">
{
    log ("http server: Service Methods not implemented\n");
    _exit (1);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="380" endline="400">
{
    if (is_host_allow (host)) {
        return TRUE;
    }
    if (!has_hosts_allow () && (Run.credentials != NULL)) {
        return TRUE;
    }
    log ("%s: Denied connection from non-authorized client [%s]\n", prog, host);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="383" endline="387">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="390" endline="394">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="408" endline="432">
{
    HostsAllow p;
    int rv = FALSE;
    LOCK (hostlist_mutex)
    for (p = hostlist; p; p = p->next) {
        if (!strncasecmp (p->name, name, STRLEN)) {
            rv = TRUE;
            break;
        }
    }
    END_LOCK;
    return rv;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="416" endline="426">
{
    if (!strncasecmp (p->name, name, STRLEN)) {
        rv = TRUE;
        break;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="419" endline="424">
{
    rv = TRUE;
    break;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="443" endline="501">
{
    int client;
    struct sockaddr_in in;
    int len = sizeof (struct sockaddr_in);
    if (can_read (server, 1)) {
        if ((client = accept (server, (struct sockaddr *) &in, &len)) < 0) {
            if (stopped) {
                log ("http server: service stopped\n");
            }
            else {
                log ("http server: cannot accept connection -- %s\n", STRERROR);
            }
            return NULL;
        }
    }
    else {
        return NULL;
    }
    if (set_noblock (client) < 0) {
        goto error;
    }
    if (!check_socket (client)) {
        goto error;
    }
    if (!authenticate (inet_ntoa (in.sin_addr))) {
        goto error;
    }
    return socket_create_a (client, inet_ntoa (in.sin_addr), port, sslserver);
error :
    close_socket (client);
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="450" endline="468">
{
    if ((client = accept (server, (struct sockaddr *) &in, &len)) < 0) {
        if (stopped) {
            log ("http server: service stopped\n");
        }
        else {
            log ("http server: cannot accept connection -- %s\n", STRERROR);
        }
        return NULL;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="453" endline="466">
{
    if (stopped) {
        log ("http server: service stopped\n");
    }
    else {
        log ("http server: cannot accept connection -- %s\n", STRERROR);
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="456" endline="458">
{
    log ("http server: service stopped\n");
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="460" endline="462">
{
    log ("http server: cannot accept connection -- %s\n", STRERROR);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="470" endline="477">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="480" endline="482">
{
    goto error;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="485" endline="487">
{
    goto error;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="490" endline="492">
{
    goto error;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="511" endline="523">
{
    HostsAllow a = p;
    if (a->next) {
        destroy_host_allow (a -> next);
    }
    FREE (a -> name);
    FREE (a);
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="516" endline="518">
{
    destroy_host_allow (a -> next);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="142" endline="159">
{
    Socket_T S = s;
    if (!can_read (socket_get_socket (S), REQUEST_TIMEOUT)) {
        internal_error (S, SC_REQUEST_TIMEOUT, "Time out when handling the Request");
        goto shutdown;
    }
    do_service (S);
shutdown :
    socket_free (&S);
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="147" endline="150">
{
    internal_error (S, SC_REQUEST_TIMEOUT, "Time out when handling the Request");
    goto shutdown;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="168" endline="173">
{
    Impl.doGet = doGetFunc;
    Impl.doPost = doPostFunc;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="183" endline="198">
{
    char server [STRLEN];
    const char *err = get_status_string (code);
    reset_response (res);
    set_content_type (res, "text/html");
    set_status (res, code);
    out_print (res, "<html><head><title>%d %s</title></head>" \ "<body bgcolor=#FFFFFF><h2>%s</h2>%s<p>" \ "<hr><a href='%s'><font size=-1>%s</font></a>" \ "</body></html>\r\n", code, err, err, msg ? msg : "", SERVER_URL, get_server (server, STRLEN));
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="208" endline="214">
{
    reset_response (res);
    set_status (res, SC_MOVED_TEMPORARILY);
    set_header (res, "Location", location);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="232" endline="272">
{
    if (m) {
        char *buf;
        va_list ap;
        long need = 0;
        ssize_t have = 0;
        va_start (ap, m);
        buf = format (m, ap, &need);
        va_end (ap);
        have = res->bufsize - res->bufused;
        if (have <= need) {
            res->outputbuffer = xresize (res->outputbuffer, (res->bufsize + need + RES_STRLEN));
            res->bufsize += (need + RES_STRLEN);
            if (!res->bufused) {
                memset (res -> outputbuffer, 0, res -> bufsize);
            }
        }
        memcpy (& res -> outputbuffer [res -> bufused], buf, need);
        res->bufused += need;
        res->outputbuffer[res->bufused] = 0;
        FREE (buf);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="235" endline="270">
{
    char *buf;
    va_list ap;
    long need = 0;
    ssize_t have = 0;
    va_start (ap, m);
    buf = format (m, ap, &need);
    va_end (ap);
    have = res->bufsize - res->bufused;
    if (have <= need) {
        res->outputbuffer = xresize (res->outputbuffer, (res->bufsize + need + RES_STRLEN));
        res->bufsize += (need + RES_STRLEN);
        if (!res->bufused) {
            memset (res -> outputbuffer, 0, res -> bufsize);
        }
    }
    memcpy (& res -> outputbuffer [res -> bufused], buf, need);
    res->bufused += need;
    res->outputbuffer[res->bufused] = 0;
    FREE (buf);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="249" endline="263">
{
    res->outputbuffer = xresize (res->outputbuffer, (res->bufsize + need + RES_STRLEN));
    res->bufsize += (need + RES_STRLEN);
    if (!res->bufused) {
        memset (res -> outputbuffer, 0, res -> bufsize);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="257" endline="261">
{
    memset (res -> outputbuffer, 0, res -> bufsize);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="286" endline="321">
{
    HttpHeader h;
    ASSERT (res);
    ASSERT (name);
    NEW (h);
    h->name = xstrdup (name);
    h->value = xstrdup (value);
    if (res->headers) {
        HttpHeader n, p;
        for (n = p = res->headers; p; n = p, p = p->next) {
            if (!strcasecmp (p->name, name)) {
                FREE (p -> value);
                p->value = xstrdup (value);
                destroy_entry (h);
                return;
            }
        }
        n->next = h;
    }
    else {
        res->headers = h;
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="298" endline="313">
{
    HttpHeader n, p;
    for (n = p = res->headers; p; n = p, p = p->next) {
        if (!strcasecmp (p->name, name)) {
            FREE (p -> value);
            p->value = xstrdup (value);
            destroy_entry (h);
            return;
        }
    }
    n->next = h;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="301" endline="309">
{
    if (!strcasecmp (p->name, name)) {
        FREE (p -> value);
        p->value = xstrdup (value);
        destroy_entry (h);
        return;
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="303" endline="308">
{
    FREE (p -> value);
    p->value = xstrdup (value);
    destroy_entry (h);
    return;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="315" endline="319">
{
    res->headers = h;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="331" endline="336">
{
    res->status = code;
    res->status_msg = get_status_string (code);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="345" endline="349">
{
    set_header (res, "Content-Type", mime);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="359" endline="377">
{
    HttpHeader p;
    for (p = req->headers; p; p = p->next) {
        if (!strcasecmp (p->name, name)) {
            return (p->value);
        }
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="364" endline="373">
{
    if (!strcasecmp (p->name, name)) {
        return (p->value);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="367" endline="371">
{
    return (p->value);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="387" endline="405">
{
    HttpParameter p;
    for (p = req->params; p; p = p->next) {
        if (!strcasecmp (p->name, name)) {
            return (p->value);
        }
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="392" endline="401">
{
    if (!strcasecmp (p->name, name)) {
        return (p->value);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="395" endline="399">
{
    return (p->value);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="416" endline="433">
{
    HttpHeader p;
    char buf [RES_STRLEN];
    char *b = buf;
    *buf = 0;
    for (p = res->headers; (((b - buf) + STRLEN) < RES_STRLEN) && p; p = p->next) {
        b += snprintf (b, STRLEN, "%s: %s\r\n", p->name, p->value);
    }
    return buf[0] ? xstrdup (buf) : NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="425" endline="429">
{
    b += snprintf (b, STRLEN, "%s: %s\r\n", p->name, p->value);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="444" endline="532">
{
    switch (status) {
    case SC_OK :
        return "OK";
    case SC_ACCEPTED :
        return "Accepted";
    case SC_BAD_GATEWAY :
        return "Bad Gateway";
    case SC_BAD_REQUEST :
        return "Bad Request";
    case SC_CONFLICT :
        return "Conflict";
    case SC_CONTINUE :
        return "Continue";
    case SC_CREATED :
        return "Created";
    case SC_EXPECTATION_FAILED :
        return "Expectation Failed";
    case SC_FORBIDDEN :
        return "Forbidden";
    case SC_GATEWAY_TIMEOUT :
        return "Gateway Timeout";
    case SC_GONE :
        return "Gone";
    case SC_VERSION_NOT_SUPPORTED :
        return "HTTP Version Not Supported";
    case SC_INTERNAL_SERVER_ERROR :
        return "Internal Server Error";
    case SC_LENGTH_REQUIRED :
        return "Length Required";
    case SC_METHOD_NOT_ALLOWED :
        return "Method Not Allowed";
    case SC_MOVED_PERMANENTLY :
        return "Moved Permanently";
    case SC_MOVED_TEMPORARILY :
        return "Moved Temporarily";
    case SC_MULTIPLE_CHOICES :
        return "Multiple Choices";
    case SC_NO_CONTENT :
        return "No Content";
    case SC_NON_AUTHORITATIVE :
        return "Non-Authoritative Information";
    case SC_NOT_ACCEPTABLE :
        return "Not Acceptable";
    case SC_NOT_FOUND :
        return "Not Found";
    case SC_NOT_IMPLEMENTED :
        return "Not Implemented";
    case SC_NOT_MODIFIED :
        return "Not Modified";
    case SC_PARTIAL_CONTENT :
        return "Partial Content";
    case SC_PAYMENT_REQUIRED :
        return "Payment Required";
    case SC_PRECONDITION_FAILED :
        return "Precondition Failed";
    case SC_PROXY_AUTHENTICATION_REQUIRED :
        return "Proxy Authentication Required";
    case SC_REQUEST_ENTITY_TOO_LARGE :
        return "Request Entity Too Large";
    case SC_REQUEST_TIMEOUT :
        return "Request Timeout";
    case SC_REQUEST_URI_TOO_LARGE :
        return "Request URI Too Large";
    case SC_RANGE_NOT_SATISFIABLE :
        return "Requested Range Not Satisfiable";
    case SC_RESET_CONTENT :
        return "Reset Content";
    case SC_SEE_OTHER :
        return "See Other";
    case SC_SERVICE_UNAVAILABLE :
        return "Service Unavailable";
    case SC_SWITCHING_PROTOCOLS :
        return "Switching Protocols";
    case SC_UNAUTHORIZED :
        return "Unauthorized";
    case SC_UNSUPPORTED_MEDIA_TYPE :
        return "Unsupported Media Type";
    case SC_USE_PROXY :
        return "Use Proxy";
    default :
        {
            return "Unknown HTTP status";
        }
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="447" endline="530">
{
case SC_OK :
    return "OK";
case SC_ACCEPTED :
    return "Accepted";
case SC_BAD_GATEWAY :
    return "Bad Gateway";
case SC_BAD_REQUEST :
    return "Bad Request";
case SC_CONFLICT :
    return "Conflict";
case SC_CONTINUE :
    return "Continue";
case SC_CREATED :
    return "Created";
case SC_EXPECTATION_FAILED :
    return "Expectation Failed";
case SC_FORBIDDEN :
    return "Forbidden";
case SC_GATEWAY_TIMEOUT :
    return "Gateway Timeout";
case SC_GONE :
    return "Gone";
case SC_VERSION_NOT_SUPPORTED :
    return "HTTP Version Not Supported";
case SC_INTERNAL_SERVER_ERROR :
    return "Internal Server Error";
case SC_LENGTH_REQUIRED :
    return "Length Required";
case SC_METHOD_NOT_ALLOWED :
    return "Method Not Allowed";
case SC_MOVED_PERMANENTLY :
    return "Moved Permanently";
case SC_MOVED_TEMPORARILY :
    return "Moved Temporarily";
case SC_MULTIPLE_CHOICES :
    return "Multiple Choices";
case SC_NO_CONTENT :
    return "No Content";
case SC_NON_AUTHORITATIVE :
    return "Non-Authoritative Information";
case SC_NOT_ACCEPTABLE :
    return "Not Acceptable";
case SC_NOT_FOUND :
    return "Not Found";
case SC_NOT_IMPLEMENTED :
    return "Not Implemented";
case SC_NOT_MODIFIED :
    return "Not Modified";
case SC_PARTIAL_CONTENT :
    return "Partial Content";
case SC_PAYMENT_REQUIRED :
    return "Payment Required";
case SC_PRECONDITION_FAILED :
    return "Precondition Failed";
case SC_PROXY_AUTHENTICATION_REQUIRED :
    return "Proxy Authentication Required";
case SC_REQUEST_ENTITY_TOO_LARGE :
    return "Request Entity Too Large";
case SC_REQUEST_TIMEOUT :
    return "Request Timeout";
case SC_REQUEST_URI_TOO_LARGE :
    return "Request URI Too Large";
case SC_RANGE_NOT_SATISFIABLE :
    return "Requested Range Not Satisfiable";
case SC_RESET_CONTENT :
    return "Reset Content";
case SC_SEE_OTHER :
    return "See Other";
case SC_SERVICE_UNAVAILABLE :
    return "Service Unavailable";
case SC_SWITCHING_PROTOCOLS :
    return "Switching Protocols";
case SC_UNAUTHORIZED :
    return "Unauthorized";
case SC_UNSUPPORTED_MEDIA_TYPE :
    return "Unsupported Media Type";
case SC_USE_PROXY :
    return "Use Proxy";
default :
    {
        return "Unknown HTTP status";
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="527" endline="529">
{
    return "Unknown HTTP status";
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="543" endline="576">
{
    volatile HttpResponse res = create_HttpResponse (s);
    volatile HttpRequest req = create_HttpRequest (s);
    if (res && req) {
        if (is_authenticated (req, res)) {
            if (IS (req->method, METHOD_GET)) {
                Impl.doGet (req, res);
            }
            else if (IS (req->method, METHOD_POST)) {
                Impl.doPost (req, res);
            }
            else {
                send_error (res, SC_NOT_IMPLEMENTED, "Method not implemented");
            }
        }
        send_response (res);
    }
    done (req, res);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="548" endline="573">
{
    if (is_authenticated (req, res)) {
        if (IS (req->method, METHOD_GET)) {
            Impl.doGet (req, res);
        }
        else if (IS (req->method, METHOD_POST)) {
            Impl.doPost (req, res);
        }
        else {
            send_error (res, SC_NOT_IMPLEMENTED, "Method not implemented");
        }
    }
    send_response (res);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="550" endline="569">
{
    if (IS (req->method, METHOD_GET)) {
        Impl.doGet (req, res);
    }
    else if (IS (req->method, METHOD_POST)) {
        Impl.doPost (req, res);
    }
    else {
        send_error (res, SC_NOT_IMPLEMENTED, "Method not implemented");
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="552" endline="556">
{
    Impl.doGet (req, res);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="558" endline="562">
{
    Impl.doPost (req, res);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="564" endline="568">
{
    send_error (res, SC_NOT_IMPLEMENTED, "Method not implemented");
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="583" endline="598">
{
    time_t now;
    time (& now);
    if (strftime (result, size, DATEFMT, gmtime (&now)) <= 0) {
        *result = 0;
    }
    return result;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="590" endline="594">
{
    *result = 0;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="605" endline="611">
{
    snprintf (result, size, "%s %s", SERVER_NAME, Run.httpdsig ? SERVER_VERSION : "");
    return result;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="619" endline="650">
{
    Socket_T S = res->S;
    if (!res->is_committed) {
        char date [STRLEN];
        char server [STRLEN];
        char *headers = get_headers (res);
        get_date (date, STRLEN);
        get_server (server, STRLEN);
        socket_print (S, "%s %d %s\r\n", res -> protocol, res -> status, res -> status_msg);
        socket_print (S, "Date: %s\r\n", date);
        socket_print (S, "Server: %s\r\n", server);
        socket_print (S, "Content-Length: %d\r\n", res -> bufused);
        socket_print (S, "Connection: close\r\n");
        if (headers)
            socket_print (S, "%s", headers);
        socket_print (S, "\r\n");
        if (res->bufused)
            socket_write (S, res->outputbuffer, res->bufused);
        FREE (headers);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="624" endline="648">
{
    char date [STRLEN];
    char server [STRLEN];
    char *headers = get_headers (res);
    get_date (date, STRLEN);
    get_server (server, STRLEN);
    socket_print (S, "%s %d %s\r\n", res -> protocol, res -> status, res -> status_msg);
    socket_print (S, "Date: %s\r\n", date);
    socket_print (S, "Server: %s\r\n", server);
    socket_print (S, "Content-Length: %d\r\n", res -> bufused);
    socket_print (S, "Connection: close\r\n");
    if (headers)
        socket_print (S, "%s", headers);
    socket_print (S, "\r\n");
    if (res->bufused)
        socket_write (S, res->outputbuffer, res->bufused);
    FREE (headers);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="660" endline="711">
{
    HttpRequest req;
    char url [REQ_STRLEN];
    char line [REQ_STRLEN];
    char protocol [STRLEN];
    char method [REQ_STRLEN];
    if (socket_readln (S, line, REQ_STRLEN) == NULL) {
        internal_error (S, SC_BAD_REQUEST, "No request found");
        return NULL;
    }
    chomp (line, REQ_STRLEN);
    if (sscanf (line, "%s %s HTTP/%3[1.0]", method, url, protocol) != 3) {
        internal_error (S, SC_BAD_REQUEST, "Cannot parse request");
        return NULL;
    }
    if (strlen (url) >= MAX_URL_LENGTH) {
        internal_error (S, SC_BAD_REQUEST, "[error] URL too long");
        return NULL;
    }
    NEW (req);
    req->S = S;
    url_decode (url);
    req->url = xstrdup (url);
    req->method = xstrdup (method);
    req->protocol = xstrdup (protocol);
    create_headers (req);
    if (!create_parameters (req)) {
        internal_error (S, SC_BAD_REQUEST, "Cannot parse Request parameters");
        destroy_HttpRequest (req);
        return NULL;
    }
    return req;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="670" endline="673">
{
    internal_error (S, SC_BAD_REQUEST, "No request found");
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="679" endline="682">
{
    internal_error (S, SC_BAD_REQUEST, "Cannot parse request");
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="685" endline="688">
{
    internal_error (S, SC_BAD_REQUEST, "[error] URL too long");
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="700" endline="707">
{
    internal_error (S, SC_BAD_REQUEST, "Cannot parse Request parameters");
    destroy_HttpRequest (req);
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="719" endline="735">
{
    HttpResponse res;
    NEW (res);
    res->S = S;
    res->bufsize = 0;
    res->bufused = 0;
    res->status = 200;
    res->outputbuffer = NULL;
    res->is_committed = FALSE;
    res->protocol = SERVER_PROTOCOL;
    res->status_msg = get_status_string (SC_OK);
    return res;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="742" endline="792">
{
    Socket_T S;
    char *value;
    HttpHeader p;
    HttpHeader header;
    char line [REQ_STRLEN];
    S = req->S;
    while (1) {
        if (!socket_readln (S, line, sizeof (line)))
            break;
        if (IS (line, "\r\n") || IS (line, "\n"))
            break;
        if (NULL != (value = strchr (line, ':'))) {
            NEW (header);
            *value++ = '\0';
            trim (line);
            trim (value);
            chomp (value, (REQ_STRLEN - (value - line)));
            header->name = xstrdup (line);
            header->value = xstrdup (value);
            if (req->headers) {
                for (p = req->headers; p->next; p = p->next)
                    ;
                p->next = header;
            }
            else {
                req->headers = header;
            }
        }
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="753" endline="790">
{
    if (!socket_readln (S, line, sizeof (line)))
        break;
    if (IS (line, "\r\n") || IS (line, "\n"))
        break;
    if (NULL != (value = strchr (line, ':'))) {
        NEW (header);
        *value++ = '\0';
        trim (line);
        trim (value);
        chomp (value, (REQ_STRLEN - (value - line)));
        header->name = xstrdup (line);
        header->value = xstrdup (value);
        if (req->headers) {
            for (p = req->headers; p->next; p = p->next)
                ;
            p->next = header;
        }
        else {
            req->headers = header;
        }
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="762" endline="788">
{
    NEW (header);
    *value++ = '\0';
    trim (line);
    trim (value);
    chomp (value, (REQ_STRLEN - (value - line)));
    header->name = xstrdup (line);
    header->value = xstrdup (value);
    if (req->headers) {
        for (p = req->headers; p->next; p = p->next)
            ;
        p->next = header;
    }
    else {
        req->headers = header;
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="774" endline="780">
{
    for (p = req->headers; p->next; p = p->next)
        ;
    p->next = header;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="782" endline="786">
{
    req->headers = header;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="800" endline="845">
{
    char query_string [REQ_STRLEN] = {0};
    if (IS (req->method, METHOD_POST) && get_header (req, "Content-Length")) {
        int n;
        int len;
        Socket_T S = req->S;
        if (1 != sscanf (get_header (req, "Content-Length"), "%d", &len)) {
            return FALSE;
        }
        if (len < 0 || len > REQ_STRLEN)
            return FALSE;
        if (len == 0)
            return TRUE;
        if (((n = socket_read (S, query_string, len)) <= 0) || (n != len)) {
            return FALSE;
        }
        query_string[n] = 0;
    }
    else if (IS (req->method, METHOD_GET)) {
        char *p;
        if (NULL != (p = strchr (req->url, '?'))) {
            *p++ = 0;
            strncpy (query_string, p, REQ_STRLEN);
        }
    }
    if (*query_string) {
        char *p;
        if (NULL != (p = strchr (query_string, '/'))) {
            *p++ = 0;
            req->pathinfo = xstrdup (p);
        }
        req->params = parse_parameters (query_string);
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="805" endline="822">
{
    int n;
    int len;
    Socket_T S = req->S;
    if (1 != sscanf (get_header (req, "Content-Length"), "%d", &len)) {
        return FALSE;
    }
    if (len < 0 || len > REQ_STRLEN)
        return FALSE;
    if (len == 0)
        return TRUE;
    if (((n = socket_read (S, query_string, len)) <= 0) || (n != len)) {
        return FALSE;
    }
    query_string[n] = 0;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="810" endline="812">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="818" endline="820">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="824" endline="831">
{
    char *p;
    if (NULL != (p = strchr (req->url, '?'))) {
        *p++ = 0;
        strncpy (query_string, p, REQ_STRLEN);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="827" endline="830">
{
    *p++ = 0;
    strncpy (query_string, p, REQ_STRLEN);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="833" endline="841">
{
    char *p;
    if (NULL != (p = strchr (query_string, '/'))) {
        *p++ = 0;
        req->pathinfo = xstrdup (p);
    }
    req->params = parse_parameters (query_string);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="836" endline="839">
{
    *p++ = 0;
    req->pathinfo = xstrdup (p);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="855" endline="862">
{
    if (res->headers)
        destroy_entry (res->headers);
    memset (res -> outputbuffer, 0, res -> bufsize);
    res->bufused = 0;
    res->headers = NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="869" endline="874">
{
    destroy_HttpRequest (req);
    destroy_HttpResponse (res);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="881" endline="897">
{
    if (req) {
        FREE (req -> method);
        FREE (req -> url);
        FREE (req -> pathinfo);
        FREE (req -> protocol);
        FREE (req -> remote_user);
        if (req->headers)
            destroy_entry (req->headers);
        if (req->params)
            destroy_entry (req->params);
        FREE (req);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="884" endline="895">
{
    FREE (req -> method);
    FREE (req -> url);
    FREE (req -> pathinfo);
    FREE (req -> protocol);
    FREE (req -> remote_user);
    if (req->headers)
        destroy_entry (req->headers);
    if (req->params)
        destroy_entry (req->params);
    FREE (req);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="904" endline="915">
{
    if (res) {
        FREE (res -> outputbuffer);
        if (res->headers)
            destroy_entry (res->headers);
        FREE (res);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="907" endline="913">
{
    FREE (res -> outputbuffer);
    if (res->headers)
        destroy_entry (res->headers);
    FREE (res);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="923" endline="938">
{
    struct entry *h = p;
    if (h->next) {
        destroy_entry (h -> next);
    }
    FREE (h -> name);
    FREE (h -> value);
    FREE (h);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="928" endline="932">
{
    destroy_entry (h -> next);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="948" endline="971">
{
    if (Run.credentials != NULL) {
        if (!basic_authenticate (req)) {
            send_error (res, SC_UNAUTHORIZED, "You are <b>not</b> authorized to access <i>monit</i>. " "Either you supplied the wrong credentials (e.g. bad " "password), or your browser doesn't understand how to supply " "the credentials required");
            set_header (res, "WWW-Authenticate", "Basic realm=\"monit\"");
            return FALSE;
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="951" endline="967">
{
    if (!basic_authenticate (req)) {
        send_error (res, SC_UNAUTHORIZED, "You are <b>not</b> authorized to access <i>monit</i>. " "Either you supplied the wrong credentials (e.g. bad " "password), or your browser doesn't understand how to supply " "the credentials required");
        set_header (res, "WWW-Authenticate", "Basic realm=\"monit\"");
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="954" endline="965">
{
    send_error (res, SC_UNAUTHORIZED, "You are <b>not</b> authorized to access <i>monit</i>. " "Either you supplied the wrong credentials (e.g. bad " "password), or your browser doesn't understand how to supply " "the credentials required");
    set_header (res, "WWW-Authenticate", "Basic realm=\"monit\"");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="979" endline="1042">
{
    int rv = FALSE;
    const char *credentials = get_header (req, "Authorization");
    if (credentials) {
        unsigned char *cr = xcalloc (sizeof (unsigned char), strlen (credentials) +1);
        if (decode_base64 (cr, strchr (credentials, ' '))) {
            char *passwd;
            char uname [STRLEN];
            long unamelen = (long) strchr (cr, ':') - (long) cr;
            strncpy (uname, cr, unamelen);
            uname[unamelen] = '\0';
            if (NULL == get_user_credentials (uname)) {
                log ("Warning: Client '%s' supplied unknown user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
            }
            else {
                passwd = strchr (cr, ':') + 1;
                if (compare_user_credentials (uname, passwd)) {
                    req->remote_user = xstrdup (uname);
                    rv = TRUE;
                }
                else {
                    log ("Warning: Client '%s' supplied wrong password for user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
                }
            }
        }
        FREE (cr);
    }
    return rv;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="985" endline="1038">
{
    unsigned char *cr = xcalloc (sizeof (unsigned char), strlen (credentials) +1);
    if (decode_base64 (cr, strchr (credentials, ' '))) {
        char *passwd;
        char uname [STRLEN];
        long unamelen = (long) strchr (cr, ':') - (long) cr;
        strncpy (uname, cr, unamelen);
        uname[unamelen] = '\0';
        if (NULL == get_user_credentials (uname)) {
            log ("Warning: Client '%s' supplied unknown user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
        }
        else {
            passwd = strchr (cr, ':') + 1;
            if (compare_user_credentials (uname, passwd)) {
                req->remote_user = xstrdup (uname);
                rv = TRUE;
            }
            else {
                log ("Warning: Client '%s' supplied wrong password for user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
            }
        }
    }
    FREE (cr);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="990" endline="1034">
{
    char *passwd;
    char uname [STRLEN];
    long unamelen = (long) strchr (cr, ':') - (long) cr;
    strncpy (uname, cr, unamelen);
    uname[unamelen] = '\0';
    if (NULL == get_user_credentials (uname)) {
        log ("Warning: Client '%s' supplied unknown user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
    }
    else {
        passwd = strchr (cr, ':') + 1;
        if (compare_user_credentials (uname, passwd)) {
            req->remote_user = xstrdup (uname);
            rv = TRUE;
        }
        else {
            log ("Warning: Client '%s' supplied wrong password for user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
        }
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1003" endline="1009">
{
    log ("Warning: Client '%s' supplied unknown user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1011" endline="1032">
{
    passwd = strchr (cr, ':') + 1;
    if (compare_user_credentials (uname, passwd)) {
        req->remote_user = xstrdup (uname);
        rv = TRUE;
    }
    else {
        log ("Warning: Client '%s' supplied wrong password for user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1017" endline="1022">
{
    req->remote_user = xstrdup (uname);
    rv = TRUE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1024" endline="1030">
{
    log ("Warning: Client '%s' supplied wrong password for user '%s'" " accessing monit httpd\n", socket_get_remote_host (req -> S), uname);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1054" endline="1077">
{
    char date [STRLEN];
    char server [STRLEN];
    const char *status_msg = get_status_string (status);
    get_date (date, STRLEN);
    get_server (server, STRLEN);
    socket_print (S, "%s %d %s\r\n" "Date: %s\r\n" "Server: %s\r\n" "Content-Type: text/html\r\n" "Connection: close\r\n" "\r\n" "<html><head><title>%s</title></head>" "<body bgcolor=#FFFFFF><h2>%s</h2>%s<p>" "<hr><a href='%s'><font size=-1>%s</font></a>" "</body></html>\r\n", SERVER_PROTOCOL, status, status_msg, date, server, status_msg, status_msg, msg, SERVER_URL, server);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1085" endline="1122">
{
    int token;
    int cursor = 0;
    char *key = NULL;
    char *value = NULL;
    HttpParameter head = NULL;
    while ((token = get_next_token (query_string, &cursor, &value))) {
        if (token == KEY)
            key = value;
        else if (token == VALUE) {
            HttpParameter p;
            if (!key)
                goto error;
            NEW (p);
            p->name = key;
            p->value = value;
            p->next = head;
            head = p;
            key = NULL;
        }
    }
    return head;
error :
    FREE (key);
    FREE (value);
    destroy_entry (head);
    return NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1097" endline="1111">
{
    if (token == KEY)
        key = value;
    else if (token == VALUE) {
        HttpParameter p;
        if (!key)
            goto error;
        NEW (p);
        p->name = key;
        p->value = value;
        p->next = head;
        head = p;
        key = NULL;
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1101" endline="1110">
{
    HttpParameter p;
    if (!key)
        goto error;
    NEW (p);
    p->name = key;
    p->value = value;
    p->next = head;
    head = p;
    key = NULL;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1129" endline="1158">
{
    int i = *cursor;
    while (s[*cursor]) {
        if (s[*cursor + 1] == '=') {
            *cursor += 1;
            *r = xstrndup (&s[i], (*cursor - i));
            return KEY;
        }
        if (s[*cursor] == '=') {
            while (s[*cursor] && s[*cursor] != '&')
                *cursor += 1;
            if (s[*cursor] == '&') {
                *r = xstrndup (&s[i + 1], (*cursor - i) - 1);
                *cursor += 1;
            }
            else
                *r = xstrndup (&s[i + 1], (*cursor - i));
            return VALUE;
        }
        *cursor += 1;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1134" endline="1154">
{
    if (s[*cursor + 1] == '=') {
        *cursor += 1;
        *r = xstrndup (&s[i], (*cursor - i));
        return KEY;
    }
    if (s[*cursor] == '=') {
        while (s[*cursor] && s[*cursor] != '&')
            *cursor += 1;
        if (s[*cursor] == '&') {
            *r = xstrndup (&s[i + 1], (*cursor - i) - 1);
            *cursor += 1;
        }
        else
            *r = xstrndup (&s[i + 1], (*cursor - i));
        return VALUE;
    }
    *cursor += 1;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1136" endline="1140">
{
    *cursor += 1;
    *r = xstrndup (&s[i], (*cursor - i));
    return KEY;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1142" endline="1152">
{
    while (s[*cursor] && s[*cursor] != '&')
        *cursor += 1;
    if (s[*cursor] == '&') {
        *r = xstrndup (&s[i + 1], (*cursor - i) - 1);
        *cursor += 1;
    }
    else
        *r = xstrndup (&s[i + 1], (*cursor - i));
    return VALUE;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1145" endline="1148">
{
    *r = xstrndup (&s[i + 1], (*cursor - i) - 1);
    *cursor += 1;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="84" endline="89">
{
    return check_connect (Run.bind_addr ? Run.bind_addr : "localhost", Run.httpdport, SOCK_STREAM);
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="98" endline="119">
{
    if (Run.dohttpd && Run.isdaemon) {
        if (!has_hosts_allow () && !(Run.credentials != NULL)) {
            log ("%s: monit httpd not started since no connect allowed\n", prog);
            return FALSE;
        }
        return TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="101" endline="115">
{
    if (!has_hosts_allow () && !(Run.credentials != NULL)) {
        log ("%s: monit httpd not started since no connect allowed\n", prog);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="104" endline="111">
{
    log ("%s: monit httpd not started since no connect allowed\n", prog);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="127" endline="164">
{
    int status;
    switch (action) {
    case STOP_HTTP :
        log ("Shutting down %s HTTP server\n", prog);
        stop_httpd ();
        if ((status = pthread_join (thread, NULL)) != 0) {
            log ("%s: Failed to stop the http server. Thread error -- %s.\n", prog, strerror (status));
        }
        else {
            log ("%s HTTP server stopped\n", prog);
        }
        break;
    case START_HTTP :
        if ((status = pthread_create (&thread, NULL, thread_wrapper, NULL)) != 0) {
            log ("%s: Failed to create the http server. Thread error -- %s.\n", prog, strerror (status));
        }
        break;
    default :
        log ("%s: Unknown http server action\n", prog);
        break;
    }
    return;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="132" endline="160">
{
case STOP_HTTP :
    log ("Shutting down %s HTTP server\n", prog);
    stop_httpd ();
    if ((status = pthread_join (thread, NULL)) != 0) {
        log ("%s: Failed to stop the http server. Thread error -- %s.\n", prog, strerror (status));
    }
    else {
        log ("%s HTTP server stopped\n", prog);
    }
    break;
case START_HTTP :
    if ((status = pthread_create (&thread, NULL, thread_wrapper, NULL)) != 0) {
        log ("%s: Failed to create the http server. Thread error -- %s.\n", prog, strerror (status));
    }
    break;
default :
    log ("%s: Unknown http server action\n", prog);
    break;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="138" endline="141">
{
    log ("%s: Failed to stop the http server. Thread error -- %s.\n", prog, strerror (status));
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="143" endline="145">
{
    log ("%s HTTP server stopped\n", prog);
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="150" endline="153">
{
    log ("%s: Failed to create the http server. Thread error -- %s.\n", prog, strerror (status));
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="171" endline="182">
{
    sigset_t ns;
    set_signal_block (& ns, NULL);
    start_httpd (Run.httpdport, 10, Run.bind_addr);
    return NULL;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="112" endline="130">
{
    if (!Run.dolog) {
        return TRUE;
    }
    if (!open_log ()) {
        return FALSE;
    }
    atexit (log_close);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="115" endline="117">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="120" endline="122">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="138" endline="175">
{
    long len;
    va_list ap;
    char *msg = NULL;
    ASSERT (s);
    va_start (ap, s);
    msg = format (s, ap, &len);
    va_end (ap);
    if (!Run.dolog)
        goto nolog;
    if (Run.use_syslog) {
        LOCK (log_mutex) syslog (LOG_ERR, "%s", msg);
        END_LOCK;
    }
    else if (LOG) {
        LOCK (log_mutex) fprintf (LOG, "[%s] %s", timestr (), msg);
        END_LOCK;
    }
nolog :
    LOCK (log_mutex) fprintf (stderr, "%s", msg);
    fflush (stderr);
    END_LOCK;
    FREE (msg);
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="153" endline="158">
{
    LOCK (log_mutex) syslog (LOG_ERR, "%s", msg);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="160" endline="165">
{
    LOCK (log_mutex) fprintf (LOG, "[%s] %s", timestr (), msg);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="182" endline="197">
{
    if (Run.use_syslog) {
        closelog ();
    }
    if (LOG && (0 != fclose (LOG))) {
        log ("%s: Error closing the log file -- %s\n", prog, STRERROR);
    }
    pthread_mutex_destroy (& log_mutex);
    LOG = NULL;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="185" endline="187">
{
    closelog ();
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="190" endline="193">
{
    log ("%s: Error closing the log file -- %s\n", prog, STRERROR);
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="207" endline="228">
{
    if (Run.use_syslog) {
        openlog (prog, LOG_PID, Run.facility);
    }
    else {
        umask (LOGMASK);
        if ((LOG = fopen (Run.logfile, "a+")) == (FILE *) NULL) {
            log ("%s: Error opening the log file '%s' for writing -- %s\n", prog, Run.logfile, STRERROR);
            return (FALSE);
        }
        setvbuf (LOG, NULL, _IONBF, 0);
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="210" endline="212">
{
    openlog (prog, LOG_PID, Run.facility);
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="214" endline="224">
{
    umask (LOGMASK);
    if ((LOG = fopen (Run.logfile, "a+")) == (FILE *) NULL) {
        log ("%s: Error opening the log file '%s' for writing -- %s\n", prog, Run.logfile, STRERROR);
        return (FALSE);
    }
    setvbuf (LOG, NULL, _IONBF, 0);
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="217" endline="221">
{
    log ("%s: Error opening the log file '%s' for writing -- %s\n", prog, Run.logfile, STRERROR);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="236" endline="249">
{
    time_t now;
    struct tm tm;
    time (& now);
    if (!strftime (time_str, STRLEN, TIMEFORMAT, localtime_r (&now, &tm))) {
        memset (time_str, 0, STRLEN);
    }
    return time_str;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="243" endline="245">
{
    memset (time_str, 0, STRLEN);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="66" endline="74">
{
    ctx->A = 0x67452301;
    ctx->B = 0xefcdab89;
    ctx->C = 0x98badcfe;
    ctx->D = 0x10325476;
    ctx->total[0] = ctx->total[1] = 0;
    ctx->buflen = 0;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="85" endline="92">
{
    ((md5_uint32 *) resbuf)[0] = SWAP (ctx->A);
    ((md5_uint32 *) resbuf)[1] = SWAP (ctx->B);
    ((md5_uint32 *) resbuf)[2] = SWAP (ctx->C);
    ((md5_uint32 *) resbuf)[3] = SWAP (ctx->D);
    return resbuf;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="103" endline="125">
{
    md5_uint32 bytes = ctx->buflen;
    size_t pad;
    ctx->total[0] += bytes;
    if (ctx->total[0] < bytes)
        ++ctx->total[1];
    pad = bytes >= 56 ? 64 + 56 - bytes : 56 - bytes;
    memcpy (& ctx -> buffer [bytes], fillbuf, pad);
    *(md5_uint32*) &ctx->buffer[bytes + pad] = SWAP (ctx->total[0] << 3);
    *(md5_uint32*) &ctx->buffer[bytes + pad + 4] = SWAP ((ctx->total[1] << 3) | (ctx->total[0] >> 29));
    md5_process_block (ctx -> buffer, bytes + pad + 8, ctx);
    return md5_read_ctx (ctx, resbuf);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="134" endline="181">
{
    struct md5_ctx ctx;
    char buffer [BLOCKSIZE + 72];
    size_t sum;
    md5_init_ctx (& ctx);
    while (1) {
        size_t n;
        sum = 0;
        do {
            n = fread (buffer +sum, 1, BLOCKSIZE -sum, stream);
            sum += n;
        }
        while (sum < BLOCKSIZE && n != 0);
        if (n == 0 && ferror (stream))
            return 1;
        if (n == 0)
            break;
        md5_process_block (buffer, BLOCKSIZE, & ctx);
    }
    if (sum > 0)
        md5_process_bytes (buffer, sum, &ctx);
    md5_finish_ctx (& ctx, resblock);
    return 0;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="146" endline="172">
{
    size_t n;
    sum = 0;
    do {
        n = fread (buffer +sum, 1, BLOCKSIZE -sum, stream);
        sum += n;
    }
    while (sum < BLOCKSIZE && n != 0);
    if (n == 0 && ferror (stream))
        return 1;
    if (n == 0)
        break;
    md5_process_block (buffer, BLOCKSIZE, & ctx);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="155" endline="159">
{
    n = fread (buffer +sum, 1, BLOCKSIZE -sum, stream);
    sum += n;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="192" endline="203">
{
    struct md5_ctx ctx;
    md5_init_ctx (& ctx);
    md5_process_bytes (buffer, len, & ctx);
    return md5_finish_ctx (&ctx, resblock);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="211" endline="249">
{
    if (ctx->buflen != 0) {
        size_t left_over = ctx->buflen;
        size_t add = 128 - left_over > len ? len : 128 - left_over;
        memcpy (& ctx -> buffer [left_over], buffer, add);
        ctx->buflen += add;
        if (left_over + add > 64) {
            md5_process_block (ctx -> buffer, (left_over + add) & ~ 63, ctx);
            memcpy (ctx -> buffer, & ctx -> buffer [(left_over + add) & ~ 63], (left_over + add) & 63);
            ctx->buflen = (left_over + add) & 63;
        }
        buffer = (const char *) buffer + add;
        len -= add;
    }
    if (len > 64) {
        md5_process_block (buffer, len & ~ 63, ctx);
        buffer = (const char *) buffer + (len & ~63);
        len &= 63;
    }
    if (len > 0) {
        memcpy (ctx -> buffer, buffer, len);
        ctx->buflen = len;
    }
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="215" endline="233">
{
    size_t left_over = ctx->buflen;
    size_t add = 128 - left_over > len ? len : 128 - left_over;
    memcpy (& ctx -> buffer [left_over], buffer, add);
    ctx->buflen += add;
    if (left_over + add > 64) {
        md5_process_block (ctx -> buffer, (left_over + add) & ~ 63, ctx);
        memcpy (ctx -> buffer, & ctx -> buffer [(left_over + add) & ~ 63], (left_over + add) & 63);
        ctx->buflen = (left_over + add) & 63;
    }
    buffer = (const char *) buffer + add;
    len -= add;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="223" endline="229">
{
    md5_process_block (ctx -> buffer, (left_over + add) & ~ 63, ctx);
    memcpy (ctx -> buffer, & ctx -> buffer [(left_over + add) & ~ 63], (left_over + add) & 63);
    ctx->buflen = (left_over + add) & 63;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="237" endline="241">
{
    md5_process_block (buffer, len & ~ 63, ctx);
    buffer = (const char *) buffer + (len & ~63);
    len &= 63;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="245" endline="248">
{
    memcpy (ctx -> buffer, buffer, len);
    ctx->buflen = len;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="269" endline="420">
{
    md5_uint32 correct_words [16];
    const md5_uint32 *words = buffer;
    size_t nwords = len / sizeof (md5_uint32);
    const md5_uint32 *endp = words + nwords;
    md5_uint32 A = ctx->A;
    md5_uint32 B = ctx->B;
    md5_uint32 C = ctx->C;
    md5_uint32 D = ctx->D;
    ctx->total[0] += len;
    if (ctx->total[0] < len)
        ++ctx->total[1];
    while (words < endp) {
        md5_uint32 *cwp = correct_words;
        md5_uint32 A_save = A;
        md5_uint32 B_save = B;
        md5_uint32 C_save = C;
        md5_uint32 D_save = D;
        OP (A, B, C, D, 7, 0xd76aa478);
        OP (D, A, B, C, 12, 0xe8c7b756);
        OP (C, D, A, B, 17, 0x242070db);
        OP (B, C, D, A, 22, 0xc1bdceee);
        OP (A, B, C, D, 7, 0xf57c0faf);
        OP (D, A, B, C, 12, 0x4787c62a);
        OP (C, D, A, B, 17, 0xa8304613);
        OP (B, C, D, A, 22, 0xfd469501);
        OP (A, B, C, D, 7, 0x698098d8);
        OP (D, A, B, C, 12, 0x8b44f7af);
        OP (C, D, A, B, 17, 0xffff5bb1);
        OP (B, C, D, A, 22, 0x895cd7be);
        OP (A, B, C, D, 7, 0x6b901122);
        OP (D, A, B, C, 12, 0xfd987193);
        OP (C, D, A, B, 17, 0xa679438e);
        OP (B, C, D, A, 22, 0x49b40821);
        OP (FG, A, B, C, D, 1, 5, 0xf61e2562);
        OP (FG, D, A, B, C, 6, 9, 0xc040b340);
        OP (FG, C, D, A, B, 11, 14, 0x265e5a51);
        OP (FG, B, C, D, A, 0, 20, 0xe9b6c7aa);
        OP (FG, A, B, C, D, 5, 5, 0xd62f105d);
        OP (FG, D, A, B, C, 10, 9, 0x02441453);
        OP (FG, C, D, A, B, 15, 14, 0xd8a1e681);
        OP (FG, B, C, D, A, 4, 20, 0xe7d3fbc8);
        OP (FG, A, B, C, D, 9, 5, 0x21e1cde6);
        OP (FG, D, A, B, C, 14, 9, 0xc33707d6);
        OP (FG, C, D, A, B, 3, 14, 0xf4d50d87);
        OP (FG, B, C, D, A, 8, 20, 0x455a14ed);
        OP (FG, A, B, C, D, 13, 5, 0xa9e3e905);
        OP (FG, D, A, B, C, 2, 9, 0xfcefa3f8);
        OP (FG, C, D, A, B, 7, 14, 0x676f02d9);
        OP (FG, B, C, D, A, 12, 20, 0x8d2a4c8a);
        OP (FH, A, B, C, D, 5, 4, 0xfffa3942);
        OP (FH, D, A, B, C, 8, 11, 0x8771f681);
        OP (FH, C, D, A, B, 11, 16, 0x6d9d6122);
        OP (FH, B, C, D, A, 14, 23, 0xfde5380c);
        OP (FH, A, B, C, D, 1, 4, 0xa4beea44);
        OP (FH, D, A, B, C, 4, 11, 0x4bdecfa9);
        OP (FH, C, D, A, B, 7, 16, 0xf6bb4b60);
        OP (FH, B, C, D, A, 10, 23, 0xbebfbc70);
        OP (FH, A, B, C, D, 13, 4, 0x289b7ec6);
        OP (FH, D, A, B, C, 0, 11, 0xeaa127fa);
        OP (FH, C, D, A, B, 3, 16, 0xd4ef3085);
        OP (FH, B, C, D, A, 6, 23, 0x04881d05);
        OP (FH, A, B, C, D, 9, 4, 0xd9d4d039);
        OP (FH, D, A, B, C, 12, 11, 0xe6db99e5);
        OP (FH, C, D, A, B, 15, 16, 0x1fa27cf8);
        OP (FH, B, C, D, A, 2, 23, 0xc4ac5665);
        OP (FI, A, B, C, D, 0, 6, 0xf4292244);
        OP (FI, D, A, B, C, 7, 10, 0x432aff97);
        OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
        OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
        OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
        OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
        OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
        OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
        OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
        OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
        OP (FI, C, D, A, B, 6, 15, 0xa3014314);
        OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
        OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
        OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
        OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
        OP (FI, B, C, D, A, 9, 21, 0xeb86d391);
        A += A_save;
        B += B_save;
        C += C_save;
        D += D_save;
    }
    ctx->A = A;
    ctx->B = B;
    ctx->C = C;
    ctx->D = D;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="289" endline="413">
{
    md5_uint32 *cwp = correct_words;
    md5_uint32 A_save = A;
    md5_uint32 B_save = B;
    md5_uint32 C_save = C;
    md5_uint32 D_save = D;
    OP (A, B, C, D, 7, 0xd76aa478);
    OP (D, A, B, C, 12, 0xe8c7b756);
    OP (C, D, A, B, 17, 0x242070db);
    OP (B, C, D, A, 22, 0xc1bdceee);
    OP (A, B, C, D, 7, 0xf57c0faf);
    OP (D, A, B, C, 12, 0x4787c62a);
    OP (C, D, A, B, 17, 0xa8304613);
    OP (B, C, D, A, 22, 0xfd469501);
    OP (A, B, C, D, 7, 0x698098d8);
    OP (D, A, B, C, 12, 0x8b44f7af);
    OP (C, D, A, B, 17, 0xffff5bb1);
    OP (B, C, D, A, 22, 0x895cd7be);
    OP (A, B, C, D, 7, 0x6b901122);
    OP (D, A, B, C, 12, 0xfd987193);
    OP (C, D, A, B, 17, 0xa679438e);
    OP (B, C, D, A, 22, 0x49b40821);
    OP (FG, A, B, C, D, 1, 5, 0xf61e2562);
    OP (FG, D, A, B, C, 6, 9, 0xc040b340);
    OP (FG, C, D, A, B, 11, 14, 0x265e5a51);
    OP (FG, B, C, D, A, 0, 20, 0xe9b6c7aa);
    OP (FG, A, B, C, D, 5, 5, 0xd62f105d);
    OP (FG, D, A, B, C, 10, 9, 0x02441453);
    OP (FG, C, D, A, B, 15, 14, 0xd8a1e681);
    OP (FG, B, C, D, A, 4, 20, 0xe7d3fbc8);
    OP (FG, A, B, C, D, 9, 5, 0x21e1cde6);
    OP (FG, D, A, B, C, 14, 9, 0xc33707d6);
    OP (FG, C, D, A, B, 3, 14, 0xf4d50d87);
    OP (FG, B, C, D, A, 8, 20, 0x455a14ed);
    OP (FG, A, B, C, D, 13, 5, 0xa9e3e905);
    OP (FG, D, A, B, C, 2, 9, 0xfcefa3f8);
    OP (FG, C, D, A, B, 7, 14, 0x676f02d9);
    OP (FG, B, C, D, A, 12, 20, 0x8d2a4c8a);
    OP (FH, A, B, C, D, 5, 4, 0xfffa3942);
    OP (FH, D, A, B, C, 8, 11, 0x8771f681);
    OP (FH, C, D, A, B, 11, 16, 0x6d9d6122);
    OP (FH, B, C, D, A, 14, 23, 0xfde5380c);
    OP (FH, A, B, C, D, 1, 4, 0xa4beea44);
    OP (FH, D, A, B, C, 4, 11, 0x4bdecfa9);
    OP (FH, C, D, A, B, 7, 16, 0xf6bb4b60);
    OP (FH, B, C, D, A, 10, 23, 0xbebfbc70);
    OP (FH, A, B, C, D, 13, 4, 0x289b7ec6);
    OP (FH, D, A, B, C, 0, 11, 0xeaa127fa);
    OP (FH, C, D, A, B, 3, 16, 0xd4ef3085);
    OP (FH, B, C, D, A, 6, 23, 0x04881d05);
    OP (FH, A, B, C, D, 9, 4, 0xd9d4d039);
    OP (FH, D, A, B, C, 12, 11, 0xe6db99e5);
    OP (FH, C, D, A, B, 15, 16, 0x1fa27cf8);
    OP (FH, B, C, D, A, 2, 23, 0xc4ac5665);
    OP (FI, A, B, C, D, 0, 6, 0xf4292244);
    OP (FI, D, A, B, C, 7, 10, 0x432aff97);
    OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
    OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
    OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
    OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
    OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
    OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
    OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
    OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
    OP (FI, C, D, A, B, 6, 15, 0xa3014314);
    OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
    OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
    OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
    OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
    OP (FI, B, C, D, A, 9, 21, 0xeb86d391);
    A += A_save;
    B += B_save;
    C += C_save;
    D += D_save;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="437" endline="618">
{
    unsigned char alt_result [16] __attribute__ ((__aligned__ (__alignof__ (md5_uint32))));
    struct md5_ctx ctx;
    struct md5_ctx alt_ctx;
    size_t salt_len;
    size_t key_len;
    size_t cnt;
    char *cp;
    char *copied_key = NULL;
    char *copied_salt = NULL;
    if (strncmp (md5_salt_prefix, salt, strlen (md5_salt_prefix)) == 0)
        salt += strlen (md5_salt_prefix);
    salt_len = MIN (strcspn (salt, "$"), 8);
    key_len = strlen (key);
    if ((key - (char *) 0) % __alignof__ (md5_uint32) != 0) {
        char *tmp = (char *) alloca (key_len +__alignof__ (md5_uint32));
        key = copied_key = memcpy (tmp +__alignof__ (md5_uint32) - (tmp - (char *) 0) % __alignof__ (md5_uint32), key, key_len);
        ASSERT ((key - (char *) 0) % __alignof__ (md5_uint32) == 0);
    }
    if ((salt - (char *) 0) % __alignof__ (md5_uint32) != 0) {
        char *tmp = (char *) alloca (salt_len +__alignof__ (md5_uint32));
        salt = copied_salt = memcpy (tmp +__alignof__ (md5_uint32) - (tmp - (char *) 0) % __alignof__ (md5_uint32), salt, salt_len);
        ASSERT ((salt - (char *) 0) % __alignof__ (md5_uint32) == 0);
    }
    md5_init_ctx (& ctx);
    md5_process_bytes (key, key_len, & ctx);
    md5_process_bytes (md5_salt_prefix, strlen (md5_salt_prefix), & ctx);
    md5_process_bytes (salt, salt_len, & ctx);
    md5_init_ctx (& alt_ctx);
    md5_process_bytes (key, key_len, & alt_ctx);
    md5_process_bytes (salt, salt_len, & alt_ctx);
    md5_process_bytes (key, key_len, & alt_ctx);
    md5_finish_ctx (& alt_ctx, alt_result);
    for (cnt = key_len; cnt > 16; cnt -= 16)
        md5_process_bytes (alt_result, 16, &ctx);
    md5_process_bytes (alt_result, cnt, & ctx);
    *alt_result = '\0';
    for (cnt = key_len; cnt > 0; cnt >>= 1)
        md5_process_bytes ((cnt & 1) != 0 ? (const char *) alt_result : key, 1, &ctx);
    md5_finish_ctx (& ctx, alt_result);
    for (cnt = 0; cnt < 1000; ++cnt) {
        md5_init_ctx (& ctx);
        if ((cnt & 1) != 0)
            md5_process_bytes (key, key_len, &ctx);
        else
            md5_process_bytes (alt_result, 16, &ctx);
        if (cnt % 3 != 0)
            md5_process_bytes (salt, salt_len, &ctx);
        if (cnt % 7 != 0)
            md5_process_bytes (key, key_len, &ctx);
        if ((cnt & 1) != 0)
            md5_process_bytes (alt_result, 16, &ctx);
        else
            md5_process_bytes (key, key_len, &ctx);
        md5_finish_ctx (& ctx, alt_result);
    }
    cp = strncpy (buffer, md5_salt_prefix, MAX (0, buflen));
    buflen -= strlen (md5_salt_prefix);
    cp = strchr (cp, '\0');
    cp = strncpy (cp, salt, MIN ((size_t) MAX (0, buflen), salt_len));
    buflen -= MIN ((size_t) MAX (0, buflen), salt_len);
    cp = strchr (cp, '\0');
    if (buflen > 0) {
        *cp++ = '$';
        --buflen;
    }
    b64_from_24bit (alt_result [0], alt_result [6], alt_result [12], 4);
    b64_from_24bit (alt_result [1], alt_result [7], alt_result [13], 4);
    b64_from_24bit (alt_result [2], alt_result [8], alt_result [14], 4);
    b64_from_24bit (alt_result [3], alt_result [9], alt_result [15], 4);
    b64_from_24bit (alt_result [4], alt_result [10], alt_result [5], 4);
    b64_from_24bit (0, 0, alt_result [11], 2);
    if (buflen <= 0) {
        buffer = NULL;
    }
    else
        *cp = '\0';
    md5_init_ctx (& ctx);
    md5_finish_ctx (& ctx, alt_result);
    memset (& ctx, '\0', sizeof (ctx));
    memset (& alt_ctx, '\0', sizeof (alt_ctx));
    if (copied_key != NULL)
        memset (copied_key, '\0', key_len);
    if (copied_salt != NULL)
        memset (copied_salt, '\0', salt_len);
    return buffer;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="459" endline="466">
{
    char *tmp = (char *) alloca (key_len +__alignof__ (md5_uint32));
    key = copied_key = memcpy (tmp +__alignof__ (md5_uint32) - (tmp - (char *) 0) % __alignof__ (md5_uint32), key, key_len);
    ASSERT ((key - (char *) 0) % __alignof__ (md5_uint32) == 0);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="469" endline="476">
{
    char *tmp = (char *) alloca (salt_len +__alignof__ (md5_uint32));
    salt = copied_salt = memcpy (tmp +__alignof__ (md5_uint32) - (tmp - (char *) 0) % __alignof__ (md5_uint32), salt, salt_len);
    ASSERT ((salt - (char *) 0) % __alignof__ (md5_uint32) == 0);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="534" endline="560">
{
    md5_init_ctx (& ctx);
    if ((cnt & 1) != 0)
        md5_process_bytes (key, key_len, &ctx);
    else
        md5_process_bytes (alt_result, 16, &ctx);
    if (cnt % 3 != 0)
        md5_process_bytes (salt, salt_len, &ctx);
    if (cnt % 7 != 0)
        md5_process_bytes (key, key_len, &ctx);
    if ((cnt & 1) != 0)
        md5_process_bytes (alt_result, 16, &ctx);
    else
        md5_process_bytes (key, key_len, &ctx);
    md5_finish_ctx (& ctx, alt_result);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="573" endline="576">
{
    *cp++ = '$';
    --buflen;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="598" endline="600">
{
    buffer = NULL;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="110" endline="123">
{
    prog = stripfilename (argv[0]);
    init_env ();
    handle_options (argc, argv);
    do_init ();
    do_action (argv);
    do_signal_block ();
    do_exit ();
    exit (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="135" endline="262">
{
    int status;
    signal (SIGTERM, do_destroy);
    signal (SIGUSR1, do_wakeup);
    signal (SIGINT, do_destroy);
    signal (SIGHUP, do_reload);
    signal (SIGPIPE, SIG_IGN);
    status = pthread_mutex_init (&Run.mutex, NULL);
    if (status != 0) {
        log ("%s: Cannot initialize mutex -- %s\n", prog, strerror (status));
        exit (1);
    }
    if (!Run.controlfile) {
        Run.controlfile = find_rcfile ();
    }
    Run.doprocess = init_process_info ();
    if (!parse (Run.controlfile)) {
        exit (1);
    }
    if (Run.testing) {
        log ("Control file syntax OK\n");
        exit (0);
    }
    if (!log_init ()) {
        exit (1);
    }
    if (!servicelist) {
        log ("%s: No services has been specified\n", prog);
        exit (0);
    }
    init_files ();
    if (Run.debug) {
        printrunlist ();
        printservicelist ();
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="180" endline="183">
{
    log ("%s: Cannot initialize mutex -- %s\n", prog, strerror (status));
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="189" endline="193">
{
    Run.controlfile = find_rcfile ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="205" endline="209">
{
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="218" endline="223">
{
    log ("Control file syntax OK\n");
    exit (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="229" endline="233">
{
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="239" endline="244">
{
    log ("%s: No services has been specified\n", prog);
    exit (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="255" endline="260">
{
    printrunlist ();
    printservicelist ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="270" endline="349">
{
    char *bind_addr;
    int port = Run.httpdport;
    Run.doreload = FALSE;
    bind_addr = Run.bind_addr ? xstrdup (Run.bind_addr) : NULL;
    log ("Awakened by the SIGHUP signal\n");
    log ("Reinitializing %s - Control file '%s'\n", prog, Run.controlfile);
    gc ();
    if (!parse (Run.controlfile)) {
        log ("%s daemon died\n", prog);
        exit (1);
    }
    log_close ();
    if (!log_init ()) {
        exit (1);
    }
    if (!servicelist) {
        log ("%s: No services has been specified\n", prog);
        exit (0);
    }
    init_files ();
    if (!create_pidfile (Run.pidfile)) {
        log ("%s daemon died\n", prog);
        exit (1);
    }
    state_update ();
    if (!can_http ()) {
        monit_http (STOP_HTTP);
    }
    else if (!IS (bind_addr, Run.bind_addr) || port != Run.httpdport) {
        monit_http (STOP_HTTP);
        monit_http (START_HTTP);
    }
    else if (!check_httpd ()) {
        monit_http (START_HTTP);
    }
    FREE (bind_addr);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="286" endline="291">
{
    log ("%s daemon died\n", prog);
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="298" endline="302">
{
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="306" endline="311">
{
    log ("%s: No services has been specified\n", prog);
    exit (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="317" endline="322">
{
    log ("%s daemon died\n", prog);
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="328" endline="332">
{
    monit_http (STOP_HTTP);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="334" endline="339">
{
    monit_http (STOP_HTTP);
    monit_http (START_HTTP);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="341" endline="345">
{
    monit_http (START_HTTP);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="356" endline="418">
{
    char *action = args[optind];
    char *P = args[++optind];
    Run.once = TRUE;
    if (!action) {
        do_default ();
    }
    else if (IS (action, "start") || IS (action, "stop") || IS (action, "monitor") || IS (action, "unmonitor") || IS (action, "restart")) {
        if (P) {
            if (!IS (P, "all")) {
                control_process (P, action);
            }
            else {
                if (Run.mygroup)
                    control_group (Run.mygroup, action);
                else
                    control (action);
            }
        }
        else {
            goto error;
        }
    }
    else if (IS (action, "reload")) {
        log ("Reinitializing monit daemon\n", prog);
        kill_daemon (SIGHUP);
    }
    else if (IS (action, "status")) {
        status ();
    }
    else if (IS (action, "quit")) {
        kill_daemon (SIGTERM);
    }
    else if (IS (action, "validate")) {
        validate ();
    }
    else {
    error :
        log ("%s: invalid argument -- %s  (-h will show valid arguments)\n", prog, action);
        exit (1);
    }
    reset_depend ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="364" endline="366">
{
    do_default ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="372" endline="391">
{
    if (P) {
        if (!IS (P, "all")) {
            control_process (P, action);
        }
        else {
            if (Run.mygroup)
                control_group (Run.mygroup, action);
            else
                control (action);
        }
    }
    else {
        goto error;
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="374" endline="386">
{
    if (!IS (P, "all")) {
        control_process (P, action);
    }
    else {
        if (Run.mygroup)
            control_group (Run.mygroup, action);
        else
            control (action);
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="376" endline="378">
{
    control_process (P, action);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="380" endline="385">
{
    if (Run.mygroup)
        control_group (Run.mygroup, action);
    else
        control (action);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="388" endline="390">
{
    goto error;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="393" endline="396">
{
    log ("Reinitializing monit daemon\n", prog);
    kill_daemon (SIGHUP);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="398" endline="400">
{
    status ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="402" endline="404">
{
    kill_daemon (SIGTERM);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="406" endline="408">
{
    validate ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="410" endline="415">
{
error :
    log ("%s: invalid argument -- %s  (-h will show valid arguments)\n", prog, action);
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="425" endline="429">
{
    log ("Awakened by User defined signal 1\n");
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="436" endline="440">
{
    Run.doreload = TRUE;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="448" endline="464">
{
    pid_t pid;
    if ((pid = exist_daemon ()) > 0) {
        kill (pid, SIGUSR1);
        log ("%s daemon at %d awakened\n", prog, pid);
        return TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="453" endline="460">
{
    kill (pid, SIGUSR1);
    log ("%s daemon at %d awakened\n", prog, pid);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="471" endline="475">
{
    Run.stopped = TRUE;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="482" endline="498">
{
    Run.stopped = TRUE;
    if (Run.isdaemon && !Run.once) {
        if (Run.dohttpd)
            monit_http (STOP_HTTP);
        log ("%s daemon with pid [%d] killed\n", prog, (int) getpid ());
    }
    gc ();
    exit (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="487" endline="494">
{
    if (Run.dohttpd)
        monit_http (STOP_HTTP);
    log ("%s daemon with pid [%d] killed\n", prog, (int) getpid ());
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="507" endline="568">
{
    if (Run.isdaemon) {
        if (do_wakeupcall ())
            exit (0);
        Run.once = FALSE;
        log ("Starting %s daemon\n", prog);
        if (can_http ()) {
            log ("Starting httpd at [%s:%d]\n", Run.bind_addr ? Run.bind_addr : "*", Run.httpdport);
        }
        if (Run.init != TRUE)
            daemonize ();
        if (!create_pidfile (Run.pidfile)) {
            log ("%s daemon died\n", prog);
            exit (1);
        }
        if (state_should_update ())
            state_update ();
        atexit (finalize_files);
        if (can_http ())
            monit_http (START_HTTP);
        for (;;) {
            validate ();
            state_save ();
            sleep (Run.polltime);
            if (Run.doreload)
                do_reinit ();
            if (Run.stopped) {
                do_signal_block ();
                do_exit ();
            }
        }
    }
    else {
        validate ();
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="510" endline="560">
{
    if (do_wakeupcall ())
        exit (0);
    Run.once = FALSE;
    log ("Starting %s daemon\n", prog);
    if (can_http ()) {
        log ("Starting httpd at [%s:%d]\n", Run.bind_addr ? Run.bind_addr : "*", Run.httpdport);
    }
    if (Run.init != TRUE)
        daemonize ();
    if (!create_pidfile (Run.pidfile)) {
        log ("%s daemon died\n", prog);
        exit (1);
    }
    if (state_should_update ())
        state_update ();
    atexit (finalize_files);
    if (can_http ())
        monit_http (START_HTTP);
    for (;;) {
        validate ();
        state_save ();
        sleep (Run.polltime);
        if (Run.doreload)
            do_reinit ();
        if (Run.stopped) {
            do_signal_block ();
            do_exit ();
        }
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="520" endline="523">
{
    log ("Starting httpd at [%s:%d]\n", Run.bind_addr ? Run.bind_addr : "*", Run.httpdport);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="529" endline="532">
{
    log ("%s daemon died\n", prog);
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="543" endline="558">
{
    validate ();
    state_save ();
    sleep (Run.polltime);
    if (Run.doreload)
        do_reinit ();
    if (Run.stopped) {
        do_signal_block ();
        do_exit ();
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="553" endline="556">
{
    do_signal_block ();
    do_exit ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="562" endline="566">
{
    validate ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="577" endline="583">
{
    sigset_t block;
    set_signal_block (& block, NULL);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="591" endline="688">
{
    int opt;
    opterr = 0;
    Run.mygroup = 0;
    while ((opt = getopt (argc, argv, "c:d:g:l:p:s:iItvVh")) != -1) {
        switch (opt) {
        case 'c' :
            Run.controlfile = xstrdup (optarg);
            break;
        case 'd' :
            Run.isdaemon = TRUE;
            sscanf (optarg, "%d", & Run.polltime);
            if (Run.polltime < 1) {
                log ("%s: option -%c requires a natural number\n", prog, opt);
                exit (1);
            }
            break;
        case 'g' :
            Run.mygroup = xstrdup (optarg);
            break;
        case 'l' :
            Run.logfile = xstrdup (optarg);
            if (IS (Run.logfile, "syslog"))
                Run.use_syslog = TRUE;
            Run.dolog = TRUE;
            break;
        case 'p' :
            Run.pidfile = xstrdup (optarg);
            break;
        case 's' :
            Run.statefile = xstrdup (optarg);
            break;
        case 'i' :
            log ("%s: option -i is obsolete\n", prog);
            break;
        case 'I' :
            Run.init = TRUE;
            break;
        case 't' :
            Run.testing = TRUE;
            break;
        case 'v' :
            Run.debug = TRUE;
            break;
        case 'V' :
            version ();
            exit (0);
            break;
        case 'h' :
            help ();
            exit (0);
            break;
        case '?' :
            switch (optopt) {
            case 'c' :
            case 'd' :
            case 'g' :
            case 'l' :
            case 'p' :
            case 's' :
                log ("%s: option -- %c requires an argument\n", prog, optopt);
                break;
            default :
                log ("%s: invalid option -- %c  (-h will show valid options)\n", prog, optopt);
            }
            exit (1);
        }
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="600" endline="686">
{
    switch (opt) {
    case 'c' :
        Run.controlfile = xstrdup (optarg);
        break;
    case 'd' :
        Run.isdaemon = TRUE;
        sscanf (optarg, "%d", & Run.polltime);
        if (Run.polltime < 1) {
            log ("%s: option -%c requires a natural number\n", prog, opt);
            exit (1);
        }
        break;
    case 'g' :
        Run.mygroup = xstrdup (optarg);
        break;
    case 'l' :
        Run.logfile = xstrdup (optarg);
        if (IS (Run.logfile, "syslog"))
            Run.use_syslog = TRUE;
        Run.dolog = TRUE;
        break;
    case 'p' :
        Run.pidfile = xstrdup (optarg);
        break;
    case 's' :
        Run.statefile = xstrdup (optarg);
        break;
    case 'i' :
        log ("%s: option -i is obsolete\n", prog);
        break;
    case 'I' :
        Run.init = TRUE;
        break;
    case 't' :
        Run.testing = TRUE;
        break;
    case 'v' :
        Run.debug = TRUE;
        break;
    case 'V' :
        version ();
        exit (0);
        break;
    case 'h' :
        help ();
        exit (0);
        break;
    case '?' :
        switch (optopt) {
        case 'c' :
        case 'd' :
        case 'g' :
        case 'l' :
        case 'p' :
        case 's' :
            log ("%s: option -- %c requires an argument\n", prog, optopt);
            break;
        default :
            log ("%s: invalid option -- %c  (-h will show valid options)\n", prog, optopt);
        }
        exit (1);
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="603" endline="684">
{
case 'c' :
    Run.controlfile = xstrdup (optarg);
    break;
case 'd' :
    Run.isdaemon = TRUE;
    sscanf (optarg, "%d", & Run.polltime);
    if (Run.polltime < 1) {
        log ("%s: option -%c requires a natural number\n", prog, opt);
        exit (1);
    }
    break;
case 'g' :
    Run.mygroup = xstrdup (optarg);
    break;
case 'l' :
    Run.logfile = xstrdup (optarg);
    if (IS (Run.logfile, "syslog"))
        Run.use_syslog = TRUE;
    Run.dolog = TRUE;
    break;
case 'p' :
    Run.pidfile = xstrdup (optarg);
    break;
case 's' :
    Run.statefile = xstrdup (optarg);
    break;
case 'i' :
    log ("%s: option -i is obsolete\n", prog);
    break;
case 'I' :
    Run.init = TRUE;
    break;
case 't' :
    Run.testing = TRUE;
    break;
case 'v' :
    Run.debug = TRUE;
    break;
case 'V' :
    version ();
    exit (0);
    break;
case 'h' :
    help ();
    exit (0);
    break;
case '?' :
    switch (optopt) {
    case 'c' :
    case 'd' :
    case 'g' :
    case 'l' :
    case 'p' :
    case 's' :
        log ("%s: option -- %c requires an argument\n", prog, optopt);
        break;
    default :
        log ("%s: invalid option -- %c  (-h will show valid options)\n", prog, optopt);
    }
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="613" endline="616">
{
    log ("%s: option -%c requires a natural number\n", prog, opt);
    exit (1);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="666" endline="680">
{
case 'c' :
case 'd' :
case 'g' :
case 'l' :
case 'p' :
case 's' :
    log ("%s: option -- %c requires an argument\n", prog, optopt);
    break;
default :
    log ("%s: invalid option -- %c  (-h will show valid options)\n", prog, optopt);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="695" endline="728">
{
    printf ("Usage: %s [options] {arguments}\n", prog);
    printf ("Options are as follows:\n");
    printf (" -c file      Use this control file\n");
    printf (" -d n         Run as a daemon once per n seconds\n");
    printf (" -g name      Set group name for start, stop, restart and status\n");
    printf (" -l logfile   Print log information to this file\n");
    printf (" -p pidfile   Use this lock file in daemon mode\n");
    printf (" -s statefile Set the file monit should write state information to\n");
    printf (" -I           Do not run in background (needed for run from init)\n");
    printf (" -t           Run syntax check for the control file\n");
    printf (" -v           Verbose mode, work noisy (diagnostic output)\n");
    printf (" -V           Print version number and patchlevel\n");
    printf (" -h           Print this text\n");
    printf ("Optional action arguments for non-daemon mode are as follows:\n");
    printf (" start all      - Start all services\n");
    printf (" start name     - Only start the named service\n");
    printf (" stop all       - Stop all services\n");
    printf (" stop name      - Only stop the named service\n");
    printf (" restart all    - Stop and start all services\n");
    printf (" restart name   - Only restart the named service\n");
    printf (" monitor all    - Enable monitoring of all services\n");
    printf (" monitor name   - Only enable monitoring of the named service\n");
    printf (" unmonitor all  - Disable monitoring of all services\n");
    printf (" unmonitor name - Only disable monitoring of the named service\n");
    printf (" reload         - Reinitialize monit\n");
    printf (" status         - Print status information for each service\n");
    printf (" quit           - Kill monit daemon process\n");
    printf (" validate       - Check all services and start if not running\n");
    printf ("\n");
    printf ("(Action arguments operate on services defined in the control file)\n");
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="735" endline="741">
{
    printf ("This is monit version %s\n", VERSION);
    printf ("Copyright (C) 2000-2004 by the monit project group.");
    printf (" All Rights Reserved.\n");
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="83" endline="117">
{
    int fd;
    char filename [STRLEN];
    int bytes;
    ASSERT (buf);
    ASSERT (name);
    snprintf (filename, STRLEN, "/proc/%d/%s", pid, name);
    if ((fd = open (filename, O_RDONLY)) < 0) {
        return FALSE;
    }
    if ((bytes = read (fd, buf, buf_size -1)) < 0) {
        close (fd);
        return FALSE;
    }
    buf[bytes] = '\0';
    close (fd);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="95" endline="99">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="102" endline="108">
{
    close (fd);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="124" endline="131">
{
    struct timeval t;
    gettimeofday (& t, NULL);
    return (double) t.tv_sec * 10 + (double) t.tv_usec / 100000.0;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="140" endline="179">
{
    double temp_time;
    temp_time = get_float_time ();
    if (!get_process_info_sysdep (p)) {
        return FALSE;
    }
    if (p->time_prev == 0.0) {
        p->cpu_percent = 0;
    }
    else {
        p->cpu_percent = (int) ((p->cputime - p->cputime_prev) * 1000) / (temp_time - p->time_prev) / num_cpus;
    }
    p->time_prev = temp_time;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="150" endline="154">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="159" endline="163">
{
    p->cpu_percent = 0;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="165" endline="172">
{
    p->cpu_percent = (int) ((p->cputime - p->cputime_prev) * 1000) / (temp_time - p->time_prev) / num_cpus;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="190" endline="210">
{
    ProcInfo_T pi = NEW (pi);
    pi->pid = pid;
    if (!get_process_info_sysdep (pi)) {
        return FALSE;
    }
    entry->pid = pid;
    entry->mem_kbyte = pi->mem_kbyte;
    entry->ppid = pi->ppid;
    FREE (pi);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="197" endline="201">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="220" endline="252">
{
    ProcessTree_T **tmp;
    ASSERT (child);
    ASSERT (parent);
    if (parent->pid == 0 || child->pid == 0) {
        return FALSE;
    }
    parent->children_num++;
    tmp = xcalloc (sizeof (ProcessTree_T *), parent->children_num);
    if (parent->children != NULL) {
        memcpy (tmp, parent -> children, sizeof (ProcessTree_T *) * (parent -> children_num - 1));
        FREE (parent -> children);
    }
    parent->children = tmp;
    parent->children[parent->children_num - 1] = child;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="228" endline="232">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="239" endline="245">
{
    memcpy (tmp, parent -> children, sizeof (ProcessTree_T *) * (parent -> children_num - 1));
    FREE (parent -> children);
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="261" endline="295">
{
    int i;
    ProcessTree_T *parent_pt;
    ASSERT (pt);
    if ((pt->pid == 0) || (pt->visited == 1)) {
        return;
    }
    pt->visited = 1;
    pt->children_sum = pt->children_num;
    pt->mem_kbyte_sum = pt->mem_kbyte;
    for (i = 0; i < pt->children_num; i++) {
        fillprocesstree (pt -> children [i]);
    }
    if (pt->parent != NULL) {
        parent_pt = pt->parent;
        parent_pt->children_sum += pt->children_sum;
        parent_pt->mem_kbyte_sum += pt->mem_kbyte_sum;
    }
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="269" endline="273">
{
    return;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="280" endline="284">
{
    fillprocesstree (pt -> children [i]);
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="287" endline="293">
{
    parent_pt = pt->parent;
    parent_pt->children_sum += pt->children_sum;
    parent_pt->mem_kbyte_sum += pt->mem_kbyte_sum;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="306" endline="324">
{
    ProcessTree_T *leaf;
    leaf = findprocess (pi->pid, pt, treesize);
    if (NULL == (leaf = findprocess (pi->pid, pt, treesize))) {
        return FALSE;
    }
    pi->children = leaf->children_sum;
    pi->total_mem_kbyte = leaf->mem_kbyte_sum;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="313" endline="317">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="102" endline="108">
{
    mem_kbyte_max = 0;
    num_cpus = sysconf (_SC_NPROCESSORS_ONLN);
    return (getuid () == 0);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="111" endline="115">
{
    return t.tv_sec * 10 + t.tv_usec * 1.0e-7;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="119" endline="186">
{
    int nproc;
    int i, rv;
    struct userinfo user;
    memset (& user, 0, sizeof (struct userinfo));
    nproc = getproc (procs, NPROCS, sizeof (struct procinfo));
    for (i = 0; i < nproc; i++) {
        if (p->pid == procs[i].pi_pid) {
            if (procs[i].pi_stat == SZOMB) {
            empty :
                p->cputime_prev = p->cputime = 0;
                p->mem_kbyte = 0;
                p->mem_percent = 0.0;
                p->status_flag |= PROCESS_ZOMBIE;
            }
            else {
                rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
                if (rv == -1) {
                    goto empty;
                }
                p->mem_percent = user.ui_prm * 10;
                p->mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
                p->cputime_prev = p->cputime;
                p->cputime = (timestruc_to_tseconds (user.ui_ru.ru_utime) + timestruc_to_tseconds (user.ui_ru.ru_stime));
                if (include_children) {
                    p->cputime += (timestruc_to_tseconds (user.ui_cru.ru_utime) + timestruc_to_tseconds (user.ui_cru.ru_stime));
                }
                if (p->time_prev == 0.0) {
                    p->cputime_prev = p->cputime;
                }
            }
            return TRUE;
        }
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="128" endline="182">
{
    if (p->pid == procs[i].pi_pid) {
        if (procs[i].pi_stat == SZOMB) {
        empty :
            p->cputime_prev = p->cputime = 0;
            p->mem_kbyte = 0;
            p->mem_percent = 0.0;
            p->status_flag |= PROCESS_ZOMBIE;
        }
        else {
            rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
            if (rv == -1) {
                goto empty;
            }
            p->mem_percent = user.ui_prm * 10;
            p->mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
            p->cputime_prev = p->cputime;
            p->cputime = (timestruc_to_tseconds (user.ui_ru.ru_utime) + timestruc_to_tseconds (user.ui_ru.ru_stime));
            if (include_children) {
                p->cputime += (timestruc_to_tseconds (user.ui_cru.ru_utime) + timestruc_to_tseconds (user.ui_cru.ru_stime));
            }
            if (p->time_prev == 0.0) {
                p->cputime_prev = p->cputime;
            }
        }
        return TRUE;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="131" endline="181">
{
    if (procs[i].pi_stat == SZOMB) {
    empty :
        p->cputime_prev = p->cputime = 0;
        p->mem_kbyte = 0;
        p->mem_percent = 0.0;
        p->status_flag |= PROCESS_ZOMBIE;
    }
    else {
        rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
        if (rv == -1) {
            goto empty;
        }
        p->mem_percent = user.ui_prm * 10;
        p->mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
        p->cputime_prev = p->cputime;
        p->cputime = (timestruc_to_tseconds (user.ui_ru.ru_utime) + timestruc_to_tseconds (user.ui_ru.ru_stime));
        if (include_children) {
            p->cputime += (timestruc_to_tseconds (user.ui_cru.ru_utime) + timestruc_to_tseconds (user.ui_cru.ru_stime));
        }
        if (p->time_prev == 0.0) {
            p->cputime_prev = p->cputime;
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="134" endline="143">
{
empty :
    p->cputime_prev = p->cputime = 0;
    p->mem_kbyte = 0;
    p->mem_percent = 0.0;
    p->status_flag |= PROCESS_ZOMBIE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="145" endline="177">
{
    rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
    if (rv == -1) {
        goto empty;
    }
    p->mem_percent = user.ui_prm * 10;
    p->mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
    p->cputime_prev = p->cputime;
    p->cputime = (timestruc_to_tseconds (user.ui_ru.ru_utime) + timestruc_to_tseconds (user.ui_ru.ru_stime));
    if (include_children) {
        p->cputime += (timestruc_to_tseconds (user.ui_cru.ru_utime) + timestruc_to_tseconds (user.ui_cru.ru_stime));
    }
    if (p->time_prev == 0.0) {
        p->cputime_prev = p->cputime;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="151" endline="155">
{
    goto empty;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="165" endline="169">
{
    p->cputime += (timestruc_to_tseconds (user.ui_cru.ru_utime) + timestruc_to_tseconds (user.ui_cru.ru_stime));
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="172" endline="176">
{
    p->cputime_prev = p->cputime;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="194" endline="221">
{
    int n;
    if (kmemfd < 0) {
        if ((kmemfd = open ("/dev/kmem", O_RDONLY)) < 0) {
            perror ("kmem");
            exit (1);
        }
    }
    lseek (kmemfd, (off_t) address, SEEK_SET);
    n = read (kmemfd, buf, bufsize);
    return (n);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="204" endline="210">
{
    if ((kmemfd = open ("/dev/kmem", O_RDONLY)) < 0) {
        perror ("kmem");
        exit (1);
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="206" endline="209">
{
    perror ("kmem");
    exit (1);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="232" endline="271">
{
    return getloadavg (loadv, nelem);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="282" endline="338">
{
    int treesize;
    int i, rv;
    struct userinfo user;
    ProcessTree_T *pt;
    memset (& user, 0, sizeof (struct userinfo));
    treesize = getproc (procs, NPROCS, sizeof (struct procinfo));
    pt = xcalloc (sizeof (ProcessTree_T), treesize);
    for (i = 0; i < treesize; i++) {
        pt[i].pid = procs[i].pi_pid;
        pt[i].ppid = procs[i].pi_ppid;
        if (procs[i].pi_stat == SZOMB) {
            pt[i].mem_kbyte = 0;
        }
        else {
            rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
            if (rv == -1) {
                pt[i].mem_kbyte = 0;
            }
            else {
                pt[i].mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
            }
        }
    }
    *reference = pt;
    return treesize;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="302" endline="332">
{
    pt[i].pid = procs[i].pi_pid;
    pt[i].ppid = procs[i].pi_ppid;
    if (procs[i].pi_stat == SZOMB) {
        pt[i].mem_kbyte = 0;
    }
    else {
        rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
        if (rv == -1) {
            pt[i].mem_kbyte = 0;
        }
        else {
            pt[i].mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
        }
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="308" endline="312">
{
    pt[i].mem_kbyte = 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="314" endline="331">
{
    rv = getuser (&(procs[i]), sizeof (struct procinfo), &user, sizeof (struct userinfo));
    if (rv == -1) {
        pt[i].mem_kbyte = 0;
    }
    else {
        pt[i].mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="320" endline="324">
{
    pt[i].mem_kbyte = 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="326" endline="330">
{
    pt[i].mem_kbyte = (user.ui_drss + user.ui_trss) * 4;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="129" endline="203">
{
    register int pagesize;
    struct vmmeter vmm;
    int mib [2];
    size_t len;
    struct nlist nlst [] = {{"_bufspace"}, {"_cnt"}, {0}};
    if (getuid () != 0) {
        return FALSE;
    }
    mib[0] = CTL_HW;
    mib[1] = HW_NCPU;
    len = sizeof (num_cpus);
    sysctl (mib, 2, & num_cpus, & len, NULL, 0);
    kvm_handle = kvm_open (NULL, NULL, NULL, O_RDONLY, "monit");
    if (kvm_handle == NULL) {
        return FALSE;
    }
    if (kvm_nlist (kvm_handle, nlst) < 0) {
        return FALSE;
    }
    pagesize = getpagesize ();
    pageshift = 0;
    while (pagesize > 1) {
        pageshift++;
        pagesize >>= 1;
    }
    pageshift -= LOG1024;
    len = sizeof (vmm);
    if (sysctl (mib, 2, &vmm, &len, NULL, 0) < 0) {
        return FALSE;
    }
    mem_kbyte_max = vmm.v_free_min + vmm.v_free_count + vmm.v_wire_count + vmm.v_active_count + vmm.v_inactive_count;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="144" endline="148">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="159" endline="163">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="170" endline="172">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="180" endline="185">
{
    pageshift++;
    pagesize >>= 1;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="193" endline="195">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="206" endline="312">
{
    struct kinfo_proc *pinfo;
    struct plimit plimit;
    struct vmspace *vms;
    long stat_utime = 0;
    long stat_stime = 0;
    long stat_cutime = 0;
    long stat_cstime = 0;
    u_int64_t rss_lim;
    int count;
    return FALSE;
    pinfo = kvm_getprocs (kvm_handle, KERN_PROC_PID, p->pid, &count);
    if ((pinfo == NULL) || (count < 1)) {
        return FALSE;
    }
    p->cputime_prev = p->cputime;
    p->cputime = (stat_utime + stat_stime);
    if (include_children) {
        p->cputime += (stat_cutime + stat_cstime);
    }
    if (p->time_prev == 0.0) {
        p->cputime_prev = p->cputime;
    }
    rss_lim = (u_int64_t) (plimit.pl_rlimit[RLIMIT_RSS].rlim_cur);
    vms = &pinfo[0].kp_eproc.e_vm;
    p->mem_kbyte = (u_int64_t) pagetok (vms->vm_rssize);
    if (pinfo[0].kp_proc.p_stat == SZOMB) {
        p->status_flag |= PROCESS_ZOMBIE;
    }
    p->mem_percent = (int) ((double) p->mem_kbyte * 1000./ mem_kbyte_max);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="230" endline="234">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="264" endline="268">
{
    p->cputime += (stat_cutime + stat_cstime);
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="273" endline="277">
{
    p->cputime_prev = p->cputime;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="302" endline="306">
{
    p->status_flag |= PROCESS_ZOMBIE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="322" endline="382">
{
    struct kinfo_proc *pinfo;
    struct plimit plimit;
    struct vmspace *vms;
    u_int64_t rss_lim;
    int i = 0;
    int treesize;
    ProcessTree_T *pt;
    pinfo = kvm_getprocs (kvm_handle, KERN_PROC_ALL, 0, &treesize);
    if ((pinfo == NULL) || (treesize < 1)) {
        return 0;
    }
    pt = xcalloc (sizeof (ProcessTree_T), treesize);
    for (i = 0; i < treesize; i++) {
        pt[i].pid = pinfo[i].kp_proc.p_pid;
        pt[i].ppid = pinfo[i].kp_eproc.e_ppid;
        rss_lim = (u_int64_t) (plimit.pl_rlimit[RLIMIT_RSS].rlim_cur);
        vms = &pinfo[i].kp_eproc.e_vm;
        pt[i].mem_kbyte = (u_int64_t) pagetok (vms->vm_rssize);
    }
    *reference = pt;
    return treesize;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="342" endline="346">
{
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="355" endline="376">
{
    pt[i].pid = pinfo[i].kp_proc.p_pid;
    pt[i].ppid = pinfo[i].kp_eproc.e_ppid;
    rss_lim = (u_int64_t) (plimit.pl_rlimit[RLIMIT_RSS].rlim_cur);
    vms = &pinfo[i].kp_eproc.e_vm;
    pt[i].mem_kbyte = (u_int64_t) pagetok (vms->vm_rssize);
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="392" endline="396">
{
    return getloadavg (loadv, nelem);
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="110" endline="143">
{
    struct pst_dynamic psd;
    struct pst_static pst;
    if (pstat_getdynamic (&psd, sizeof (psd), (size_t) 1, 0) != -1) {
        num_cpus = psd.psd_proc_cnt;
    }
    else {
        return FALSE;
    }
    if (pstat_getstatic (&pst, sizeof (pst), (size_t) 1, 0) != -1) {
        mem_kbyte_max = (long) (((double) pst.physical_memory) * ((double) pst.page_size) / 1024.0);
        page_size = pst.page_size;
    }
    else {
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="115" endline="119">
{
    num_cpus = psd.psd_proc_cnt;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="121" endline="125">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="128" endline="134">
{
    mem_kbyte_max = (long) (((double) pst.physical_memory) * ((double) pst.page_size) / 1024.0);
    page_size = pst.page_size;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="136" endline="140">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="147" endline="195">
{
    struct pst_status ps;
    if (pstat_getproc (&ps, sizeof (ps), (size_t) 1, p->pid) == -1) {
        return FALSE;
    }
    p->cputime_prev = p->cputime;
    p->cputime = (ps.pst_utime + ps.pst_stime) * 10 / HZ;
    p->mem_kbyte = (long) (((double) ps.pst_rssize) / 1024.0 * page_size);
    p->mem_percent = (((double) p->mem_kbyte) * 1000.0 / ((double) mem_kbyte_max));
    if (include_children) {
        p->cputime += (ps.pst_child_utime.pst_sec + ps.pst_child_stime.pst_sec) * 10 / HZ;
    }
    if (p->time_prev == 0.0) {
        p->cputime_prev = p->cputime;
    }
    if (ps.pst_stat || PS_ZOMBIE) {
        p->status_flag |= PROCESS_ZOMBIE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="152" endline="156">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="168" endline="173">
{
    p->cputime += (ps.pst_child_utime.pst_sec + ps.pst_child_stime.pst_sec) * 10 / HZ;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="178" endline="182">
{
    p->cputime_prev = p->cputime;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="187" endline="191">
{
    p->status_flag |= PROCESS_ZOMBIE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="205" endline="237">
{
    struct pst_dynamic psd;
    if (pstat_getdynamic (&psd, sizeof (psd), (size_t) 1, 0) != -1) {
        switch (na) {
        case 3 :
            a[2] = psd.psd_avg_15_min;
        case 2 :
            a[1] = psd.psd_avg_5_min;
        case 1 :
            a[0] = psd.psd_avg_1_min;
        }
    }
    else {
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="210" endline="228">
{
    switch (na) {
    case 3 :
        a[2] = psd.psd_avg_15_min;
    case 2 :
        a[1] = psd.psd_avg_5_min;
    case 1 :
        a[0] = psd.psd_avg_1_min;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="213" endline="226">
{
case 3 :
    a[2] = psd.psd_avg_15_min;
case 2 :
    a[1] = psd.psd_avg_5_min;
case 1 :
    a[0] = psd.psd_avg_1_min;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="230" endline="234">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="247" endline="286">
{
    int treesize;
    int i;
    ProcessTree_T *pt;
    ASSERT (reference);
    if ((treesize = pstat_getproc (psall, (size_t) NPROCS * sizeof (pst_status), (size_t) NPROCS, 0)) == -1) {
        return 0;
    }
    pt = xcalloc (sizeof (ProcessTree_T), treesize);
    for (i = 0; i < tree_size; pp++, i++) {
        pt[i]->pid = psall[i]->pst_pid;
        pt[i]->ppid = psall[i]->pst_ppid;
        p->mem_kbyte = (long) (((double) psall[i]->pst_rssize) / 1024.0 * page_size);
    }
    *reference = pt;
    return treesize;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="259" endline="263">
{
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="272" endline="278">
{
    pt[i]->pid = psall[i]->pst_pid;
    pt[i]->ppid = psall[i]->pst_ppid;
    p->mem_kbyte = (long) (((double) psall[i]->pst_rssize) / 1024.0 * page_size);
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="94" endline="119">
{
    int memfd;
    char buf [1024], *ptr;
    if ((memfd = open ("/proc/meminfo", O_RDONLY)) == -1)
        return FALSE;
    if (read (memfd, buf, sizeof (buf)) < 0) {
        close (memfd);
        return FALSE;
    }
    close (memfd);
    if (!(ptr = strstr (buf, MEMTOTAL)))
        return FALSE;
    if (sscanf (ptr +strlen (MEMTOTAL), "%ld", &mem_kbyte_max) != 1)
        return FALSE;
    num_cpus = sysconf (_SC_NPROCESSORS_CONF);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="103" endline="106">
{
    close (memfd);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="123" endline="234">
{
    char buf [4096];
    char *tmp;
    char stat_item_state;
    unsigned long stat_item_utime;
    unsigned long stat_item_stime;
    long stat_item_cutime;
    long stat_item_cstime;
    long stat_item_rss;
    int statm_item_share;
    int statm_item_trs;
    int statm_item_drs;
    int stat_ppid;
    if (!read_proc_file (buf, 4096, "stat", p->pid)) {
        return FALSE;
    }
    tmp = strrchr (buf, ')') + 2;
    sscanf (tmp, "%c %d %*d %*d %*d %*d %*u %*u" "%*u %*u %*u %lu %lu %ld %ld %*d %*d %*d " "%*d %*u %*u %ld %*u %*u %*u %*u %*u " "%*u %*u %*u %*u %*u %*u %*u %*u %*d %*d\n", & stat_item_state, & stat_ppid, & stat_item_utime, & stat_item_stime, & stat_item_cutime, & stat_item_cstime, & stat_item_rss);
    p->ppid = stat_ppid;
    p->cputime_prev = p->cputime;
    p->cputime = (stat_item_utime + stat_item_stime) * 10 / HZ;
    if (include_children) {
        p->cputime += (stat_item_cutime + stat_item_cstime) * 10 / HZ;
    }
    if (p->time_prev == 0.0) {
        p->cputime_prev = p->cputime;
    }
    if (stat_item_state == 'Z') {
        p->status_flag |= PROCESS_ZOMBIE;
    }
    if (!read_proc_file (buf, 4096, "statm", p->pid)) {
        return FALSE;
    }
    sscanf (buf, "%*d %*d %d %d %*d %d %*d\n", & statm_item_share, & statm_item_trs, & statm_item_drs);
    if (PAGE_TO_KBYTE_SHIFT < 0) {
        p->mem_kbyte = (statm_item_trs >> abs (PAGE_TO_KBYTE_SHIFT)) + (statm_item_drs >> abs (PAGE_TO_KBYTE_SHIFT)) - (statm_item_share >> abs (PAGE_TO_KBYTE_SHIFT));
    }
    else {
        p->mem_kbyte = (statm_item_trs << abs (PAGE_TO_KBYTE_SHIFT)) + (statm_item_drs << abs (PAGE_TO_KBYTE_SHIFT)) - (statm_item_share << abs (PAGE_TO_KBYTE_SHIFT));
    }
    p->mem_percent = (int) ((double) p->mem_kbyte * 1000.0 / mem_kbyte_max);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="139" endline="143">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="173" endline="177">
{
    p->cputime += (stat_item_cutime + stat_item_cstime) * 10 / HZ;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="182" endline="186">
{
    p->cputime_prev = p->cputime;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="191" endline="195">
{
    p->status_flag |= PROCESS_ZOMBIE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="199" endline="203">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="214" endline="220">
{
    p->mem_kbyte = (statm_item_trs >> abs (PAGE_TO_KBYTE_SHIFT)) + (statm_item_drs >> abs (PAGE_TO_KBYTE_SHIFT)) - (statm_item_share >> abs (PAGE_TO_KBYTE_SHIFT));
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="222" endline="228">
{
    p->mem_kbyte = (statm_item_trs << abs (PAGE_TO_KBYTE_SHIFT)) + (statm_item_drs << abs (PAGE_TO_KBYTE_SHIFT)) - (statm_item_share << abs (PAGE_TO_KBYTE_SHIFT));
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="245" endline="296">
{
    int pid;
    int i;
    int treesize;
    ProcessTree_T *pt;
    glob_t globbuf;
    ASSERT (reference);
    if (glob ("/proc/[0-9]*", GLOB_ONLYDIR, NULL, &globbuf) != 0) {
        return 0;
    }
    treesize = globbuf.gl_pathc;
    pt = xcalloc (sizeof (ProcessTree_T), treesize);
    for (i = 0; i < treesize; i++) {
        pid = atoi (globbuf.gl_pathv[i] + strlen ("/proc/"));
        if (!getdatafromproc (pid, &pt[i])) {
            continue;
        }
    }
    *reference = pt;
    globfree (& globbuf);
    return treesize;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="260" endline="264">
{
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="275" endline="286">
{
    pid = atoi (globbuf.gl_pathv[i] + strlen ("/proc/"));
    if (!getdatafromproc (pid, &pt[i])) {
        continue;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="280" endline="284">
{
    continue;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="306" endline="310">
{
    return getloadavg (loadv, nelem);
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="150" endline="225">
{
    register int pagesize;
    struct uvmexp vmm;
    int mib [2];
    size_t len;
    struct nlist nlst [] = {{"_bufspace"}, {NULL}};
    if (getuid () != 0) {
        return FALSE;
    }
    mib[0] = CTL_HW;
    mib[1] = HW_NCPU;
    len = sizeof (num_cpus);
    sysctl (mib, 2, & num_cpus, & len, NULL, 0);
    kvm_handle = kvm_open (NULL, NULL, NULL, O_RDONLY, "monit");
    if (kvm_handle == NULL) {
        return FALSE;
    }
    if (kvm_nlist (kvm_handle, nlst) < 0) {
        return FALSE;
    }
    pagesize = getpagesize ();
    pageshift = 0;
    while (pagesize > 1) {
        pageshift++;
        pagesize >>= 1;
    }
    pageshift -= LOG1024;
    len = sizeof (vmm);
    if (sysctl (mib, 2, &vmm, &len, NULL, 0) < 0) {
        return FALSE;
    }
    mem_kbyte_max = vmm.npages * vmm.pagesize * 1024;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="164" endline="168">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="180" endline="184">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="191" endline="193">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="201" endline="206">
{
    pageshift++;
    pagesize >>= 1;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="216" endline="219">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="228" endline="339">
{
    struct kinfo_proc *pinfo;
    struct plimit plimit;
    struct vmspace *vms;
    struct rusage rup;
    struct rusage crup;
    long stat_utime;
    long stat_stime;
    long stat_cutime;
    long stat_cstime;
    u_int64_t rss_lim;
    int count;
    pinfo = kvm_getprocs (kvm_handle, KERN_PROC_PID, p->pid, &count);
    if ((pinfo == NULL) || (count < 1)) {
        printf ("kvm_getprocs\n");
        return FALSE;
    }
    if (getrusage (RUSAGE_SELF, &rup) < 0) {
        return FALSE;
    }
    else {
        stat_utime = tv2sec (rup.ru_utime);
        stat_stime = tv2sec (rup.ru_stime);
    }
    p->cputime_prev = p->cputime;
    p->cputime = (int) ((stat_utime + stat_stime) / 1000);
    if (include_children) {
        if (getrusage (RUSAGE_CHILDREN, &crup) < 0) {
            return FALSE;
        }
        else {
            stat_cutime = tv2sec (crup.ru_utime);
            stat_cstime = tv2sec (crup.ru_stime);
        }
        p->cputime += (int) ((stat_cutime + stat_cstime) / 1000);
    }
    if (p->time_prev == 0.0) {
        p->cputime_prev = p->cputime;
    }
    if (kvm_read (kvm_handle, (unsigned long) pinfo[0].kp_proc.p_limit, (char *) &plimit, sizeof (plimit)) != sizeof (plimit)) {
        return FALSE;
    }
    rss_lim = (u_int64_t) (plimit.pl_rlimit[RLIMIT_RSS].rlim_cur);
    vms = &pinfo[0].kp_eproc.e_vm;
    p->mem_kbyte = (u_int64_t) pagetok (vms->vm_rssize);
    if (pinfo[0].kp_proc.p_stat == SZOMB) {
        p->status_flag |= PROCESS_ZOMBIE;
    }
    p->mem_percent = (int) ((double) p->mem_kbyte * 1000.0 / mem_kbyte_max);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="250" endline="255">
{
    printf ("kvm_getprocs\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="261" endline="263">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="265" endline="270">
{
    stat_utime = tv2sec (rup.ru_utime);
    stat_stime = tv2sec (rup.ru_stime);
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="278" endline="294">
{
    if (getrusage (RUSAGE_CHILDREN, &crup) < 0) {
        return FALSE;
    }
    else {
        stat_cutime = tv2sec (crup.ru_utime);
        stat_cstime = tv2sec (crup.ru_stime);
    }
    p->cputime += (int) ((stat_cutime + stat_cstime) / 1000);
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="281" endline="283">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="285" endline="290">
{
    stat_cutime = tv2sec (crup.ru_utime);
    stat_cstime = tv2sec (crup.ru_stime);
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="299" endline="303">
{
    p->cputime_prev = p->cputime;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="311" endline="315">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="329" endline="333">
{
    p->status_flag |= PROCESS_ZOMBIE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="349" endline="410">
{
    struct kinfo_proc *pinfo;
    struct plimit plimit;
    struct vmspace *vms;
    u_int64_t rss_lim;
    int i = 0;
    int treesize;
    ProcessTree_T *pt;
    pinfo = kvm_getprocs (kvm_handle, KERN_PROC_ALL, 0, &treesize);
    if ((pinfo == NULL) || (treesize < 1)) {
        return 0;
    }
    pt = xcalloc (sizeof (ProcessTree_T), treesize);
    for (i = 0; i < treesize; i++) {
        pt[i].pid = pinfo[i].kp_proc.p_pid;
        pt[i].ppid = pinfo[i].kp_eproc.e_ppid;
        if (kvm_read (kvm_handle, (unsigned long) pinfo[i].kp_proc.p_limit, (char *) &plimit, sizeof (plimit)) != sizeof (plimit)) {
            return FALSE;
        }
        rss_lim = (u_int64_t) (plimit.pl_rlimit[RLIMIT_RSS].rlim_cur);
        vms = &pinfo[i].kp_eproc.e_vm;
        pt[i].mem_kbyte = (u_int64_t) pagetok (vms->vm_rssize);
    }
    *reference = pt;
    return treesize;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="369" endline="373">
{
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="382" endline="404">
{
    pt[i].pid = pinfo[i].kp_proc.p_pid;
    pt[i].ppid = pinfo[i].kp_eproc.e_ppid;
    if (kvm_read (kvm_handle, (unsigned long) pinfo[i].kp_proc.p_limit, (char *) &plimit, sizeof (plimit)) != sizeof (plimit)) {
        return FALSE;
    }
    rss_lim = (u_int64_t) (plimit.pl_rlimit[RLIMIT_RSS].rlim_cur);
    vms = &pinfo[i].kp_eproc.e_vm;
    pt[i].mem_kbyte = (u_int64_t) pagetok (vms->vm_rssize);
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="390" endline="394">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="420" endline="424">
{
    return getloadavg (loadv, nelem);
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="90" endline="98">
{
    num_cpus = sysconf (_SC_NPROCESSORS_ONLN);
    mem_kbyte_max = (long) (((double) sysconf (_SC_PHYS_PAGES)) * ((double) sysconf (_SC_PAGESIZE)) / 1024.0);
    return (getuid () == 0);
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="101" endline="103">
{
    return t.tv_sec * 10 + t.tv_nsec / 100000000.0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="106" endline="178">
{
    char buf [4096];
    psinfo_t *psinfo = (psinfo_t *) &buf;
    pstatus_t *pstatus = (pstatus_t *) &buf;
    if (!read_proc_file (buf, 4096, "psinfo", p->pid)) {
        return FALSE;
    }
    if (psinfo->pr_nlwp == 0) {
        p->status_flag = PROCESS_ZOMBIE;
    }
    p->ppid = pstatus->pr_ppid;
    if (p->status_flag != PROCESS_ZOMBIE) {
        p->mem_percent = psinfo->pr_pctmem * 1000 / 0x8000;
        p->mem_kbyte = psinfo->pr_rssize;
        if (!read_proc_file (buf, 4096, "status", p->pid)) {
            return FALSE;
        }
        p->cputime_prev = p->cputime;
        p->cputime = (timestruc_to_tseconds (pstatus->pr_utime) + timestruc_to_tseconds (pstatus->pr_stime));
        if (include_children) {
            p->cputime += (timestruc_to_tseconds (pstatus->pr_cutime) + timestruc_to_tseconds (pstatus->pr_cstime));
        }
        if (p->time_prev == 0.0) {
            p->cputime_prev = p->cputime;
        }
    }
    else {
        p->cputime_prev = p->cputime = 0;
        p->mem_kbyte = 0;
        p->mem_percent = 0.0;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="113" endline="117">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="123" endline="127">
{
    p->status_flag = PROCESS_ZOMBIE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="132" endline="166">
{
    p->mem_percent = psinfo->pr_pctmem * 1000 / 0x8000;
    p->mem_kbyte = psinfo->pr_rssize;
    if (!read_proc_file (buf, 4096, "status", p->pid)) {
        return FALSE;
    }
    p->cputime_prev = p->cputime;
    p->cputime = (timestruc_to_tseconds (pstatus->pr_utime) + timestruc_to_tseconds (pstatus->pr_stime));
    if (include_children) {
        p->cputime += (timestruc_to_tseconds (pstatus->pr_cutime) + timestruc_to_tseconds (pstatus->pr_cstime));
    }
    if (p->time_prev == 0.0) {
        p->cputime_prev = p->cputime;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="140" endline="144">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="151" endline="156">
{
    p->cputime += (timestruc_to_tseconds (pstatus->pr_cutime) + timestruc_to_tseconds (pstatus->pr_cstime));
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="160" endline="164">
{
    p->cputime_prev = p->cputime;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="168" endline="174">
{
    p->cputime_prev = p->cputime = 0;
    p->mem_kbyte = 0;
    p->mem_percent = 0.0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="189" endline="240">
{
    int pid;
    int i;
    int treesize;
    ProcessTree_T *pt;
    glob_t globbuf;
    ASSERT (reference);
    if (glob ("/proc/[0-9]*", NULL, NULL, &globbuf) != 0) {
        return 0;
    }
    treesize = globbuf.gl_pathc;
    pt = xcalloc (sizeof (ProcessTree_T), treesize);
    for (i = 0; i < treesize; i++) {
        pid = atoi (globbuf.gl_pathv[i] + strlen ("/proc/"));
        if (!getdatafromproc (pid, &pt[i])) {
            continue;
        }
    }
    *reference = pt;
    globfree (& globbuf);
    return treesize;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="204" endline="208">
{
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="219" endline="230">
{
    pid = atoi (globbuf.gl_pathv[i] + strlen ("/proc/"));
    if (!getdatafromproc (pid, &pt[i])) {
        continue;
    }
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="224" endline="228">
{
    continue;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="250" endline="254">
{
    return getloadavg (loadv, nelem);
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="40" endline="46">
{
    mem_kbyte_max = 0;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="50" endline="54">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="66" endline="70">
{
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="82" endline="95">
{
    int i;
    for (i = 0; i < nelem; i++) {
        loadv[i] = 0.0;
    }
    return -1;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="87" endline="91">
{
    loadv[i] = 0.0;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="102" endline="106">
{
    return (init_process_info_sysdep ());
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="117" endline="156">
{
    ProcInfo_T pi;
    ProcessTree_T *leaf;
    ASSERT (s);
    pi = s->procinfo;
    pi->pid = pid;
    if (!get_process_info (pi))
        return FALSE;
    if ((leaf = findprocess (pid, pt, treesize)) != NULL) {
        pi->children = leaf->children_sum;
        pi->total_mem_kbyte = leaf->mem_kbyte_sum;
        if (mem_kbyte_max == 0) {
            pi->total_mem_percent = 0;
        }
        else {
            pi->total_mem_percent = (int) ((double) leaf->mem_kbyte_sum * 1000.0 / mem_kbyte_max);
        }
    }
    else {
        pi->children = 0;
        pi->total_mem_kbyte = pi->mem_kbyte;
        pi->total_mem_percent = pi->mem_percent;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="131" endline="145">
{
    pi->children = leaf->children_sum;
    pi->total_mem_kbyte = leaf->mem_kbyte_sum;
    if (mem_kbyte_max == 0) {
        pi->total_mem_percent = 0;
    }
    else {
        pi->total_mem_percent = (int) ((double) leaf->mem_kbyte_sum * 1000.0 / mem_kbyte_max);
    }
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="137" endline="139">
{
    pi->total_mem_percent = 0;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="141" endline="143">
{
    pi->total_mem_percent = (int) ((double) leaf->mem_kbyte_sum * 1000.0 / mem_kbyte_max);
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="147" endline="153">
{
    pi->children = 0;
    pi->total_mem_kbyte = pi->mem_kbyte;
    pi->total_mem_percent = pi->mem_percent;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="164" endline="170">
{
    if (-1 == getloadavg_sysdep (Run.loadavg, 3))
        return FALSE;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="178" endline="213">
{
    int i;
    if ((ptreesize = initprocesstree_sysdep (&ptree)) <= 0)
        return 0;
    for (i = 0; i < ptreesize; i++) {
        if (ptree[i].ppid == 0)
            continue;
        if (NULL == (ptree[i].parent = (ProcessTree_T *) findprocess (ptree[i].ppid, ptree, ptreesize))) {
            ptree[i].pid = 0;
            continue;
        }
        if (!connectchild ((ProcessTree_T *) ptree[i].parent, &ptree[i])) {
            ptree[i].pid = 0;
            continue;
        }
    }
    fillprocesstree ((ProcessTree_T *) findprocess (1, ptree, ptreesize));
    return ptreesize;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="186" endline="207">
{
    if (ptree[i].ppid == 0)
        continue;
    if (NULL == (ptree[i].parent = (ProcessTree_T *) findprocess (ptree[i].ppid, ptree, ptreesize))) {
        ptree[i].pid = 0;
        continue;
    }
    if (!connectchild ((ProcessTree_T *) ptree[i].parent, &ptree[i])) {
        ptree[i].pid = 0;
        continue;
    }
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="192" endline="197">
{
    ptree[i].pid = 0;
    continue;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="200" endline="205">
{
    ptree[i].pid = 0;
    continue;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="224" endline="239">
{
    int i;
    ASSERT (pt);
    if ((pid == 0) || (size <= 0))
        return NULL;
    for (i = 0; i < size; i++)
        if (pid == pt[i].pid)
            return &pt[i];
    return NULL;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="245" endline="262">
{
    int i;
    ASSERT (ptree);
    if (ptreesize <= 0)
        return;
    for (i = 0; i < ptreesize; i++)
        if (ptree[i].children != NULL)
            FREE (ptree[i].children);
    FREE (ptree);
    return;
}
</source>
<source file="examples/monit-4.2/protocols/default.c.ifdefed" startline="34" endline="40">
{
    ASSERT (s);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/dwp.c.ifdefed" startline="71" endline="107">
{
    int n;
    int status;
    char buf [STRLEN];
    char proto [STRLEN];
    ASSERT (s);
    if (socket_print (s, "HEAD / HTTP/1.1\r\n" "Connection: close\r\n\r\n") < 0) {
        log ("DWP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_readln (s, buf, sizeof (buf)) <= 0) {
        log ("DWP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    n = sscanf (buf, "%s %d", proto, &status);
    if (n != 2 || (status >= 400)) {
        log ("DWP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/dwp.c.ifdefed" startline="84" endline="87">
{
    log ("DWP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/dwp.c.ifdefed" startline="90" endline="93">
{
    log ("DWP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/dwp.c.ifdefed" startline="100" endline="103">
{
    log ("DWP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="48" endline="102">
{
    int status;
    char buf [STRLEN];
    char msg [STRLEN];
    ASSERT (s);
    if (!socket_readln (s, buf, STRLEN)) {
        log ("FTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d %s", & status, msg);
    if (status != 220) {
        log ("FTP error: %s\n", buf);
        return FALSE;
    }
    while (NULL != socket_readln (s, buf, STRLEN)) {
        if (starts_with (buf, "220"))
            continue;
    }
    if (socket_print (s, "QUIT\r\n") < 0) {
        log ("FTP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, buf, STRLEN) <= 0) {
        log ("FTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d %s", & status, msg);
    if (status != 221) {
        log ("FTP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="57" endline="60">
{
    log ("FTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="67" endline="70">
{
    log ("FTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="74" endline="76">
{
    if (starts_with (buf, "220"))
        continue;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="79" endline="82">
{
    log ("FTP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="85" endline="88">
{
    log ("FTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="95" endline="98">
{
    log ("FTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="54" endline="155">
{
    Generic_T g = NULL;
    char buf [STRLEN];
    ASSERT (s);
    if (socket_get_Port (s)) {
        g = ((Port_T) (socket_get_Port (s)))->generic;
    }
    while (g != NULL) {
        if (g->send != NULL) {
            if (socket_print (s, "%s", g->send) < 0) {
                log ("GENERIC: error sending data -- %s\n", STRERROR);
                return FALSE;
            }
            else {
                DEBUG ("GENERIC: successfully sent: '%s'\n", g -> send);
            }
        }
        else if (g->expect != NULL) {
            if (socket_readln (s, buf, STRLEN) == NULL) {
                log ("GENERIC: error receiving data -- %s\n", STRERROR);
                return FALSE;
            }
            if (strncmp (buf, g->expect, strlen (g->expect)) != 0) {
                log ("GENERIC: receiving unexpected data\n");
                return FALSE;
            }
            else {
                DEBUG ("GENERIC: successfully received: '%s'\n", buf);
            }
        }
        else {
            log ("GENERIC: unexpected strageness\n");
            return FALSE;
        }
        g = g->next;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="66" endline="68">
{
    g = ((Port_T) (socket_get_Port (s)))->generic;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="71" endline="151">
{
    if (g->send != NULL) {
        if (socket_print (s, "%s", g->send) < 0) {
            log ("GENERIC: error sending data -- %s\n", STRERROR);
            return FALSE;
        }
        else {
            DEBUG ("GENERIC: successfully sent: '%s'\n", g -> send);
        }
    }
    else if (g->expect != NULL) {
        if (socket_readln (s, buf, STRLEN) == NULL) {
            log ("GENERIC: error receiving data -- %s\n", STRERROR);
            return FALSE;
        }
        if (strncmp (buf, g->expect, strlen (g->expect)) != 0) {
            log ("GENERIC: receiving unexpected data\n");
            return FALSE;
        }
        else {
            DEBUG ("GENERIC: successfully received: '%s'\n", buf);
        }
    }
    else {
        log ("GENERIC: unexpected strageness\n");
        return FALSE;
    }
    g = g->next;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="73" endline="89">
{
    if (socket_print (s, "%s", g->send) < 0) {
        log ("GENERIC: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    else {
        DEBUG ("GENERIC: successfully sent: '%s'\n", g -> send);
    }
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="76" endline="81">
{
    log ("GENERIC: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="83" endline="87">
{
    DEBUG ("GENERIC: successfully sent: '%s'\n", g -> send);
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="91" endline="140">
{
    if (socket_readln (s, buf, STRLEN) == NULL) {
        log ("GENERIC: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    if (strncmp (buf, g->expect, strlen (g->expect)) != 0) {
        log ("GENERIC: receiving unexpected data\n");
        return FALSE;
    }
    else {
        DEBUG ("GENERIC: successfully received: '%s'\n", buf);
    }
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="94" endline="99">
{
    log ("GENERIC: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="125" endline="130">
{
    log ("GENERIC: receiving unexpected data\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="132" endline="136">
{
    DEBUG ("GENERIC: successfully received: '%s'\n", buf);
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="142" endline="148">
{
    log ("GENERIC: unexpected strageness\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="87" endline="123">
{
    char host [STRLEN];
    char *request = NULL;
    char *request_checksum = NULL;
    int request_hashtype = 0;
    ASSERT (s);
    if (socket_get_Port (s)) {
        request = ((Port_T) (socket_get_Port (s)))->request;
        request_checksum = ((Port_T) (socket_get_Port (s)))->request_checksum;
        request_hashtype = ((Port_T) (socket_get_Port (s)))->request_hashtype;
    }
    request = request ? request : "/";
    if (socket_print (s, "GET %s HTTP/1.1\r\n" "Host: %s\r\n" "Accept: */*\r\n" "User-Agent: %s/%s\r\n" "Connection: close\r\n\r\n", request, get_host_header (s, host), prog, VERSION) < 0) {
        log ("HTTP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (request_checksum) {
        return check_request_checksum (s, request_checksum, request_hashtype);
    }
    return check_request (s);
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="97" endline="101">
{
    request = ((Port_T) (socket_get_Port (s)))->request;
    request_checksum = ((Port_T) (socket_get_Port (s)))->request_checksum;
    request_hashtype = ((Port_T) (socket_get_Port (s)))->request_hashtype;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="111" endline="114">
{
    log ("HTTP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="117" endline="119">
{
    return check_request_checksum (s, request_checksum, request_hashtype);
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="134" endline="154">
{
    if (!strcmp (LOCALHOST, socket_get_remote_host (s)) || inet_aton (socket_get_remote_host (s), NULL)) {
        *hostbuf = 0;
    }
    else {
        snprintf (hostbuf, STRLEN, "%s:%d", socket_get_remote_host (s), socket_get_remote_port (s));
    }
    return hostbuf;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="138" endline="142">
{
    *hostbuf = 0;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="144" endline="150">
{
    snprintf (hostbuf, STRLEN, "%s:%d", socket_get_remote_host (s), socket_get_remote_port (s));
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="163" endline="189">
{
    int n;
    int status;
    char buf [STRLEN];
    char msg [STRLEN];
    char proto [STRLEN];
    if (!socket_readln (s, buf, sizeof (buf))) {
        log ("HTTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    n = sscanf (buf, "%s %d %s", proto, &status, msg);
    if (n != 3 || (status >= 400)) {
        log ("HTTP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="172" endline="175">
{
    log ("HTTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="182" endline="185">
{
    log ("HTTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="203" endline="302">
{
    int i;
    char line [STRLEN];
    long content_length = 0;
    if (!check_request (s))
        return FALSE;
    while (NULL != socket_readln (s, line, STRLEN)) {
        if (starts_with (line, "\r\n") || starts_with (line, "\n"))
            break;
        if (starts_with (line, "Content-Length")) {
            if (1 != sscanf (line, "%*s%*[: ]%ld", &content_length)) {
                chomp (line, STRLEN);
                log ("HTTP error: parsing Content-Length response header '%s'\n", line);
                return FALSE;
            }
        }
    }
    if (!content_length) {
        DEBUG ("HTTP warning: Response does not contain Content-Length\n");
    }
    else {
        int n;
        char *r;
        long size;
        char result [STRLEN];
        char buf [READ_SIZE];
        unsigned char hash [STRLEN];
        int keylength = 0;
        switch (hashtype) {
        case HASH_MD5 :
            {
                struct md5_ctx ctx;
                md5_init_ctx (& ctx);
                while (content_length > 0) {
                    size = content_length > READ_SIZE ? READ_SIZE : content_length;
                    n = socket_read (s, buf, size);
                    if (n < 0)
                        break;
                    md5_process_bytes (buf, n, & ctx);
                    content_length -= n;
                }
                md5_finish_ctx (& ctx, hash);
                keylength = 16;
                break;
            }
        case HASH_SHA1 :
            {
                struct sha_ctx ctx;
                sha_init_ctx (& ctx);
                while (content_length > 0) {
                    size = content_length > READ_SIZE ? READ_SIZE : content_length;
                    n = socket_read (s, buf, size);
                    if (n < 0)
                        break;
                    sha_process_bytes (buf, n, & ctx);
                    content_length -= n;
                }
                sha_finish_ctx (& ctx, hash);
                keylength = 20;
                break;
            }
        default :
            DEBUG ("HTTP warning: Unknown hash type\n");
            return FALSE;
        }
        r = result;
        for (i = 0; i < keylength; ++i)
            r += snprintf (r, STRLEN -(r - result), "%02x", hash[i]);
        if (strncasecmp (result, checksum, keylength *2) != 0) {
            DEBUG ("HTTP warning: Document checksum mismatch\n");
            return FALSE;
        }
        else {
            DEBUG ("HTTP: Succeeded testing document checksum\n");
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="213" endline="226">
{
    if (starts_with (line, "\r\n") || starts_with (line, "\n"))
        break;
    if (starts_with (line, "Content-Length")) {
        if (1 != sscanf (line, "%*s%*[: ]%ld", &content_length)) {
            chomp (line, STRLEN);
            log ("HTTP error: parsing Content-Length response header '%s'\n", line);
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="217" endline="225">
{
    if (1 != sscanf (line, "%*s%*[: ]%ld", &content_length)) {
        chomp (line, STRLEN);
        log ("HTTP error: parsing Content-Length response header '%s'\n", line);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="220" endline="224">
{
    chomp (line, STRLEN);
    log ("HTTP error: parsing Content-Length response header '%s'\n", line);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="229" endline="233">
{
    DEBUG ("HTTP warning: Response does not contain Content-Length\n");
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="235" endline="298">
{
    int n;
    char *r;
    long size;
    char result [STRLEN];
    char buf [READ_SIZE];
    unsigned char hash [STRLEN];
    int keylength = 0;
    switch (hashtype) {
    case HASH_MD5 :
        {
            struct md5_ctx ctx;
            md5_init_ctx (& ctx);
            while (content_length > 0) {
                size = content_length > READ_SIZE ? READ_SIZE : content_length;
                n = socket_read (s, buf, size);
                if (n < 0)
                    break;
                md5_process_bytes (buf, n, & ctx);
                content_length -= n;
            }
            md5_finish_ctx (& ctx, hash);
            keylength = 16;
            break;
        }
    case HASH_SHA1 :
        {
            struct sha_ctx ctx;
            sha_init_ctx (& ctx);
            while (content_length > 0) {
                size = content_length > READ_SIZE ? READ_SIZE : content_length;
                n = socket_read (s, buf, size);
                if (n < 0)
                    break;
                sha_process_bytes (buf, n, & ctx);
                content_length -= n;
            }
            sha_finish_ctx (& ctx, hash);
            keylength = 20;
            break;
        }
    default :
        DEBUG ("HTTP warning: Unknown hash type\n");
        return FALSE;
    }
    r = result;
    for (i = 0; i < keylength; ++i)
        r += snprintf (r, STRLEN -(r - result), "%02x", hash[i]);
    if (strncasecmp (result, checksum, keylength *2) != 0) {
        DEBUG ("HTTP warning: Document checksum mismatch\n");
        return FALSE;
    }
    else {
        DEBUG ("HTTP: Succeeded testing document checksum\n");
    }
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="246" endline="282">
{
case HASH_MD5 :
    {
        struct md5_ctx ctx;
        md5_init_ctx (& ctx);
        while (content_length > 0) {
            size = content_length > READ_SIZE ? READ_SIZE : content_length;
            n = socket_read (s, buf, size);
            if (n < 0)
                break;
            md5_process_bytes (buf, n, & ctx);
            content_length -= n;
        }
        md5_finish_ctx (& ctx, hash);
        keylength = 16;
        break;
    }
case HASH_SHA1 :
    {
        struct sha_ctx ctx;
        sha_init_ctx (& ctx);
        while (content_length > 0) {
            size = content_length > READ_SIZE ? READ_SIZE : content_length;
            n = socket_read (s, buf, size);
            if (n < 0)
                break;
            sha_process_bytes (buf, n, & ctx);
            content_length -= n;
        }
        sha_finish_ctx (& ctx, hash);
        keylength = 20;
        break;
    }
default :
    DEBUG ("HTTP warning: Unknown hash type\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="248" endline="262">
{
    struct md5_ctx ctx;
    md5_init_ctx (& ctx);
    while (content_length > 0) {
        size = content_length > READ_SIZE ? READ_SIZE : content_length;
        n = socket_read (s, buf, size);
        if (n < 0)
            break;
        md5_process_bytes (buf, n, & ctx);
        content_length -= n;
    }
    md5_finish_ctx (& ctx, hash);
    keylength = 16;
    break;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="252" endline="258">
{
    size = content_length > READ_SIZE ? READ_SIZE : content_length;
    n = socket_read (s, buf, size);
    if (n < 0)
        break;
    md5_process_bytes (buf, n, & ctx);
    content_length -= n;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="264" endline="278">
{
    struct sha_ctx ctx;
    sha_init_ctx (& ctx);
    while (content_length > 0) {
        size = content_length > READ_SIZE ? READ_SIZE : content_length;
        n = socket_read (s, buf, size);
        if (n < 0)
            break;
        sha_process_bytes (buf, n, & ctx);
        content_length -= n;
    }
    sha_finish_ctx (& ctx, hash);
    keylength = 20;
    break;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="268" endline="274">
{
    size = content_length > READ_SIZE ? READ_SIZE : content_length;
    n = socket_read (s, buf, size);
    if (n < 0)
        break;
    sha_process_bytes (buf, n, & ctx);
    content_length -= n;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="289" endline="292">
{
    DEBUG ("HTTP warning: Document checksum mismatch\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="294" endline="296">
{
    DEBUG ("HTTP: Succeeded testing document checksum\n");
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="51" endline="96">
{
    char buf [STRLEN];
    const char *ok = "* OK";
    const char *bye = "* BYE";
    ASSERT (s);
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("IMAP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    if (strncasecmp (buf, ok, strlen (ok)) != 0) {
        log ("IMAP error: %s\n", buf);
        return FALSE;
    }
    if (socket_print (s, "001 LOGOUT\r\n") < 0) {
        log ("IMAP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("IMAP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    if (strncasecmp (buf, bye, strlen (bye)) != 0) {
        log ("IMAP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="61" endline="64">
{
    log ("IMAP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="69" endline="72">
{
    log ("IMAP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="75" endline="78">
{
    log ("IMAP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="81" endline="84">
{
    log ("IMAP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="89" endline="92">
{
    log ("IMAP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap2.c.ifdefed" startline="57" endline="157">
{
    unsigned char buf [STRLEN];
    unsigned char request [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x60, 0x07, 0x02, 0x01, 0x02, 0x04, 0x00, 0x80, 0x00};
    unsigned char response [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x61, 0x07, 0x0a, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};
    unsigned char unbind [7] = {0x30, 0x05, 0x02, 0x01, 0x01, 0x42, 0x00};
    ASSERT (s);
    if (socket_write (s, (unsigned char *) request, sizeof (request)) < 0) {
        log ("LDAP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, (unsigned char *) buf, sizeof (buf)) <= 0) {
        log ("LDAP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    if (memcmp ((unsigned char *) buf, (unsigned char *) response, sizeof (response))) {
        log ("LDAP: anonymous bind failed\n");
        return FALSE;
    }
    if (socket_write (s, (unsigned char *) unbind, sizeof (unbind)) < 0) {
        log ("LDAP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap2.c.ifdefed" startline="130" endline="133">
{
    log ("LDAP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap2.c.ifdefed" startline="136" endline="139">
{
    log ("LDAP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap2.c.ifdefed" startline="144" endline="147">
{
    log ("LDAP: anonymous bind failed\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap2.c.ifdefed" startline="150" endline="153">
{
    log ("LDAP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap3.c.ifdefed" startline="57" endline="157">
{
    unsigned char buf [STRLEN];
    unsigned char request [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x60, 0x07, 0x02, 0x01, 0x03, 0x04, 0x00, 0x80, 0x00};
    unsigned char response [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x61, 0x07, 0x0a, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};
    unsigned char unbind [7] = {0x30, 0x05, 0x02, 0x01, 0x01, 0x42, 0x00};
    ASSERT (s);
    if (socket_write (s, (unsigned char *) request, sizeof (request)) < 0) {
        log ("LDAP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, (unsigned char *) buf, sizeof (buf)) <= 0) {
        log ("LDAP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    if (memcmp ((unsigned char *) buf, (unsigned char *) response, sizeof (response))) {
        log ("LDAP: anonymous bind failed\n");
        return FALSE;
    }
    if (socket_write (s, (unsigned char *) unbind, sizeof (unbind)) < 0) {
        log ("LDAP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap3.c.ifdefed" startline="130" endline="133">
{
    log ("LDAP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap3.c.ifdefed" startline="136" endline="139">
{
    log ("LDAP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap3.c.ifdefed" startline="144" endline="147">
{
    log ("LDAP: anonymous bind failed\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ldap3.c.ifdefed" startline="150" endline="153">
{
    log ("LDAP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="47" endline="95">
{
    int status;
    char buf [STRLEN];
    char msg [STRLEN];
    ASSERT (s);
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("NNTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d %s", & status, msg);
    if (status != 200) {
        log ("NNTP error: %s\n", buf);
        return FALSE;
    }
    if (socket_print (s, "QUIT\r\n") < 0) {
        log ("NNTP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("NNTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d %s", & status, msg);
    if (status != 205) {
        log ("NNTP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="56" endline="59">
{
    log ("NNTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="66" endline="69">
{
    log ("NNTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="72" endline="75">
{
    log ("NNTP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="78" endline="81">
{
    log ("NNTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="88" endline="91">
{
    log ("NNTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="51" endline="94">
{
    char buf [STRLEN];
    const char *ok = "+OK";
    ASSERT (s);
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("POP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    if (strncasecmp (buf, ok, strlen (ok)) != 0) {
        log ("POP error: %s\n", buf);
        return FALSE;
    }
    if (socket_print (s, "QUIT\r\n") < 0) {
        log ("POP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("POP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    if (strncasecmp (buf, ok, strlen (ok)) != 0) {
        log ("POP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="59" endline="62">
{
    log ("POP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="67" endline="70">
{
    log ("POP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="73" endline="76">
{
    log ("POP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="79" endline="82">
{
    log ("POP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="87" endline="90">
{
    log ("POP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="69" endline="86">
{
    FREE (mydefault);
    FREE (myhttp);
    FREE (myftp);
    FREE (mysmtp);
    FREE (mypop);
    FREE (myimap);
    FREE (mynntp);
    FREE (myssh);
    FREE (mydwp);
    FREE (myldap2);
    FREE (myldap3);
    FREE (myrdate);
    FREE (myrsync);
    FREE (mygeneric);
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="90" endline="101">
{
    if (mydefault == NULL) {
        NEW (mydefault);
        mydefault->name = "DEFAULT";
        mydefault->check = check_default;
    }
    return mydefault;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="93" endline="97">
{
    NEW (mydefault);
    mydefault->name = "DEFAULT";
    mydefault->check = check_default;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="105" endline="116">
{
    if (myhttp == NULL) {
        NEW (myhttp);
        myhttp->name = "HTTP";
        myhttp->check = check_http;
    }
    return myhttp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="108" endline="112">
{
    NEW (myhttp);
    myhttp->name = "HTTP";
    myhttp->check = check_http;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="120" endline="131">
{
    if (myftp == NULL) {
        NEW (myftp);
        myftp->name = "FTP";
        myftp->check = check_ftp;
    }
    return myftp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="123" endline="127">
{
    NEW (myftp);
    myftp->name = "FTP";
    myftp->check = check_ftp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="135" endline="146">
{
    if (mysmtp == NULL) {
        NEW (mysmtp);
        mysmtp->name = "SMTP";
        mysmtp->check = check_smtp;
    }
    return mysmtp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="138" endline="142">
{
    NEW (mysmtp);
    mysmtp->name = "SMTP";
    mysmtp->check = check_smtp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="150" endline="161">
{
    if (mypop == NULL) {
        NEW (mypop);
        mypop->name = "POP";
        mypop->check = check_pop;
    }
    return mypop;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="153" endline="157">
{
    NEW (mypop);
    mypop->name = "POP";
    mypop->check = check_pop;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="165" endline="176">
{
    if (myimap == NULL) {
        NEW (myimap);
        myimap->name = "IMAP";
        myimap->check = check_imap;
    }
    return myimap;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="168" endline="172">
{
    NEW (myimap);
    myimap->name = "IMAP";
    myimap->check = check_imap;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="180" endline="191">
{
    if (mynntp == NULL) {
        NEW (mynntp);
        mynntp->name = "NNTP";
        mynntp->check = check_nntp;
    }
    return mynntp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="183" endline="187">
{
    NEW (mynntp);
    mynntp->name = "NNTP";
    mynntp->check = check_nntp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="195" endline="206">
{
    if (myssh == NULL) {
        NEW (myssh);
        myssh->name = "SSH";
        myssh->check = check_ssh;
    }
    return myssh;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="198" endline="202">
{
    NEW (myssh);
    myssh->name = "SSH";
    myssh->check = check_ssh;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="210" endline="221">
{
    if (mydwp == NULL) {
        NEW (mydwp);
        mydwp->name = "DWP";
        mydwp->check = check_dwp;
    }
    return mydwp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="213" endline="217">
{
    NEW (mydwp);
    mydwp->name = "DWP";
    mydwp->check = check_dwp;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="225" endline="236">
{
    if (myldap2 == NULL) {
        NEW (myldap2);
        myldap2->name = "LDAP2";
        myldap2->check = check_ldap2;
    }
    return myldap2;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="228" endline="232">
{
    NEW (myldap2);
    myldap2->name = "LDAP2";
    myldap2->check = check_ldap2;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="240" endline="251">
{
    if (myldap3 == NULL) {
        NEW (myldap3);
        myldap3->name = "LDAP3";
        myldap3->check = check_ldap3;
    }
    return myldap3;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="243" endline="247">
{
    NEW (myldap3);
    myldap3->name = "LDAP3";
    myldap3->check = check_ldap3;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="255" endline="266">
{
    if (myrdate == NULL) {
        NEW (myrdate);
        myrdate->name = "RDATE";
        myrdate->check = check_rdate;
    }
    return myrdate;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="258" endline="262">
{
    NEW (myrdate);
    myrdate->name = "RDATE";
    myrdate->check = check_rdate;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="270" endline="281">
{
    if (myrsync == NULL) {
        NEW (myrsync);
        myrsync->name = "RSYNC";
        myrsync->check = check_rsync;
    }
    return myrsync;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="273" endline="277">
{
    NEW (myrsync);
    myrsync->name = "RSYNC";
    myrsync->check = check_rsync;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="284" endline="295">
{
    if (myrsync == NULL) {
        NEW (myrsync);
        myrsync->name = "generic";
        myrsync->check = check_generic;
    }
    return myrsync;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="287" endline="291">
{
    NEW (myrsync);
    myrsync->name = "generic";
    myrsync->check = check_generic;
}
</source>
<source file="examples/monit-4.2/protocols/rdate.c.ifdefed" startline="57" endline="97">
{
    time_t delta;
    time_t rdatet;
    time_t systemt;
    ASSERT (s);
    if (socket_read (s, (char *) &rdatet, sizeof (time_t)) <= 0) {
        log ("RDATE: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    rdatet = ntohl (rdatet) - TIME_OFFSET;
    if ((systemt = time (NULL)) == -1) {
        log ("RDATE error: cannot get system time -- %s\n", STRERROR);
        return FALSE;
    }
    if (rdatet >= systemt)
        delta = (rdatet - systemt);
    else
        delta = (systemt - rdatet);
    if (delta > TIME_TOLERANCE) {
        log ("RDATE error: time does not match system time -- %s\n", STRERROR);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/rdate.c.ifdefed" startline="70" endline="73">
{
    log ("RDATE: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rdate.c.ifdefed" startline="79" endline="82">
{
    log ("RDATE error: cannot get system time -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rdate.c.ifdefed" startline="90" endline="93">
{
    log ("RDATE error: time does not match system time -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="48" endline="105">
{
    char buf [STRLEN];
    char msg [STRLEN];
    int rc, version;
    char *rsyncd = "@RSYNCD:";
    ASSERT (s);
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("RSYNC: did not see server greeting  -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    rc = sscanf (buf, "%s %d", msg, &version);
    if ((rc == EOF) || (rc == 0)) {
        log ("RSYNC: server greeting parse error %s\n", buf);
        return FALSE;
    }
    if (strncasecmp (msg, rsyncd, strlen (rsyncd)) != 0) {
        log ("RSYNC: server sent \"%s\" rather than greeting\n", buf);
        return FALSE;
    }
    if (snprintf (buf, sizeof (buf), "%s %d\n", rsyncd, version) < 0) {
        log ("RSYNC: string copy error -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_write (s, buf, strlen (buf)) <= 0) {
        log ("RSYNC: error sending identification string -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_print (s, "#list\n") < 0) {
        log ("RSYNC: error sending writing #list command  -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("RSYNC: did not see server answer  -- %s\n", STRERROR);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="58" endline="61">
{
    log ("RSYNC: did not see server greeting  -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="68" endline="71">
{
    log ("RSYNC: server greeting parse error %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="74" endline="77">
{
    log ("RSYNC: server sent \"%s\" rather than greeting\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="80" endline="83">
{
    log ("RSYNC: string copy error -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="86" endline="89">
{
    log ("RSYNC: error sending identification string -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="92" endline="95">
{
    log ("RSYNC: error sending writing #list command  -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="98" endline="101">
{
    log ("RSYNC: did not see server answer  -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="48" endline="96">
{
    int status;
    char buf [STRLEN];
    char msg [STRLEN];
    ASSERT (s);
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("SMTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d %s", & status, msg);
    if (status != 220) {
        log ("SMTP error: %s\n", buf);
        return FALSE;
    }
    if (socket_print (s, "QUIT\r\n") < 0) {
        log ("SMTP: error sending data -- %s\n", STRERROR);
        return FALSE;
    }
    if (socket_read (s, buf, sizeof (buf)) <= 0) {
        log ("SMTP: error receiving data -- %s\n", STRERROR);
        return FALSE;
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d %s", & status, msg);
    if (status != 221) {
        log ("SMTP error: %s\n", buf);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="57" endline="60">
{
    log ("SMTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="67" endline="70">
{
    log ("SMTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="73" endline="76">
{
    log ("SMTP: error sending data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="79" endline="82">
{
    log ("SMTP: error receiving data -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="89" endline="92">
{
    log ("SMTP error: %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ssh.c.ifdefed" startline="45" endline="73">
{
    int n;
    char buf [STRLEN];
    ASSERT (s);
    if ((n = socket_read (s, buf, sizeof (buf))) <= 0) {
        log ("SSH: error receiving identification string -- %s\n", STRERROR);
        return FALSE;
    }
    if (!starts_with (buf, "SSH-")) {
        log ("SSH: protocol error %s\n", buf);
        return FALSE;
    }
    if (socket_write (s, buf, n) <= 0) {
        log ("SSH: error sending identification string -- %s\n", STRERROR);
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/protocols/ssh.c.ifdefed" startline="53" endline="56">
{
    log ("SSH: error receiving identification string -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ssh.c.ifdefed" startline="59" endline="62">
{
    log ("SSH: protocol error %s\n", buf);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/protocols/ssh.c.ifdefed" startline="66" endline="69">
{
    log ("SSH: error sending identification string -- %s\n", STRERROR);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="103" endline="168">
{
    Mail_T m;
    SendMail_T S;
    char *now = get_RFC822date (NULL);
    ASSERT (mail);
    if (sigsetjmp (S.error, TRUE)) {
        goto exit;
    }
    open_server (& S);
    if (gethostname (S.localhost, sizeof (S.localhost)) < 0) {
        snprintf (S.localhost, sizeof (S.localhost), "%s", LOCALHOST);
    }
    do_status (& S);
    do_send (& S, "HELO %s\r\n", S.localhost);
    do_status (& S);
    for (m = mail; m; m = m->next) {
        do_send (& S, "MAIL FROM: <%s>\r\n", m -> from);
        do_status (& S);
        do_send (& S, "RCPT TO: <%s>\r\n", m -> to);
        do_status (& S);
        do_send (& S, "DATA\r\n");
        do_status (& S);
        do_send (& S, "From: %s\r\n", m -> from);
        do_send (& S, "To: %s\r\n", m -> to);
        do_send (& S, "Subject: %s\r\n", m -> subject);
        do_send (& S, "Date: %s\r\n", now);
        do_send (& S, "X-Mailer: %s %s\r\n", prog, VERSION);
        do_send (& S, "Mime-Version: 1.0\r\n");
        do_send (& S, "Content-Type: text/plain; charset=\"iso-8859-1\"\r\n");
        do_send (& S, "Content-Transfer-Encoding: quoted-printable\r\n");
        do_send (& S, "\r\n");
        do_send (& S, "%s\r\n", m -> message);
        if (m->opt_message) {
            do_send (& S, "%s\r\n", m -> opt_message);
        }
        do_send (& S, ".\r\n");
        do_status (& S);
    }
    do_send (& S, "QUIT\r\n");
exit :
    FREE (now);
    if (S.socket) {
        socket_free (& S.socket);
    }
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="112" endline="114">
{
    goto exit;
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="119" endline="121">
{
    snprintf (S.localhost, sizeof (S.localhost), "%s", LOCALHOST);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="132" endline="157">
{
    do_send (& S, "MAIL FROM: <%s>\r\n", m -> from);
    do_status (& S);
    do_send (& S, "RCPT TO: <%s>\r\n", m -> to);
    do_status (& S);
    do_send (& S, "DATA\r\n");
    do_status (& S);
    do_send (& S, "From: %s\r\n", m -> from);
    do_send (& S, "To: %s\r\n", m -> to);
    do_send (& S, "Subject: %s\r\n", m -> subject);
    do_send (& S, "Date: %s\r\n", now);
    do_send (& S, "X-Mailer: %s %s\r\n", prog, VERSION);
    do_send (& S, "Mime-Version: 1.0\r\n");
    do_send (& S, "Content-Type: text/plain; charset=\"iso-8859-1\"\r\n");
    do_send (& S, "Content-Transfer-Encoding: quoted-printable\r\n");
    do_send (& S, "\r\n");
    do_send (& S, "%s\r\n", m -> message);
    if (m->opt_message) {
        do_send (& S, "%s\r\n", m -> opt_message);
    }
    do_send (& S, ".\r\n");
    do_status (& S);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="151" endline="153">
{
    do_send (& S, "%s\r\n", m -> opt_message);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="164" endline="166">
{
    socket_free (& S.socket);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="175" endline="197">
{
    long len;
    va_list ap;
    char *msg = NULL;
    va_start (ap, s);
    msg = format (s, ap, &len);
    va_end (ap);
    if (socket_write (S->socket, msg, strlen (msg)) <= 0) {
        FREE (msg);
        log ("Sendmail: error sending data to the server '%s' -- %s\n", S -> server, STRERROR);
        siglongjmp (S -> error, TRUE);
    }
    FREE (msg);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="186" endline="193">
{
    FREE (msg);
    log ("Sendmail: error sending data to the server '%s' -- %s\n", S -> server, STRERROR);
    siglongjmp (S -> error, TRUE);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="201" endline="226">
{
    int status;
    char buf [STRLEN];
    if (socket_read (S->socket, buf, sizeof (buf)) <= 0) {
        log ("Sendmail: error receiving data from the mailserver '%s' -- %s\n", S -> server, STRERROR);
        siglongjmp (S -> error, TRUE);
    }
    chomp (buf, STRLEN);
    sscanf (buf, "%d", & status);
    if (status >= 400) {
        log ("Sendmail error: %s\n", buf);
        siglongjmp (S -> error, TRUE);
    }
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="207" endline="213">
{
    log ("Sendmail: error receiving data from the mailserver '%s' -- %s\n", S -> server, STRERROR);
    siglongjmp (S -> error, TRUE);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="219" endline="224">
{
    log ("Sendmail error: %s\n", buf);
    siglongjmp (S -> error, TRUE);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="230" endline="259">
{
    MailServer_T mta = Run.mailservers;
    S->server = mta ? mta->host : LOCALHOST;
    do {
        S->socket = socket_create_t (S->server, SMTP_PORT, SOCKET_TCP, FALSE, Run.mailserver_timeout);
        if (S->socket)
            break;
        log ("Cannot open a connection to the mailserver '%s' -- %s\n", S -> server, STRERROR);
        if (mta && (mta = mta->next)) {
            S->server = mta->host;
            log ("Trying the next mail server '%s'\n", S -> server);
            continue;
        }
        else {
            log ("No mail servers are available, aborting alert\n");
            siglongjmp (S -> error, TRUE);
        }
    }
    while (TRUE);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="237" endline="256">
{
    S->socket = socket_create_t (S->server, SMTP_PORT, SOCKET_TCP, FALSE, Run.mailserver_timeout);
    if (S->socket)
        break;
    log ("Cannot open a connection to the mailserver '%s' -- %s\n", S -> server, STRERROR);
    if (mta && (mta = mta->next)) {
        S->server = mta->host;
        log ("Trying the next mail server '%s'\n", S -> server);
        continue;
    }
    else {
        log ("No mail servers are available, aborting alert\n");
        siglongjmp (S -> error, TRUE);
    }
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="245" endline="249">
{
    S->server = mta->host;
    log ("Trying the next mail server '%s'\n", S -> server);
    continue;
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="251" endline="255">
{
    log ("No mail servers are available, aborting alert\n");
    siglongjmp (S -> error, TRUE);
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="53" endline="77">
{
    struct sigaction act, oact;
    act.sa_handler = func;
    sigemptyset (& act.sa_mask);
    act.sa_flags = 0;
    if (signo == SIGALRM) {
    }
    else {
    }
    if (sigaction (signo, &act, &oact) < 0)
        return (SIG_ERR);
    return (oact.sa_handler);
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="61" endline="65">
{
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="67" endline="71">
{
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="86" endline="95">
{
    sigemptyset (new);
    sigaddset (new, SIGHUP);
    sigaddset (new, SIGINT);
    sigaddset (new, SIGUSR1);
    sigaddset (new, SIGTERM);
    pthread_sigmask (SIG_BLOCK, new, old);
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="103" endline="107">
{
    pthread_sigmask (SIG_SETMASK, old, NULL);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="94" endline="98">
{
    return socket_create_t (host, port, type, use_ssl, NET_TIMEOUT);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="107" endline="165">
{
    int s;
    Socket_T S;
    Port_T p = port;
    ASSERT (port);
    if ((s = create_generic_socket (p)) != -1) {
        NEW (S);
        S->socket = s;
        S->type = p->type;
        S->port = p->port;
        S->timeout = p->timeout;
        S->connection_type = TYPE_LOCAL;
        if (p->family == AF_UNIX) {
            S->host = xstrdup (LOCALHOST);
        }
        else {
            S->host = xstrdup (p->hostname);
        }
        if (p->SSL.use_ssl) {
            if (!(S->ssl = new_ssl_connection (NULL, p->SSL.version))) {
                goto ssl_error;
            }
            if (!embed_ssl_socket (S->ssl, S->socket)) {
                goto ssl_error;
            }
            if (p->SSL.certmd5) {
                if (!check_ssl_md5sum (S->ssl, p->SSL.certmd5)) {
                    goto ssl_error;
                }
            }
        }
        S->Port = port;
        return S;
    ssl_error :
        socket_free (&S);
        return NULL;
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="116" endline="161">
{
    NEW (S);
    S->socket = s;
    S->type = p->type;
    S->port = p->port;
    S->timeout = p->timeout;
    S->connection_type = TYPE_LOCAL;
    if (p->family == AF_UNIX) {
        S->host = xstrdup (LOCALHOST);
    }
    else {
        S->host = xstrdup (p->hostname);
    }
    if (p->SSL.use_ssl) {
        if (!(S->ssl = new_ssl_connection (NULL, p->SSL.version))) {
            goto ssl_error;
        }
        if (!embed_ssl_socket (S->ssl, S->socket)) {
            goto ssl_error;
        }
        if (p->SSL.certmd5) {
            if (!check_ssl_md5sum (S->ssl, p->SSL.certmd5)) {
                goto ssl_error;
            }
        }
    }
    S->Port = port;
    return S;
ssl_error :
    socket_free (&S);
    return NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="126" endline="128">
{
    S->host = xstrdup (LOCALHOST);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="130" endline="132">
{
    S->host = xstrdup (p->hostname);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="135" endline="151">
{
    if (!(S->ssl = new_ssl_connection (NULL, p->SSL.version))) {
        goto ssl_error;
    }
    if (!embed_ssl_socket (S->ssl, S->socket)) {
        goto ssl_error;
    }
    if (p->SSL.certmd5) {
        if (!check_ssl_md5sum (S->ssl, p->SSL.certmd5)) {
            goto ssl_error;
        }
    }
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="137" endline="139">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="141" endline="143">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="145" endline="150">
{
    if (!check_ssl_md5sum (S->ssl, p->SSL.certmd5)) {
        goto ssl_error;
    }
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="147" endline="149">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="181" endline="228">
{
    int s;
    Socket_T S;
    int proto = type == SOCKET_UDP ? SOCK_DGRAM : SOCK_STREAM;
    ASSERT (host);
    ASSERT ((type == SOCKET_UDP) || (type == SOCKET_TCP));
    if (use_ssl) {
        ASSERT (type == SOCKET_TCP);
    }
    ASSERT (timeout > 0);
    if ((s = create_socket (host, port, proto, timeout)) != -1) {
        NEW (S);
        S->socket = s;
        S->port = port;
        S->type = proto;
        S->timeout = timeout;
        S->host = xstrdup (host);
        S->connection_type = TYPE_LOCAL;
        if (use_ssl) {
            if (!(S->ssl = new_ssl_connection (NULL, SSL_VERSION_AUTO))) {
                goto ssl_error;
            }
            if (!embed_ssl_socket (S->ssl, S->socket)) {
                goto ssl_error;
            }
        }
        return S;
    ssl_error :
        socket_free (&S);
        return NULL;
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="190" endline="192">
{
    ASSERT (type == SOCKET_TCP);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="196" endline="224">
{
    NEW (S);
    S->socket = s;
    S->port = port;
    S->type = proto;
    S->timeout = timeout;
    S->host = xstrdup (host);
    S->connection_type = TYPE_LOCAL;
    if (use_ssl) {
        if (!(S->ssl = new_ssl_connection (NULL, SSL_VERSION_AUTO))) {
            goto ssl_error;
        }
        if (!embed_ssl_socket (S->ssl, S->socket)) {
            goto ssl_error;
        }
    }
    return S;
ssl_error :
    socket_free (&S);
    return NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="207" endline="216">
{
    if (!(S->ssl = new_ssl_connection (NULL, SSL_VERSION_AUTO))) {
        goto ssl_error;
    }
    if (!embed_ssl_socket (S->ssl, S->socket)) {
        goto ssl_error;
    }
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="209" endline="211">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="213" endline="215">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="246" endline="280">
{
    Socket_T S;
    ASSERT (socket >= 0);
    ASSERT (remote_host);
    NEW (S);
    S->port = port;
    S->socket = socket;
    S->type = SOCK_STREAM;
    S->timeout = NET_TIMEOUT;
    S->host = xstrdup (remote_host);
    S->connection_type = TYPE_ACCEPT;
    if (sslserver) {
        S->sslserver = sslserver;
        if (!(S->ssl = insert_accepted_ssl_socket (S->sslserver))) {
            goto ssl_error;
        }
        if (!embed_accepted_ssl_socket (S->ssl, S->socket)) {
            goto ssl_error;
        }
    }
    return S;
ssl_error :
    socket_free (&S);
    return NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="262" endline="272">
{
    S->sslserver = sslserver;
    if (!(S->ssl = insert_accepted_ssl_socket (S->sslserver))) {
        goto ssl_error;
    }
    if (!embed_accepted_ssl_socket (S->ssl, S->socket)) {
        goto ssl_error;
    }
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="265" endline="267">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="269" endline="271">
{
    goto ssl_error;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="289" endline="313">
{
    ASSERT (S && * S);
    close_socket ((* S) -> socket);
    FREE ((* S) -> host);
    FREE (*S);
    (*S) = NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="325" endline="341">
{
    ASSERT (S);
    switch (S->type) {
    case SOCK_STREAM :
        return check_socket (S->socket);
    case SOCK_DGRAM :
        return check_udp_socket (S->socket);
    default :
        break;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="330" endline="337">
{
case SOCK_STREAM :
    return check_socket (S->socket);
case SOCK_DGRAM :
    return check_udp_socket (S->socket);
default :
    break;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="350" endline="356">
{
    ASSERT (S);
    return S->socket;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="366" endline="372">
{
    ASSERT (S);
    return S->Port;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="381" endline="387">
{
    ASSERT (S);
    return S->port;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="397" endline="403">
{
    ASSERT (S);
    return S->host;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="417" endline="436">
{
    int n;
    long l;
    va_list ap;
    char *buf = NULL;
    ASSERT (S);
    ASSERT (m);
    va_start (ap, m);
    buf = format (m, ap, &l);
    va_end (ap);
    n = socket_write (S, buf, l);
    FREE (buf);
    return n;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="447" endline="480">
{
    int n = 0;
    void *p = b;
    ASSERT (S);
    while (size > 0) {
        if (S->ssl) {
            n = send_ssl_socket (S->ssl, p, size);
        }
        else {
            n = sock_write (S->socket, p, size);
        }
        if (n <= 0)
            break;
        p += n;
        size -= n;
    }
    if (n < 0) {
        return -1;
    }
    return (int) p - (int) b;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="455" endline="470">
{
    if (S->ssl) {
        n = send_ssl_socket (S->ssl, p, size);
    }
    else {
        n = sock_write (S->socket, p, size);
    }
    if (n <= 0)
        break;
    p += n;
    size -= n;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="458" endline="460">
{
    n = send_ssl_socket (S->ssl, p, size);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="462" endline="464">
{
    n = sock_write (S->socket, p, size);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="473" endline="476">
{
    return -1;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="491" endline="527">
{
    int n = 0;
    void *p = b;
    int timeout = 0;
    ASSERT (S);
    timeout = S->timeout;
    while (size > 0) {
        if (S->ssl) {
            n = recv_ssl_socket (S->ssl, p, size, timeout);
        }
        else {
            n = sock_read (S->socket, p, size, timeout);
        }
        if (n <= 0)
            break;
        p += n;
        size -= n;
        timeout = 0;
    }
    if (n < 0 && p == b) {
        return -1;
    }
    return (int) p - (int) b;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="502" endline="518">
{
    if (S->ssl) {
        n = recv_ssl_socket (S->ssl, p, size, timeout);
    }
    else {
        n = sock_read (S->socket, p, size, timeout);
    }
    if (n <= 0)
        break;
    p += n;
    size -= n;
    timeout = 0;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="504" endline="506">
{
    n = recv_ssl_socket (S->ssl, p, size, timeout);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="508" endline="510">
{
    n = sock_read (S->socket, p, size, timeout);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="521" endline="523">
{
    return -1;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="542" endline="565">
{
    char *p = s;
    ASSERT (S);
    while (--size && ((socket_read (S, s, 1)) > 0)) {
        if (*s++ == 10)
            break;
    }
    *s = 0;
    if (*p)
        return p;
    return NULL;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="553" endline="556">
{
    if (*s++ == 10)
        break;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="125" endline="258">
{
    pid_t pid;
    sigset_t mask;
    sigset_t save;
    int stat_loc = 0;
    int exit_status;
    Environment_T environment = NULL;
    ASSERT (S);
    ASSERT (C);
    if (access (C->arg[0], X_OK) != 0) {
        log ("Error: Could not execute %s\n", C -> arg [0]);
        return;
    }
    sigemptyset (& mask);
    sigaddset (& mask, SIGCHLD);
    pthread_sigmask (SIG_BLOCK, & mask, & save);
    set_monit_environment (S, E, & environment);
    pid = fork ();
    if (pid < 0) {
        log ("Cannot fork a new process\n");
        exit (1);
    }
    if (pid == 0) {
        umask (Run.umask);
        if (C->has_gid) {
            if (0 != setgid (C->gid)) {
                stat_loc |= setgid_ERROR;
            }
        }
        if (C->has_uid) {
            if (0 != setuid (C->uid)) {
                stat_loc |= setuid_ERROR;
            }
        }
        put_monit_environment (environment);
        if (!Run.isdaemon) {
            int i;
            for (i = 0; i < 3; i++)
                if (close (i) == -1 || open ("/dev/null", O_RDWR) != i)
                    stat_loc |= redirect_ERROR;
        }
        fd_close ();
        setsid ();
        pid = fork ();
        if (pid < 0) {
            stat_loc |= fork_ERROR;
            _exit (stat_loc);
        }
        if (pid == 0) {
            sigemptyset (& mask);
            pthread_sigmask (SIG_SETMASK, & mask, NULL);
            signal (SIGINT, SIG_DFL);
            signal (SIGHUP, SIG_DFL);
            signal (SIGTERM, SIG_DFL);
            signal (SIGUSR1, SIG_DFL);
            signal (SIGPIPE, SIG_DFL);
            (void) execv (C->arg[0], C->arg);
            _exit (1);
        }
        _exit (stat_loc);
    }
    if (waitpid (pid, &stat_loc, 0) != pid) {
        log ("Waitpid error\n");
    }
    exit_status = WEXITSTATUS (stat_loc);
    if (exit_status & setgid_ERROR)
        log ("Failed to change gid to '%d' for '%s'\n", C->gid, C->arg[0]);
    if (exit_status & setuid_ERROR)
        log ("Failed to change uid to '%d' for '%s'\n", C->uid, C->arg[0]);
    if (exit_status & fork_ERROR)
        log ("Cannot fork a new process for '%s'\n", C->arg[0]);
    if (exit_status & redirect_ERROR)
        log ("Cannot redirect IO to /dev/null for '%s'\n", C->arg[0]);
    free_monit_environment (& environment);
    ASSERT (environment == NULL);
    pthread_sigmask (SIG_SETMASK, & save, NULL);
    return;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="138" endline="141">
{
    log ("Error: Could not execute %s\n", C -> arg [0]);
    return;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="154" endline="157">
{
    log ("Cannot fork a new process\n");
    exit (1);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="160" endline="226">
{
    umask (Run.umask);
    if (C->has_gid) {
        if (0 != setgid (C->gid)) {
            stat_loc |= setgid_ERROR;
        }
    }
    if (C->has_uid) {
        if (0 != setuid (C->uid)) {
            stat_loc |= setuid_ERROR;
        }
    }
    put_monit_environment (environment);
    if (!Run.isdaemon) {
        int i;
        for (i = 0; i < 3; i++)
            if (close (i) == -1 || open ("/dev/null", O_RDWR) != i)
                stat_loc |= redirect_ERROR;
    }
    fd_close ();
    setsid ();
    pid = fork ();
    if (pid < 0) {
        stat_loc |= fork_ERROR;
        _exit (stat_loc);
    }
    if (pid == 0) {
        sigemptyset (& mask);
        pthread_sigmask (SIG_SETMASK, & mask, NULL);
        signal (SIGINT, SIG_DFL);
        signal (SIGHUP, SIG_DFL);
        signal (SIGTERM, SIG_DFL);
        signal (SIGUSR1, SIG_DFL);
        signal (SIGPIPE, SIG_DFL);
        (void) execv (C->arg[0], C->arg);
        _exit (1);
    }
    _exit (stat_loc);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="171" endline="176">
{
    if (0 != setgid (C->gid)) {
        stat_loc |= setgid_ERROR;
    }
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="173" endline="175">
{
    stat_loc |= setgid_ERROR;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="178" endline="183">
{
    if (0 != setuid (C->uid)) {
        stat_loc |= setuid_ERROR;
    }
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="180" endline="182">
{
    stat_loc |= setuid_ERROR;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="188" endline="193">
{
    int i;
    for (i = 0; i < 3; i++)
        if (close (i) == -1 || open ("/dev/null", O_RDWR) != i)
            stat_loc |= redirect_ERROR;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="201" endline="204">
{
    stat_loc |= fork_ERROR;
    _exit (stat_loc);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="207" endline="222">
{
    sigemptyset (& mask);
    pthread_sigmask (SIG_SETMASK, & mask, NULL);
    signal (SIGINT, SIG_DFL);
    signal (SIGHUP, SIG_DFL);
    signal (SIGTERM, SIG_DFL);
    signal (SIGUSR1, SIG_DFL);
    signal (SIGPIPE, SIG_DFL);
    (void) execv (C->arg[0], C->arg);
    _exit (1);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="230" endline="232">
{
    log ("Waitpid error\n");
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="271" endline="306">
{
    char buf [STRLEN];
    char *date = get_RFC822date (NULL);
    snprintf (buf, STRLEN, "MONIT_DATE=%s", date);
    push_monit_environment (buf, e);
    snprintf (buf, STRLEN, "MONIT_SERVICE=%s", s -> name);
    push_monit_environment (buf, e);
    snprintf (buf, STRLEN, "MONIT_HOST=%s", Run.localhostname);
    push_monit_environment (buf, e);
    snprintf (buf, STRLEN, "MONIT_EVENT=%s", event ? event : "No Event");
    push_monit_environment (buf, e);
    if (s->type == TYPE_PROCESS) {
        snprintf (buf, STRLEN, "MONIT_PROCESS_PID=%d", is_process_running (s));
        push_monit_environment (buf, e);
        snprintf (buf, STRLEN, "MONIT_PROCESS_MEMORY=%ld", s -> procinfo -> mem_kbyte);
        push_monit_environment (buf, e);
        snprintf (buf, STRLEN, "MONIT_PROCESS_CHILDREN=%d", s -> procinfo -> children);
        push_monit_environment (buf, e);
        snprintf (buf, STRLEN, "MONIT_PROCESS_CPU_PERCENT=%d", s -> procinfo -> cpu_percent);
        push_monit_environment (buf, e);
    }
    FREE (date);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="289" endline="302">
{
    snprintf (buf, STRLEN, "MONIT_PROCESS_PID=%d", is_process_running (s));
    push_monit_environment (buf, e);
    snprintf (buf, STRLEN, "MONIT_PROCESS_MEMORY=%ld", s -> procinfo -> mem_kbyte);
    push_monit_environment (buf, e);
    snprintf (buf, STRLEN, "MONIT_PROCESS_CHILDREN=%d", s -> procinfo -> children);
    push_monit_environment (buf, e);
    snprintf (buf, STRLEN, "MONIT_PROCESS_CPU_PERCENT=%d", s -> procinfo -> cpu_percent);
    push_monit_environment (buf, e);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="310" endline="316">
{
    Environment_T e;
    NEW (e);
    strncpy (e -> env, env, STRLEN);
    e->next = *list;
    *list = e;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="320" endline="326">
{
    while (e != NULL) {
        putenv (e -> env);
        e = e->next;
    }
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="322" endline="325">
{
    putenv (e -> env);
    e = e->next;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="330" endline="336">
{
    if (e && *e) {
        free_monit_environment (& (* e) -> next);
        FREE ((*e));
    }
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="332" endline="335">
{
    free_monit_environment (& (* e) -> next);
    FREE ((*e));
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="178" endline="289">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="298" endline="328">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="338" endline="369">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="383" endline="426">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="435" endline="478">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="487" endline="566">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="575" endline="614">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="623" endline="724">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="741" endline="787">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="796" endline="817">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="826" endline="874">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="883" endline="914">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="923" endline="989">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1001" endline="1031">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1043" endline="1093">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1103" endline="1216">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1225" endline="1278">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1289" endline="1317">
{
    return -1;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1329" endline="1357">
{
    return -1;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1366" endline="1391">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1399" endline="1424">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1431" endline="1441">
{
    return;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1448" endline="1586">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1595" endline="1638">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1646" endline="1658">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="107" endline="144">
{
    int l = 0;
    Service_T s;
    State_T state;
    FILE *S = NULL;
    sigset_t ns, os;
    if (!(S = open_state ("w")))
        return;
    set_signal_block (& ns, & os);
    l = get_service_list_length ();
    if (fwrite (&l, 1, sizeof (int), S) != sizeof (int)) {
        log ("%s: Unable to save monit state information to '%s'\n", prog, Run.statefile);
        goto error;
    }
    for (s = servicelist; s; s = s->next) {
        clone_state (s, & state);
        if (fwrite (&state, 1, sizeof (State_T), S) != sizeof (State_T)) {
            log ("%s: An error occured when saving monit state information " "for the service %s\n", prog, s -> name);
            goto error;
        }
    }
error :
    close_state (S);
    unset_signal_block (& os);
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="123" endline="127">
{
    log ("%s: Unable to save monit state information to '%s'\n", prog, Run.statefile);
    goto error;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="130" endline="138">
{
    clone_state (s, & state);
    if (fwrite (&state, 1, sizeof (State_T), S) != sizeof (State_T)) {
        log ("%s: An error occured when saving monit state information " "for the service %s\n", prog, s -> name);
        goto error;
    }
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="133" endline="137">
{
    log ("%s: An error occured when saving monit state information " "for the service %s\n", prog, s -> name);
    goto error;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="155" endline="167">
{
    if (exist_file (Run.statefile) && exist_file (Run.pidfile)) {
        return (get_timestamp (Run.pidfile, S_IFREG) > get_timestamp (Run.statefile, S_IFREG));
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="158" endline="163">
{
    return (get_timestamp (Run.pidfile, S_IFREG) > get_timestamp (Run.statefile, S_IFREG));
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="193" endline="242">
{
    int i;
    int l = 0;
    State_T s;
    FILE *S = NULL;
    sigset_t ns, os;
    Service_T service;
    int has_error = FALSE;
    if (!(S = open_state ("r")))
        return;
    set_signal_block (& ns, & os);
    errno = 0;
    if (fread (&l, 1, sizeof (int), S) != sizeof (int)) {
        log ("%s: Unable to read monit state information from '%s'\n", prog, Run.statefile);
        has_error = TRUE;
        goto error;
    }
    if (l > 0) {
        for (i = 0; i < l; i++) {
            if (fread (&s, 1, sizeof (State_T), S) != sizeof (State_T)) {
                log ("%s: An error occured when updating monit state information\n", prog);
                has_error = TRUE;
                goto error;
            }
            if ((service = get_service (s.name))) {
                update_service_state (service, & s);
            }
        }
    }
error :
    close_state (S);
    unset_signal_block (& os);
    if (!has_error)
        state_save ();
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="210" endline="215">
{
    log ("%s: Unable to read monit state information from '%s'\n", prog, Run.statefile);
    has_error = TRUE;
    goto error;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="218" endline="233">
{
    for (i = 0; i < l; i++) {
        if (fread (&s, 1, sizeof (State_T), S) != sizeof (State_T)) {
            log ("%s: An error occured when updating monit state information\n", prog);
            has_error = TRUE;
            goto error;
        }
        if ((service = get_service (s.name))) {
            update_service_state (service, & s);
        }
    }
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="220" endline="232">
{
    if (fread (&s, 1, sizeof (State_T), S) != sizeof (State_T)) {
        log ("%s: An error occured when updating monit state information\n", prog);
        has_error = TRUE;
        goto error;
    }
    if ((service = get_service (s.name))) {
        update_service_state (service, & s);
    }
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="222" endline="227">
{
    log ("%s: An error occured when updating monit state information\n", prog);
    has_error = TRUE;
    goto error;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="229" endline="231">
{
    update_service_state (service, & s);
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="249" endline="268">
{
    FILE *S = NULL;
    ASSERT (Run.statefile);
    umask (MYPIDMASK);
    if ((S = fopen (Run.statefile, mode)) == NULL) {
        log ("%s: Cannot open the monit state file '%s' -- %s\n", prog, Run.statefile, STRERROR);
        return NULL;
    }
    return S;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="258" endline="264">
{
    log ("%s: Cannot open the monit state file '%s' -- %s\n", prog, Run.statefile, STRERROR);
    return NULL;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="272" endline="276">
{
    ASSERT (fclose (S) == 0);
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="280" endline="293">
{
    memset (state, 0, sizeof (State_T));
    strncpy (state -> name, service -> name, STRLEN);
    state->mode = service->mode;
    state->nstart = service->nstart;
    state->ncycle = service->ncycle;
    state->do_monitor = service->do_monitor;
    state->has_permission_error = service->perm ? service->perm->has_error : FALSE;
    state->has_uid_error = service->uid ? service->uid->has_error : FALSE;
    state->has_gid_error = service->gid ? service->gid->has_error : FALSE;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="297" endline="310">
{
    service->mode = state->mode;
    service->nstart = state->nstart;
    service->ncycle = state->ncycle;
    service->do_monitor = state->do_monitor;
    if (service->perm)
        service->perm->has_error = state->has_permission_error;
    if (service->uid)
        service->uid->has_error = state->has_uid_error;
    if (service->gid)
        service->gid->has_error = state->has_gid_error;
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="76" endline="125">
{
    if (exist_daemon ()) {
        Socket_T sock = socket_new (Run.bind_addr ? Run.bind_addr : "localhost", Run.httpdport, SOCKET_TCP, Run.httpdssl);
        if (!sock) {
            log ("%s: error connecting to the monit daemon\n", prog);
            return;
        }
        else {
            char buf [LINE];
            int status = FALSE;
            char *auth = get_basic_authentication_header ();
            socket_print (sock, "GET /_status?format=text HTTP/1.0\r\n%s\r\n", auth ? auth : "");
            FREE (auth);
            while (socket_readln (sock, buf, LINE)) {
                if (IS (buf, "\n") || IS (buf, "\r\n"))
                    break;
                if (starts_with (buf, "HTTP/1.0 200"))
                    status = TRUE;
            }
            if (!status) {
                log ("%s: cannot read status from the monit daemon\n", prog);
                goto error;
            }
            while (socket_readln (sock, buf, LINE)) {
                printf ("%s", buf);
            }
        error :
            socket_free (&sock);
        }
    }
    else {
        log ("%s: no status available -- the monit daemon is not running\n", prog);
    }
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="81" endline="119">
{
    Socket_T sock = socket_new (Run.bind_addr ? Run.bind_addr : "localhost", Run.httpdport, SOCKET_TCP, Run.httpdssl);
    if (!sock) {
        log ("%s: error connecting to the monit daemon\n", prog);
        return;
    }
    else {
        char buf [LINE];
        int status = FALSE;
        char *auth = get_basic_authentication_header ();
        socket_print (sock, "GET /_status?format=text HTTP/1.0\r\n%s\r\n", auth ? auth : "");
        FREE (auth);
        while (socket_readln (sock, buf, LINE)) {
            if (IS (buf, "\n") || IS (buf, "\r\n"))
                break;
            if (starts_with (buf, "HTTP/1.0 200"))
                status = TRUE;
        }
        if (!status) {
            log ("%s: cannot read status from the monit daemon\n", prog);
            goto error;
        }
        while (socket_readln (sock, buf, LINE)) {
            printf ("%s", buf);
        }
    error :
        socket_free (&sock);
    }
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="85" endline="88">
{
    log ("%s: error connecting to the monit daemon\n", prog);
    return;
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="90" endline="118">
{
    char buf [LINE];
    int status = FALSE;
    char *auth = get_basic_authentication_header ();
    socket_print (sock, "GET /_status?format=text HTTP/1.0\r\n%s\r\n", auth ? auth : "");
    FREE (auth);
    while (socket_readln (sock, buf, LINE)) {
        if (IS (buf, "\n") || IS (buf, "\r\n"))
            break;
        if (starts_with (buf, "HTTP/1.0 200"))
            status = TRUE;
    }
    if (!status) {
        log ("%s: cannot read status from the monit daemon\n", prog);
        goto error;
    }
    while (socket_readln (sock, buf, LINE)) {
        printf ("%s", buf);
    }
error :
    socket_free (&sock);
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="101" endline="106">
{
    if (IS (buf, "\n") || IS (buf, "\r\n"))
        break;
    if (starts_with (buf, "HTTP/1.0 200"))
        status = TRUE;
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="108" endline="111">
{
    log ("%s: cannot read status from the monit daemon\n", prog);
    goto error;
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="113" endline="115">
{
    printf ("%s", buf);
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="121" endline="123">
{
    log ("%s: no status available -- the monit daemon is not running\n", prog);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="124" endline="128">
{
    return (p && *p);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="137" endline="147">
{
    char *fname;
    ASSERT (path);
    fname = strrchr (path, '/');
    return (fname ? ++fname : path);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="155" endline="172">
{
    char *p = string;
    int i;
    ASSERT (string);
    for (i = 0; i < len; i++, p++) {
        if ((*p == '\r') || (*p == '\n')) {
            *p = 0;
            return;
        }
    }
    string[len - 1] = 0;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="163" endline="169">
{
    if ((*p == '\r') || (*p == '\n')) {
        *p = 0;
        return;
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="165" endline="168">
{
    *p = 0;
    return;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="181" endline="190">
{
    ASSERT (s);
    ltrim (s);
    rtrim (s);
    return s;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="199" endline="209">
{
    char *t = s;
    ASSERT (s);
    while (*t == ' ' || *t == '\t' || *t == '\r' || *t == '\n')
        t++;
    return strcpy (s, t);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="218" endline="229">
{
    char *t = s;
    ASSERT (s);
    while (*s)
        s++;
    while (*--s == ' ' || *s == '\t' || *s == '\r' || *s == '\n')
        *s = '\0';
    return t;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="238" endline="271">
{
    char *t = s;
    char tmp = 0;
    ASSERT (s);
    if (*t == 39 || *t == 34) {
        tmp = *t;
        t++;
    }
    else {
        return;
    }
    while (*t != tmp && *t != '\0') {
        *(t - 1) = *t;
        t++;
    }
    *(t - 1) = '\0';
    return;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="246" endline="251">
{
    tmp = *t;
    t++;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="253" endline="257">
{
    return;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="260" endline="265">
{
    *(t - 1) = *t;
    t++;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="283" endline="295">
{
    char *t = s;
    while (s && *s) {
        if (*s == old)
            *s = new;
        s++;
    }
    return (t);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="288" endline="291">
{
    if (*s == old)
        *s = new;
    s++;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="310" endline="353">
{
    int i;
    int d;
    ASSERT (src && * src && old && new);
    i = count_words (*src, old);
    d = strlen (new) - strlen (old);
    if (i == 0)
        return *src;
    if (d > 0)
        d *= i;
    else
        d = 0;
    {
        char *p, *q;
        int l = strlen (old);
        char *buf = xmalloc (strlen (*src) + d + 1);
        q = *src;
        *buf = 0;
        while ((p = strstr (q, old))) {
            *p = '\0';
            strcat (buf, q);
            strcat (buf, new);
            p += l;
            q = p;
        }
        strcat (buf, q);
        FREE (*src);
        *src = buf;
    }
    return *src;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="327" endline="349">
{
    char *p, *q;
    int l = strlen (old);
    char *buf = xmalloc (strlen (*src) + d + 1);
    q = *src;
    *buf = 0;
    while ((p = strstr (q, old))) {
        *p = '\0';
        strcat (buf, q);
        strcat (buf, new);
        p += l;
        q = p;
    }
    strcat (buf, q);
    FREE (*src);
    *src = buf;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="336" endline="344">
{
    *p = '\0';
    strcat (buf, q);
    strcat (buf, new);
    p += l;
    q = p;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="362" endline="377">
{
    int i = 0;
    char *p = s;
    ASSERT (s && word);
    while ((p = strstr (p, word))) {
        i++;
        p++;
    }
    return i;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="370" endline="373">
{
    i++;
    p++;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="390" endline="403">
{
    if ((!a || !b) || *a != *b)
        return FALSE;
    while (*a && *b) {
        if (toupper (*a++) != toupper (*b++))
            return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="395" endline="399">
{
    if (toupper (*a++) != toupper (*b++))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="411" endline="468">
{
    int editpos;
    int insertpos;
    ASSERT (buf);
    for (editpos = insertpos = 0; *(buf + editpos) != '\0'; editpos++, insertpos++) {
        if (*(buf + editpos) == '\\') {
            switch (*(buf + editpos + 1)) {
            case 'n' :
                *(buf + insertpos) = '\n';
                editpos++;
                break;
            case 't' :
                *(buf + insertpos) = '\t';
                editpos++;
                break;
            case 'r' :
                *(buf + insertpos) = '\r';
                editpos++;
                break;
            case ' ' :
                *(buf + insertpos) = ' ';
                editpos++;
                break;
            case '\\' :
                *(buf + insertpos) = '\\';
                editpos++;
                break;
            default :
                *(buf + insertpos) = *(buf + editpos);
            }
        }
        else {
            *(buf + insertpos) = *(buf + editpos);
        }
    }
    *(buf + insertpos) = '\0';
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="419" endline="465">
{
    if (*(buf + editpos) == '\\') {
        switch (*(buf + editpos + 1)) {
        case 'n' :
            *(buf + insertpos) = '\n';
            editpos++;
            break;
        case 't' :
            *(buf + insertpos) = '\t';
            editpos++;
            break;
        case 'r' :
            *(buf + insertpos) = '\r';
            editpos++;
            break;
        case ' ' :
            *(buf + insertpos) = ' ';
            editpos++;
            break;
        case '\\' :
            *(buf + insertpos) = '\\';
            editpos++;
            break;
        default :
            *(buf + insertpos) = *(buf + editpos);
        }
    }
    else {
        *(buf + insertpos) = *(buf + editpos);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="422" endline="457">
{
    switch (*(buf + editpos + 1)) {
    case 'n' :
        *(buf + insertpos) = '\n';
        editpos++;
        break;
    case 't' :
        *(buf + insertpos) = '\t';
        editpos++;
        break;
    case 'r' :
        *(buf + insertpos) = '\r';
        editpos++;
        break;
    case ' ' :
        *(buf + insertpos) = ' ';
        editpos++;
        break;
    case '\\' :
        *(buf + insertpos) = '\\';
        editpos++;
        break;
    default :
        *(buf + insertpos) = *(buf + editpos);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="425" endline="455">
{
case 'n' :
    *(buf + insertpos) = '\n';
    editpos++;
    break;
case 't' :
    *(buf + insertpos) = '\t';
    editpos++;
    break;
case 'r' :
    *(buf + insertpos) = '\r';
    editpos++;
    break;
case ' ' :
    *(buf + insertpos) = ' ';
    editpos++;
    break;
case '\\' :
    *(buf + insertpos) = '\\';
    editpos++;
    break;
default :
    *(buf + insertpos) = *(buf + editpos);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="459" endline="463">
{
    *(buf + insertpos) = *(buf + editpos);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="476" endline="492">
{
    Service_T s;
    ASSERT (name);
    for (s = servicelist; s; s = s->next) {
        if (IS (s->name, name)) {
            return s;
        }
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="483" endline="488">
{
    if (IS (s->name, name)) {
        return s;
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="485" endline="487">
{
    return s;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="501" endline="513">
{
    Service_T s;
    ASSERT (name);
    for (s = servicelist; s; s = s->next)
        if (IS (s->name, name))
            return TRUE;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="522" endline="531">
{
    int i = 0;
    Service_T s;
    for (s = servicelist; s; s = s->next)
        i += 1;
    return i;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="538" endline="656">
{
    printf ("Runtime constants:\n");
    printf (" %-18s = %s\n", "Control file", is_str_defined (Run.controlfile));
    printf (" %-18s = %s\n", "Log file", is_str_defined (Run.logfile));
    printf (" %-18s = %s\n", "Pid file", is_str_defined (Run.pidfile));
    printf (" %-18s = %s\n", "Debug", Run.debug ? "True" : "False");
    printf (" %-18s = %s\n", "Log", Run.dolog ? "True" : "False");
    printf (" %-18s = %s\n", "Use syslog", Run.use_syslog ? "True" : "False");
    printf (" %-18s = %s\n", "Is Daemon", Run.isdaemon ? "True" : "False");
    printf (" %-18s = %s\n", "Use process engine", Run.doprocess ? "True" : "False");
    printf (" %-18s = %d seconds\n", "Poll time", Run.polltime);
    printf (" %-18s = ", "Mail server(s)");
    if (Run.mailservers) {
        MailServer_T mta = Run.mailservers;
        for (mta = Run.mailservers; mta; mta = mta->next)
            printf ("%s%s", mta->host, mta->next ? ", " : " ");
        printf ("\n");
    }
    else {
        printf ("localhost\n");
    }
    printf (" %-18s = %s\n", "Mail from", is_str_defined (Run.MailFormat.from));
    printf (" %-18s = %s\n", "Mail subject", is_str_defined (Run.MailFormat.subject));
    printf (" %-18s = %-.20s%s\n", "Mail message", Run.MailFormat.message ? Run.MailFormat.message : "(not defined)", Run.MailFormat.message ? "..(truncated)" : "");
    printf (" %-18s = %s\n", "Start monit httpd", Run.dohttpd ? "True" : "False");
    if (Run.dohttpd) {
        printf (" %-18s = %s\n", "httpd bind address", Run.bind_addr ? Run.bind_addr : "Any/All");
        printf (" %-18s = %d\n", "httpd portnumber", Run.httpdport);
        printf (" %-18s = %s\n", "httpd signature", Run.httpdsig ? "True" : "False");
        printf (" %-18s = %s\n", "Use ssl encryption", Run.httpdssl ? "True" : "False");
        if (Run.httpdssl) {
            printf (" %-18s = %s\n", "PEM key/cert file", Run.httpsslpem);
            if (Run.httpsslclientpem != NULL) {
                printf (" %-18s = %s\n", "Client cert file", Run.httpsslclientpem);
            }
            else {
                printf (" %-18s = %s\n", "Client cert file", "None");
            }
            printf (" %-18s = %s\n", "Allow self certs", Run.allowselfcert ? "True" : "False");
        }
        printf (" %-18s = %s\n", "httpd auth. style", (Run.credentials != NULL) && has_hosts_allow () ? "Basic Authentication and Host allow list" : (Run.credentials != NULL) ? "Basic Authentication" : has_hosts_allow () ? "Host allow list" : "No authentication!");
    }
    {
        Mail_T list;
        for (list = Run.maillist; list; list = list->next) {
            printf (" %-18s = %s\n", "Alert mail to", is_str_defined (list -> to));
            printf (" %-18s = ", "Alert on");
            if (list->events == (~((unsigned int) 0))) {
                printf ("All events");
            }
            else {
                if (IS_EVENT_SET (list->events, EVENT_START))
                    printf ("Start ");
                if (IS_EVENT_SET (list->events, EVENT_STOP))
                    printf ("Stop ");
                if (IS_EVENT_SET (list->events, EVENT_RESTART))
                    printf ("Restart ");
                if (IS_EVENT_SET (list->events, EVENT_CHECKSUM))
                    printf ("Checksum ");
                if (IS_EVENT_SET (list->events, EVENT_RESOURCE))
                    printf ("Resource ");
                if (IS_EVENT_SET (list->events, EVENT_TIMEOUT))
                    printf ("Timeout ");
                if (IS_EVENT_SET (list->events, EVENT_TIMESTAMP))
                    printf ("Timestamp ");
                if (IS_EVENT_SET (list->events, EVENT_SIZE))
                    printf ("Size ");
                if (IS_EVENT_SET (list->events, EVENT_CONNECTION))
                    printf ("Connection ");
                if (IS_EVENT_SET (list->events, EVENT_PERMISSION))
                    printf ("Permission ");
                if (IS_EVENT_SET (list->events, EVENT_UID))
                    printf ("Uid ");
                if (IS_EVENT_SET (list->events, EVENT_GID))
                    printf ("Gid ");
                if (IS_EVENT_SET (list->events, EVENT_UNMONITOR))
                    printf ("Unmonitor ");
            }
            printf ("\n");
        }
    }
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="553" endline="558">
{
    MailServer_T mta = Run.mailservers;
    for (mta = Run.mailservers; mta; mta = mta->next)
        printf ("%s%s", mta->host, mta->next ? ", " : " ");
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="560" endline="562">
{
    printf ("localhost\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="575" endline="609">
{
    printf (" %-18s = %s\n", "httpd bind address", Run.bind_addr ? Run.bind_addr : "Any/All");
    printf (" %-18s = %d\n", "httpd portnumber", Run.httpdport);
    printf (" %-18s = %s\n", "httpd signature", Run.httpdsig ? "True" : "False");
    printf (" %-18s = %s\n", "Use ssl encryption", Run.httpdssl ? "True" : "False");
    if (Run.httpdssl) {
        printf (" %-18s = %s\n", "PEM key/cert file", Run.httpsslpem);
        if (Run.httpsslclientpem != NULL) {
            printf (" %-18s = %s\n", "Client cert file", Run.httpsslclientpem);
        }
        else {
            printf (" %-18s = %s\n", "Client cert file", "None");
        }
        printf (" %-18s = %s\n", "Allow self certs", Run.allowselfcert ? "True" : "False");
    }
    printf (" %-18s = %s\n", "httpd auth. style", (Run.credentials != NULL) && has_hosts_allow () ? "Basic Authentication and Host allow list" : (Run.credentials != NULL) ? "Basic Authentication" : has_hosts_allow () ? "Host allow list" : "No authentication!");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="584" endline="600">
{
    printf (" %-18s = %s\n", "PEM key/cert file", Run.httpsslpem);
    if (Run.httpsslclientpem != NULL) {
        printf (" %-18s = %s\n", "Client cert file", Run.httpsslclientpem);
    }
    else {
        printf (" %-18s = %s\n", "Client cert file", "None");
    }
    printf (" %-18s = %s\n", "Allow self certs", Run.allowselfcert ? "True" : "False");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="589" endline="591">
{
    printf (" %-18s = %s\n", "Client cert file", Run.httpsslclientpem);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="593" endline="595">
{
    printf (" %-18s = %s\n", "Client cert file", "None");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="611" endline="652">
{
    Mail_T list;
    for (list = Run.maillist; list; list = list->next) {
        printf (" %-18s = %s\n", "Alert mail to", is_str_defined (list -> to));
        printf (" %-18s = ", "Alert on");
        if (list->events == (~((unsigned int) 0))) {
            printf ("All events");
        }
        else {
            if (IS_EVENT_SET (list->events, EVENT_START))
                printf ("Start ");
            if (IS_EVENT_SET (list->events, EVENT_STOP))
                printf ("Stop ");
            if (IS_EVENT_SET (list->events, EVENT_RESTART))
                printf ("Restart ");
            if (IS_EVENT_SET (list->events, EVENT_CHECKSUM))
                printf ("Checksum ");
            if (IS_EVENT_SET (list->events, EVENT_RESOURCE))
                printf ("Resource ");
            if (IS_EVENT_SET (list->events, EVENT_TIMEOUT))
                printf ("Timeout ");
            if (IS_EVENT_SET (list->events, EVENT_TIMESTAMP))
                printf ("Timestamp ");
            if (IS_EVENT_SET (list->events, EVENT_SIZE))
                printf ("Size ");
            if (IS_EVENT_SET (list->events, EVENT_CONNECTION))
                printf ("Connection ");
            if (IS_EVENT_SET (list->events, EVENT_PERMISSION))
                printf ("Permission ");
            if (IS_EVENT_SET (list->events, EVENT_UID))
                printf ("Uid ");
            if (IS_EVENT_SET (list->events, EVENT_GID))
                printf ("Gid ");
            if (IS_EVENT_SET (list->events, EVENT_UNMONITOR))
                printf ("Unmonitor ");
        }
        printf ("\n");
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="614" endline="651">
{
    printf (" %-18s = %s\n", "Alert mail to", is_str_defined (list -> to));
    printf (" %-18s = ", "Alert on");
    if (list->events == (~((unsigned int) 0))) {
        printf ("All events");
    }
    else {
        if (IS_EVENT_SET (list->events, EVENT_START))
            printf ("Start ");
        if (IS_EVENT_SET (list->events, EVENT_STOP))
            printf ("Stop ");
        if (IS_EVENT_SET (list->events, EVENT_RESTART))
            printf ("Restart ");
        if (IS_EVENT_SET (list->events, EVENT_CHECKSUM))
            printf ("Checksum ");
        if (IS_EVENT_SET (list->events, EVENT_RESOURCE))
            printf ("Resource ");
        if (IS_EVENT_SET (list->events, EVENT_TIMEOUT))
            printf ("Timeout ");
        if (IS_EVENT_SET (list->events, EVENT_TIMESTAMP))
            printf ("Timestamp ");
        if (IS_EVENT_SET (list->events, EVENT_SIZE))
            printf ("Size ");
        if (IS_EVENT_SET (list->events, EVENT_CONNECTION))
            printf ("Connection ");
        if (IS_EVENT_SET (list->events, EVENT_PERMISSION))
            printf ("Permission ");
        if (IS_EVENT_SET (list->events, EVENT_UID))
            printf ("Uid ");
        if (IS_EVENT_SET (list->events, EVENT_GID))
            printf ("Gid ");
        if (IS_EVENT_SET (list->events, EVENT_UNMONITOR))
            printf ("Unmonitor ");
    }
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="618" endline="620">
{
    printf ("All events");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="622" endline="649">
{
    if (IS_EVENT_SET (list->events, EVENT_START))
        printf ("Start ");
    if (IS_EVENT_SET (list->events, EVENT_STOP))
        printf ("Stop ");
    if (IS_EVENT_SET (list->events, EVENT_RESTART))
        printf ("Restart ");
    if (IS_EVENT_SET (list->events, EVENT_CHECKSUM))
        printf ("Checksum ");
    if (IS_EVENT_SET (list->events, EVENT_RESOURCE))
        printf ("Resource ");
    if (IS_EVENT_SET (list->events, EVENT_TIMEOUT))
        printf ("Timeout ");
    if (IS_EVENT_SET (list->events, EVENT_TIMESTAMP))
        printf ("Timestamp ");
    if (IS_EVENT_SET (list->events, EVENT_SIZE))
        printf ("Size ");
    if (IS_EVENT_SET (list->events, EVENT_CONNECTION))
        printf ("Connection ");
    if (IS_EVENT_SET (list->events, EVENT_PERMISSION))
        printf ("Permission ");
    if (IS_EVENT_SET (list->events, EVENT_UID))
        printf ("Uid ");
    if (IS_EVENT_SET (list->events, EVENT_GID))
        printf ("Gid ");
    if (IS_EVENT_SET (list->events, EVENT_UNMONITOR))
        printf ("Unmonitor ");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="664" endline="969">
{
    Port_T n;
    Icmp_T i;
    Mail_T r;
    Device_T dl;
    Resource_T q;
    Timestamp_T t;
    Size_T sl;
    Dependant_T d;
    ASSERT (s);
    printf ("%-21s = %s\n", servicenames [s -> type], s -> name);
    printf (" %-20s = %s\n", "Group", is_str_defined (s -> group));
    if (s->type == TYPE_PROCESS)
        printf (" %-20s = %s\n", "Pid file", s->path);
    else if (s->type != TYPE_REMOTE)
        printf (" %-20s = %s\n", "Path", s->path);
    printf (" %-20s = %s\n", "Monitoring mode", modenames [s -> mode]);
    if (s->start) {
        int i = 0;
        printf (" %-20s =", "Start program");
        while (s->start->arg[i])
            printf (" %s", s->start->arg[i++]);
        printf ("\n");
    }
    if (s->stop) {
        int i = 0;
        printf (" %-20s =", "Stop program");
        while (s->stop->arg[i])
            printf (" %s", s->stop->arg[i++]);
        printf ("\n");
    }
    for (d = s->dependantlist; d; d = d->next)
        if (d->dependant != NULL)
            printf (" %-20s = %s\n", "Depends on Service", d->dependant);
    if (s->checksum) {
        switch (s->checksum->type) {
        case HASH_MD5 :
            printf (" %-20s = if failed MD5(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
            break;
        case HASH_SHA1 :
            printf (" %-20s = if failed SHA1(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
            break;
        default :
            printf (" %-20s = if failed UNKNOWN(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
            break;
        }
    }
    if (s->perm)
        printf (" %-20s = if failed %o then %s\n", "Permission", s->perm->perm, actionnames[s->perm->action]);
    if (s->uid)
        printf (" %-20s = if failed %d then %s\n", "UID", (int) s->uid->uid, actionnames[s->uid->action]);
    if (s->gid)
        printf (" %-20s = if failed %d then %s\n", "GID", (int) s->gid->gid, actionnames[s->gid->action]);
    if (s->portlist) {
        for (n = s->portlist; n; n = n->next) {
            if (n->family == AF_INET) {
                if (n->SSL.use_ssl) {
                    printf (" %-20s = %s:%d%s [protocol %s via SSL] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
                    if (n->SSL.certmd5 != NULL)
                        printf (" %-20s = %s\n", "Server cert md5 sum", n->SSL.certmd5);
                }
                else {
                    printf (" %-20s = %s:%d%s [protocol %s] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
                }
            }
            else if (n->family == AF_UNIX) {
                printf (" %-20s = %s [protocol %s] with timeout %d seconds\n", "Unix Socket", n -> pathname, n -> protocol -> name, n -> timeout);
            }
        }
    }
    if (s->icmplist)
        for (i = s->icmplist; i; i = i->next)
            printf (" %-20s = if failed %s with timeout %d seconds then %s\n", "ICMP", icmpnames[i->type], i->timeout, actionnames[i->action]);
    for (t = s->timestamplist; t; t = t->next) {
        if (t->test_changes) {
            printf (" %-20s = if changed then %s\n", "Timestamp", actionnames [t -> action]);
        }
        else {
            printf (" %-20s = if %s %d second(s) then %s\n", "Timestamp", operatornames [t -> operator], t -> time, actionnames [t -> action]);
        }
    }
    for (sl = s->sizelist; sl; sl = sl->next) {
        if (sl->test_changes) {
            printf (" %-20s = if changed then %s\n", "Size", actionnames [sl -> action]);
        }
        else {
            printf (" %-20s = if %s %lu byte(s) then %s\n", "Size", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
        }
    }
    for (dl = s->devicelist; dl; dl = dl->next) {
        if (dl->resource == RESOURCE_ID_INODE) {
            printf (" %-20s = if %s %ld %s then %s\n", "Inodes usage limit", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
        }
        else if (dl->resource == RESOURCE_ID_SPACE) {
            printf (" %-20s = if %s %ld %s then %s\n", "Space usage limit", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
        }
    }
    for (q = s->resourcelist; q; q = q->next) {
        switch (q->resource_id) {
        case RESOURCE_ID_CPU_PERCENT :
            printf (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "CPU usage limit", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_MEM_PERCENT :
            printf (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "Memory usage limit", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_MEM_KBYTE :
            printf (" %-20s = if %s %ldkB for %d cycle(s) then %s\n", "Memory amount limit", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_LOAD1 :
            printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (1min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_LOAD5 :
            printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (5min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        case RESOURCE_ID_LOAD15 :
            printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (15min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
            break;
        }
    }
    if (s->def_every)
        printf (" %-20s = Check service every %d cycles\n", "Every", s->every);
    if (s->def_timeout)
        printf (" %-20s = Do timeout if %d restart within %d cycles\n", "Timeout", s->to_start, s->to_cycle);
    for (r = s->maillist; r; r = r->next) {
        printf (" %-20s = %s\n", "Alert mail to", is_str_defined (r -> to));
        printf (" %-20s = ", "Alert on");
        if (r->events == (~((unsigned int) 0))) {
            printf ("All events");
        }
        else {
            if (IS_EVENT_SET (r->events, EVENT_START))
                printf ("Start ");
            if (IS_EVENT_SET (r->events, EVENT_STOP))
                printf ("Stop ");
            if (IS_EVENT_SET (r->events, EVENT_RESTART))
                printf ("Restart ");
            if (IS_EVENT_SET (r->events, EVENT_CHECKSUM))
                printf ("Checksum ");
            if (IS_EVENT_SET (r->events, EVENT_RESOURCE))
                printf ("Resource ");
            if (IS_EVENT_SET (r->events, EVENT_TIMEOUT))
                printf ("Timeout ");
            if (IS_EVENT_SET (r->events, EVENT_TIMESTAMP))
                printf ("Timestamp ");
            if (IS_EVENT_SET (r->events, EVENT_SIZE))
                printf ("Size ");
            if (IS_EVENT_SET (r->events, EVENT_CONNECTION))
                printf ("Connection ");
            if (IS_EVENT_SET (r->events, EVENT_PERMISSION))
                printf ("Permission ");
            if (IS_EVENT_SET (r->events, EVENT_UID))
                printf ("Uid ");
            if (IS_EVENT_SET (r->events, EVENT_GID))
                printf ("Gid ");
            if (IS_EVENT_SET (r->events, EVENT_UNMONITOR))
                printf ("Unmonitor ");
        }
        printf ("\n");
    }
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="685" endline="692">
{
    int i = 0;
    printf (" %-20s =", "Start program");
    while (s->start->arg[i])
        printf (" %s", s->start->arg[i++]);
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="694" endline="701">
{
    int i = 0;
    printf (" %-20s =", "Stop program");
    while (s->stop->arg[i])
        printf (" %s", s->stop->arg[i++]);
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="708" endline="727">
{
    switch (s->checksum->type) {
    case HASH_MD5 :
        printf (" %-20s = if failed MD5(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
        break;
    case HASH_SHA1 :
        printf (" %-20s = if failed SHA1(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
        break;
    default :
        printf (" %-20s = if failed UNKNOWN(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
        break;
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="710" endline="726">
{
case HASH_MD5 :
    printf (" %-20s = if failed MD5(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
    break;
case HASH_SHA1 :
    printf (" %-20s = if failed SHA1(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
    break;
default :
    printf (" %-20s = if failed UNKNOWN(%s) then %s\n", "Checksum", s->checksum->hash, actionnames[s->checksum->action]);
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="742" endline="781">
{
    for (n = s->portlist; n; n = n->next) {
        if (n->family == AF_INET) {
            if (n->SSL.use_ssl) {
                printf (" %-20s = %s:%d%s [protocol %s via SSL] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
                if (n->SSL.certmd5 != NULL)
                    printf (" %-20s = %s\n", "Server cert md5 sum", n->SSL.certmd5);
            }
            else {
                printf (" %-20s = %s:%d%s [protocol %s] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
            }
        }
        else if (n->family == AF_UNIX) {
            printf (" %-20s = %s [protocol %s] with timeout %d seconds\n", "Unix Socket", n -> pathname, n -> protocol -> name, n -> timeout);
        }
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="745" endline="779">
{
    if (n->family == AF_INET) {
        if (n->SSL.use_ssl) {
            printf (" %-20s = %s:%d%s [protocol %s via SSL] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
            if (n->SSL.certmd5 != NULL)
                printf (" %-20s = %s\n", "Server cert md5 sum", n->SSL.certmd5);
        }
        else {
            printf (" %-20s = %s:%d%s [protocol %s] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
        }
    }
    else if (n->family == AF_UNIX) {
        printf (" %-20s = %s [protocol %s] with timeout %d seconds\n", "Unix Socket", n -> pathname, n -> protocol -> name, n -> timeout);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="748" endline="770">
{
    if (n->SSL.use_ssl) {
        printf (" %-20s = %s:%d%s [protocol %s via SSL] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
        if (n->SSL.certmd5 != NULL)
            printf (" %-20s = %s\n", "Server cert md5 sum", n->SSL.certmd5);
    }
    else {
        printf (" %-20s = %s:%d%s [protocol %s] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="751" endline="760">
{
    printf (" %-20s = %s:%d%s [protocol %s via SSL] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
    if (n->SSL.certmd5 != NULL)
        printf (" %-20s = %s\n", "Server cert md5 sum", n->SSL.certmd5);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="762" endline="768">
{
    printf (" %-20s = %s:%d%s [protocol %s] with timeout %d seconds\n", "Host:Port", n -> hostname, n -> port, n -> request ? n -> request : "", n -> protocol -> name, n -> timeout);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="772" endline="777">
{
    printf (" %-20s = %s [protocol %s] with timeout %d seconds\n", "Unix Socket", n -> pathname, n -> protocol -> name, n -> timeout);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="789" endline="806">
{
    if (t->test_changes) {
        printf (" %-20s = if changed then %s\n", "Timestamp", actionnames [t -> action]);
    }
    else {
        printf (" %-20s = if %s %d second(s) then %s\n", "Timestamp", operatornames [t -> operator], t -> time, actionnames [t -> action]);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="792" endline="796">
{
    printf (" %-20s = if changed then %s\n", "Timestamp", actionnames [t -> action]);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="798" endline="804">
{
    printf (" %-20s = if %s %d second(s) then %s\n", "Timestamp", operatornames [t -> operator], t -> time, actionnames [t -> action]);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="809" endline="826">
{
    if (sl->test_changes) {
        printf (" %-20s = if changed then %s\n", "Size", actionnames [sl -> action]);
    }
    else {
        printf (" %-20s = if %s %lu byte(s) then %s\n", "Size", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="812" endline="816">
{
    printf (" %-20s = if changed then %s\n", "Size", actionnames [sl -> action]);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="818" endline="824">
{
    printf (" %-20s = if %s %lu byte(s) then %s\n", "Size", operatornames [sl -> operator], sl -> size, actionnames [sl -> action]);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="829" endline="854">
{
    if (dl->resource == RESOURCE_ID_INODE) {
        printf (" %-20s = if %s %ld %s then %s\n", "Inodes usage limit", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
    }
    else if (dl->resource == RESOURCE_ID_SPACE) {
        printf (" %-20s = if %s %ld %s then %s\n", "Space usage limit", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="832" endline="841">
{
    printf (" %-20s = if %s %ld %s then %s\n", "Inodes usage limit", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "" : "%", actionnames [dl -> action]);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="843" endline="852">
{
    printf (" %-20s = if %s %ld %s then %s\n", "Space usage limit", operatornames [dl -> operator], (dl -> limit_absolute > - 1) ? dl -> limit_absolute : dl -> limit_percent, (dl -> limit_absolute > - 1) ? "blocks" : "%", actionnames [dl -> action]);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="857" endline="911">
{
    switch (q->resource_id) {
    case RESOURCE_ID_CPU_PERCENT :
        printf (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "CPU usage limit", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_MEM_PERCENT :
        printf (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "Memory usage limit", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_MEM_KBYTE :
        printf (" %-20s = if %s %ldkB for %d cycle(s) then %s\n", "Memory amount limit", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_LOAD1 :
        printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (1min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_LOAD5 :
        printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (5min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    case RESOURCE_ID_LOAD15 :
        printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (15min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
        break;
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="860" endline="910">
{
case RESOURCE_ID_CPU_PERCENT :
    printf (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "CPU usage limit", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_MEM_PERCENT :
    printf (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "Memory usage limit", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_MEM_KBYTE :
    printf (" %-20s = if %s %ldkB for %d cycle(s) then %s\n", "Memory amount limit", operatornames[q->operator], q->limit, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_LOAD1 :
    printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (1min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_LOAD5 :
    printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (5min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
case RESOURCE_ID_LOAD15 :
    printf (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (15min)", operatornames[q->operator], q->limit / 10.0, q->max_cycle, actionnames[q->action]);
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="922" endline="965">
{
    printf (" %-20s = %s\n", "Alert mail to", is_str_defined (r -> to));
    printf (" %-20s = ", "Alert on");
    if (r->events == (~((unsigned int) 0))) {
        printf ("All events");
    }
    else {
        if (IS_EVENT_SET (r->events, EVENT_START))
            printf ("Start ");
        if (IS_EVENT_SET (r->events, EVENT_STOP))
            printf ("Stop ");
        if (IS_EVENT_SET (r->events, EVENT_RESTART))
            printf ("Restart ");
        if (IS_EVENT_SET (r->events, EVENT_CHECKSUM))
            printf ("Checksum ");
        if (IS_EVENT_SET (r->events, EVENT_RESOURCE))
            printf ("Resource ");
        if (IS_EVENT_SET (r->events, EVENT_TIMEOUT))
            printf ("Timeout ");
        if (IS_EVENT_SET (r->events, EVENT_TIMESTAMP))
            printf ("Timestamp ");
        if (IS_EVENT_SET (r->events, EVENT_SIZE))
            printf ("Size ");
        if (IS_EVENT_SET (r->events, EVENT_CONNECTION))
            printf ("Connection ");
        if (IS_EVENT_SET (r->events, EVENT_PERMISSION))
            printf ("Permission ");
        if (IS_EVENT_SET (r->events, EVENT_UID))
            printf ("Uid ");
        if (IS_EVENT_SET (r->events, EVENT_GID))
            printf ("Gid ");
        if (IS_EVENT_SET (r->events, EVENT_UNMONITOR))
            printf ("Unmonitor ");
    }
    printf ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="928" endline="932">
{
    printf ("All events");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="934" endline="961">
{
    if (IS_EVENT_SET (r->events, EVENT_START))
        printf ("Start ");
    if (IS_EVENT_SET (r->events, EVENT_STOP))
        printf ("Stop ");
    if (IS_EVENT_SET (r->events, EVENT_RESTART))
        printf ("Restart ");
    if (IS_EVENT_SET (r->events, EVENT_CHECKSUM))
        printf ("Checksum ");
    if (IS_EVENT_SET (r->events, EVENT_RESOURCE))
        printf ("Resource ");
    if (IS_EVENT_SET (r->events, EVENT_TIMEOUT))
        printf ("Timeout ");
    if (IS_EVENT_SET (r->events, EVENT_TIMESTAMP))
        printf ("Timestamp ");
    if (IS_EVENT_SET (r->events, EVENT_SIZE))
        printf ("Size ");
    if (IS_EVENT_SET (r->events, EVENT_CONNECTION))
        printf ("Connection ");
    if (IS_EVENT_SET (r->events, EVENT_PERMISSION))
        printf ("Permission ");
    if (IS_EVENT_SET (r->events, EVENT_UID))
        printf ("Uid ");
    if (IS_EVENT_SET (r->events, EVENT_GID))
        printf ("Gid ");
    if (IS_EVENT_SET (r->events, EVENT_UNMONITOR))
        printf ("Unmonitor ");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="976" endline="993">
{
    Service_T s;
    char ruler [STRLEN];
    printf ("The service list contains the following entries:\n\n");
    for (s = servicelist_conf; s; s = s->next_conf) {
        printservice (s);
    }
    memset (ruler, '-', STRLEN);
    printf ("%-.79s\n", ruler);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="984" endline="988">
{
    printservice (s);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1003" endline="1049">
{
    FILE *file = NULL;
    int pid = -1;
    ASSERT (pidfile);
    if (!exist_file (pidfile)) {
        return (FALSE);
    }
    if (!isreg_file (pidfile)) {
        log ("%s: pidfile '%s' is not a regular file\n", prog, pidfile);
        return (FALSE);
    }
    if ((file = fopen (pidfile, "r")) == (FILE *) NULL) {
        log ("%s: Error opening the pidfile '%s' -- %s\n", prog, pidfile, STRERROR);
        return (FALSE);
    }
    fscanf (file, "%d", & pid);
    fclose (file);
    if (pid == -1) {
        log ("%s: pidfile `%s' does not contain a valid pidnumber\n", prog, pidfile);
        return (FALSE);
    }
    return (pid_t) pid;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1011" endline="1015">
{
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1018" endline="1023">
{
    log ("%s: pidfile '%s' is not a regular file\n", prog, pidfile);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1026" endline="1032">
{
    log ("%s: Error opening the pidfile '%s' -- %s\n", prog, pidfile, STRERROR);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1038" endline="1045">
{
    log ("%s: pidfile `%s' does not contain a valid pidnumber\n", prog, pidfile);
    return (FALSE);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1057" endline="1073">
{
    pid_t pid;
    ASSERT (s);
    errno = 0;
    if ((pid = get_pid (s->path)))
        if ((getpgid (pid) > -1) || (errno == EPERM))
            return pid;
    memset (s -> procinfo, 0, sizeof * (s -> procinfo));
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1083" endline="1100">
{
    char D [STRLEN];
    struct tm *tm_now;
    time_t now = (date && *date > 0) ? *date : time (NULL);
    tm_now = localtime (&now);
    if (strftime (D, STRLEN, "%a, %d %b %Y %H:%M:%S %z", tm_now) <= 0) {
        return NULL;
    }
    return xstrdup (D);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1092" endline="1096">
{
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1110" endline="1128">
{
    time_t ctime;
    ASSERT (pidfile);
    if ((ctime = get_timestamp (pidfile, S_IFREG))) {
        time_t now = time (&now);
        time_t since = now - ctime;
        return get_uptime (since, sep);
    }
    return xstrdup ("");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1117" endline="1124">
{
    time_t now = time (&now);
    time_t since = now - ctime;
    return get_uptime (since, sep);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1139" endline="1169">
{
    static int min = 60;
    static int hour = 3600;
    static int day = 86400;
    long rest_d;
    long rest_h;
    long rest_m;
    char buf [STRLEN];
    char *p = buf;
    *buf = 0;
    if ((rest_d = delta / day) > 0) {
        p += snprintf (p, STRLEN -(p - buf), "%ldd%s", rest_d, sep);
        delta -= rest_d * day;
    }
    if ((rest_h = delta / hour) > 0 || (rest_d > 0)) {
        p += snprintf (p, STRLEN -(p - buf), "%ldh%s", rest_h, sep);
        delta -= rest_h * hour;
    }
    rest_m = delta / min;
    p += snprintf (p, STRLEN -(p - buf), "%ldm%s", rest_m, sep);
    delta -= rest_m * min;
    return xstrdup (buf);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1153" endline="1156">
{
    p += snprintf (p, STRLEN -(p - buf), "%ldd%s", rest_d, sep);
    delta -= rest_d * day;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1158" endline="1161">
{
    p += snprintf (p, STRLEN -(p - buf), "%ldh%s", rest_h, sep);
    delta -= rest_h * hour;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1176" endline="1245">
{
    int hashlength = 16;
    ASSERT (file);
    switch (hashtype) {
    case HASH_MD5 :
        hashlength = 16;
        break;
    case HASH_SHA1 :
        hashlength = 20;
        break;
    default :
        return NULL;
    }
    if (isreg_file (file)) {
        FILE *f = fopen (file, "r");
        if (f) {
            int i;
            unsigned char buf [hashlength];
            char result [STRLEN];
            char *r = result;
            int fresult = 0;
            *result = 0;
            switch (hashtype) {
            case HASH_MD5 :
                fresult = md5_stream (f, buf);
                break;
            case HASH_SHA1 :
                fresult = sha_stream (f, buf);
                break;
            }
            if (fresult) {
                fclose (f);
                return NULL;
            }
            fclose (f);
            for (i = 0; i < hashlength; ++i)
                r += snprintf (r, STRLEN -(r - result), "%02x", buf[i]);
            return (xstrdup (result));
        }
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1183" endline="1194">
{
case HASH_MD5 :
    hashlength = 16;
    break;
case HASH_SHA1 :
    hashlength = 20;
    break;
default :
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1197" endline="1241">
{
    FILE *f = fopen (file, "r");
    if (f) {
        int i;
        unsigned char buf [hashlength];
        char result [STRLEN];
        char *r = result;
        int fresult = 0;
        *result = 0;
        switch (hashtype) {
        case HASH_MD5 :
            fresult = md5_stream (f, buf);
            break;
        case HASH_SHA1 :
            fresult = sha_stream (f, buf);
            break;
        }
        if (fresult) {
            fclose (f);
            return NULL;
        }
        fclose (f);
        for (i = 0; i < hashlength; ++i)
            r += snprintf (r, STRLEN -(r - result), "%02x", buf[i]);
        return (xstrdup (result));
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1202" endline="1239">
{
    int i;
    unsigned char buf [hashlength];
    char result [STRLEN];
    char *r = result;
    int fresult = 0;
    *result = 0;
    switch (hashtype) {
    case HASH_MD5 :
        fresult = md5_stream (f, buf);
        break;
    case HASH_SHA1 :
        fresult = sha_stream (f, buf);
        break;
    }
    if (fresult) {
        fclose (f);
        return NULL;
    }
    fclose (f);
    for (i = 0; i < hashlength; ++i)
        r += snprintf (r, STRLEN -(r - result), "%02x", buf[i]);
    return (xstrdup (result));
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1213" endline="1221">
{
case HASH_MD5 :
    fresult = md5_stream (f, buf);
    break;
case HASH_SHA1 :
    fresult = sha_stream (f, buf);
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1224" endline="1230">
{
    fclose (f);
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1256" endline="1293">
{
    char *newSum;
    ASSERT (file);
    ASSERT (sum);
    newSum = get_checksum (file, hashtype);
    if (newSum) {
        int rv;
        switch (hashtype) {
        case HASH_MD5 :
            rv = (!strncmp (sum, newSum, 32));
            break;
        case HASH_SHA1 :
            rv = (!strncmp (sum, newSum, 40));
            break;
        default :
            rv = FALSE;
        }
        FREE (newSum);
        return (rv);
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1267" endline="1289">
{
    int rv;
    switch (hashtype) {
    case HASH_MD5 :
        rv = (!strncmp (sum, newSum, 32));
        break;
    case HASH_SHA1 :
        rv = (!strncmp (sum, newSum, 40));
        break;
    default :
        rv = FALSE;
    }
    FREE (newSum);
    return (rv);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1272" endline="1283">
{
case HASH_MD5 :
    rv = (!strncmp (sum, newSum, 32));
    break;
case HASH_SHA1 :
    rv = (!strncmp (sum, newSum, 40));
    break;
default :
    rv = FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1303" endline="1328">
{
    register int x, y;
    unsigned char *str;
    static unsigned char hexchars [] = "0123456789ABCDEF";
    ASSERT (uri);
    str = (unsigned char *) xmalloc (3 * strlen (uri) + 1);
    for (x = 0, y = 0; uri[x]; x++, y++) {
        if (is_unsafe ((unsigned char *) &uri[x])) {
            str[y++] = '%';
            str[y++] = hexchars[(unsigned char) uri[x] >> 4];
            str[y] = hexchars[(unsigned char) uri[x] & 0xf];
        }
        else
            str[y] = (unsigned char) uri[x];
    }
    str[y] = '\0';
    return ((char *) str);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1314" endline="1322">
{
    if (is_unsafe ((unsigned char *) &uri[x])) {
        str[y++] = '%';
        str[y++] = hexchars[(unsigned char) uri[x] >> 4];
        str[y] = hexchars[(unsigned char) uri[x] & 0xf];
    }
    else
        str[y] = (unsigned char) uri[x];
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1316" endline="1320">
{
    str[y++] = '%';
    str[y++] = hexchars[(unsigned char) uri[x] >> 4];
    str[y] = hexchars[(unsigned char) uri[x] & 0xf];
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1338" endline="1354">
{
    register int x, y;
    if (!(url && *url))
        return url;
    replace_char (url, '+', ' ');
    for (x = 0, y = 0; url[y]; ++x, ++y) {
        if ((url[x] = url[y]) == '%') {
            url[x] = x2c (&url[y + 1]);
            y += 2;
        }
    }
    url[x] = 0;
    return url;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1345" endline="1351">
{
    if ((url[x] = url[y]) == '%') {
        url[x] = x2c (&url[y + 1]);
        y += 2;
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1347" endline="1350">
{
    url[x] = x2c (&url[y + 1]);
    y += 2;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1363" endline="1417">
{
    Auth_T c = Run.credentials;
    if (c == NULL) {
        return xstrdup ("\r\n");
    }
    while (c != NULL) {
        if (c->digesttype == DIGEST_CLEARTEXT) {
            break;
        }
        c = c->next;
    }
    if (c != NULL) {
        char *auth, *b64;
        char buf [STRLEN];
        snprintf (buf, STRLEN, "%s:%s", c -> uname, c -> passwd);
        if (!(b64 = encode_base64 (strlen (buf), (unsigned char *) buf))) {
            log ("Failed to base64 encode authentication header\n");
            return NULL;
        }
        auth = xcalloc (sizeof (char), STRLEN +1);
        snprintf (auth, STRLEN, "Authorization: Basic %s\r\n", b64);
        FREE (b64);
        return auth;
    }
    log ("Cleattext credentials needed for basic authorization!\n");
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1368" endline="1372">
{
    return xstrdup ("\r\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1377" endline="1388">
{
    if (c->digesttype == DIGEST_CLEARTEXT) {
        break;
    }
    c = c->next;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1380" endline="1384">
{
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1391" endline="1412">
{
    char *auth, *b64;
    char buf [STRLEN];
    snprintf (buf, STRLEN, "%s:%s", c -> uname, c -> passwd);
    if (!(b64 = encode_base64 (strlen (buf), (unsigned char *) buf))) {
        log ("Failed to base64 encode authentication header\n");
        return NULL;
    }
    auth = xcalloc (sizeof (char), STRLEN +1);
    snprintf (auth, STRLEN, "Authorization: Basic %s\r\n", b64);
    FREE (b64);
    return auth;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1401" endline="1404">
{
    log ("Failed to base64 encode authentication header\n");
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1429" endline="1458">
{
    int n;
    int size = STRLEN;
    char *buf = xmalloc (size);
    ASSERT (s);
    while (TRUE) {
        n = vsnprintf (buf, size, s, ap);
        if (n > -1 && n < size)
            break;
        if (n > -1)
            size = n + 1;
        else
            size *= 2;
        buf = xresize (buf, size);
    }
    *len = n;
    return buf;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1438" endline="1452">
{
    n = vsnprintf (buf, size, s, ap);
    if (n > -1 && n < size)
        break;
    if (n > -1)
        size = n + 1;
    else
        size *= 2;
    buf = xresize (buf, size);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1466" endline="1474">
{
    int i;
    for (i = 0; i < 3; i++)
        if (close (i) == -1 || open ("/dev/null", O_RDWR) != i)
            log ("Cannot reopen standard file descriptor (%d) -- %s\n", i, STRERROR);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1483" endline="1497">
{
    int i;
    int max_descriptors = 1024;
    for (i = 3; i < max_descriptors; i++)
        (void) close (i);
    errno = 0;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1504" endline="1523">
{
    Auth_T c = Run.credentials;
    while (c != NULL) {
        if (strcmp (c->uname, uname) == 0) {
            return c;
        }
        c = c->next;
    }
    return NULL;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1509" endline="1520">
{
    if (strcmp (c->uname, uname) == 0) {
        return c;
    }
    c = c->next;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1512" endline="1516">
{
    return c;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1527" endline="1597">
{
    Auth_T c = get_user_credentials (uname);
    char outside_crypt [STRLEN];
    if (c == NULL) {
        return FALSE;
    }
    switch (c->digesttype) {
    case DIGEST_CLEARTEXT :
        {
            strncpy (outside_crypt, outside, STRLEN);
            break;
        }
    case DIGEST_MD5 :
        {
            char id [STRLEN];
            char salt [STRLEN];
            char *temp;
            strncpy (id, c -> passwd, STRLEN);
            temp = strchr (id +1, '$') + 1;
            *temp = '\0';
            strncpy (salt, c -> passwd + strlen (id), STRLEN);
            temp = strchr (salt, '$');
            *temp = '\0';
            if (md5_crypt (outside, id, salt, outside_crypt, STRLEN) == NULL) {
                log ("Cannot generate MD5 digest error.\n");
                return FALSE;
            }
            break;
        }
    case DIGEST_CRYPT :
        {
            char salt [3];
            char *temp;
            snprintf (salt, 3, "%c%c", c -> passwd [0], c -> passwd [1]);
            temp = crypt (outside, salt);
            strncpy (outside_crypt, temp, STRLEN);
            break;
        }
    default :
        log ("Unknown password digestion method.\n");
        return FALSE;
    }
    if (strcmp (outside_crypt, c->passwd) == 0) {
        return TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1533" endline="1537">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1539" endline="1589">
{
case DIGEST_CLEARTEXT :
    {
        strncpy (outside_crypt, outside, STRLEN);
        break;
    }
case DIGEST_MD5 :
    {
        char id [STRLEN];
        char salt [STRLEN];
        char *temp;
        strncpy (id, c -> passwd, STRLEN);
        temp = strchr (id +1, '$') + 1;
        *temp = '\0';
        strncpy (salt, c -> passwd + strlen (id), STRLEN);
        temp = strchr (salt, '$');
        *temp = '\0';
        if (md5_crypt (outside, id, salt, outside_crypt, STRLEN) == NULL) {
            log ("Cannot generate MD5 digest error.\n");
            return FALSE;
        }
        break;
    }
case DIGEST_CRYPT :
    {
        char salt [3];
        char *temp;
        snprintf (salt, 3, "%c%c", c -> passwd [0], c -> passwd [1]);
        temp = crypt (outside, salt);
        strncpy (outside_crypt, temp, STRLEN);
        break;
    }
default :
    log ("Unknown password digestion method.\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1541" endline="1545">
{
    strncpy (outside_crypt, outside, STRLEN);
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1547" endline="1574">
{
    char id [STRLEN];
    char salt [STRLEN];
    char *temp;
    strncpy (id, c -> passwd, STRLEN);
    temp = strchr (id +1, '$') + 1;
    *temp = '\0';
    strncpy (salt, c -> passwd + strlen (id), STRLEN);
    temp = strchr (salt, '$');
    *temp = '\0';
    if (md5_crypt (outside, id, salt, outside_crypt, STRLEN) == NULL) {
        log ("Cannot generate MD5 digest error.\n");
        return FALSE;
    }
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1566" endline="1571">
{
    log ("Cannot generate MD5 digest error.\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1576" endline="1584">
{
    char salt [3];
    char *temp;
    snprintf (salt, 3, "%c%c", c -> passwd [0], c -> passwd [1]);
    temp = crypt (outside, salt);
    strncpy (outside_crypt, temp, STRLEN);
    break;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1592" endline="1594">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1608" endline="1612">
{
    return (is_strdefined (var) ? var : "(not defined)");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1621" endline="1642">
{
    int i;
    static unsigned char unsafe [] = "<>\"#{}|\\^~[]`";
    ASSERT (c);
    if (33 > *c || *c > 176)
        return TRUE;
    if (*c == '%') {
        if (isxdigit (*(c + 1)) && isxdigit (*(c + 2)))
            return FALSE;
        return TRUE;
    }
    for (i = 0; unsafe[i]; i++)
        if (*c == unsafe[i])
            return TRUE;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1632" endline="1635">
{
    if (isxdigit (*(c + 1)) && isxdigit (*(c + 2)))
        return FALSE;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1649" endline="1659">
{
    register char digit;
    digit = ((hex[0] >= 'A') ? ((hex[0] & 0xdf) - 'A') + 10 : (hex[0] - '0'));
    digit *= 16;
    digit += (hex[1] >= 'A' ? ((hex[1] & 0xdf) - 'A') + 10 : (hex[1] - '0'));
    return (digit);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="129" endline="157">
{
    Service_T s;
    sigset_t ns, os;
    if (!update_loadavg ())
        log ("Update of loadavg has failed!\n");
    if (Run.doprocess)
        initprocesstree ();
    for (s = servicelist; s; s = s->next) {
        if (s->visited)
            continue;
        LOCK (s -> mutex)
        set_signal_block (& ns, & os);
        if (s->do_monitor && !check_skip (s) && !check_timeout (s))
            s->check (s);
        unset_signal_block (& os);
        END_LOCK;
    }
    if (Run.doprocess)
        delprocesstree ();
    reset_depend ();
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="141" endline="150">
{
    if (s->visited)
        continue;
    LOCK (s -> mutex)
    set_signal_block (& ns, & os);
    if (s->do_monitor && !check_skip (s) && !check_timeout (s))
        s->check (s);
    unset_signal_block (& os);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="165" endline="252">
{
    pid_t pid = -1;
    Port_T pp = NULL;
    Resource_T pr = NULL;
    char report [STRLEN] = {0};
    if (!(pid = is_process_running (s))) {
        memset (s -> procinfo, 0, sizeof * (s -> procinfo));
        Event_post (s, EVENT_START, "Event: Process '%s' is not running.\n", s -> name);
        return FALSE;
    }
    else {
        DEBUG ("'%s' is running with pid %d\n", s -> name, (int) pid);
    }
    if (Run.doprocess) {
        if (update_process_data (s, ptree, ptreesize, pid)) {
            if (!check_process_state (s, report)) {
                Event_post (s, EVENT_RESOURCE, "Event: %s\n", report);
            }
            else {
                DEBUG ("'%s' check_process_state() passed.\n", s -> name);
            }
            for (pr = s->resourcelist; pr; pr = pr->next) {
                if (!check_process_resources (s, pr, report)) {
                    pr->cycle = 0;
                    if (!pr->event_handled) {
                        pr->event_flag = TRUE;
                        pr->event_handled = TRUE;
                        if (!eval_actions (pr->action, s, report, "resource", EVENT_RESOURCE)) {
                            reset_resource_counter (s);
                            return FALSE;
                        }
                    }
                }
                else {
                    pr->event_handled = FALSE;
                }
            }
        }
        else {
            log ("'%s' failed to get service data\n", s -> name);
        }
    }
    for (pp = s->portlist; pp; pp = pp->next) {
        if (!check_process_connection (s, pp, report)) {
            if (!pp->event_handled) {
                pp->event_flag = TRUE;
                pp->event_handled = TRUE;
                if (!eval_actions (pp->action, s, report, "connection", EVENT_CONNECTION)) {
                    return FALSE;
                }
            }
        }
        else {
            pp->event_handled = FALSE;
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="174" endline="180">
{
    memset (s -> procinfo, 0, sizeof * (s -> procinfo));
    Event_post (s, EVENT_START, "Event: Process '%s' is not running.\n", s -> name);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="182" endline="184">
{
    DEBUG ("'%s' is running with pid %d\n", s -> name, (int) pid);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="187" endline="226">
{
    if (update_process_data (s, ptree, ptreesize, pid)) {
        if (!check_process_state (s, report)) {
            Event_post (s, EVENT_RESOURCE, "Event: %s\n", report);
        }
        else {
            DEBUG ("'%s' check_process_state() passed.\n", s -> name);
        }
        for (pr = s->resourcelist; pr; pr = pr->next) {
            if (!check_process_resources (s, pr, report)) {
                pr->cycle = 0;
                if (!pr->event_handled) {
                    pr->event_flag = TRUE;
                    pr->event_handled = TRUE;
                    if (!eval_actions (pr->action, s, report, "resource", EVENT_RESOURCE)) {
                        reset_resource_counter (s);
                        return FALSE;
                    }
                }
            }
            else {
                pr->event_handled = FALSE;
            }
        }
    }
    else {
        log ("'%s' failed to get service data\n", s -> name);
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="189" endline="221">
{
    if (!check_process_state (s, report)) {
        Event_post (s, EVENT_RESOURCE, "Event: %s\n", report);
    }
    else {
        DEBUG ("'%s' check_process_state() passed.\n", s -> name);
    }
    for (pr = s->resourcelist; pr; pr = pr->next) {
        if (!check_process_resources (s, pr, report)) {
            pr->cycle = 0;
            if (!pr->event_handled) {
                pr->event_flag = TRUE;
                pr->event_handled = TRUE;
                if (!eval_actions (pr->action, s, report, "resource", EVENT_RESOURCE)) {
                    reset_resource_counter (s);
                    return FALSE;
                }
            }
        }
        else {
            pr->event_handled = FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="191" endline="193">
{
    Event_post (s, EVENT_RESOURCE, "Event: %s\n", report);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="195" endline="197">
{
    DEBUG ("'%s' check_process_state() passed.\n", s -> name);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="200" endline="220">
{
    if (!check_process_resources (s, pr, report)) {
        pr->cycle = 0;
        if (!pr->event_handled) {
            pr->event_flag = TRUE;
            pr->event_handled = TRUE;
            if (!eval_actions (pr->action, s, report, "resource", EVENT_RESOURCE)) {
                reset_resource_counter (s);
                return FALSE;
            }
        }
    }
    else {
        pr->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="202" endline="215">
{
    pr->cycle = 0;
    if (!pr->event_handled) {
        pr->event_flag = TRUE;
        pr->event_handled = TRUE;
        if (!eval_actions (pr->action, s, report, "resource", EVENT_RESOURCE)) {
            reset_resource_counter (s);
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="205" endline="214">
{
    pr->event_flag = TRUE;
    pr->event_handled = TRUE;
    if (!eval_actions (pr->action, s, report, "resource", EVENT_RESOURCE)) {
        reset_resource_counter (s);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="210" endline="213">
{
    reset_resource_counter (s);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="217" endline="219">
{
    pr->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="223" endline="225">
{
    log ("'%s' failed to get service data\n", s -> name);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="230" endline="248">
{
    if (!check_process_connection (s, pp, report)) {
        if (!pp->event_handled) {
            pp->event_flag = TRUE;
            pp->event_handled = TRUE;
            if (!eval_actions (pp->action, s, report, "connection", EVENT_CONNECTION)) {
                return FALSE;
            }
        }
    }
    else {
        pp->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="232" endline="243">
{
    if (!pp->event_handled) {
        pp->event_flag = TRUE;
        pp->event_handled = TRUE;
        if (!eval_actions (pp->action, s, report, "connection", EVENT_CONNECTION)) {
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="234" endline="242">
{
    pp->event_flag = TRUE;
    pp->event_handled = TRUE;
    if (!eval_actions (pp->action, s, report, "connection", EVENT_CONNECTION)) {
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="239" endline="241">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="245" endline="247">
{
    pp->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="260" endline="355">
{
    Device_T td;
    struct stat stat_buf;
    char report [STRLEN] = {0};
    if (stat (s->path, &stat_buf) != 0) {
        if (!s->event_handled) {
            Event_post (s, EVENT_START, "Event: device '%s' doesn't exist\n", s -> name);
            s->event_handled = TRUE;
        }
        return FALSE;
    }
    else {
        s->event_handled = FALSE;
    }
    if (check_perm (s, stat_buf.st_mode, report)) {
        s->perm->event_flag = TRUE;
        if (!eval_actions (s->perm->action, s, report, "permission", EVENT_PERMISSION))
            return FALSE;
    }
    if (check_uid (s, stat_buf.st_uid, report)) {
        s->uid->event_flag = TRUE;
        if (!eval_actions (s->uid->action, s, report, "uid", EVENT_UID))
            return FALSE;
    }
    if (check_gid (s, stat_buf.st_gid, report)) {
        s->gid->event_flag = TRUE;
        if (!eval_actions (s->gid->action, s, report, "gid", EVENT_GID))
            return FALSE;
    }
    if (!DeviceInfo_Usage (s->devinfo, s->path)) {
        if (!s->devinfo->event_handled) {
            Event_post (s, EVENT_START, "Event: unable to read device '%s' state\n", s -> path);
            s->devinfo->event_handled = TRUE;
        }
        return FALSE;
    }
    else {
        s->devinfo->event_handled = FALSE;
        DEBUG ("'%s' succeeded getting device statistic for %s\n", s -> name, s -> path);
    }
    if (s->devicelist) {
        for (td = s->devicelist; td; td = td->next) {
            if (!check_device_resources (s, td, report)) {
                if (!td->event_handled) {
                    td->event_flag = TRUE;
                    td->event_handled = TRUE;
                    if (!eval_actions (td->action, s, report, "device", EVENT_RESOURCE)) {
                        return FALSE;
                    }
                }
            }
            else {
                td->event_handled = FALSE;
            }
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="267" endline="274">
{
    if (!s->event_handled) {
        Event_post (s, EVENT_START, "Event: device '%s' doesn't exist\n", s -> name);
        s->event_handled = TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="269" endline="272">
{
    Event_post (s, EVENT_START, "Event: device '%s' doesn't exist\n", s -> name);
    s->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="276" endline="278">
{
    s->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="281" endline="286">
{
    s->perm->event_flag = TRUE;
    if (!eval_actions (s->perm->action, s, report, "permission", EVENT_PERMISSION))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="289" endline="293">
{
    s->uid->event_flag = TRUE;
    if (!eval_actions (s->uid->action, s, report, "uid", EVENT_UID))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="296" endline="300">
{
    s->gid->event_flag = TRUE;
    if (!eval_actions (s->gid->action, s, report, "gid", EVENT_GID))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="303" endline="312">
{
    if (!s->devinfo->event_handled) {
        Event_post (s, EVENT_START, "Event: unable to read device '%s' state\n", s -> path);
        s->devinfo->event_handled = TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="305" endline="310">
{
    Event_post (s, EVENT_START, "Event: unable to read device '%s' state\n", s -> path);
    s->devinfo->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="314" endline="317">
{
    s->devinfo->event_handled = FALSE;
    DEBUG ("'%s' succeeded getting device statistic for %s\n", s -> name, s -> path);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="321" endline="351">
{
    for (td = s->devicelist; td; td = td->next) {
        if (!check_device_resources (s, td, report)) {
            if (!td->event_handled) {
                td->event_flag = TRUE;
                td->event_handled = TRUE;
                if (!eval_actions (td->action, s, report, "device", EVENT_RESOURCE)) {
                    return FALSE;
                }
            }
        }
        else {
            td->event_handled = FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="323" endline="349">
{
    if (!check_device_resources (s, td, report)) {
        if (!td->event_handled) {
            td->event_flag = TRUE;
            td->event_handled = TRUE;
            if (!eval_actions (td->action, s, report, "device", EVENT_RESOURCE)) {
                return FALSE;
            }
        }
    }
    else {
        td->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="325" endline="344">
{
    if (!td->event_handled) {
        td->event_flag = TRUE;
        td->event_handled = TRUE;
        if (!eval_actions (td->action, s, report, "device", EVENT_RESOURCE)) {
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="327" endline="343">
{
    td->event_flag = TRUE;
    td->event_handled = TRUE;
    if (!eval_actions (td->action, s, report, "device", EVENT_RESOURCE)) {
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="340" endline="342">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="346" endline="348">
{
    td->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="363" endline="460">
{
    Size_T sl;
    struct stat stat_buf;
    char report [STRLEN] = {0};
    if (stat (s->path, &stat_buf) != 0) {
        if (!s->event_handled) {
            Event_post (s, EVENT_START, "Event: file '%s' doesn't exist\n", s -> name);
            s->event_handled = TRUE;
        }
        return FALSE;
    }
    else {
        s->event_handled = TRUE;
    }
    if (!S_ISREG (stat_buf.st_mode)) {
        if (!s->event_handled) {
            Event_post (s, EVENT_UNMONITOR, "Event: '%s' is not regular file\n", s -> name);
            s->event_handled = TRUE;
        }
        return FALSE;
    }
    else {
        s->event_handled = FALSE;
    }
    if (check_checksum (s, report)) {
        s->checksum->event_flag = TRUE;
        if (!eval_actions (s->checksum->action, s, report, "checksum", EVENT_CHECKSUM))
            return FALSE;
    }
    if (check_perm (s, stat_buf.st_mode, report)) {
        s->perm->event_flag = TRUE;
        if (!eval_actions (s->perm->action, s, report, "permission", EVENT_PERMISSION))
            return FALSE;
    }
    if (check_uid (s, stat_buf.st_uid, report)) {
        s->uid->event_flag = TRUE;
        if (!eval_actions (s->uid->action, s, report, "uid", EVENT_UID))
            return FALSE;
    }
    if (check_gid (s, stat_buf.st_gid, report)) {
        s->gid->event_flag = TRUE;
        if (!eval_actions (s->gid->action, s, report, "gid", EVENT_GID))
            return FALSE;
    }
    for (sl = s->sizelist; sl; sl = sl->next) {
        if (!check_size_item (s, sl, (unsigned long) stat_buf.st_size, report)) {
            if (!sl->event_handled) {
                sl->event_flag = TRUE;
                sl->event_handled = TRUE;
                if (!eval_actions (sl->action, s, report, "size", EVENT_SIZE)) {
                    return FALSE;
                }
            }
        }
        else {
            sl->event_handled = FALSE;
        }
    }
    if (!check_timestamps (s))
        return FALSE;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="370" endline="377">
{
    if (!s->event_handled) {
        Event_post (s, EVENT_START, "Event: file '%s' doesn't exist\n", s -> name);
        s->event_handled = TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="372" endline="375">
{
    Event_post (s, EVENT_START, "Event: file '%s' doesn't exist\n", s -> name);
    s->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="379" endline="381">
{
    s->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="384" endline="392">
{
    if (!s->event_handled) {
        Event_post (s, EVENT_UNMONITOR, "Event: '%s' is not regular file\n", s -> name);
        s->event_handled = TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="386" endline="390">
{
    Event_post (s, EVENT_UNMONITOR, "Event: '%s' is not regular file\n", s -> name);
    s->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="394" endline="396">
{
    s->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="399" endline="404">
{
    s->checksum->event_flag = TRUE;
    if (!eval_actions (s->checksum->action, s, report, "checksum", EVENT_CHECKSUM))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="407" endline="412">
{
    s->perm->event_flag = TRUE;
    if (!eval_actions (s->perm->action, s, report, "permission", EVENT_PERMISSION))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="415" endline="419">
{
    s->uid->event_flag = TRUE;
    if (!eval_actions (s->uid->action, s, report, "uid", EVENT_UID))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="422" endline="426">
{
    s->gid->event_flag = TRUE;
    if (!eval_actions (s->gid->action, s, report, "gid", EVENT_GID))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="429" endline="453">
{
    if (!check_size_item (s, sl, (unsigned long) stat_buf.st_size, report)) {
        if (!sl->event_handled) {
            sl->event_flag = TRUE;
            sl->event_handled = TRUE;
            if (!eval_actions (sl->action, s, report, "size", EVENT_SIZE)) {
                return FALSE;
            }
        }
    }
    else {
        sl->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="431" endline="448">
{
    if (!sl->event_handled) {
        sl->event_flag = TRUE;
        sl->event_handled = TRUE;
        if (!eval_actions (sl->action, s, report, "size", EVENT_SIZE)) {
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="433" endline="447">
{
    sl->event_flag = TRUE;
    sl->event_handled = TRUE;
    if (!eval_actions (sl->action, s, report, "size", EVENT_SIZE)) {
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="444" endline="446">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="450" endline="452">
{
    sl->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="468" endline="530">
{
    struct stat stat_buf;
    char report [STRLEN] = {0};
    if (stat (s->path, &stat_buf) != 0) {
        if (!s->event_handled) {
            Event_post (s, EVENT_START, "Event: directory '%s' doesn't exist\n", s -> name);
            s->event_handled = TRUE;
        }
        return FALSE;
    }
    else {
        s->event_handled = FALSE;
    }
    if (!S_ISDIR (stat_buf.st_mode)) {
        if (!s->event_handled) {
            Event_post (s, EVENT_UNMONITOR, "Event: '%s' is not directory\n", s -> name);
            s->event_handled = TRUE;
        }
        return FALSE;
    }
    else {
        s->event_handled = FALSE;
    }
    if (check_perm (s, stat_buf.st_mode, report)) {
        s->perm->event_flag = TRUE;
        if (!eval_actions (s->perm->action, s, report, "permission", EVENT_PERMISSION))
            return FALSE;
    }
    if (check_uid (s, stat_buf.st_uid, report)) {
        s->uid->event_flag = TRUE;
        if (!eval_actions (s->uid->action, s, report, "uid", EVENT_UID))
            return FALSE;
    }
    if (check_gid (s, stat_buf.st_gid, report)) {
        s->gid->event_flag = TRUE;
        if (!eval_actions (s->gid->action, s, report, "gid", EVENT_GID))
            return FALSE;
    }
    if (!check_timestamps (s))
        return FALSE;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="474" endline="482">
{
    if (!s->event_handled) {
        Event_post (s, EVENT_START, "Event: directory '%s' doesn't exist\n", s -> name);
        s->event_handled = TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="476" endline="480">
{
    Event_post (s, EVENT_START, "Event: directory '%s' doesn't exist\n", s -> name);
    s->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="484" endline="486">
{
    s->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="489" endline="497">
{
    if (!s->event_handled) {
        Event_post (s, EVENT_UNMONITOR, "Event: '%s' is not directory\n", s -> name);
        s->event_handled = TRUE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="491" endline="495">
{
    Event_post (s, EVENT_UNMONITOR, "Event: '%s' is not directory\n", s -> name);
    s->event_handled = TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="499" endline="501">
{
    s->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="504" endline="509">
{
    s->perm->event_flag = TRUE;
    if (!eval_actions (s->perm->action, s, report, "permission", EVENT_PERMISSION))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="512" endline="516">
{
    s->uid->event_flag = TRUE;
    if (!eval_actions (s->uid->action, s, report, "uid", EVENT_UID))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="519" endline="523">
{
    s->gid->event_flag = TRUE;
    if (!eval_actions (s->gid->action, s, report, "gid", EVENT_GID))
        return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="539" endline="606">
{
    Port_T p = NULL;
    char report [STRLEN] = {0};
    Icmp_T icmp, last_ping = NULL;
    for (icmp = s->icmplist; icmp; icmp = icmp->next) {
        if (!check_icmp_connection (s, icmp, report)) {
            icmp->is_available = FALSE;
            last_ping = icmp;
            if (!icmp->event_handled) {
                icmp->event_handled = TRUE;
                icmp->event_flag = TRUE;
                if (!eval_actions (icmp->action, s, report, "icmp", EVENT_CONNECTION)) {
                    return FALSE;
                }
            }
        }
        else {
            icmp->is_available = TRUE;
            icmp->event_handled = FALSE;
        }
    }
    if (last_ping && !last_ping->is_available) {
        DEBUG ("'%s' icmp ping failed, skipping any port connection tests\n", s -> name);
        return FALSE;
    }
    for (p = s->portlist; p; p = p->next) {
        if (!check_process_connection (s, p, report)) {
            p->is_available = FALSE;
            if (!p->event_handled) {
                p->event_flag = TRUE;
                p->event_handled = TRUE;
                if (!eval_actions (p->action, s, report, "connection", EVENT_CONNECTION)) {
                    return FALSE;
                }
            }
        }
        else {
            p->is_available = TRUE;
            p->event_handled = FALSE;
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="547" endline="568">
{
    if (!check_icmp_connection (s, icmp, report)) {
        icmp->is_available = FALSE;
        last_ping = icmp;
        if (!icmp->event_handled) {
            icmp->event_handled = TRUE;
            icmp->event_flag = TRUE;
            if (!eval_actions (icmp->action, s, report, "icmp", EVENT_CONNECTION)) {
                return FALSE;
            }
        }
    }
    else {
        icmp->is_available = TRUE;
        icmp->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="549" endline="562">
{
    icmp->is_available = FALSE;
    last_ping = icmp;
    if (!icmp->event_handled) {
        icmp->event_handled = TRUE;
        icmp->event_flag = TRUE;
        if (!eval_actions (icmp->action, s, report, "icmp", EVENT_CONNECTION)) {
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="553" endline="561">
{
    icmp->event_handled = TRUE;
    icmp->event_flag = TRUE;
    if (!eval_actions (icmp->action, s, report, "icmp", EVENT_CONNECTION)) {
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="558" endline="560">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="564" endline="567">
{
    icmp->is_available = TRUE;
    icmp->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="573" endline="577">
{
    DEBUG ("'%s' icmp ping failed, skipping any port connection tests\n", s -> name);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="582" endline="602">
{
    if (!check_process_connection (s, p, report)) {
        p->is_available = FALSE;
        if (!p->event_handled) {
            p->event_flag = TRUE;
            p->event_handled = TRUE;
            if (!eval_actions (p->action, s, report, "connection", EVENT_CONNECTION)) {
                return FALSE;
            }
        }
    }
    else {
        p->is_available = TRUE;
        p->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="584" endline="596">
{
    p->is_available = FALSE;
    if (!p->event_handled) {
        p->event_flag = TRUE;
        p->event_handled = TRUE;
        if (!eval_actions (p->action, s, report, "connection", EVENT_CONNECTION)) {
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="587" endline="595">
{
    p->event_flag = TRUE;
    p->event_handled = TRUE;
    if (!eval_actions (p->action, s, report, "connection", EVENT_CONNECTION)) {
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="592" endline="594">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="598" endline="601">
{
    p->is_available = TRUE;
    p->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="618" endline="654">
{
    ASSERT (s);
    ASSERT (check);
    ASSERT (report);
    switch (action) {
    case ACTION_ALERT :
        Event_post (s, event, "Event: %s\n", report);
        break;
    case ACTION_STOP :
        Event_post (s, EVENT_STOP, "Event: %s\n", report);
        return FALSE;
    case ACTION_RESTART :
        Event_post (s, EVENT_RESTART, "Event: %s\n", report);
        return FALSE;
    case ACTION_EXEC :
        Event_post (s, event, "Event: %s\n", report);
        break;
    case ACTION_UNMONITOR :
        Event_post (s, event, "Event: %s\n", report);
        Event_post (s, EVENT_UNMONITOR, "Event: %s\n", report);
        return FALSE;
    default :
        log ("'%s' error -- unknown failure action: [%s]\n", s->name, check);
        break;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="625" endline="651">
{
case ACTION_ALERT :
    Event_post (s, event, "Event: %s\n", report);
    break;
case ACTION_STOP :
    Event_post (s, EVENT_STOP, "Event: %s\n", report);
    return FALSE;
case ACTION_RESTART :
    Event_post (s, EVENT_RESTART, "Event: %s\n", report);
    return FALSE;
case ACTION_EXEC :
    Event_post (s, event, "Event: %s\n", report);
    break;
case ACTION_UNMONITOR :
    Event_post (s, event, "Event: %s\n", report);
    Event_post (s, EVENT_UNMONITOR, "Event: %s\n", report);
    return FALSE;
default :
    log ("'%s' error -- unknown failure action: [%s]\n", s->name, check);
    break;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="662" endline="714">
{
    Socket_T socket;
    volatile int rv = TRUE;
    ASSERT (s && p);
    socket = socket_create (p);
    if (!socket) {
        snprintf (report, STRLEN, "'%s' failed, cannot open a connection to %s", s -> name, p -> address);
        rv = FALSE;
        goto error;
    }
    else {
        DEBUG ("'%s' succeeded connecting to %s\n", s -> name, p -> address);
    }
    if (!socket_is_ready (socket)) {
        snprintf (report, STRLEN, "'%s' failed, the socket at %s is not ready for i|o -- %s", s -> name, p -> address, STRERROR);
        rv = FALSE;
        goto error;
    }
    if (!p->protocol->check (socket)) {
        snprintf (report, STRLEN, "'%s' failed protocol test [%s] at %s.", s -> name, p -> protocol -> name, p -> address);
        rv = FALSE;
        goto error;
    }
    else {
        DEBUG ("'%s' succeeded testing protocol [%s] at %s\n", s -> name, p -> protocol -> name, p -> address);
    }
error :
    if (socket)
        socket_free (&socket);
    return rv;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="672" endline="678">
{
    snprintf (report, STRLEN, "'%s' failed, cannot open a connection to %s", s -> name, p -> address);
    rv = FALSE;
    goto error;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="680" endline="682">
{
    DEBUG ("'%s' succeeded connecting to %s\n", s -> name, p -> address);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="686" endline="692">
{
    snprintf (report, STRLEN, "'%s' failed, the socket at %s is not ready for i|o -- %s", s -> name, p -> address, STRERROR);
    rv = FALSE;
    goto error;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="696" endline="702">
{
    snprintf (report, STRLEN, "'%s' failed protocol test [%s] at %s.", s -> name, p -> protocol -> name, p -> address);
    rv = FALSE;
    goto error;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="704" endline="707">
{
    DEBUG ("'%s' succeeded testing protocol [%s] at %s\n", s -> name, p -> protocol -> name, p -> address);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="721" endline="737">
{
    if (i->type == ICMP_ECHO && !icmp_echo (s->path, i->timeout)) {
        snprintf (report, STRLEN, "'%s' failed ICMP test [%s]", s -> name, icmpnames [i -> type]);
        return FALSE;
    }
    DEBUG ("'%s' succeeded testing ICMP [%s]\n", s -> name, icmpnames [i -> type]);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="724" endline="731">
{
    snprintf (report, STRLEN, "'%s' failed ICMP test [%s]", s -> name, icmpnames [i -> type]);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="745" endline="771">
{
    ProcInfo_T pi;
    ASSERT (s);
    pi = s->procinfo;
    if (pi->status_flag & PROCESS_ZOMBIE) {
        snprintf (report, STRLEN, "process with pid %d is a zombie", pi -> pid);
        LOCK (Run.mutex)
        s->do_monitor = FALSE;
        END_LOCK;
        return FALSE;
    }
    else {
        DEBUG ("'%s' zombie check passed [status_flag=%04x]\n", s -> name, pi -> status_flag);
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="754" endline="762">
{
    snprintf (report, STRLEN, "process with pid %d is a zombie", pi -> pid);
    LOCK (Run.mutex)
    s->do_monitor = FALSE;
    END_LOCK;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="764" endline="767">
{
    DEBUG ("'%s' zombie check passed [status_flag=%04x]\n", s -> name, pi -> status_flag);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="778" endline="789">
{
    Resource_T pr;
    ASSERT (s);
    for (pr = s->resourcelist; pr; pr = pr->next) {
        pr->cycle = 0;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="785" endline="787">
{
    pr->cycle = 0;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="797" endline="963">
{
    ProcInfo_T pi;
    int okay = TRUE;
    ASSERT (s);
    ASSERT (pr);
    pi = s->procinfo;
    switch (pr->resource_id) {
    case RESOURCE_ID_CPU_PERCENT :
        if (compare_value (pr->operator, pi->cpu_percent, pr->limit)) {
            snprintf (report, STRLEN, "cpu usage of %.1f%% matches resource limit [cpu usage%s%.1f%%]", pi -> cpu_percent / 10.0, operatorshortnames [pr -> operator], pr -> limit / 10.0);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' cpu usage check passed [current cpu usage=%.1f%%]\n", s -> name, pi -> cpu_percent / 10.0);
        }
        break;
    case RESOURCE_ID_MEM_PERCENT :
        if (compare_value (pr->operator, pi->mem_percent, pr->limit)) {
            snprintf (report, STRLEN, "mem usage of %.1f%% matches resource limit [mem usage%s%.1f%%]", pi -> mem_percent / 10.0, operatorshortnames [pr -> operator], pr -> limit / 10.0);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' mem usage check passed [current mem usage=%.1f%%]\n", s -> name, pi -> mem_percent / 10.0);
        }
        break;
    case RESOURCE_ID_MEM_KBYTE :
        if (compare_value (pr->operator, pi->mem_kbyte, pr->limit)) {
            snprintf (report, STRLEN, "mem amount of %ldkB matches resource limit [mem amount%s%ldkB]", pi -> mem_kbyte, operatorshortnames [pr -> operator], pr -> limit);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' mem amount check passed [current mem amount=%ldkB]\n", s -> name, pi -> mem_kbyte);
        }
        break;
    case RESOURCE_ID_LOAD1 :
        if (compare_value (pr->operator, (int) (Run.loadavg[0] * 10.0), pr->limit)) {
            snprintf (report, STRLEN, "loadavg(1min) of %.1f matches resource limit " "[loadavg(1min)%s%.1f]", Run.loadavg [0], operatorshortnames [pr -> operator], pr -> limit / 10.0);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' loadavg(1min) check passed [current loadavg(1min)=%.1f]\n", s -> name, Run.loadavg [0]);
        }
        break;
    case RESOURCE_ID_LOAD5 :
        if (compare_value (pr->operator, (int) (Run.loadavg[1] * 10.0), pr->limit)) {
            snprintf (report, STRLEN, "loadavg(5min) of %.1f matches resource limit " "[loadavg(5min)%s%.1f]", Run.loadavg [1], operatorshortnames [pr -> operator], pr -> limit / 10.0);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' loadavg(5min) check passed [current loadavg(5min)=%.1f]\n", s -> name, Run.loadavg [1]);
        }
        break;
    case RESOURCE_ID_LOAD15 :
        if (compare_value (pr->operator, (int) (Run.loadavg[2] * 10.0), pr->limit)) {
            snprintf (report, STRLEN, "loadavg(15min) of %.1f matches resource limit " "[loadavg(15min)%s%.1f]", Run.loadavg [2], operatorshortnames [pr -> operator], pr -> limit / 10.0);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' loadavg(15min) check passed " "[current loadavg(15min)=%.1f]\n", s -> name, Run.loadavg [2]);
        }
        break;
    case RESOURCE_ID_CHILDREN :
        if (compare_value (pr->operator, pi->children, pr->limit)) {
            snprintf (report, STRLEN, "children of %i matches resource limit [children%s%ld]", pi -> children, operatorshortnames [pr -> operator], pr -> limit);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' children check passed [current children=%i]\n", s -> name, pi -> children);
        }
        break;
    case RESOURCE_ID_TOTAL_MEM_KBYTE :
        if (compare_value (pr->operator, pi->total_mem_kbyte, pr->limit)) {
            snprintf (report, STRLEN, "total mem amount of %ldkB matches resource limit" " [total mem amount%s%ldkB]", pi -> total_mem_kbyte, operatorshortnames [pr -> operator], pr -> limit);
            okay = FALSE;
        }
        else {
            DEBUG ("'%s' total mem amount check passed " "[current total mem amount=%ldkB]\n", s -> name, pi -> total_mem_kbyte);
        }
        break;
    default :
        log ("'%s' error -- unknown resource ID: [%d]\n", s->name, pr->resource_id);
    }
    if (okay && pr->cycle > 0) {
        pr->cycle--;
    }
    else if (!okay) {
        pr->cycle++;
    }
    if (pr->cycle >= pr->max_cycle) {
        return FALSE;
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="808" endline="945">
{
case RESOURCE_ID_CPU_PERCENT :
    if (compare_value (pr->operator, pi->cpu_percent, pr->limit)) {
        snprintf (report, STRLEN, "cpu usage of %.1f%% matches resource limit [cpu usage%s%.1f%%]", pi -> cpu_percent / 10.0, operatorshortnames [pr -> operator], pr -> limit / 10.0);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' cpu usage check passed [current cpu usage=%.1f%%]\n", s -> name, pi -> cpu_percent / 10.0);
    }
    break;
case RESOURCE_ID_MEM_PERCENT :
    if (compare_value (pr->operator, pi->mem_percent, pr->limit)) {
        snprintf (report, STRLEN, "mem usage of %.1f%% matches resource limit [mem usage%s%.1f%%]", pi -> mem_percent / 10.0, operatorshortnames [pr -> operator], pr -> limit / 10.0);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' mem usage check passed [current mem usage=%.1f%%]\n", s -> name, pi -> mem_percent / 10.0);
    }
    break;
case RESOURCE_ID_MEM_KBYTE :
    if (compare_value (pr->operator, pi->mem_kbyte, pr->limit)) {
        snprintf (report, STRLEN, "mem amount of %ldkB matches resource limit [mem amount%s%ldkB]", pi -> mem_kbyte, operatorshortnames [pr -> operator], pr -> limit);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' mem amount check passed [current mem amount=%ldkB]\n", s -> name, pi -> mem_kbyte);
    }
    break;
case RESOURCE_ID_LOAD1 :
    if (compare_value (pr->operator, (int) (Run.loadavg[0] * 10.0), pr->limit)) {
        snprintf (report, STRLEN, "loadavg(1min) of %.1f matches resource limit " "[loadavg(1min)%s%.1f]", Run.loadavg [0], operatorshortnames [pr -> operator], pr -> limit / 10.0);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' loadavg(1min) check passed [current loadavg(1min)=%.1f]\n", s -> name, Run.loadavg [0]);
    }
    break;
case RESOURCE_ID_LOAD5 :
    if (compare_value (pr->operator, (int) (Run.loadavg[1] * 10.0), pr->limit)) {
        snprintf (report, STRLEN, "loadavg(5min) of %.1f matches resource limit " "[loadavg(5min)%s%.1f]", Run.loadavg [1], operatorshortnames [pr -> operator], pr -> limit / 10.0);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' loadavg(5min) check passed [current loadavg(5min)=%.1f]\n", s -> name, Run.loadavg [1]);
    }
    break;
case RESOURCE_ID_LOAD15 :
    if (compare_value (pr->operator, (int) (Run.loadavg[2] * 10.0), pr->limit)) {
        snprintf (report, STRLEN, "loadavg(15min) of %.1f matches resource limit " "[loadavg(15min)%s%.1f]", Run.loadavg [2], operatorshortnames [pr -> operator], pr -> limit / 10.0);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' loadavg(15min) check passed " "[current loadavg(15min)=%.1f]\n", s -> name, Run.loadavg [2]);
    }
    break;
case RESOURCE_ID_CHILDREN :
    if (compare_value (pr->operator, pi->children, pr->limit)) {
        snprintf (report, STRLEN, "children of %i matches resource limit [children%s%ld]", pi -> children, operatorshortnames [pr -> operator], pr -> limit);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' children check passed [current children=%i]\n", s -> name, pi -> children);
    }
    break;
case RESOURCE_ID_TOTAL_MEM_KBYTE :
    if (compare_value (pr->operator, pi->total_mem_kbyte, pr->limit)) {
        snprintf (report, STRLEN, "total mem amount of %ldkB matches resource limit" " [total mem amount%s%ldkB]", pi -> total_mem_kbyte, operatorshortnames [pr -> operator], pr -> limit);
        okay = FALSE;
    }
    else {
        DEBUG ("'%s' total mem amount check passed " "[current total mem amount=%ldkB]\n", s -> name, pi -> total_mem_kbyte);
    }
    break;
default :
    log ("'%s' error -- unknown resource ID: [%d]\n", s->name, pr->resource_id);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="811" endline="817">
{
    snprintf (report, STRLEN, "cpu usage of %.1f%% matches resource limit [cpu usage%s%.1f%%]", pi -> cpu_percent / 10.0, operatorshortnames [pr -> operator], pr -> limit / 10.0);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="819" endline="822">
{
    DEBUG ("'%s' cpu usage check passed [current cpu usage=%.1f%%]\n", s -> name, pi -> cpu_percent / 10.0);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="827" endline="833">
{
    snprintf (report, STRLEN, "mem usage of %.1f%% matches resource limit [mem usage%s%.1f%%]", pi -> mem_percent / 10.0, operatorshortnames [pr -> operator], pr -> limit / 10.0);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="835" endline="838">
{
    DEBUG ("'%s' mem usage check passed [current mem usage=%.1f%%]\n", s -> name, pi -> mem_percent / 10.0);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="843" endline="849">
{
    snprintf (report, STRLEN, "mem amount of %ldkB matches resource limit [mem amount%s%ldkB]", pi -> mem_kbyte, operatorshortnames [pr -> operator], pr -> limit);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="851" endline="854">
{
    DEBUG ("'%s' mem amount check passed [current mem amount=%ldkB]\n", s -> name, pi -> mem_kbyte);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="859" endline="866">
{
    snprintf (report, STRLEN, "loadavg(1min) of %.1f matches resource limit " "[loadavg(1min)%s%.1f]", Run.loadavg [0], operatorshortnames [pr -> operator], pr -> limit / 10.0);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="868" endline="871">
{
    DEBUG ("'%s' loadavg(1min) check passed [current loadavg(1min)=%.1f]\n", s -> name, Run.loadavg [0]);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="876" endline="883">
{
    snprintf (report, STRLEN, "loadavg(5min) of %.1f matches resource limit " "[loadavg(5min)%s%.1f]", Run.loadavg [1], operatorshortnames [pr -> operator], pr -> limit / 10.0);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="885" endline="888">
{
    DEBUG ("'%s' loadavg(5min) check passed [current loadavg(5min)=%.1f]\n", s -> name, Run.loadavg [1]);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="893" endline="900">
{
    snprintf (report, STRLEN, "loadavg(15min) of %.1f matches resource limit " "[loadavg(15min)%s%.1f]", Run.loadavg [2], operatorshortnames [pr -> operator], pr -> limit / 10.0);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="902" endline="906">
{
    DEBUG ("'%s' loadavg(15min) check passed " "[current loadavg(15min)=%.1f]\n", s -> name, Run.loadavg [2]);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="911" endline="917">
{
    snprintf (report, STRLEN, "children of %i matches resource limit [children%s%ld]", pi -> children, operatorshortnames [pr -> operator], pr -> limit);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="919" endline="922">
{
    DEBUG ("'%s' children check passed [current children=%i]\n", s -> name, pi -> children);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="927" endline="934">
{
    snprintf (report, STRLEN, "total mem amount of %ldkB matches resource limit" " [total mem amount%s%ldkB]", pi -> total_mem_kbyte, operatorshortnames [pr -> operator], pr -> limit);
    okay = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="936" endline="940">
{
    DEBUG ("'%s' total mem amount check passed " "[current total mem amount=%ldkB]\n", s -> name, pi -> total_mem_kbyte);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="948" endline="950">
{
    pr->cycle--;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="952" endline="954">
{
    pr->cycle++;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="957" endline="959">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="970" endline="1010">
{
    ASSERT (s);
    if (!s->def_timeout) {
        return FALSE;
    }
    if (s->nstart > 0) {
        s->ncycle++;
    }
    if (s->nstart >= s->to_start && s->ncycle <= s->to_cycle) {
        Event_post (s, EVENT_TIMEOUT, "Service '%s' timed out and will not be checked anymore.\n", s -> name);
        return TRUE;
    }
    if (s->ncycle > s->to_cycle) {
        s->ncycle = 0;
        s->nstart = 0;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="975" endline="977">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="983" endline="985">
{
    s->ncycle++;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="991" endline="996">
{
    Event_post (s, EVENT_TIMEOUT, "Service '%s' timed out and will not be checked anymore.\n", s -> name);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1003" endline="1006">
{
    s->ncycle = 0;
    s->nstart = 0;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1018" endline="1035">
{
    ASSERT (s);
    if (!s->def_every) {
        return FALSE;
    }
    if (++s->nevery < s->every) {
        return TRUE;
    }
    s->nevery = 0;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1023" endline="1025">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1028" endline="1030">
{
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1045" endline="1066">
{
    ASSERT (s);
    if (!s->checksum)
        return FALSE;
    if (!check_hash (s->path, s->checksum->hash, s->checksum->type)) {
        snprintf (report, STRLEN, "checksum test failed for %s", s -> path);
        FREE (s -> checksum -> hash);
        s->checksum->hash = get_checksum (s->path, s->checksum->type);
        return TRUE;
    }
    DEBUG ("'%s' has valid checksums\n", s -> name);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1053" endline="1060">
{
    snprintf (report, STRLEN, "checksum test failed for %s", s -> path);
    FREE (s -> checksum -> hash);
    s->checksum->hash = get_checksum (s->path, s->checksum->type);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1076" endline="1097">
{
    ASSERT (s);
    if (!s->perm)
        return FALSE;
    if ((mode & 07777) != s->perm->perm) {
        snprintf (report, STRLEN, "permission test failed for %s -- current permission is %o", s -> path, mode & 07777);
        s->perm->perm = (mode & 07777);
        return TRUE;
    }
    DEBUG ("'%s' file permission check passed [current permission=%o]\n", s -> name, mode & 07777);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1084" endline="1090">
{
    snprintf (report, STRLEN, "permission test failed for %s -- current permission is %o", s -> path, mode & 07777);
    s->perm->perm = (mode & 07777);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1107" endline="1128">
{
    ASSERT (s);
    if (!s->uid)
        return FALSE;
    if (uid != s->uid->uid) {
        snprintf (report, STRLEN, "uid test failed for %s -- current uid is %d", s -> path, (int) uid);
        s->uid->uid = uid;
        return TRUE;
    }
    DEBUG ("'%s' device uid check passed [current uid=%d]\n", s -> name, (int) uid);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1115" endline="1121">
{
    snprintf (report, STRLEN, "uid test failed for %s -- current uid is %d", s -> path, (int) uid);
    s->uid->uid = uid;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1138" endline="1159">
{
    ASSERT (s);
    if (!s->gid)
        return FALSE;
    if (gid != s->gid->gid) {
        snprintf (report, STRLEN, "gid test failed for %s -- current gid is %d", s -> path, (int) gid);
        s->gid->gid = gid;
        return TRUE;
    }
    DEBUG ("'%s' device gid check passed [current gid=%d]\n", s -> name, (int) gid);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1146" endline="1152">
{
    snprintf (report, STRLEN, "gid test failed for %s -- current gid is %d", s -> path, (int) gid);
    s->gid->gid = gid;
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1167" endline="1189">
{
    Timestamp_T tl;
    char report [STRLEN];
    for (tl = s->timestamplist; tl; tl = tl->next) {
        if (!check_timestamp_item (s, tl, report)) {
            tl->event_flag = TRUE;
            if (!eval_actions (tl->action, s, report, "timestamp", EVENT_TIMESTAMP)) {
                return FALSE;
            }
        }
    }
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1173" endline="1185">
{
    if (!check_timestamp_item (s, tl, report)) {
        tl->event_flag = TRUE;
        if (!eval_actions (tl->action, s, report, "timestamp", EVENT_TIMESTAMP)) {
            return FALSE;
        }
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1175" endline="1184">
{
    tl->event_flag = TRUE;
    if (!eval_actions (tl->action, s, report, "timestamp", EVENT_TIMESTAMP)) {
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1181" endline="1183">
{
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1196" endline="1248">
{
    time_t now;
    time_t timestamp;
    ASSERT (s);
    ASSERT (t);
    if ((int) time (&now) == -1) {
        snprintf (report, STRLEN, "can't get actual time");
        return FALSE;
    }
    if (!(timestamp = get_timestamp (s->path, S_IFDIR | S_IFREG))) {
        snprintf (report, STRLEN, "can't get timestamp for %s", s -> path);
        return FALSE;
    }
    if (t->test_changes) {
        if (t->timestamp != timestamp) {
            snprintf (report, STRLEN, "timestamp was changed for %s", s -> path);
            t->timestamp = timestamp;
            return FALSE;
        }
    }
    else {
        if (compare_value (t->operator, (int) (now - timestamp), t->time)) {
            if (!t->event_handled) {
                snprintf (report, STRLEN, "timestamp test failed for %s", s -> path);
                t->event_handled = TRUE;
                return FALSE;
            }
        }
        else {
            t->event_handled = FALSE;
        }
    }
    DEBUG ("'%s' timestamp test passed for %s\n", s -> name, s -> path);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1205" endline="1208">
{
    snprintf (report, STRLEN, "can't get actual time");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1211" endline="1214">
{
    snprintf (report, STRLEN, "can't get timestamp for %s", s -> path);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1217" endline="1226">
{
    if (t->timestamp != timestamp) {
        snprintf (report, STRLEN, "timestamp was changed for %s", s -> path);
        t->timestamp = timestamp;
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1219" endline="1225">
{
    snprintf (report, STRLEN, "timestamp was changed for %s", s -> path);
    t->timestamp = timestamp;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1228" endline="1242">
{
    if (compare_value (t->operator, (int) (now - timestamp), t->time)) {
        if (!t->event_handled) {
            snprintf (report, STRLEN, "timestamp test failed for %s", s -> path);
            t->event_handled = TRUE;
            return FALSE;
        }
    }
    else {
        t->event_handled = FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1230" endline="1237">
{
    if (!t->event_handled) {
        snprintf (report, STRLEN, "timestamp test failed for %s", s -> path);
        t->event_handled = TRUE;
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1232" endline="1236">
{
    snprintf (report, STRLEN, "timestamp test failed for %s", s -> path);
    t->event_handled = TRUE;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1239" endline="1241">
{
    t->event_handled = FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1256" endline="1288">
{
    ASSERT (s);
    ASSERT (sl);
    if (sl->test_changes) {
        if (sl->runsize != size) {
            snprintf (report, STRLEN, "size was changed for %s", s -> path);
            sl->runsize = size;
            return FALSE;
        }
    }
    else {
        if (compare_value (sl->operator, size, sl->size)) {
            snprintf (report, STRLEN, "size test failed for %s -- current size is %lu B", s -> path, size);
            return FALSE;
        }
    }
    DEBUG ("'%s' file size check passed [current size=%lu B]\n", s -> name, size);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1262" endline="1271">
{
    if (sl->runsize != size) {
        snprintf (report, STRLEN, "size was changed for %s", s -> path);
        sl->runsize = size;
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1264" endline="1270">
{
    snprintf (report, STRLEN, "size was changed for %s", s -> path);
    sl->runsize = size;
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1273" endline="1281">
{
    if (compare_value (sl->operator, size, sl->size)) {
        snprintf (report, STRLEN, "size test failed for %s -- current size is %lu B", s -> path, size);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1275" endline="1280">
{
    snprintf (report, STRLEN, "size test failed for %s -- current size is %lu B", s -> path, size);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1296" endline="1394">
{
    ASSERT (t);
    ASSERT (td);
    if ((td->limit_percent < 0) && (td->limit_absolute < 0)) {
        log ("'%s' error: device limit not set\n", t -> name);
        return FALSE;
    }
    switch (td->resource) {
    case RESOURCE_ID_INODE :
        if (t->devinfo->f_files <= 0) {
            DEBUG ("'%s' filesystem doesn't support inodes\n", t -> name);
            return TRUE;
        }
        if (td->limit_percent >= 0) {
            if (compare_value (td->operator, 100 * (t->devinfo->f_files - t->devinfo->f_filesfree) / t->devinfo->f_files, td->limit_percent)) {
                snprintf (report, STRLEN, "inode usage %ld%% matches resource limit [inode usage%s%d%%]", 100 * (t -> devinfo -> f_files - t -> devinfo -> f_filesfree) / t -> devinfo -> f_files, operatorshortnames [td -> operator], td -> limit_percent);
                return FALSE;
            }
        }
        else {
            if (compare_value (td->operator, t->devinfo->f_files - t->devinfo->f_filesfree, td->limit_absolute)) {
                snprintf (report, STRLEN, "inode usage %ld matches resource limit [inode usage%s%ld]", t -> devinfo -> f_files - t -> devinfo -> f_filesfree, operatorshortnames [td -> operator], td -> limit_absolute);
                return FALSE;
            }
        }
        DEBUG ("'%s' inode usage check passed [current inode usage=%.1f%%]\n", t -> name, (float) 100 * (t -> devinfo -> f_files - t -> devinfo -> f_filesfree) / t -> devinfo -> f_files);
        return TRUE;
    case RESOURCE_ID_SPACE :
        if (td->limit_percent >= 0) {
            if (compare_value (td->operator, 100 * (t->devinfo->f_blocks - t->devinfo->f_blocksfreetotal) / t->devinfo->f_blocks, td->limit_percent)) {
                snprintf (report, STRLEN, "space usage %ld%% matches resource limit [space usage%s%d%%]", 100 * (t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal) / t -> devinfo -> f_blocks, operatorshortnames [td -> operator], td -> limit_percent);
                return FALSE;
            }
        }
        else {
            if (compare_value (td->operator, t->devinfo->f_blocks - t->devinfo->f_blocksfreetotal, td->limit_absolute)) {
                snprintf (report, STRLEN, "space usage %ld blocks matches resource limit [space usage%s%ld blocks]", t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal, operatorshortnames [td -> operator], td -> limit_absolute);
                return FALSE;
            }
        }
        DEBUG ("'%s' space usage check passed [current space usage=%.1f%%]\n", t -> name, (float) 100 * (t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal) / t -> devinfo -> f_blocks);
        return TRUE;
    default :
        log ("'%s' error -- unknown resource type: [%d]\n", t->name, td->resource);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1302" endline="1305">
{
    log ("'%s' error: device limit not set\n", t -> name);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1308" endline="1392">
{
case RESOURCE_ID_INODE :
    if (t->devinfo->f_files <= 0) {
        DEBUG ("'%s' filesystem doesn't support inodes\n", t -> name);
        return TRUE;
    }
    if (td->limit_percent >= 0) {
        if (compare_value (td->operator, 100 * (t->devinfo->f_files - t->devinfo->f_filesfree) / t->devinfo->f_files, td->limit_percent)) {
            snprintf (report, STRLEN, "inode usage %ld%% matches resource limit [inode usage%s%d%%]", 100 * (t -> devinfo -> f_files - t -> devinfo -> f_filesfree) / t -> devinfo -> f_files, operatorshortnames [td -> operator], td -> limit_percent);
            return FALSE;
        }
    }
    else {
        if (compare_value (td->operator, t->devinfo->f_files - t->devinfo->f_filesfree, td->limit_absolute)) {
            snprintf (report, STRLEN, "inode usage %ld matches resource limit [inode usage%s%ld]", t -> devinfo -> f_files - t -> devinfo -> f_filesfree, operatorshortnames [td -> operator], td -> limit_absolute);
            return FALSE;
        }
    }
    DEBUG ("'%s' inode usage check passed [current inode usage=%.1f%%]\n", t -> name, (float) 100 * (t -> devinfo -> f_files - t -> devinfo -> f_filesfree) / t -> devinfo -> f_files);
    return TRUE;
case RESOURCE_ID_SPACE :
    if (td->limit_percent >= 0) {
        if (compare_value (td->operator, 100 * (t->devinfo->f_blocks - t->devinfo->f_blocksfreetotal) / t->devinfo->f_blocks, td->limit_percent)) {
            snprintf (report, STRLEN, "space usage %ld%% matches resource limit [space usage%s%d%%]", 100 * (t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal) / t -> devinfo -> f_blocks, operatorshortnames [td -> operator], td -> limit_percent);
            return FALSE;
        }
    }
    else {
        if (compare_value (td->operator, t->devinfo->f_blocks - t->devinfo->f_blocksfreetotal, td->limit_absolute)) {
            snprintf (report, STRLEN, "space usage %ld blocks matches resource limit [space usage%s%ld blocks]", t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal, operatorshortnames [td -> operator], td -> limit_absolute);
            return FALSE;
        }
    }
    DEBUG ("'%s' space usage check passed [current space usage=%.1f%%]\n", t -> name, (float) 100 * (t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal) / t -> devinfo -> f_blocks);
    return TRUE;
default :
    log ("'%s' error -- unknown resource type: [%d]\n", t->name, td->resource);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1312" endline="1315">
{
    DEBUG ("'%s' filesystem doesn't support inodes\n", t -> name);
    return TRUE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1318" endline="1332">
{
    if (compare_value (td->operator, 100 * (t->devinfo->f_files - t->devinfo->f_filesfree) / t->devinfo->f_files, td->limit_percent)) {
        snprintf (report, STRLEN, "inode usage %ld%% matches resource limit [inode usage%s%d%%]", 100 * (t -> devinfo -> f_files - t -> devinfo -> f_filesfree) / t -> devinfo -> f_files, operatorshortnames [td -> operator], td -> limit_percent);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1323" endline="1331">
{
    snprintf (report, STRLEN, "inode usage %ld%% matches resource limit [inode usage%s%d%%]", 100 * (t -> devinfo -> f_files - t -> devinfo -> f_filesfree) / t -> devinfo -> f_files, operatorshortnames [td -> operator], td -> limit_percent);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1334" endline="1345">
{
    if (compare_value (td->operator, t->devinfo->f_files - t->devinfo->f_filesfree, td->limit_absolute)) {
        snprintf (report, STRLEN, "inode usage %ld matches resource limit [inode usage%s%ld]", t -> devinfo -> f_files - t -> devinfo -> f_filesfree, operatorshortnames [td -> operator], td -> limit_absolute);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1337" endline="1344">
{
    snprintf (report, STRLEN, "inode usage %ld matches resource limit [inode usage%s%ld]", t -> devinfo -> f_files - t -> devinfo -> f_filesfree, operatorshortnames [td -> operator], td -> limit_absolute);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1356" endline="1369">
{
    if (compare_value (td->operator, 100 * (t->devinfo->f_blocks - t->devinfo->f_blocksfreetotal) / t->devinfo->f_blocks, td->limit_percent)) {
        snprintf (report, STRLEN, "space usage %ld%% matches resource limit [space usage%s%d%%]", 100 * (t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal) / t -> devinfo -> f_blocks, operatorshortnames [td -> operator], td -> limit_percent);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1361" endline="1368">
{
    snprintf (report, STRLEN, "space usage %ld%% matches resource limit [space usage%s%d%%]", 100 * (t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal) / t -> devinfo -> f_blocks, operatorshortnames [td -> operator], td -> limit_percent);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1371" endline="1382">
{
    if (compare_value (td->operator, t->devinfo->f_blocks - t->devinfo->f_blocksfreetotal, td->limit_absolute)) {
        snprintf (report, STRLEN, "space usage %ld blocks matches resource limit [space usage%s%ld blocks]", t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal, operatorshortnames [td -> operator], td -> limit_absolute);
        return FALSE;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1374" endline="1381">
{
    snprintf (report, STRLEN, "space usage %ld blocks matches resource limit [space usage%s%ld blocks]", t -> devinfo -> f_blocks - t -> devinfo -> f_blocksfreetotal, operatorshortnames [td -> operator], td -> limit_absolute);
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1402" endline="1429">
{
    switch (operator) {
    case OPERATOR_GREATER :
        if (left > right)
            return TRUE;
        break;
    case OPERATOR_LESS :
        if (left < right)
            return TRUE;
        break;
    case OPERATOR_EQUAL :
        if (left == right)
            return TRUE;
        break;
    case OPERATOR_NOTEQUAL :
        if (left != right)
            return TRUE;
        break;
    default :
        log ("Unknown comparison operator\n");
        return FALSE;
    }
    return FALSE;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1405" endline="1425">
{
case OPERATOR_GREATER :
    if (left > right)
        return TRUE;
    break;
case OPERATOR_LESS :
    if (left < right)
        return TRUE;
    break;
case OPERATOR_EQUAL :
    if (left == right)
        return TRUE;
    break;
case OPERATOR_NOTEQUAL :
    if (left != right)
        return TRUE;
    break;
default :
    log ("Unknown comparison operator\n");
    return FALSE;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="61" endline="90">
{
    void *p;
    p = (void *) malloc (n);
    if (p == NULL) {
        log ("%s: malloc failed -- %s\n", prog, STRERROR);
        exit (1);
    }
    return p;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="81" endline="86">
{
    log ("%s: malloc failed -- %s\n", prog, STRERROR);
    exit (1);
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="93" endline="108">
{
    void *p;
    p = (void *) calloc (count, nbytes);
    if (p == NULL) {
        log ("%s: malloc failed -- %s\n", prog, STRERROR);
        exit (1);
    }
    return p;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="99" endline="104">
{
    log ("%s: malloc failed -- %s\n", prog, STRERROR);
    exit (1);
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="112" endline="123">
{
    char *p;
    ASSERT (s);
    p = (char *) xmalloc (strlen (s) +1);
    strcpy (p, s);
    return p;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="127" endline="139">
{
    char *t;
    ASSERT (s);
    t = xmalloc (l +1);
    strncpy (t, s, l);
    t[l] = 0;
    return t;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="143" endline="163">
{
    if (p == 0) {
        return xmalloc (nbytes);
    }
    p = realloc (p, nbytes);
    if (p == NULL) {
        log ("%s: realloc failed -- %s\n", prog, STRERROR);
        exit (1);
    }
    return p;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="146" endline="150">
{
    return xmalloc (nbytes);
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="154" endline="159">
{
    log ("%s: realloc failed -- %s\n", prog, STRERROR);
    exit (1);
}
</source>
