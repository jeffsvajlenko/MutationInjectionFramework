<source file="examples/monit-4.2/alert.c.ifdefed" startline="79" endline="193">
void x (Event_T E) {
    Service_T x;
    ASSERT (x);
    x = x (x);
    if (x->x || x.x) {
        Mail_T x;
        Mail_T x;
        x x, x;
        Mail_T x = x;
        x (& x, & x);
        for (x = x->x; x; x = x->x) {
            if (x (x->x, x (x)) || (x (x) == x)) {
                Mail_T x;
                NEW (x);
                x (x, x);
                if (x (x)) {
                    x->x = x (x (x));
                }
                x (& x, x -> x, x (x));
                x (& x);
                x->x = x;
                x = x;
                x ("%s notification is sent to %s\n", x (x), x -> x);
            }
        }
        for (x = x.x; x; x = x->x) {
            int x = x;
            for (x = x->x; x; x = x->x) {
                if (x (x->x, x->x)) {
                    x = x;
                    break;
                }
            }
            if (!x && (x (x->x, x (x)) || (x (x) == x))) {
                Mail_T x;
                NEW (x);
                x (x, x);
                if (x (x))
                    x->x = x (x (x));
                x (& x, x -> x, x (x));
                x (& x);
                x->x = x;
                x = x;
                x ("%s notification is sent to %s\n", x (x), x -> x);
            }
        }
        if (x) {
            x (x);
            x (& x);
        }
        x (& x);
    }
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="196" endline="223">
static void x (Mail_T *x, char *x, const char *x) {
    char x [x];
    char *x = x (x);
    x (x && x && x);
    if (x (x, sizeof (x)) < 0) {
        x (x, x, "%s", x);
    }
    x (& (* x) -> x, "$HOST", x);
    x (& (* x) -> x, "$DATE", x);
    x (& (* x) -> x, "$DATE", x);
    x (& (* x) -> x, "$HOST", x);
    x (& (* x) -> x, "$HOST", x);
    x (& (* x) -> x, "$PROGRAM", x);
    x (& (* x) -> x, "$PROGRAM", x);
    x (& (* x) -> x, "$SERVICE", x);
    x (& (* x) -> x, "$SERVICE", x);
    x (& (* x) -> x, "$EVENT", x);
    x (& (* x) -> x, "$EVENT", x);
    FREE (x);
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="226" endline="252">
static void x (Mail_T x, Mail_T x) {
    x (x && x);
    x->x = x (x->x);
    x->x = x->x ? x (x->x) : x.x.x ? x (x.x.x) : x (x);
    x->x = x->x ? x (x->x) : x.x.x ? x (x.x.x) : x (x);
    x->x = x->x ? x (x->x) : x.x.x ? x (x.x.x) : x (x);
    x->x = x;
}
</source>
<source file="examples/monit-4.2/alert.c.ifdefed" startline="255" endline="266">
static void x (Mail_T *x) {
    x (& (* x) -> x, "\r\n", "\n");
    x (& (* x) -> x, "\n", "\r\n");
    if ((*x)->x) {
        x (& (* x) -> x, "\r\n", "\n");
        x (& (* x) -> x, "\n", "\r\n");
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="90" endline="113">
void x (const char *x) {
    Service_T x;
    ASSERT (x);
    for (x = x; x; x = x->x) {
        if (x->x)
            continue;
        if (x ()) {
            x (x -> x, x);
        }
        else {
            x (x -> x, x);
        }
    }
    x ();
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="121" endline="148">
void x (const char *x, const char *x) {
    Service_T x;
    ASSERT (x);
    ASSERT (x);
    for (x = x; x; x = x->x) {
        if (x->x)
            continue;
        if (x (x->x, x)) {
            if (x ()) {
                x (x -> x, x);
            }
            else {
                x (x -> x, x);
            }
        }
    }
    x ();
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="156" endline="180">
void x (const char *x, const char *x) {
    Service_T x;
    ASSERT (x);
    ASSERT (x);
    if (x == (x = x (x))) {
        x ("%s: Cannot %s program '%s' -- not found in %s\n", x, x, x, x.x);
        return;
    }
    if (x ()) {
        x (x, x);
    }
    else {
        x (x, x);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="188" endline="220">
void x (const char *x, const char *x) {
    Socket_T x;
    char *x = x ();
    ASSERT (x);
    ASSERT (x);
    x = x (x.x ? x.x : "localhost", x.x, x, x.x);
    if (!x) {
        x ("%s: Cannot connect to the monit daemon. " "Did you start it with http support?\n", x);
        goto x;
    }
    else {
        x (x, "GET /%s?action=%s HTTP/1.0\r\n%s\r\n", x, x, x);
        x (& x);
    }
x :
    x (x);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="229" endline="322">
void x (const char *x, const char *x) {
    Service_T x = x;
    ASSERT (x);
    ASSERT (x);
    if (x == (x = x (x))) {
        x ("%s: Cannot %s program '%s' -- not found in %s\n", x, x, x, x.x);
        return;
    }
    if (x (x, "start")) {
        if (x->x == x && x (x)) {
            x ("%s: Process already running -- process %s\n", x, x);
            x (x);
            return;
        }
        if (x->x == x && !x->x) {
            x ("%s: Start method not defined -- process %s\n", x, x);
            x (x);
            return;
        }
        x (x, "stop");
        x (x);
        x (x, "start");
    }
    else if (x (x, "stop")) {
        if (x->x == x && !x->x) {
            x ("%s: Stop method not defined -- process %s\n", x, x);
            x (x);
            return;
        }
        x (x, "stop");
        x (x);
    }
    else if (x (x, "restart")) {
        if (x->x == x && (!x->x || !x->x)) {
            x ("%s: Start or stop method not defined -- process %s\n", x, x);
            x (x);
            return;
        }
        else {
            x ("Trying to restart '%s'\n", x -> x);
        }
        x (x, "stop");
        if (x (x)) {
            x (x);
            x (x, "start");
        }
    }
    else if (x (x, "monitor")) {
        x (x);
    }
    else if (x (x, "unmonitor")) {
        x (x, "unmonitor");
        x (x);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="328" endline="339">
void x () {
    Service_T x;
    for (x = x; x; x = x->x) {
        x->x = x;
        x->x = x;
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="350" endline="398">
static void x (Service_T x) {
    ASSERT (x);
    if (x->x)
        return;
    x->x = x;
    if (x->x) {
        Dependant_T x;
        for (x = x->x; x; x = x->x) {
            Service_T x = x (x->x);
            ASSERT (x);
            x (x);
        }
    }
    if (x->x && (x->x != x || !x (x))) {
        int x;
        x x;
        x ("start: (%s) %s\n", x -> x, x -> x -> x [0]);
        x (x, x -> x, "Started");
        if (x->x == x) {
            x = x (&x, x, x, x);
            if (x != 0) {
                x ("Warning: Failed to create the start controller thread. " "Thread error -- %s.\n", x (x));
            }
        }
    }
    x (x);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="406" endline="439">
static int x (Service_T x) {
    ASSERT (x);
    if (x->x)
        return x;
    x->x = x;
    x (x);
    if (x->x == x) {
        x (x -> x, 0, sizeof * (x -> x));
    }
    if (x->x && (x->x != x || x (x))) {
        x ("stop: (%s) %s\n", x -> x, x -> x -> x [0]);
        x (x, x -> x, "Stopped");
        if (x->x == x) {
            return x (x);
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="447" endline="474">
static void x (Service_T x) {
    ASSERT (x);
    if (x->x)
        return;
    x->x = x;
    if (x->x) {
        Dependant_T x;
        for (x = x->x; x; x = x->x) {
            Service_T x = x (x->x);
            ASSERT (x);
            x (x);
        }
    }
    x (x);
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="481" endline="499">
static void x (Service_T x) {
    ASSERT (x);
    if (x->x)
        return;
    x->x = x;
    x (x);
    if (x->x == x) {
        x (x -> x, 0, sizeof * (x -> x));
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="506" endline="519">
static void x (Service_T x) {
    ASSERT (x);
    if (!x->x) {
        x (x.x)
        x->x = x;
        END_LOCK;
        x ("Monitoring enabled -- service %s\n", x -> x);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="526" endline="539">
static void x (Service_T x) {
    ASSERT (x);
    if (x->x) {
        x (x.x)
        x->x = x;
        END_LOCK;
        x ("Monitoring disabled -- service %s\n", x -> x);
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="551" endline="590">
static void x (Service_T x, const char *x) {
    Service_T x;
    ASSERT (x);
    for (x = x; x; x = x->x) {
        if (x->x) {
            Dependant_T x;
            for (x = x->x; x; x = x->x) {
                if (x (x->x, x->x)) {
                    if (x (x, "start"))
                        x (x);
                    else if (x (x, "monitor"))
                        x (x);
                    x (x, x);
                    if (x (x, "stop"))
                        x (x);
                    else if (x (x, "unmonitor"))
                        x (x);
                    break;
                }
            }
        }
    }
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="599" endline="623">
static void *x (void *x) {
    Service_T x = x;
    int x = x.x;
    ASSERT (x);
    x (x ());
    while (x-- && !x.x) {
        if (x (x))
            break;
        x (1);
    }
    if (!x (x)) {
        x (x, x, "Failed to start '%s'\n", x -> x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/control.c.ifdefed" startline="635" endline="657">
static int x (Service_T x) {
    int x = x.x;
    ASSERT (x);
    while (x-- && !x.x) {
        if (!x (x))
            break;
        x (1);
    }
    if (x (x)) {
        x (x, x, "Failed to stop '%s'\n", x -> x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="81" endline="143">
void x () {
    x x;
    x (0);
    if ((x = x ()) < 0) {
        x ("Cannot fork of a new process\n");
        x (1);
    }
    else if (x != 0) {
        x (0);
    }
    x ();
    if ((x = x ()) < 0) {
        x ("Cannot fork of a new process\n");
        x (1);
    }
    else if (x != 0) {
        x (0);
    }
    if (x ("/") < 0) {
        x ("Cannot chdir to / -- %s\n", x);
        x (1);
    }
    x ();
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="151" endline="186">
int x (int x) {
    x x;
    if ((x = x ()) > 0) {
        if (x (x, x) < 0) {
            x ("%s: Cannot send signal to daemon process -- %s\n", x, x);
            return x;
        }
    }
    else {
        x ("%s: No daemon process found\n", x);
        return x;
    }
    if (x == x) {
        x (x, "%s daemon with pid [%d] killed\n", x, (int) x);
        x (x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/daemonize.c.ifdefed" startline="193" endline="206">
int x () {
    x x;
    x = 0;
    if ((x = x (x.x)))
        if ((x (x)) > -1 || (x == x))
            return ((int) x);
    return (x);
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="82" endline="113">
char *x (DeviceInfo_T x, char *x) {
    struct x x;
    ASSERT (x);
    ASSERT (x);
    if (x (x, &x) != 0) {
        x ("%s: Cannot stat '%s' -- %s\n", x, x, x);
        return x;
    }
    if (x (x.x) || x (x.x)) {
        return x (x->x, x, sizeof (x->x));
    }
    else if (x (x.x)) {
        return x (x, x);
    }
    x ("%s: Not file, directory or block special device: '%s'", x, x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/device_common.c.ifdefed" startline="125" endline="138">
int x (DeviceInfo_T x, char *x) {
    ASSERT (x);
    ASSERT (x);
    if (!x (x, x)) {
        return x;
    }
    return x (x);
}
</source>
<source file="examples/monit-4.2/device/sysdep_AIX.c.ifdefed" startline="43" endline="50">
char *x (DeviceInfo_T x, char *x) {
    x ("%s: Unsupported mounted filesystem information method", x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_AIX.c.ifdefed" startline="59" endline="66">
int x (DeviceInfo_T x) {
    x ("%s: Unsupported filesystem informations gathering method\n", x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_DARWIN.c.ifdefed" startline="65" endline="82">
char *x (DeviceInfo_T x, char *x) {
    struct x x;
    ASSERT (x);
    ASSERT (x);
    if (x (x, &x) != 0) {
        x ("%s: Error getting mountpoint for device '%s' -- %s\n", x, x, x);
        return x;
    }
    return x (x->x, x.x, sizeof (x->x));
}
</source>
<source file="examples/monit-4.2/device/sysdep_DARWIN.c.ifdefed" startline="92" endline="115">
int x (DeviceInfo_T x) {
    struct x x;
    ASSERT (x);
    if (x (x->x, &x) != 0) {
        x ("%s: Error getting usage statistics for device '%s' -- %s\n", x, x -> x, x);
        return x;
    }
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_FREEBSD.c.ifdefed" startline="65" endline="82">
char *x (DeviceInfo_T x, char *x) {
    struct x x;
    ASSERT (x);
    ASSERT (x);
    if (x (x, &x) != 0) {
        x ("%s: Error getting mountpoint for device '%s' -- %s\n", x, x, x);
        return x;
    }
    return x (x->x, x.x, sizeof (x->x));
}
</source>
<source file="examples/monit-4.2/device/sysdep_FREEBSD.c.ifdefed" startline="92" endline="115">
int x (DeviceInfo_T x) {
    struct x x;
    ASSERT (x);
    if (x (x->x, &x) != 0) {
        x ("%s: Error getting usage statistics for device '%s' -- %s\n", x, x -> x, x);
        return x;
    }
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="62" endline="96">
char *x (DeviceInfo_T x, char *x) {
    struct x *x;
    FILE *x;
    ASSERT (x);
    ASSERT (x);
    if ((x = x ("/etc/mnttab", "r")) == x) {
        x ("%s: Cannot open /etc/mnttab file", x);
        return x;
    }
    while ((x = x (x)) != x) {
        if (x (x, x->x)) {
            x (x);
            return x (x->x, x->x, sizeof (x->x));
        }
    }
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_HPUX.c.ifdefed" startline="106" endline="129">
int x (DeviceInfo_T x) {
    struct x x;
    ASSERT (x);
    if (x (x->x, &x) != 0) {
        x ("%s: Error getting usage statistics for device '%s' -- %s\n", x, x -> x, x);
        return x;
    }
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="70" endline="104">
char *x (DeviceInfo_T x, char *x) {
    struct x *x;
    FILE *x;
    ASSERT (x);
    ASSERT (x);
    if ((x = x ("/etc/mtab", "r")) == x) {
        x ("%s: Cannot open /etc/mtab file", x);
        return x;
    }
    while ((x = x (x)) != x) {
        if (x (x, x->x)) {
            x (x);
            return x (x->x, x->x, sizeof (x->x));
        }
    }
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_LINUX.c.ifdefed" startline="114" endline="137">
int x (DeviceInfo_T x) {
    struct x x;
    ASSERT (x);
    if (x (x->x, &x) != 0) {
        x ("%s: Error getting usage statistics for device '%s' -- %s\n", x, x -> x, x);
        return x;
    }
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_OPENBSD.c.ifdefed" startline="65" endline="82">
char *x (DeviceInfo_T x, char *x) {
    struct x x;
    ASSERT (x);
    ASSERT (x);
    if (x (x, &x) != 0) {
        x ("%s: Error getting mountpoint for device '%s' -- %s\n", x, x, x);
        return x;
    }
    return x (x->x, x.x, sizeof (x->x));
}
</source>
<source file="examples/monit-4.2/device/sysdep_OPENBSD.c.ifdefed" startline="92" endline="115">
int x (DeviceInfo_T x) {
    struct x x;
    ASSERT (x);
    if (x (x->x, &x) != 0) {
        x ("%s: Error getting usage statistics for device '%s' -- %s\n", x, x -> x, x);
        return x;
    }
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    x->x = x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="70" endline="104">
char *x (DeviceInfo_T x, char *x) {
    struct x x;
    FILE *x;
    ASSERT (x);
    ASSERT (x);
    if ((x = x ("/etc/mnttab", "r")) == x) {
        x ("%s: Cannot open /etc/mnttab file", x);
        return x;
    }
    while (x (x, &x) == 0) {
        if (x (x, x.x)) {
            x (x);
            return x (x->x, x.x, sizeof (x->x));
        }
    }
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_SOLARIS.c.ifdefed" startline="114" endline="137">
int x (DeviceInfo_T x) {
    struct x x;
    ASSERT (x);
    if (x (x->x, &x) != 0) {
        x ("%s: Error getting usage statistics for device '%s' -- %s\n", x, x -> x, x);
        return x;
    }
    x->x = x.x;
    x->x = x.x / (x.x ? (x.x / x.x) : 1);
    x->x = x.x / (x.x ? (x.x / x.x) : 1);
    x->x = x.x / (x.x ? (x.x / x.x) : 1);
    x->x = x.x;
    x->x = x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_UNKNOWN.c.ifdefed" startline="43" endline="50">
char *x (DeviceInfo_T x, char *x) {
    x ("%s: Unsupported mounted filesystem information method", x);
    return x;
}
</source>
<source file="examples/monit-4.2/device/sysdep_UNKNOWN.c.ifdefed" startline="59" endline="66">
int x (DeviceInfo_T x) {
    x ("%s: Unsupported filesystem informations gathering method\n", x);
    return x;
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="83" endline="95">
void x () {
    x ();
    x ();
    x (x);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="101" endline="110">
void x () {
    x (x.x.x);
    x (x.x.x);
    x (x.x.x);
    x (x.x);
    x (x.x);
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="147" endline="189">
static void x (void) {
    int x;
    struct x x;
    extern char **x;
    char *x = "PATH=/bin:/usr/bin:/sbin:/usr/sbin";
    x[0] = 0;
    if (x (x)) {
        x ("%s: cannot set the PATH variable -- %s\n", x, x);
        x (1);
    }
    for (x = 0; x < 3; x++) {
        if (x (x, &x) == -1 && x ("/dev/null", x) != x) {
            x ("Cannot open /dev/null -- %s\n", x);
            x (1);
        }
    }
    x ();
}
</source>
<source file="examples/monit-4.2/env.c.ifdefed" startline="195" endline="241">
static void x (void) {
    char x [x];
    struct x *x;
    char x [x];
    if (!(x = x (x ()))) {
        x ("%s: You don't exist. Go away.\n", x);
        x (1);
    }
    if (!(x (x, sizeof (x)))) {
        x ("%s: Cannot read current directory -- %s\n", x, x);
        x (1);
    }
    if (x (x, sizeof (x)) < 0) {
        x (x, x, "%s", x);
    }
    x.x = x (0);
    x.x.x = x (x);
    x.x.x = x (x->x);
    x.x.x = x (x->x);
    x.x = x (x);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="111" endline="136">
void x (Service_T x, long x, char *x, ... ) {
    long x;
    Event_T x;
    ASSERT (x);
    NEW (x);
    x->x = x;
    x->x = x;
    x->x = x;
    if (x) {
        x x;
        x (x, x);
        x->x = x (x, x, &x);
        x (x);
    }
    LOCK (x) x (x);
    END_LOCK;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="143" endline="151">
void x (Event_T *x) {
    x (x && * x);
    x ((* x) -> x);
    FREE (*x);
    (*x) = x;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="162" endline="169">
Service_T x (Event_T E) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="177" endline="184">
int x (Event_T E) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="193" endline="200">
const char *x (Event_T E) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="212" endline="235">
const char *x (Event_T E) {
    int x, x;
    int x = sizeof (x) / sizeof (Event_Table [0]);
    ASSERT (x);
    x = (x->x->x == x && ((x->x == x) || (x->x == x) || (x->x == x))) ? x : x->x;
    for (x = 0; x < x; x++)
        if (x == x[x].x)
            return x[x].x;
    return x;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="245" endline="305">
static void x (Event_T E) {
    ASSERT (x);
    if (x->x) {
        x ("%s", x -> x);
    }
    switch (x->x) {
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    }
    if (x->x != x) {
        x (x);
    }
    x (& x);
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="311" endline="319">
static void x (Event_T E) {
    if ((x->x->x != x)) {
        x (x -> x -> x, "stop");
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="322" endline="333">
static void x (Event_T E) {
    if (x->x->x)
        x->x->x++;
    if ((x->x->x != x)) {
        x (x -> x -> x, "start");
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="336" endline="347">
static void x (Event_T E) {
    if (x->x->x)
        x->x->x++;
    if ((x->x->x != x)) {
        x (x -> x -> x, "restart");
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="350" endline="355">
static void x (Event_T E) {
    x->x->x = x;
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="358" endline="385">
static void x (Event_T E) {
    Device_T x;
    Resource_T x;
    Service_T x = x->x;
    for (x = x->x; x; x = x->x) {
        if (x->x && x->x != x) {
            x->x = x;
            x (x, x -> x, x (x));
        }
    }
    for (x = x->x; x; x = x->x) {
        if (x->x && x->x != x) {
            x->x = x;
            x (x, x -> x, x (x));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="388" endline="406">
static void x (Event_T E) {
    Timestamp_T x;
    Service_T x = x->x;
    for (x = x->x; x; x = x->x) {
        if (x->x && x->x != x) {
            x->x = x;
            x (x, x -> x, x (x));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="409" endline="427">
static void x (Event_T E) {
    Size_T x;
    Service_T x = x->x;
    for (x = x->x; x; x = x->x) {
        if (x->x && x->x != x) {
            x->x = x;
            x (x, x -> x, x (x));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="430" endline="459">
static void x (Event_T E) {
    Port_T x;
    Icmp_T x;
    Service_T x = x->x;
    for (x = x->x; x; x = x->x) {
        if (x->x && x->x != x) {
            x->x = x;
            x (x, x -> x, x (x));
        }
    }
    for (x = x->x; x; x = x->x) {
        if (x->x && x->x != x) {
            x->x = x;
            x (x, x -> x, x (x));
        }
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="462" endline="473">
static void x (Event_T E) {
    Service_T x = x->x;
    if (x->x->x && x->x->x != x) {
        x->x->x = x;
        x (x, x -> x -> x, x (x));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="476" endline="489">
static void x (Event_T E) {
    Service_T x = x->x;
    x->x->x = x;
    if (x->x->x && x->x->x != x) {
        x->x->x = x;
        x (x, x -> x -> x, x (x));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="492" endline="505">
static void x (Event_T E) {
    Service_T x = x->x;
    x->x->x = x;
    if (x->x->x && x->x->x != x) {
        x->x->x = x;
        x (x, x -> x -> x, x (x));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="508" endline="520">
static void x (Event_T E) {
    Service_T x = x->x;
    x->x->x = x;
    if (x->x->x && x->x->x != x) {
        x->x->x = x;
        x (x, x -> x -> x, x (x));
    }
}
</source>
<source file="examples/monit-4.2/event.c.ifdefed" startline="523" endline="528">
static void x (Event_T E) {
    x (x -> x -> x, "unmonitor");
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="79" endline="117">
void x () {
    char x [x];
    char x [x];
    if (x.x == x) {
        if (!x ()) {
            x (x, x, "%s/%s", x, x);
        }
        else {
            x (x, x, "%s/.%s", x.x.x, x);
        }
        x.x = x (x);
    }
    if (x.x == x) {
        x (x, x, "%s/.%s", x.x.x, x);
        x.x = x (x);
    }
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="123" endline="129">
void x () {
    x (x.x);
    x (x.x);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="139" endline="170">
x x (char *x, x x) {
    struct x x;
    ASSERT (x);
    if (!x (x, &x)) {
        if (((x == x) && x (x.x)) || ((x == x) && x (x.x)) || ((x == (x | x)) && (x (x.x) || x (x.x)))) {
            return x (x.x, x.x);
        }
        else {
            x ("%s: Invalid object type - %s\n", x, x);
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="179" endline="218">
char *x () {
    char *x = x (x);
    x (x, x, "%s/.%s", x.x.x, x);
    if (x (x)) {
        return (x);
    }
    x (x, 0, x);
    x (x, x, "/etc/%s", x);
    if (x (x)) {
        return (x);
    }
    if (x (x)) {
        x (x, 0, x);
        x (x, x, "%s/%s", x.x.x, x);
        return (x);
    }
    x ("%s: Cannot find the control file at ~/.%s, /etc/%s or at ./%s \n", x, x, x, x);
    x (1);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="227" endline="253">
int x (char *x) {
    FILE *x = x;
    ASSERT (x);
    x (x);
    x (x);
    if ((x = x (x, "w")) == (x *) x) {
        x ("%s: Error opening pidfile '%s' for writing -- %s\n", x, x, x);
        return (x);
    }
    x (x, "%d\n", (int) x ());
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="264" endline="271">
int x (char *x) {
    ASSERT (x);
    return x (x, "control file", x | x | x);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="279" endline="288">
int x (char *x) {
    struct x x;
    ASSERT (x);
    return (x (x, &x) == 0 && x (x.x));
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="296" endline="305">
int x (char *x) {
    struct x x;
    ASSERT (x);
    return (x (x, &x) == 0);
}
</source>
<source file="examples/monit-4.2/files.c.ifdefed" startline="318" endline="411">
int x (char *x, char *x, int x) {
    struct x x;
    x = 0;
    ASSERT (x);
    ASSERT (x);
    if (x (x, &x) < 0) {
        x ("%s: Cannot stat the %s '%s' -- %s\n", x, x, x, x);
        return x;
    }
    if (x (x.x)) {
        x ("%s: The %s '%s' must not be a symbolic link.\n", x, x, x);
        return (x);
    }
    if (!x (x.x)) {
        x ("%s: The %s '%s' is not a regular file.\n", x, x, x);
        return x;
    }
    if (x.x != x ()) {
        x ("%s: The %s '%s' must be owned by you.\n", x, x, x);
        return x;
    }
    if ((x.x & 0777) & ~x) {
        x ("%s: The %s '%s' must have permissions no more " "than -%c%c%c%c%c%c%c%c%c (0%o); " "right now permissions are -%c%c%c%c%c%c%c%c%c (0%o).\n", x, x, x, x & x ? 'r' : '-', x & x ? 'w' : '-', x & x ? 'x' : '-', x & x ? 'r' : '-', x & x ? 'w' : '-', x & x ? 'x' : '-', x & x ? 'r' : '-', x & x ? 'w' : '-', x & x ? 'x' : '-', x & 0777, x.x & x ? 'r' : '-', x.x & x ? 'w' : '-', x.x & x ? 'x' : '-', x.x & x ? 'r' : '-', x.x & x ? 'w' : '-', x.x & x ? 'x' : '-', x.x & x ? 'r' : '-', x.x & x ? 'w' : '-', x.x & x ? 'x' : '-', x.x & 0777);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="73" endline="100">
void x () {
    x ();
    x ();
    if (x)
        x (&x);
    if (x.x)
        x (&x.x);
    if (x.x)
        x (&x.x);
    if (x.x)
        x (&x.x);
    x (x.x);
    x (x.x);
    x (x.x);
    x (x.x);
    x (x.x.x);
    x (x.x.x);
    x (x.x.x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="103" endline="118">
void x (Mail_T *x) {
    ASSERT (x);
    if ((*x)->x)
        x (&(*x)->x);
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="124" endline="136">
static void x (Service_T *x) {
    x (x && * x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x (& (* x));
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="139" endline="234">
static void x (Service_T *x) {
    x (x && * x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x);
    (*x)->x = x;
    x (& (* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="237" endline="250">
static void x (MailServer_T *x) {
    if (!x && !*x)
        return;
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="253" endline="264">
static void x (Command_T *x) {
    int x;
    x (x && * x);
    for (x = 0; (*x)->x[x]; x++)
        x ((*x)->x[x]);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="267" endline="295">
static void x (Port_T *x) {
    x (x && * x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x);
    x ((* x) -> x.x);
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="298" endline="315">
static void x (Device_T *x) {
    x (x && * x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="318" endline="335">
static void x (Icmp_T *x) {
    x (x && * x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="338" endline="355">
static void x (Resource_T *x) {
    ASSERT (x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="358" endline="365">
static void x (ProcInfo_T *x) {
    ASSERT (x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="368" endline="375">
static void x (DeviceInfo_T *x) {
    ASSERT (x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="378" endline="394">
static void x (Timestamp_T *x) {
    ASSERT (x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="397" endline="410">
static void x (Size_T *x) {
    ASSERT (x);
    if ((*x)->x)
        x (&(*x)->x);
    if ((*x)->x)
        x (&(*x)->x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="413" endline="424">
static void x (Checksum_T *x) {
    ASSERT (x);
    if ((*x)->x)
        x (&(*x)->x);
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="427" endline="437">
static void x (Perm_T *x) {
    ASSERT (x);
    if ((*x)->x)
        x (&(*x)->x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="440" endline="450">
static void x (Uid_T *x) {
    ASSERT (x);
    if ((*x)->x)
        x (&(*x)->x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="453" endline="463">
static void x (Gid_T *x) {
    ASSERT (x);
    if ((*x)->x)
        x (&(*x)->x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="466" endline="479">
static void x (Dependant_T *x) {
    ASSERT (x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="482" endline="502">
static void x (Generic_T *x) {
    ASSERT (x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x ((* x) -> x);
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/gc.c.ifdefed" startline="505" endline="519">
static void x (Auth_T *x) {
    ASSERT (x);
    if ((*x)->x) {
        x (& (* x) -> x);
    }
    x ((* x) -> x);
    x ((* x) -> x);
    FREE (*x);
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="66" endline="125">
char *x (int x, unsigned char *x) {
    int x;
    char *x, *x;
    if (!x)
        return x;
    if (!x)
        x = x ((char *) x);
    x = x (sizeof (char), x *4 / 3 + 4);
    x = x;
    for (x = 0; x < x; x += 3) {
        unsigned char x = 0, x = 0, x = 0, x = 0, x = 0, x = 0, x = 0;
        x = x[x];
        if (x + 1 < x)
            x = x[x + 1];
        if (x + 2 < x)
            x = x[x + 2];
        x = x >> 2;
        x = ((x & 0x3) << 4) | (x >> 4);
        x = ((x & 0xf) << 2) | (x >> 6);
        x = x & 0x3f;
        *x++ = x (x);
        *x++ = x (x);
        if (x + 1 < x) {
            *x++ = x (x);
        }
        else {
            *x++ = '=';
        }
        if (x + 2 < x) {
            *x++ = x (x);
        }
        else {
            *x++ = '=';
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="137" endline="221">
int x (unsigned char *x, const char *x) {
    if (x) {
        unsigned char *x = x;
        int x, x = x (x) + 1;
        unsigned char *x = x (x);
        for (x = 0, x = 0; x[x]; x++) {
            if (x (x[x])) {
                x[x++] = x[x];
            }
        }
        for (x = 0; x < x; x += 4) {
            char x = 'A', x = 'A', x = 'A', x = 'A';
            unsigned char x = 0, x = 0, x = 0, x = 0;
            x = x[x];
            if (x + 1 < x) {
                x = x[x + 1];
            }
            if (x + 2 < x) {
                x = x[x + 2];
            }
            if (x + 3 < x) {
                x = x[x + 3];
            }
            x = x (x);
            x = x (x);
            x = x (x);
            x = x (x);
            *x++ = ((x << 2) | (x >> 4));
            if (x != '=') {
                *x++ = (((x & 0xf) << 4) | (x >> 2));
            }
            if (x != '=') {
                *x++ = (((x & 0x3) << 6) | x);
            }
        }
        FREE (x);
        return (x - x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="230" endline="240">
static char x (unsigned char x) {
    if (x < 26)
        return 'A' + x;
    if (x < 52)
        return 'a' + (x - 26);
    if (x < 62)
        return '0' + (x - 52);
    if (x == 62)
        return '+';
    return '/';
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="246" endline="256">
static unsigned char x (char x) {
    if (x >= 'A' && x <= 'Z')
        return (x - 'A');
    if (x >= 'a' && x <= 'z')
        return (x - 'a' + 26);
    if (x >= '0' && x <= '9')
        return (x - '0' + 52);
    if (x == '+')
        return 62;
    return 63;
}
</source>
<source file="examples/monit-4.2/http/base64.c.ifdefed" startline="262" endline="276">
static int x (char x) {
    if ((x >= 'A' && x <= 'Z') || (x >= 'a' && x <= 'z') || (x >= '0' && x <= '9') || (x == '+') || (x == '/') || (x == '=')) {
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="155" endline="160">
void x () {
    x ((void *) x, (void *) x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="170" endline="175">
static void x (HttpRequest x, HttpResponse x) {
    x (x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="182" endline="245">
static void x (HttpRequest x, HttpResponse x) {
    x (x, "text/html");
    if (x (x)) {
        x (x.x)
        x (x, x);
        END_LOCK;
    }
    else if (x (x)) {
        x (x.x)
        x (x, x);
        END_LOCK;
    }
    else if (x (x)) {
        x (x, x);
    }
    else if (x (x)) {
        x (x, x);
    }
    else if (x (x)) {
        x (x, x);
    }
    else if (x (x)) {
        if (x (x)) {
            x (x, x, "You do not have sufficent privilegs to access this page");
        }
        else {
            x (x, x, "The monit http server is stopped");
            x ();
        }
    }
    else if (x (x)) {
        x (x);
    }
    else if (x (x)) {
        const char *x = x (x, "format");
        if (x && x (x, "xml"))
            x (x, x);
        else {
            x (x, x);
        }
    }
    else {
        x (x, x);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="251" endline="268">
static void x (HttpRequest x, HttpResponse x) {
    int x;
    int x = x ();
    if (x) {
        x = x;
    }
    else {
        x = x;
    }
    x (x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="271" endline="303">
static void x (HttpRequest x, HttpResponse x) {
    char *x = x (x.x, "&nbsp;");
    x ("", x.x)
    x (x, "<table cellspacing=\"0\" cellpadding=\"5\" width=\"100%%\" border=\"0\">" " <tr bgcolor=\"#BBDDFF\">" "  <td colspan=2 valign=\"top\" align=\"left\" bgcolor=\"#EFF7FF\" width=\"100%%\">" "  <br><h2 align=\"center\">Monit Service Manager</h2>" "  <p align=\"center\">Monit is <a href='/_runtime'>running</a> on %s " "  with <i>uptime, %s</i> and monitoring:</p><br>" "  </td>" " </tr>" "</table>" "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%%\" border=\"0\">" "  <tr valign=\"middle\" bgcolor=\"#6F6F6F\">" "    <td><img src=\"/_pixel\" width=\"1\" height=\"1\" alt=\"\"></td>" "  </tr>" "</table>", x.x, x);
    FREE (x);
    x (x, x);
    x (x, x);
    x (x, x);
    x (x, x);
    x (x, x);
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="306" endline="339">
static void x (HttpRequest x, HttpResponse x) {
    x (x, "<html><head><title>about monit</title><body bgcolor=white>" "<br><br><center><a href='http://www.tildeslash.com/monit/'><font size=+2>" "monit " x "</font></a></center><br><br>");
    x (x, "<ul>" "<li>Copyright &copy; 2000-2004 by <a " "href=\"http://www.tildeslash.com/monit/who.html\">the monit " "project group</a>. All Rights Reserved.<br> </small><p>" "<li>Portions of this software are copyright &copy; 1995, 1996 " "<a href='http://www.gnu.org/'>Free Software Foundation, Inc.</a></ul>");
    x (x, "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%%\" border=\"0\">" " <tr bgcolor=\"#6F6F6F\">" " <td valign=\"bottom\"><img src=\"/_pixel\" width=\"1\" height=\"1\" " "alt=\"\"></td></tr></table>");
    x (x, "<p>This program is free software; you can redistribute it and/or " "modify it under the terms of the GNU General Public License " "as published by the Free Software Foundation; either version 2 of " "the License, or (at your option) any later version.<p>" "This program is distributed in the hope that it will be useful, but " "WITHOUT ANY WARRANTY; without even the implied warranty of " "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the " "<a href='http://www.tildeslash.com/gpl.html'>GNU " "General Public License</a> for more details." "<p><br><center><p><i>Please consider making a " "<a class=grey href=\"http://www.tildeslash.com/monit/index.html#support\">" "donation</a> and support our continued work with monit.</i></center>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="342" endline="477">
static void x (HttpRequest x, HttpResponse x) {
    int x = x ();
    x ("_runtime", 1000)
    x (x, "<center><h3>monit runtime status</h3><center><br>");
    x (x, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"40%\"><b>Parameter</b></td>" "<td width=\"60%\"><b>Value</b></td></tr>");
    x (x, "<tr><td>Host</td><td>%s</td></tr>", x.x);
    x (x, "<tr><td>Process id</td><td>%d</td></tr>", x);
    x (x, "<tr><td>Effective user running monit</td>" "<td>%s</td></tr>", x.x.x);
    x (x, "<tr><td>Controlfile</td><td>%s</td></tr>", x.x);
    if (x.x)
        x (x, "<tr><td>Logfile</td><td>%s</td></tr>", x.x);
    x (x, "<tr><td>Pidfile</td><td>%s</td></tr>", x.x);
    x (x, "<tr><td>State file</td><td>%s</td></tr>", x.x);
    x (x, "<tr><td>Debug</td><td>%s</td></tr>", x.x ? "True" : "False");
    x (x, "<tr><td>Log</td><td>%s</td></tr>", x.x ? "True" : "False");
    x (x, "<tr><td>Use syslog</td><td>%s</td></tr>", x.x ? "True" : "False");
    x (x, "<tr><td>Mail server(s)</td><td>");
    if (x.x) {
        MailServer_T x = x.x;
        for (x = x.x; x; x = x->x)
            x (x, "%s&nbsp;", x->x);
        x (x, "</td></tr>");
    }
    else {
        x (x, "localhost</td></tr>");
    }
    if (x.x.x)
        x (x, "<tr><td>Default mail from</td><td>%s</td></tr>", x.x.x);
    if (x.x.x)
        x (x, "<tr><td>Default mail subject</td><td>%s</td></tr>", x.x.x);
    if (x.x.x)
        x (x, "<tr><td>Default mail message</td><td>%s</td></tr>", x.x.x);
    x (x, "<tr><td>Poll time</td><td>%d seconds</td></tr>", x.x);
    x (x, "<tr><td>httpd bind address</td><td>%s</td></tr>", x.x ? x.x : "Any/All");
    x (x, "<tr><td>httpd portnumber</td><td>%d</td></tr>", x.x);
    x (x, "<tr><td>httpd signature</td><td>%d</td></tr>", x.x ? "True" : "False");
    x (x, "<tr><td>Use ssl encryption</td><td>%s</td></tr>", x.x ? "True" : "False");
    if (x.x) {
        x (x, "<tr><td>PEM key/certificate file</td><td>%s</td></tr>", x.x);
        if (x.x != x) {
            x (x, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Enabled");
            x (x, "<tr><td>Client PEM key/certificate file" "</td><td>%s</td></tr>", x.x);
        }
        else {
            x (x, "<tr><td>Client PEM key/certification" "</td><td>%s</td></tr>", "Disabled");
        }
        x (x, "<tr><td>Allow self certified certificates " "</td><td>%s</td></tr>", x.x ? "True" : "False");
    }
    x (x, "<tr><td>httpd auth. style</td><td>%s</td></tr>", (x.x != x) && x () ? "Basic Authentication and Host allow list" : (x.x != x) ? "Basic Authentication" : x () ? "Host allow list" : "No authentication");
    x (x, x.x);
    x (x, "</table>");
    if (!x (x)) {
        x (x, "<table cellspacing=16><tr nowrap><td><font size=+1>" "<font color='#f0000'>Stop monit http server?</font></font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", x);
        if (x.x && !x.x) {
            x (x, "<td><font size=+1>" "View monit logfile?</font>" "<td align=right><form method=GET action=%s>" "<input type=submit value=Go style='font-size: 12pt'></font>" "</form></td>", x);
        }
    }
    x (x, "</tr></table>");
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="480" endline="559">
static void x (HttpRequest x, HttpResponse x) {
    if (x (x)) {
        x (x, x, "You do not have sufficent privilegs to access this page");
        return;
    }
    x ("_viewlog", 100)
    if (x.x && !x.x) {
        struct x x;
        if (!x (x.x, &x)) {
            FILE *x = x (x.x, "r");
            if (x) {
                int x;
                char x [8192];
                x (x, "<br><p><form><textarea cols=80 rows=30>");
                while ((x = x (x, sizeof (char), 8192, x)) > 0) {
                    x[x] = 0;
                    x (x, "%s", x);
                }
                x (x);
                x (x, "</textarea></form>");
            }
            else {
                x (x, "Error opening logfile: %s", x);
            }
        }
        else {
            x (x, "Error stating logfile: %s", x);
        }
    }
    else {
        x (x, "<b>Cannot view logfile:</b><br>");
        if (!x.x) {
            x (x, "monit was started without logging");
        }
        else {
            x (x, "monit uses syslog");
        }
    }
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="562" endline="691">
static void x (HttpRequest x, HttpResponse x) {
    char *x = x->x;
    const char *x = x (x, "action");
    if (x (++x)) {
        if (x) {
            Service_T x = x (x);
            if (x (x)) {
                x (x, x, "You do not have sufficent privilegs to access this page");
                return;
            }
            if (x (x, "start")) {
                if (x->x) {
                    x (x -> x)
                    x (x, x);
                    if (x->x == x) {
                        int x = x.x;
                        while (x-- && !x.x) {
                            if (x (x))
                                break;
                            x (1);
                        }
                    }
                    END_LOCK;
                    if (x->x == x && !x (x)) {
                        x (x, x, "Could not start the service");
                        goto x;
                    }
                }
                else {
                    x (x, x, "Start method not defined for the service");
                    goto x;
                }
            }
            else if (x (x, "stop")) {
                if (x->x) {
                    x (x -> x)
                    x (x, x);
                    END_LOCK;
                }
                else {
                    x (x, x, "Stop method not defined for the service");
                    goto x;
                }
            }
            else if (x (x, "restart")) {
                if (x->x && x->x) {
                    x (x -> x)
                    x (x, x);
                    if (x->x == x) {
                        int x = x.x;
                        while (x-- && !x.x) {
                            if (x (x))
                                break;
                            x (1);
                        }
                    }
                    END_LOCK;
                    if (x->x == x && !x (x)) {
                        x (x, x, "Could not restart the service");
                        goto x;
                    }
                }
                else {
                    x (x, x, "Start or stop method not defined for the service");
                    goto x;
                }
            }
            else if (x (x, "monitor")) {
                x (x -> x)
                x (x, x);
                END_LOCK;
            }
            else if (x (x, "unmonitor")) {
                x (x -> x)
                x (x, x);
                END_LOCK;
            }
        }
        x (x.x)
        x (x, x, x);
        END_LOCK;
    }
    else {
        x (x, x);
    }
x :
    x ();
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="694" endline="731">
static void x (HttpRequest x, HttpResponse x, char *x) {
    Service_T x = x (x);
    x (x, 1000)
    switch (x->x) {
    case x :
        x (x, x, x);
        break;
    case x :
        x (x, x, x);
        break;
    case x :
        x (x, x, x);
        break;
    case x :
        x (x, x, x);
        break;
    case x :
        x (x, x, x);
        break;
    default :
        break;
    }
    FOOT
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="737" endline="759">
static void x (HttpResponse x) {
    static int x;
    Socket_T x = x->x;
    static unsigned char *x = x;
    if (!x) {
        x = x (sizeof (unsigned char), x (x));
        x = x (x, x);
    }
    if (x) {
        x->x = x;
        x (x, "HTTP/1.0 200 OK\r\n");
        x (x, "Content-length: %d\r\n", x);
        x (x, "Content-Type: image/gif\r\n");
        x (x, "Connection: close\r\n\r\n");
        x (x, x, x);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="762" endline="768">
static void x (HttpRequest x, HttpResponse x) {
    x (x, x, "The requested URL was not found on this server");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="771" endline="886">
static void x (HttpRequest x, HttpResponse x) {
    int x = x;
    int x = x;
    Service_T x;
    for (x = x; x; x = x->x) {
        int x;
        char *x;
        if (x->x != x)
            continue;
        if (x) {
            if (x.x) {
                x (x, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Process</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Uptime</b></h3></td>" "<td align=\"right\"><h3><b>CPU</b></h3></td>" "<td align=\"right\"><h3><b>Memory</b></h3></td>" "</tr>");
            }
            else {
                x (x, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Service</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "</tr>");
            }
            x = x;
        }
        x = x (x);
        x = x (x->x, "&nbsp;");
        if (x.x) {
            ProcInfo_T x = x->x;
            if (x) {
                x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td><td align=\"right\">%s</td>" "<td align=\"right\">%.1f%%</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;kB]</td></tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, ! x -> x ? "<font color='#ff8800'>not monitored</font>" : x ? "<font color='#00ff00'>running</font>" : "<font color='#ff0000'>not running</font>", x, x -> x / 10.0, x -> x / 10.0, x -> x);
            }
            else {
                x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">- </td>" "<td align=\"right\">- [-]</td></tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, ! x -> x ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not running</font>");
            }
        }
        else {
            x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s %s</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, ! x -> x ? "<font color='#ff8800'>not monitored</font>" : x ? "<font color=green>running</font>" : "<font color=red>not running</font>", x ? x : "");
        }
        x = x ? x : x;
        FREE (x);
    }
    if (!x)
        x (x, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="889" endline="1000">
static void x (HttpRequest x, HttpResponse x) {
    Service_T x;
    int x = x;
    int x = x;
    for (x = x; x; x = x->x) {
        if (x->x != x)
            continue;
        if (x) {
            x (x, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Device</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Space usage</b></h3></td>" "<td align=\"right\"><h3><b>Inodes usage</b></h3></td>" "</tr>");
            x = x;
        }
        if (!x (x->x, x->x)) {
            x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">- [-]</td>" "<td align=\"right\">- [-]</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, ! x -> x ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>not accessible</font>");
        }
        else {
            if (x->x->x > 0) {
                x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\">%.1f%% [%ld&nbsp;objects]</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : ! x -> x ? "<font color='#ff8800'>not monitored</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (x -> x -> x - x -> x -> x) / x -> x -> x, (float) (x -> x -> x - x -> x -> x) / 1048576 * x -> x -> x, (float) 100 * (x -> x -> x - x -> x -> x) / x -> x -> x, x -> x -> x - x -> x -> x);
            }
            else {
                x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%.1f%% [%.1f&nbsp;MB]</td>" "<td align=\"right\"><font color=red>not supported by " "filesystem</font></td></tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : ! x -> x ? "<font color='#ff8800'>not monitored</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (float) 100 * (x -> x -> x - x -> x -> x) / x -> x -> x, (float) (x -> x -> x - x -> x -> x) / 1048576 * x -> x -> x);
            }
        }
        x = x ? x : x;
    }
    if (!x)
        x (x, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1003" endline="1090">
static void x (HttpRequest x, HttpResponse x) {
    Service_T x;
    int x = x;
    int x = x;
    struct x x;
    for (x = x; x; x = x->x) {
        if (x->x != x)
            continue;
        if (x) {
            x (x, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>File</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Size</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
            x = x;
        }
        if ((x (x->x, &x) != 0) || !x (x.x)) {
            x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, ! x -> x ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
        }
        else {
            x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%lu&nbsp;B</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : ! x -> x ? "<font color='#ff8800'>not monitored</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", (unsigned long) x.x, x.x & 07777, x.x, x.x);
        }
        x = x ? x : x;
    }
    if (!x)
        x (x, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1093" endline="1176">
static void x (HttpRequest x, HttpResponse x) {
    Service_T x;
    int x = x;
    int x = x;
    struct x x;
    for (x = x; x; x = x->x) {
        if (x->x != x)
            continue;
        if (x) {
            x (x, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Directory</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Permission</b></h3></td>" "<td align=\"right\"><h3><b>UID</b></h3></td>" "<td align=\"right\"><h3><b>GID</b></h3></td>" "</tr>");
            x = x;
        }
        if ((x (x->x, &x) != 0) || !x (x.x)) {
            x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "<td align=\"right\">-</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, ! x -> x ? "<font color='#ff8800'>not monitored</font>" : "<font color=red>doesn't exist</font>");
        }
        else {
            x (x, "<tr %s>" "<td width=\"20%\"><a href='/%s'>%s</a></td>" "<td align=\"left\">%s</td>" "<td align=\"right\">%o</td>" "<td align=\"right\">%d</td>" "<td align=\"right\">%d</td>" "</tr>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x, (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : ! x -> x ? "<font color='#ff8800'>not monitored</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : "<font color='#00ff00'>accessible</font>", x.x & 07777, x.x, x.x);
        }
        x = x ? x : x;
    }
    if (!x)
        x (x, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1179" endline="1283">
static void x (HttpRequest x, HttpResponse x) {
    Port_T x;
    Service_T x;
    Icmp_T x;
    int x = x;
    int x = x;
    for (x = x; x; x = x->x) {
        if (x->x != x)
            continue;
        if (x) {
            x (x, "<br><p>&nbsp;</p>" "<table cellspacing=0 cellpadding=3 border=0 width=\"70%\">" "<tr>" "<td width=\"20%\"><h3><b>Host</b></h3></td>" "<td align=\"left\"><h3><b>Status</b></h3></td>" "<td align=\"right\"><h3><b>Protocol(s)</b></h3></td>" "</tr>");
            x = x;
        }
        x (x, "<tr %s><td width=\"20%\"><a href='/%s'>%s</a></td>", x ? "bgcolor=\"#EFEFEF\"" : "", x -> x, x -> x);
        if (x->x) {
            int x = x;
            for (x = x->x; x; x = x->x) {
                if (!x->x) {
                    x = x;
                    break;
                }
            }
            if (x) {
                x (x, "<td align=\"left\">%s</td>" "<td align=\"right\">", ! x -> x ? "<font color='#ff8800'>not monitored</font>" : "<font color='#00ff00'>available</font>");
                for (x = x->x; x; x = x->x) {
                    if (x != x->x)
                        x (x, "&nbsp;&nbsp;<b>|</b>&nbsp;&nbsp;");
                    x (x, "[%s] at port %d", x -> x -> x, x -> x);
                }
                x (x, "</td>");
            }
            else {
                x (x, "<td align=\"left\">%s</td>" "<td align=\"right\">[%s] at port %d</td>", ! x -> x ? "<font color='#ff8800'>not monitored</font>" : "<font color='#ff0000'>not available</font>", x -> x -> x, x -> x);
            }
        }
        else if (x->x) {
            int x = x;
            for (x = x->x; x; x = x->x) {
                if (!x->x) {
                    x = x;
                    break;
                }
            }
            if (x) {
                x (x, "<td align=\"left\">" "<font color='#00ff00'>available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
            }
            else {
                x (x, "<td align=\"left\">" "<font color='#ff0000'>not available</font></td>" "<td align=\"right\">[ICMP PING]</td>");
            }
        }
        x (x, "</tr>");
        x = x ? x : x;
    }
    if (!x)
        x (x, "</table>");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1286" endline="1444">
static void x (HttpRequest x, HttpResponse x, Service_T x) {
    struct x x;
    int x = (x (x->x, x->x) && x (x->x, &x) == 0);
    x (x, "<p><br><h3>Device status</h3><br>");
    x (x, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td><td width=\"70%\">" "<b>Value</b></td></tr>");
    x (x, "<tr><td>Name</td><td>%s</td></tr>", x -> x);
    x (x, "<tr><td>Device status</td><td>%s</td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : x ? "<font color='#00ff00'>Accessible</font>" : "<font color='#ff0000'>Not Accessible</font>");
    x (x, "<tr><td>Path</td><td>%s</td></tr>", x -> x);
    x (x, x);
    if (x->x)
        x (x, "<tr><td>Associated permission</td>" "<td>if failed %o then %s</td></tr>", x->x->x, x[x->x->x]);
    if (x->x)
        x (x, "<tr><td>Associated UID</td><td>if failed %d then %s</td>" "</tr>", (int) x->x->x, x[x->x->x]);
    if (x->x)
        x (x, "<tr><td>Associated GID</td><td>if failed %d then %s</td>" "</tr>", (int) x->x->x, x[x->x->x]);
    x (x, "<tr><td>Permission</td><td>%s%o</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", x.x & 07777);
    x (x, "<tr><td>UID</td><td>%s%d</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", (int) x.x);
    x (x, "<tr><td>GID</td><td>%s%d</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", (int) x.x);
    {
        Device_T x;
        if (x->x) {
            for (x = x->x; x; x = x->x) {
                if (x->x == x) {
                    x (x, "<tr><td>Inodes usage limit</td><td>if %s %ld %s " "then %s</td></tr>", x [x -> x], (x -> x > - 1) ? x -> x : x -> x, (x -> x > - 1) ? "" : "%", x [x -> x]);
                }
                else if (x->x == x) {
                    x (x, "<tr><td>Space usage limit</td><td>if %s %ld %s " "then %s</td></tr>", x [x -> x], (x -> x > - 1) ? x -> x : x -> x, (x -> x > - 1) ? "blocks" : "%", x [x -> x]);
                }
            }
        }
        if (x) {
            x (x, "<tr><td>Blocks total</td><td>%ld [%.1f MB]</td></tr>", x -> x -> x, (float) x -> x -> x / 1048576 * x -> x -> x);
            x (x, "<tr><td>Blocks free for non superuser</td>" "<td>%ld [%.1f MB] [%.1f%%]</font></td></tr>", x -> x -> x, (float) x -> x -> x / 1048576 * x -> x -> x, (float) 100 * x -> x -> x / x -> x -> x);
            x (x, "<tr><td>Blocks free total</td><td>%ld [%.1f MB] [%.1f%%]" "</td></tr>", x -> x -> x, (float) x -> x -> x / 1048576 * x -> x -> x, (float) 100 * x -> x -> x / x -> x -> x);
            x (x, "<tr><td>Block size</td><td>%ld B</td></tr>", x -> x -> x);
            if (x->x->x > 0) {
                x (x, "<tr><td>Inodes total</td><td>%ld</td></tr>", x -> x -> x);
                x (x, "<tr><td>Inodes free</td><td>%ld [%.1f%%]</font>" "</td></tr>", x -> x -> x, (float) 100 * x -> x -> x / x -> x -> x);
            }
        }
        else {
            x (x, "<tr><td>Blocks total</td><td>-</td></tr>");
            x (x, "<tr><td>Blocks free for non superuser</td>" "<td>-</font></td></tr>");
            x (x, "<tr><td>Blocks free total</td><td>-</td></tr>");
            x (x, "<tr><td>Block size</td><td>-</td></tr>");
            x (x, "<tr><td>Inodes total</td><td>-</td></tr>");
            x (x, "<tr><td>Inodes free</td><td>-</font></td></tr>");
        }
    }
    x (x, x -> x);
    x (x, "</table>");
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1447" endline="1538">
static void x (HttpRequest x, HttpResponse x, Service_T x) {
    struct x x;
    int x = ((x (x->x, &x) == 0) && x (x.x));
    x (x, "<p><br><h3>Directory status</h3><br>");
    x (x, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td>" "<td width=\"70%\"><b>Value</b></td></tr>");
    x (x, "<tr><td>Name</td><td>%s</td></tr>", x -> x);
    x (x, "<tr><td>Directory status</td><td>%s</td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : x ? "<font color='#00ff00'>Exist</font>" : "<font color='#ff0000'>Doesn't Exist</font>");
    x (x, "<tr><td>Path</td><td>%s</td></tr>", x -> x);
    x (x, x);
    {
        struct x *x;
        for (x = x->x; x; x = x->x) {
            if (x->x) {
                x (x, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", x [x -> x]);
            }
            else {
                x (x, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", x [x -> x], x -> x, x [x -> x]);
            }
        }
    }
    if (x->x)
        x (x, "<tr><td>Associated permission</td><td>" "if failed %o then %s</td></tr>", x->x->x, x[x->x->x]);
    if (x->x)
        x (x, "<tr><td>Associated UID</td><td>" "if failed %d then %s</td></tr>", (int) x->x->x, x[x->x->x]);
    if (x->x)
        x (x, "<tr><td>Associated GID</td><td>" "if failed %d then %s</td></tr>", (int) x->x->x, x[x->x->x]);
    x (x, "<tr><td>Permission</td><td>%s%o</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", x.x & 07777);
    x (x, "<tr><td>UID</td><td>%s%d</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", (int) x.x);
    x (x, "<tr><td>GID</td><td>%s%d</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", (int) x.x);
    x (x, x -> x);
    x (x, "</table>");
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1541" endline="1676">
static void x (HttpRequest x, HttpResponse x, Service_T x) {
    struct x x;
    int x = ((x (x->x, &x) == 0) && x (x.x));
    x (x, "<p><br><h3>File status</h3><br>");
    x (x, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td><td width=\"70%\">" "<b>Value</b></td></tr>");
    x (x, "<tr><td>Name</td><td>%s</td></tr>", x -> x);
    x (x, "<tr><td>File status</td><td>%s</td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>Permission Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>UID Error</font>" : (x -> x && x -> x -> x) ? "<font color='#ff0000'>GID Error</font>" : x ? "<font color='#00ff00'>Exist</font>" : "<font color='#ff0000'>Doesn't Exist</font>");
    x (x, "<tr><td>Path</td><td>%s</td></tr>", x -> x);
    x (x, x);
    {
        struct x *x;
        for (x = x->x; x; x = x->x) {
            if (x->x) {
                x (x, "<tr><td>Associated timestamp</td>" "<td>If changed then %s</td></tr>", x [x -> x]);
            }
            else {
                x (x, "<tr><td>Associated timestamp</td>" "<td>If %s %d second(s) then %s</td></tr>", x [x -> x], x -> x, x [x -> x]);
            }
        }
    }
    {
        Size_T x;
        for (x = x->x; x; x = x->x) {
            if (x->x) {
                x (x, "<tr><td>Associated size</td>" "<td>If changed then %s</td></tr>", x [x -> x]);
            }
            else {
                x (x, "<tr><td>Associated size</td>" "<td>If %s %lu byte(s) then %s</td></tr>", x [x -> x], x -> x, x [x -> x]);
            }
        }
    }
    if (x->x) {
        switch (x->x->x) {
        case x :
            x (x, "<tr><td>Associated checksum</td><td>" "if failed MD5(%s) then %s</td></tr>", x->x->x, x[x->x->x]);
            break;
        case x :
            x (x, "<tr><td>Associated checksum</td><td>" "if failed SHA1(%s) then %s</td></tr>", x->x->x, x[x->x->x]);
            break;
        default :
            x (x, "<tr><td>Associated checksum</td><td>" "if failed UNKNOWN(%s) then %s</td></tr>", x->x->x, x[x->x->x]);
            break;
        }
    }
    if (x->x)
        x (x, "<tr><td>Associated permission</td><td>" "if failed %o then %s</td></tr>", x->x->x, x[x->x->x]);
    if (x->x)
        x (x, "<tr><td>Associated UID</td><td>" "if failed %d then %s</td></tr>", (int) x->x->x, x[x->x->x]);
    if (x->x)
        x (x, "<tr><td>Associated GID</td><td>" "if failed %d then %s</td></tr>", (int) x->x->x, x[x->x->x]);
    x (x, "<tr><td>Size</td><td>%lu B</td></tr>", (unsigned long) x.x);
    x (x, "<tr><td>Permission</td><td>%s%o</td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", x.x & 07777);
    x (x, "<tr><td>UID</td><td>%s%d</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", (int) x.x);
    x (x, "<tr><td>GID</td><td>%s%d</font></td></tr>", (x -> x && x -> x -> x) ? "<font color='#ff0000'>" : "<font>", (int) x.x);
    x (x, x -> x);
    x (x, "</table>");
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1679" endline="1855">
static void x (HttpRequest x, HttpResponse x, Service_T x) {
    int x = x (x);
    x (x, "<p><br><h3>Process status</h3><br>");
    x (x, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td>" "<td width=\"70%\"><b>Value</b></td></tr>");
    x (x, "<tr><td>Name</td><td>%s</td></tr>", x -> x);
    x (x, "<tr><td>Process id </td><td>%d</td></tr>", x);
    x (x, "<tr><td>Process status</td><td>%s</td></tr>", x ? "<font color='#00ff00'>Running</font>" : "<font color='#ff0000'>Not Running</font>");
    x (x, "<tr><td>Pid file</td><td>%s</td></tr>", x -> x);
    x (x, x);
    if (x.x) {
        ProcInfo_T x = x->x;
        x (x, "<tr><td>CPU usage</td><td>%.1f%%</td></tr>", x -> x / 10.0);
        x (x, "<tr><td>Memory usage</td><td>%.1f%% [%ldkB]</td></tr>", x -> x / 10.0, x -> x);
        x (x, "<tr><td>Children</td><td>%d</td></tr>", x -> x);
        x (x, "<tr><td>Total memory usage (incl. children) </td>" "<td>%.1f%% [%ldkB]</td></tr>", x -> x / 10.0, x -> x);
    }
    {
        Port_T x;
        for (x = x->x; x; x = x->x) {
            if (x->x == x) {
                if (x->x.x) {
                    x (x, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td>" "</tr>", x -> x, x -> x, x -> x ? x -> x : "", x -> x -> x, x [x -> x]);
                    if (x->x.x != x) {
                        x (x, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", x -> x.x);
                    }
                }
                else {
                    x (x, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", x -> x, x -> x, x -> x ? x -> x : "", x -> x -> x, x [x -> x]);
                }
            }
            else if (x->x == x) {
                x (x, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", x -> x, x -> x -> x, x [x -> x]);
            }
        }
    }
    {
        Resource_T x;
        for (x = x->x; x; x = x->x) {
            switch (x->x) {
            case x :
                x (x, "<tr><td>CPU usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", x[x->x], x->x / 10.0, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Memory usage limit</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", x[x->x], x->x / 10.0, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Memory amount limit</td>" "<td>If %s %ld for %d cycle(s) then %s</td></tr>", x[x->x], x->x, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Load average (1min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", x[x->x], x->x / 10.0, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Load average (5min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", x[x->x], x->x / 10.0, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Load average (15min)</td>" "<td>If %s %.1f for %d cycle(s) then %s</td></tr>", x[x->x], x->x / 10.0, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Children</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", x[x->x], x->x, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Memory amount limit (incl. children)</td>" "<td>If %s %d for %d cycle(s) then %s</td></tr>", x[x->x], x->x, x->x, x[x->x]);
                break;
            case x :
                x (x, "<tr><td>Memory usage limit (incl. children)</td>" "<td>If %s %.1f%% for %d cycle(s) then %s</td></tr>", x[x->x], x->x / 10.0, x->x, x[x->x]);
                break;
            }
        }
    }
    x (x, x -> x);
    x (x, "</table>");
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1858" endline="1951">
static void x (HttpRequest x, HttpResponse x, Service_T x) {
    Icmp_T x;
    Port_T x;
    int x = x;
    for (x = x->x; x; x = x->x) {
        if (!x->x) {
            x = x;
            break;
        }
    }
    for (x = x->x; x; x = x->x) {
        if (!x->x) {
            x = x;
            break;
        }
    }
    x (x, "<p><br><h3>Host status</h3><br>");
    x (x, "<table cellspacing=0 cellpadding=3 border=1 width=\"90%\">" "<tr><td width=\"30%\"><b>Parameter</b></td>" "<td width=\"70%\"><b>Value</b></td></tr>");
    x (x, "<tr><td>Name</td><td>%s</td></tr>", x -> x);
    x (x, "<tr><td>Remote status</td><td>%s</td></tr>", x ? "<font color='#00ff00'>Available</font>" : "<font color='#ff0000'>Not available</font>");
    x (x, x);
    {
        Port_T x;
        for (x = x->x; x; x = x->x) {
            if (x->x == x) {
                if (x->x.x) {
                    x (x, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s via SSL] then %s</td></tr>", x -> x, x -> x, x -> x ? x -> x : "", x -> x -> x, x [x -> x]);
                    if (x->x.x != x) {
                        x (x, "<tr><td>Server certificate md5 sum</td><td>%s</td></tr>", x -> x.x);
                    }
                }
                else {
                    x (x, "<tr><td>Host:Port</td>" "<td>if failed %s:%d%s [%s] then %s</td></tr>", x -> x, x -> x, x -> x ? x -> x : "", x -> x -> x, x [x -> x]);
                }
            }
            else if (x->x == x) {
                x (x, "<tr><td>Unix Socket</td>" "<td>if failed %s [%s] then %s</td></tr>", x -> x, x -> x -> x, x [x -> x]);
            }
        }
    }
    {
        Icmp_T x;
        for (x = x->x; x; x = x->x)
            x (x, "<tr><td>ICMP</td>" "<td>if failed %s with timeout %d seconds then %s</td></tr>", x[x->x], x->x, x[x->x]);
    }
    x (x, x -> x);
    x (x, "</table>");
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="1957" endline="2009">
static void x (HttpResponse x, Mail_T x) {
    Mail_T x;
    for (x = x; x; x = x->x) {
        x (x, "<tr bgcolor=\"#EFEFEF\"><td>Alert mail to</td>" "<td>%s</td></tr>", x -> x ? x -> x : "");
        x (x, "<tr><td>Alert on</td><td>");
        if (x->x == (~((unsigned int) 0))) {
            x (x, "All events");
        }
        else {
            if (x (x->x, x))
                x (x, "Start ");
            if (x (x->x, x))
                x (x, "Stop ");
            if (x (x->x, x))
                x (x, "Restart ");
            if (x (x->x, x))
                x (x, "Checksum ");
            if (x (x->x, x))
                x (x, "Resource ");
            if (x (x->x, x))
                x (x, "Timeout ");
            if (x (x->x, x))
                x (x, "Timestamp ");
            if (x (x->x, x))
                x (x, "Size ");
            if (x (x->x, x))
                x (x, "Connection ");
            if (x (x->x, x))
                x (x, "Permission ");
            if (x (x->x, x))
                x (x, "Uid ");
            if (x (x->x, x))
                x (x, "Gid ");
            if (x (x->x, x))
                x (x, "Unmonitor ");
        }
        x (x, "</td></tr>");
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2012" endline="2056">
static void x (HttpRequest x, HttpResponse x, Service_T x) {
    char *x [] = {"monitor", "unmonitor"};
    char *x [] = {"Enable monitoring", "Disable monitoring"};
    if (x (x)) {
        return;
    }
    x (x, "<table cellspacing=16><tr nowrap><td><font size=+1>");
    if (x->x)
        x (x, "<td><form method=GET action=/%s>" "<input type=hidden value='start' name=action>" "<input type=submit value='Start service' style='font-size: " "12pt'></form></td>", x->x);
    if (x->x)
        x (x, "<td><form method=GET action=/%s>" "<input type=hidden value='stop' name=action>" "<input type=submit value='Stop service' style='font-size: " "12pt'></form></td>", x->x);
    if (x->x && x->x)
        x (x, "<td><form method=GET action=/%s>" "<input type=hidden value='restart' name=action>" "<input type=submit value='Restart service' style='font-size: " "12pt'></form></td>", x->x);
    x (x, "<td><form method=GET action=/%s>" "<input type=hidden value='%s' name=action>" "<input type=submit value='%s' style='font-size: 12pt'>" "</form></td></tr></table>", x -> x, x [x -> x], x [x -> x]);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2059" endline="2118">
static void x (HttpResponse x, Service_T x) {
    Dependant_T x;
    if (x->x)
        x (x, "<tr><td>Group</td><td><font color='#0000ff'>%s" "</font></td></tr>", x->x);
    x (x, "<tr><td>Monitoring mode</td><td>%s</td></tr>", x [x -> x]);
    x (x, "<tr><td>Monitoring status</td><td><font color='#ff8800'>%s" "</font></td></tr>", x [x -> x]);
    for (x = x->x; x; x = x->x) {
        if (x->x != x) {
            x (x, "<tr><td>Depends on service </td>" "<td> <a href=%s> %s </a></td></tr>", x -> x, x -> x);
        }
    }
    if (x->x) {
        int x = 0;
        x (x, "<tr><td>Start program</td><td>");
        while (x->x->x[x])
            x (x, "%s ", x->x->x[x++]);
        x (x, "</td></tr>");
    }
    if (x->x) {
        int x = 0;
        x (x, "<tr><td>Stop program</td><td>");
        while (x->x->x[x])
            x (x, "%s ", x->x->x[x++]);
        x (x, "</td></tr>");
    }
    x (x, "<tr><td>Check service</td><td>Every %d cycle</td></tr>", x -> x ? x -> x : 1);
    if (x->x) {
        x (x, "<tr><td>Timeout</td><td>" "Timeout if %d restart within %d cycles</td></tr>", x -> x, x -> x);
    }
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2121" endline="2131">
static int x (HttpRequest x) {
    if (x->x) {
        return ((x) x (x->x))->x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2137" endline="2158">
static void x (HttpResponse x, int x) {
    Service_T x;
    x (x, "text/plain");
    x (x, x);
    for (x = x; x; x = x->x) {
        if (x == x) {
            x (x, x);
        }
        else {
            x (x, x);
        }
    }
    x (x, x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2161" endline="2181">
static void x (HttpResponse x, int x) {
    char *x = x (x.x, " ");
    if (x == x) {
        x (x, "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n");
        x (x, "<monit>\r\n\t<server>\r\n\t\t<version>%s</version>" "\r\n\t\t<uptime>%s</uptime>\r\n\t</server>\r\n", x, x (x));
    }
    else {
        x (x, "The monit daemon uptime: %s\n\n", x);
    }
    FREE (x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2184" endline="2190">
static void x (HttpResponse x, int x) {
    if (x == x)
        x (x, "</monit>\r\n");
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2193" endline="2202">
static void x (Service_T x, HttpResponse x) {
    x (x, "\t<service>\r\n\t\t<type>%s</type>\r\n\t\t<name>%s</name>" "\r\n\t\t<status>%d</status>\r\n\t\t<monitored>%d</monitored>" "\r\n\t</service>\r\n", x [x -> x].x, x -> x, x (x), x -> x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2205" endline="2216">
static void x (Service_T x, HttpResponse x) {
    char x [x];
    x (x, x, "%s '%s'", x [x -> x].x, x -> x);
    x (x, "%-35s %s\n", x, ! x -> x ? "not monitored" : x (x) ? x [x -> x].x : x [x -> x].x);
}
</source>
<source file="examples/monit-4.2/http/cervlet.c.ifdefed" startline="2219" endline="2305">
static int x (Service_T x) {
    struct x x;
    switch (x->x) {
    case x :
        return (x (x) > 0);
        break;
    case x :
        if (x (x->x, x->x) && x (x->x, &x) == 0) {
            if (x->x && x->x->x)
                return x;
            else if (x->x && x->x->x)
                return x;
            else
                return x;
        }
        else {
            return x;
        }
        break;
    case x :
        if ((x (x->x, &x) == 0) && x (x.x)) {
            if (x->x && x->x->x)
                return x;
            else if (x->x && x->x->x)
                return x;
            else if (x->x && x->x->x)
                return x;
            else
                return x;
        }
        else {
            return x;
        }
        break;
    case x :
        if ((x (x->x, &x) == 0) && x (x.x)) {
            if (x->x && x->x->x)
                return x;
            else if (x->x && x->x->x)
                return x;
            else if (x->x && x->x->x)
                return x;
            else
                return x;
        }
        else {
            return x;
        }
        break;
    case x :
        if (x->x) {
            Port_T x;
            int x = x;
            for (x = x->x; x; x = x->x) {
                if (!x->x) {
                    x = x;
                    break;
                }
            }
            return x;
        }
        else {
            return x;
        }
        break;
    default :
        break;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="142" endline="214">
void x (int x, int x, char *x) {
    Socket_T S;
    x = x.x;
    if ((x = x (x, x, x)) < 0) {
        x ("http server: Could not create a server socket at port %d -- %s\n", x, x);
        x ("monit HTTP server not available\n");
        if (x.x) {
            x (1);
            x (x);
        }
    }
    else {
        x ();
        if (x.x) {
            x = x (x.x, x.x);
            if (x == x) {
                x ("http server: Could not initilize SSL engine\n");
                x ("monit HTTP server not available\n");
                return;
            }
        }
        while (!x) {
            if (!(x = x (x, x, x))) {
                continue;
            }
            x (x);
        }
        if (x) {
            x (& x);
        }
        x (x);
        x (x);
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="220" endline="225">
void x () {
    x = x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="237" endline="299">
int x (char *x) {
    struct x *x;
    if (!(x = x (x))) {
        return x;
    }
    else {
        HostsAllow x;
        NEW (x);
        while (*x->x) {
            x->x = x (x (*(x*) *x->x++));
            x (x)
            if (x) {
                HostsAllow x, x;
                for (x = x = x; x; x = x, x = x->x) {
                    if (!x (x->x, x)) {
                        x (x);
                        goto x;
                    }
                }
                x->x = x;
            }
            else {
                x = x;
            }
        x :
            x;
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="306" endline="317">
int x () {
    int x;
    x (x)
    x = (x != x);
    END_LOCK;
    return x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="323" endline="336">
void x () {
    if (x ()) {
        LOCK (x) x (x);
        x = x;
        END_LOCK;
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="348" endline="354">
static void x () {
    x ();
    x ();
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="360" endline="371">
static void x () {
    if ((x.x == 0) || (x.x == 0)) {
        x ("http server: Service Methods not implemented\n");
        x (1);
    }
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="379" endline="400">
static int x (const char *x) {
    if (x (x)) {
        return x;
    }
    if (!x () && (x.x != x)) {
        return x;
    }
    x ("%s: Denied connection from non-authorized client [%s]\n", x, x);
    return x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="407" endline="432">
static int x (const char *x) {
    HostsAllow x;
    int x = x;
    x (x)
    for (x = x; x; x = x->x) {
        if (!x (x->x, x, x)) {
            x = x;
            break;
        }
    }
    END_LOCK;
    return x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="442" endline="501">
static Socket_T x (int x, int x, void *x) {
    int x;
    struct x x;
    int x = sizeof (struct x);
    if (x (x, 1)) {
        if ((x = x (x, (struct x *) &x, &x)) < 0) {
            if (x) {
                x ("http server: service stopped\n");
            }
            else {
                x ("http server: cannot accept connection -- %s\n", x);
            }
            return x;
        }
    }
    else {
        return x;
    }
    if (x (x) < 0) {
        goto x;
    }
    if (!x (x)) {
        goto x;
    }
    if (!x (x (x.x))) {
        goto x;
    }
    return x (x, x (x.x), x, x);
x :
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/http/engine.c.ifdefed" startline="510" endline="523">
static void x (HostsAllow x) {
    HostsAllow x = x;
    if (x->x) {
        x (x -> x);
    }
    x (x -> x);
    FREE (x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="141" endline="159">
void *x (void *x) {
    Socket_T x = x;
    if (!x (x (x), x)) {
        x (x, x, "Time out when handling the Request");
        goto x;
    }
    x (x);
x :
    x (&x);
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="167" endline="173">
void x (void *x, void *x) {
    x.x = x;
    x.x = x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="182" endline="198">
void x (HttpResponse x, int x, const char *x) {
    char x [x];
    const char *x = x (x);
    x (x);
    x (x, "text/html");
    x (x, x);
    x (x, "<html><head><title>%d %s</title></head>" \ "<body bgcolor=#FFFFFF><h2>%s</h2>%s<p>" \ "<hr><a href='%s'><font size=-1>%s</font></a>" \ "</body></html>\r\n", x, x, x, x ? x : "", x, x (x, x));
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="207" endline="214">
void x (HttpResponse x, const char *x) {
    x (x);
    x (x, x);
    x (x, "Location", x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="231" endline="272">
void x (HttpResponse x, const char *x, ... ) {
    if (x) {
        char *x;
        x x;
        long x = 0;
        x x = 0;
        x (x, x);
        x = x (x, x, &x);
        x (x);
        x = x->x - x->x;
        if (x <= x) {
            x->x = x (x->x, (x->x + x + x));
            x->x += (x + x);
            if (!x->x) {
                x (x -> x, 0, x -> x);
            }
        }
        x (& x -> x [x -> x], x, x);
        x->x += x;
        x->x[x->x] = 0;
        FREE (x);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="285" endline="321">
void x (HttpResponse x, const char *x, const char *x) {
    HttpHeader x;
    ASSERT (x);
    ASSERT (x);
    NEW (x);
    x->x = x (x);
    x->x = x (x);
    if (x->x) {
        HttpHeader x, x;
        for (x = x = x->x; x; x = x, x = x->x) {
            if (!x (x->x, x)) {
                x (x -> x);
                x->x = x (x);
                x (x);
                return;
            }
        }
        x->x = x;
    }
    else {
        x->x = x;
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="330" endline="336">
void x (HttpResponse x, int x) {
    x->x = x;
    x->x = x (x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="344" endline="349">
void x (HttpResponse x, const char *x) {
    x (x, "Content-Type", x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="358" endline="377">
const char *x (HttpRequest x, const char *x) {
    HttpHeader x;
    for (x = x->x; x; x = x->x) {
        if (!x (x->x, x)) {
            return (x->x);
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="386" endline="405">
const char *x (HttpRequest x, const char *x) {
    HttpParameter x;
    for (x = x->x; x; x = x->x) {
        if (!x (x->x, x)) {
            return (x->x);
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="415" endline="433">
char *x (HttpResponse x) {
    HttpHeader x;
    char x [x];
    char *x = x;
    *x = 0;
    for (x = x->x; (((x - x) + x) < x) && x; x = x->x) {
        x += x (x, x, "%s: %s\r\n", x->x, x->x);
    }
    return x[0] ? x (x) : x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="443" endline="532">
const char *x (int x) {
    switch (x) {
    case x :
        return "OK";
    case x :
        return "Accepted";
    case x :
        return "Bad Gateway";
    case x :
        return "Bad Request";
    case x :
        return "Conflict";
    case x :
        return "Continue";
    case x :
        return "Created";
    case x :
        return "Expectation Failed";
    case x :
        return "Forbidden";
    case x :
        return "Gateway Timeout";
    case x :
        return "Gone";
    case x :
        return "HTTP Version Not Supported";
    case x :
        return "Internal Server Error";
    case x :
        return "Length Required";
    case x :
        return "Method Not Allowed";
    case x :
        return "Moved Permanently";
    case x :
        return "Moved Temporarily";
    case x :
        return "Multiple Choices";
    case x :
        return "No Content";
    case x :
        return "Non-Authoritative Information";
    case x :
        return "Not Acceptable";
    case x :
        return "Not Found";
    case x :
        return "Not Implemented";
    case x :
        return "Not Modified";
    case x :
        return "Partial Content";
    case x :
        return "Payment Required";
    case x :
        return "Precondition Failed";
    case x :
        return "Proxy Authentication Required";
    case x :
        return "Request Entity Too Large";
    case x :
        return "Request Timeout";
    case x :
        return "Request URI Too Large";
    case x :
        return "Requested Range Not Satisfiable";
    case x :
        return "Reset Content";
    case x :
        return "See Other";
    case x :
        return "Service Unavailable";
    case x :
        return "Switching Protocols";
    case x :
        return "Unauthorized";
    case x :
        return "Unsupported Media Type";
    case x :
        return "Use Proxy";
    default :
        {
            return "Unknown HTTP status";
        }
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="542" endline="576">
static void x (Socket_T x) {
    volatile HttpResponse x = x (x);
    volatile HttpRequest x = x (x);
    if (x && x) {
        if (x (x, x)) {
            if (x (x->x, x)) {
                x.x (x, x);
            }
            else if (x (x->x, x)) {
                x.x (x, x);
            }
            else {
                x (x, x, "Method not implemented");
            }
        }
        x (x);
    }
    x (x, x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="582" endline="598">
static char *x (char *x, int x) {
    x x;
    x (& x);
    if (x (x, x, x, x (&x)) <= 0) {
        *x = 0;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="604" endline="611">
static char *x (char *x, int x) {
    x (x, x, "%s %s", x, x.x ? x : "");
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="618" endline="650">
static void x (HttpResponse x) {
    Socket_T x = x->x;
    if (!x->x) {
        char x [x];
        char x [x];
        char *x = x (x);
        x (x, x);
        x (x, x);
        x (x, "%s %d %s\r\n", x -> x, x -> x, x -> x);
        x (x, "Date: %s\r\n", x);
        x (x, "Server: %s\r\n", x);
        x (x, "Content-Length: %d\r\n", x -> x);
        x (x, "Connection: close\r\n");
        if (x)
            x (x, "%s", x);
        x (x, "\r\n");
        if (x->x)
            x (x, x->x, x->x);
        FREE (x);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="659" endline="711">
static HttpRequest x (Socket_T S) {
    HttpRequest x;
    char x [x];
    char x [x];
    char x [x];
    char x [x];
    if (x (x, x, x) == x) {
        x (x, x, "No request found");
        return x;
    }
    x (x, x);
    if (x (x, "%s %s HTTP/%3[1.0]", x, x, x) != 3) {
        x (x, x, "Cannot parse request");
        return x;
    }
    if (x (x) >= x) {
        x (x, x, "[error] URL too long");
        return x;
    }
    NEW (x);
    x->x = x;
    x (x);
    x->x = x (x);
    x->x = x (x);
    x->x = x (x);
    x (x);
    if (!x (x)) {
        x (x, x, "Cannot parse Request parameters");
        x (x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="718" endline="735">
static HttpResponse x (Socket_T S) {
    HttpResponse x;
    NEW (x);
    x->x = x;
    x->x = 0;
    x->x = 0;
    x->x = 200;
    x->x = x;
    x->x = x;
    x->x = x;
    x->x = x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="741" endline="792">
static void x (HttpRequest x) {
    Socket_T S;
    char *x;
    HttpHeader x;
    HttpHeader x;
    char x [x];
    x = x->x;
    while (1) {
        if (!x (x, x, sizeof (x)))
            break;
        if (x (x, "\r\n") || x (x, "\n"))
            break;
        if (x != (x = x (x, ':'))) {
            NEW (x);
            *x++ = '\0';
            x (x);
            x (x);
            x (x, (x - (x - x)));
            x->x = x (x);
            x->x = x (x);
            if (x->x) {
                for (x = x->x; x->x; x = x->x)
                    ;
                x->x = x;
            }
            else {
                x->x = x;
            }
        }
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="799" endline="845">
static int x (HttpRequest x) {
    char x [x] = {0};
    if (x (x->x, x) && x (x, "Content-Length")) {
        int x;
        int x;
        Socket_T x = x->x;
        if (1 != x (x (x, "Content-Length"), "%d", &x)) {
            return x;
        }
        if (x < 0 || x > x)
            return x;
        if (x == 0)
            return x;
        if (((x = x (x, x, x)) <= 0) || (x != x)) {
            return x;
        }
        x[x] = 0;
    }
    else if (x (x->x, x)) {
        char *x;
        if (x != (x = x (x->x, '?'))) {
            *x++ = 0;
            x (x, x, x);
        }
    }
    if (*x) {
        char *x;
        if (x != (x = x (x, '/'))) {
            *x++ = 0;
            x->x = x (x);
        }
        x->x = x (x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="854" endline="862">
static void x (HttpResponse x) {
    if (x->x)
        x (x->x);
    x (x -> x, 0, x -> x);
    x->x = 0;
    x->x = x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="868" endline="874">
static void x (HttpRequest x, HttpResponse x) {
    x (x);
    x (x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="880" endline="897">
static void x (HttpRequest x) {
    if (x) {
        x (x -> x);
        x (x -> x);
        x (x -> x);
        x (x -> x);
        x (x -> x);
        if (x->x)
            x (x->x);
        if (x->x)
            x (x->x);
        FREE (x);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="903" endline="915">
static void x (HttpResponse x) {
    if (x) {
        x (x -> x);
        if (x->x)
            x (x->x);
        FREE (x);
    }
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="922" endline="938">
static void x (void *x) {
    struct x *x = x;
    if (x->x) {
        x (x -> x);
    }
    x (x -> x);
    x (x -> x);
    FREE (x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="947" endline="971">
static int x (HttpRequest x, HttpResponse x) {
    if (x.x != x) {
        if (!x (x)) {
            x (x, x, "You are <b>not</b> authorized to access <i>monit</i>. " "Either you supplied the wrong credentials (e.g. bad " "password), or your browser doesn't understand how to supply " "the credentials required");
            x (x, "WWW-Authenticate", "Basic realm=\"monit\"");
            return x;
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="978" endline="1042">
static int x (HttpRequest x) {
    int x = x;
    const char *x = x (x, "Authorization");
    if (x) {
        unsigned char *x = x (sizeof (unsigned char), x (x) +1);
        if (x (x, x (x, ' '))) {
            char *x;
            char x [x];
            long x = (long) x (x, ':') - (long) x;
            x (x, x, x);
            x[x] = '\0';
            if (x == x (x)) {
                x ("Warning: Client '%s' supplied unknown user '%s'" " accessing monit httpd\n", x (x -> x), x);
            }
            else {
                x = x (x, ':') + 1;
                if (x (x, x)) {
                    x->x = x (x);
                    x = x;
                }
                else {
                    x ("Warning: Client '%s' supplied wrong password for user '%s'" " accessing monit httpd\n", x (x -> x), x);
                }
            }
        }
        FREE (x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1053" endline="1077">
static void x (Socket_T S, int x, char *x) {
    char x [x];
    char x [x];
    const char *x = x (x);
    x (x, x);
    x (x, x);
    x (x, "%s %d %s\r\n" "Date: %s\r\n" "Server: %s\r\n" "Content-Type: text/html\r\n" "Connection: close\r\n" "\r\n" "<html><head><title>%s</title></head>" "<body bgcolor=#FFFFFF><h2>%s</h2>%s<p>" "<hr><a href='%s'><font size=-1>%s</font></a>" "</body></html>\r\n", x, x, x, x, x, x, x, x, x, x);
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1084" endline="1122">
static HttpParameter x (char *x) {
    int x;
    int x = 0;
    char *x = x;
    char *x = x;
    HttpParameter x = x;
    while ((x = x (x, &x, &x))) {
        if (x == x)
            x = x;
        else if (x == x) {
            HttpParameter x;
            if (!x)
                goto x;
            NEW (x);
            x->x = x;
            x->x = x;
            x->x = x;
            x = x;
            x = x;
        }
    }
    return x;
x :
    x (x);
    FREE (x);
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/http/processor.c.ifdefed" startline="1128" endline="1158">
static int x (char *x, int *x, char **x) {
    int x = *x;
    while (x[*x]) {
        if (x[*x + 1] == '=') {
            *x += 1;
            *x = x (&x[x], (*x - x));
            return x;
        }
        if (x[*x] == '=') {
            while (x[*x] && x[*x] != '&')
                *x += 1;
            if (x[*x] == '&') {
                *x = x (&x[x + 1], (*x - x) - 1);
                *x += 1;
            }
            else
                *x = x (&x[x + 1], (*x - x));
            return x;
        }
        *x += 1;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="83" endline="89">
int x () {
    return x (x.x ? x.x : "localhost", x.x, x);
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="97" endline="119">
int x () {
    if (x.x && x.x) {
        if (!x () && !(x.x != x)) {
            x ("%s: monit httpd not started since no connect allowed\n", x);
            return x;
        }
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="126" endline="164">
void x (int x) {
    int x;
    switch (x) {
    case x :
        x ("Shutting down %s HTTP server\n", x);
        x ();
        if ((x = x (x, x)) != 0) {
            x ("%s: Failed to stop the http server. Thread error -- %s.\n", x, x (x));
        }
        else {
            x ("%s HTTP server stopped\n", x);
        }
        break;
    case x :
        if ((x = x (&x, x, x, x)) != 0) {
            x ("%s: Failed to create the http server. Thread error -- %s.\n", x, x (x));
        }
        break;
    default :
        x ("%s: Unknown http server action\n", x);
        break;
    }
    return;
}
</source>
<source file="examples/monit-4.2/http.c.ifdefed" startline="170" endline="182">
static void *x (void *x) {
    x x;
    x (& x, x);
    x (x.x, 10, x.x);
    return x;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="111" endline="130">
int x () {
    if (!x.x) {
        return x;
    }
    if (!x ()) {
        return x;
    }
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="137" endline="175">
void x (const char *x, ... ) {
    long x;
    x x;
    char *x = x;
    ASSERT (x);
    x (x, x);
    x = x (x, x, &x);
    x (x);
    if (!x.x)
        goto x;
    if (x.x) {
        LOCK (x) x (x, "%s", x);
        END_LOCK;
    }
    else if (x) {
        LOCK (x) x (x, "[%s] %s", x (), x);
        END_LOCK;
    }
x :
    LOCK (x) x (x, "%s", x);
    x (x);
    END_LOCK;
    FREE (x);
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="181" endline="197">
void x () {
    if (x.x) {
        x ();
    }
    if (x && (0 != x (x))) {
        x ("%s: Error closing the log file -- %s\n", x, x);
    }
    x (& x);
    x = x;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="206" endline="228">
static int x () {
    if (x.x) {
        x (x, x, x.x);
    }
    else {
        x (x);
        if ((x = x (x.x, "a+")) == (x *) x) {
            x ("%s: Error opening the log file '%s' for writing -- %s\n", x, x.x, x);
            return (x);
        }
        x (x, x, x, 0);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/log.c.ifdefed" startline="235" endline="249">
static char *x () {
    x x;
    struct x x;
    x (& x);
    if (!x (x, x, x, x (&x, &x))) {
        x (x, 0, x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="63" endline="74">
void x (x)
    struct x *x;
{
    x->x = 0x67452301;
    x->x = 0xefcdab89;
    x->x = 0x98badcfe;
    x->x = 0x10325476;
    x->x[0] = x->x[1] = 0;
    x->x = 0;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="81" endline="92">
void *x (x, x) const
    struct x *x;
    void *x;
{
    ((x *) x)[0] = x (x->x);
    ((x *) x)[1] = x (x->x);
    ((x *) x)[2] = x (x->x);
    ((x *) x)[3] = x (x->x);
    return x;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="99" endline="125">
void *x (x, x)
    struct x *x;
    void *x;
{
    x x = x->x;
    x x;
    x->x[0] += x;
    if (x->x[0] < x)
        ++x->x[1];
    x = x >= 56 ? 64 + 56 - x : 56 - x;
    x (& x -> x [x], x, x);
    *(x*) &x->x[x + x] = x (x->x[0] << 3);
    *(x*) &x->x[x + x + 4] = x ((x->x[1] << 3) | (x->x[0] >> 29));
    x (x -> x, x + x + 8, x);
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="130" endline="181">
int x (x, x)
    x *x;
    void *x;
{
    struct x x;
    char x [x + 72];
    x x;
    x (& x);
    while (1) {
        x x;
        x = 0;
        do {
            x = x (x +x, 1, x -x, x);
            x += x;
        }
        while (x < x && x != 0);
        if (x == 0 && x (x))
            return 1;
        if (x == 0)
            break;
        x (x, x, & x);
    }
    if (x > 0)
        x (x, x, &x);
    x (& x, x);
    return 0;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="187" endline="203">
void *x (x, x, x) const
    char *x;
    x x;
    void *x;
{
    struct x x;
    x (& x);
    x (x, x, & x);
    return x (&x, x);
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="206" endline="249">
void x (x, x, x) const
    void *x;
    x x;
    struct x *x;
{
    if (x->x != 0) {
        x x = x->x;
        x x = 128 - x > x ? x : 128 - x;
        x (& x -> x [x], x, x);
        x->x += x;
        if (x + x > 64) {
            x (x -> x, (x + x) & ~ 63, x);
            x (x -> x, & x -> x [(x + x) & ~ 63], (x + x) & 63);
            x->x = (x + x) & 63;
        }
        x = (const char *) x + x;
        x -= x;
    }
    if (x > 64) {
        x (x, x & ~ 63, x);
        x = (const char *) x + (x & ~63);
        x &= 63;
    }
    if (x > 0) {
        x (x -> x, x, x);
        x->x = x;
    }
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="264" endline="420">
void x (x, x, x) const
    void *x;
    x x;
    struct x *x;
{
    x x [16];
    const x *x = x;
    x x = x / sizeof (x);
    const x *x = x + x;
    x x = x->x;
    x x = x->x;
    x x = x->x;
    x x = x->x;
    x->x[0] += x;
    if (x->x[0] < x)
        ++x->x[1];
    while (x < x) {
        x *x = x;
        x x = x;
        x x = x;
        x x = x;
        x x = x;
        x (x, x, x, x, 7, 0xd76aa478);
        x (x, x, x, x, 12, 0xe8c7b756);
        x (x, x, x, x, 17, 0x242070db);
        x (x, x, x, x, 22, 0xc1bdceee);
        x (x, x, x, x, 7, 0xf57c0faf);
        x (x, x, x, x, 12, 0x4787c62a);
        x (x, x, x, x, 17, 0xa8304613);
        x (x, x, x, x, 22, 0xfd469501);
        x (x, x, x, x, 7, 0x698098d8);
        x (x, x, x, x, 12, 0x8b44f7af);
        x (x, x, x, x, 17, 0xffff5bb1);
        x (x, x, x, x, 22, 0x895cd7be);
        x (x, x, x, x, 7, 0x6b901122);
        x (x, x, x, x, 12, 0xfd987193);
        x (x, x, x, x, 17, 0xa679438e);
        x (x, x, x, x, 22, 0x49b40821);
        x (x, x, x, x, x, 1, 5, 0xf61e2562);
        x (x, x, x, x, x, 6, 9, 0xc040b340);
        x (x, x, x, x, x, 11, 14, 0x265e5a51);
        x (x, x, x, x, x, 0, 20, 0xe9b6c7aa);
        x (x, x, x, x, x, 5, 5, 0xd62f105d);
        x (x, x, x, x, x, 10, 9, 0x02441453);
        x (x, x, x, x, x, 15, 14, 0xd8a1e681);
        x (x, x, x, x, x, 4, 20, 0xe7d3fbc8);
        x (x, x, x, x, x, 9, 5, 0x21e1cde6);
        x (x, x, x, x, x, 14, 9, 0xc33707d6);
        x (x, x, x, x, x, 3, 14, 0xf4d50d87);
        x (x, x, x, x, x, 8, 20, 0x455a14ed);
        x (x, x, x, x, x, 13, 5, 0xa9e3e905);
        x (x, x, x, x, x, 2, 9, 0xfcefa3f8);
        x (x, x, x, x, x, 7, 14, 0x676f02d9);
        x (x, x, x, x, x, 12, 20, 0x8d2a4c8a);
        x (x, x, x, x, x, 5, 4, 0xfffa3942);
        x (x, x, x, x, x, 8, 11, 0x8771f681);
        x (x, x, x, x, x, 11, 16, 0x6d9d6122);
        x (x, x, x, x, x, 14, 23, 0xfde5380c);
        x (x, x, x, x, x, 1, 4, 0xa4beea44);
        x (x, x, x, x, x, 4, 11, 0x4bdecfa9);
        x (x, x, x, x, x, 7, 16, 0xf6bb4b60);
        x (x, x, x, x, x, 10, 23, 0xbebfbc70);
        x (x, x, x, x, x, 13, 4, 0x289b7ec6);
        x (x, x, x, x, x, 0, 11, 0xeaa127fa);
        x (x, x, x, x, x, 3, 16, 0xd4ef3085);
        x (x, x, x, x, x, 6, 23, 0x04881d05);
        x (x, x, x, x, x, 9, 4, 0xd9d4d039);
        x (x, x, x, x, x, 12, 11, 0xe6db99e5);
        x (x, x, x, x, x, 15, 16, 0x1fa27cf8);
        x (x, x, x, x, x, 2, 23, 0xc4ac5665);
        x (x, x, x, x, x, 0, 6, 0xf4292244);
        x (x, x, x, x, x, 7, 10, 0x432aff97);
        x (x, x, x, x, x, 14, 15, 0xab9423a7);
        x (x, x, x, x, x, 5, 21, 0xfc93a039);
        x (x, x, x, x, x, 12, 6, 0x655b59c3);
        x (x, x, x, x, x, 3, 10, 0x8f0ccc92);
        x (x, x, x, x, x, 10, 15, 0xffeff47d);
        x (x, x, x, x, x, 1, 21, 0x85845dd1);
        x (x, x, x, x, x, 8, 6, 0x6fa87e4f);
        x (x, x, x, x, x, 15, 10, 0xfe2ce6e0);
        x (x, x, x, x, x, 6, 15, 0xa3014314);
        x (x, x, x, x, x, 13, 21, 0x4e0811a1);
        x (x, x, x, x, x, 4, 6, 0xf7537e82);
        x (x, x, x, x, x, 11, 10, 0xbd3af235);
        x (x, x, x, x, x, 2, 15, 0x2ad7d2bb);
        x (x, x, x, x, x, 9, 21, 0xeb86d391);
        x += x;
        x += x;
        x += x;
        x += x;
    }
    x->x = x;
    x->x = x;
    x->x = x;
    x->x = x;
}
</source>
<source file="examples/monit-4.2/md5.c.ifdefed" startline="430" endline="618">
char *x (x, x, x, x, x) const
    char *x;
    const char *x;
    const char *x;
    char *x;
    int x;
{
    unsigned char x [16] __attribute__ ((x (x (x))));
    struct x x;
    struct x x;
    x x;
    x x;
    x x;
    char *x;
    char *x = x;
    char *x = x;
    if (x (x, x, x (x)) == 0)
        x += x (x);
    x = x (x (x, "$"), 8);
    x = x (x);
    if ((x - (char *) 0) % x (x) != 0) {
        char *x = (char *) x (x +x (x));
        x = x = x (x +x (x) - (x - (char *) 0) % x (x), x, x);
        x ((x - (char *) 0) % x (x) == 0);
    }
    if ((x - (char *) 0) % x (x) != 0) {
        char *x = (char *) x (x +x (x));
        x = x = x (x +x (x) - (x - (char *) 0) % x (x), x, x);
        x ((x - (char *) 0) % x (x) == 0);
    }
    x (& x);
    x (x, x, & x);
    x (x, x (x), & x);
    x (x, x, & x);
    x (& x);
    x (x, x, & x);
    x (x, x, & x);
    x (x, x, & x);
    x (& x, x);
    for (x = x; x > 16; x -= 16)
        x (x, 16, &x);
    x (x, x, & x);
    *x = '\0';
    for (x = x; x > 0; x >>= 1)
        x ((x & 1) != 0 ? (const char *) x : x, 1, &x);
    x (& x, x);
    for (x = 0; x < 1000; ++x) {
        x (& x);
        if ((x & 1) != 0)
            x (x, x, &x);
        else
            x (x, 16, &x);
        if (x % 3 != 0)
            x (x, x, &x);
        if (x % 7 != 0)
            x (x, x, &x);
        if ((x & 1) != 0)
            x (x, 16, &x);
        else
            x (x, x, &x);
        x (& x, x);
    }
    x = x (x, x, x (0, x));
    x -= x (x);
    x = x (x, '\0');
    x = x (x, x, x ((x) x (0, x), x));
    x -= x ((x) x (0, x), x);
    x = x (x, '\0');
    if (x > 0) {
        *x++ = '$';
        --x;
    }
    x (x [0], x [6], x [12], 4);
    x (x [1], x [7], x [13], 4);
    x (x [2], x [8], x [14], 4);
    x (x [3], x [9], x [15], 4);
    x (x [4], x [10], x [5], 4);
    x (0, 0, x [11], 2);
    if (x <= 0) {
        x = x;
    }
    else
        *x = '\0';
    x (& x);
    x (& x, x);
    x (& x, '\0', sizeof (x));
    x (& x, '\0', sizeof (x));
    if (x != x)
        x (x, '\0', x);
    if (x != x)
        x (x, '\0', x);
    return x;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="109" endline="123">
int x (int x, char **x) {
    x = x (x[0]);
    x ();
    x (x, x);
    x ();
    x (x);
    x ();
    x ();
    x (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="134" endline="262">
static void x () {
    int x;
    x (x, x);
    x (x, x);
    x (x, x);
    x (x, x);
    x (x, x);
    x = x (&x.x, x);
    if (x != 0) {
        x ("%s: Cannot initialize mutex -- %s\n", x, x (x));
        x (1);
    }
    if (!x.x) {
        x.x = x ();
    }
    x.x = x ();
    if (!x (x.x)) {
        x (1);
    }
    if (x.x) {
        x ("Control file syntax OK\n");
        x (0);
    }
    if (!x ()) {
        x (1);
    }
    if (!x) {
        x ("%s: No services has been specified\n", x);
        x (0);
    }
    x ();
    if (x.x) {
        x ();
        x ();
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="269" endline="349">
static void x () {
    char *x;
    int x = x.x;
    x.x = x;
    x = x.x ? x (x.x) : x;
    x ("Awakened by the SIGHUP signal\n");
    x ("Reinitializing %s - Control file '%s'\n", x, x.x);
    x ();
    if (!x (x.x)) {
        x ("%s daemon died\n", x);
        x (1);
    }
    x ();
    if (!x ()) {
        x (1);
    }
    if (!x) {
        x ("%s: No services has been specified\n", x);
        x (0);
    }
    x ();
    if (!x (x.x)) {
        x ("%s daemon died\n", x);
        x (1);
    }
    x ();
    if (!x ()) {
        x (x);
    }
    else if (!x (x, x.x) || x != x.x) {
        x (x);
        x (x);
    }
    else if (!x ()) {
        x (x);
    }
    FREE (x);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="355" endline="418">
static void x (char **x) {
    char *x = x[x];
    char *x = x[++x];
    x.x = x;
    if (!x) {
        x ();
    }
    else if (x (x, "start") || x (x, "stop") || x (x, "monitor") || x (x, "unmonitor") || x (x, "restart")) {
        if (x) {
            if (!x (x, "all")) {
                x (x, x);
            }
            else {
                if (x.x)
                    x (x.x, x);
                else
                    x (x);
            }
        }
        else {
            goto x;
        }
    }
    else if (x (x, "reload")) {
        x ("Reinitializing monit daemon\n", x);
        x (x);
    }
    else if (x (x, "status")) {
        x ();
    }
    else if (x (x, "quit")) {
        x (x);
    }
    else if (x (x, "validate")) {
        x ();
    }
    else {
    x :
        x ("%s: invalid argument -- %s  (-h will show valid arguments)\n", x, x);
        x (1);
    }
    x ();
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="424" endline="429">
static RETSIGTYPE x (int x) {
    x ("Awakened by User defined signal 1\n");
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="435" endline="440">
static RETSIGTYPE x (int x) {
    x.x = x;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="447" endline="464">
static int x () {
    x x;
    if ((x = x ()) > 0) {
        x (x, x);
        x ("%s daemon at %d awakened\n", x, x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="470" endline="475">
static RETSIGTYPE x (int x) {
    x.x = x;
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="481" endline="498">
static void x () {
    x.x = x;
    if (x.x && !x.x) {
        if (x.x)
            x (x);
        x ("%s daemon with pid [%d] killed\n", x, (int) x ());
    }
    x ();
    x (0);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="506" endline="568">
static void x () {
    if (x.x) {
        if (x ())
            x (0);
        x.x = x;
        x ("Starting %s daemon\n", x);
        if (x ()) {
            x ("Starting httpd at [%s:%d]\n", x.x ? x.x : "*", x.x);
        }
        if (x.x != x)
            x ();
        if (!x (x.x)) {
            x ("%s daemon died\n", x);
            x (1);
        }
        if (x ())
            x ();
        x (x);
        if (x ())
            x (x);
        for (;;) {
            x ();
            x ();
            x (x.x);
            if (x.x)
                x ();
            if (x.x) {
                x ();
                x ();
            }
        }
    }
    else {
        x ();
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="576" endline="583">
static void x () {
    x x;
    x (& x, x);
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="590" endline="688">
static void x (int x, char **x) {
    int x;
    x = 0;
    x.x = 0;
    while ((x = x (x, x, "c:d:g:l:p:s:iItvVh")) != -1) {
        switch (x) {
        case 'c' :
            x.x = x (x);
            break;
        case 'd' :
            x.x = x;
            x (x, "%d", & x.x);
            if (x.x < 1) {
                x ("%s: option -%c requires a natural number\n", x, x);
                x (1);
            }
            break;
        case 'g' :
            x.x = x (x);
            break;
        case 'l' :
            x.x = x (x);
            if (x (x.x, "syslog"))
                x.x = x;
            x.x = x;
            break;
        case 'p' :
            x.x = x (x);
            break;
        case 's' :
            x.x = x (x);
            break;
        case 'i' :
            x ("%s: option -i is obsolete\n", x);
            break;
        case 'I' :
            x.x = x;
            break;
        case 't' :
            x.x = x;
            break;
        case 'v' :
            x.x = x;
            break;
        case 'V' :
            x ();
            x (0);
            break;
        case 'h' :
            x ();
            x (0);
            break;
        case '?' :
            switch (x) {
            case 'c' :
            case 'd' :
            case 'g' :
            case 'l' :
            case 'p' :
            case 's' :
                x ("%s: option -- %c requires an argument\n", x, x);
                break;
            default :
                x ("%s: invalid option -- %c  (-h will show valid options)\n", x, x);
            }
            x (1);
        }
    }
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="694" endline="728">
static void x () {
    x ("Usage: %s [options] {arguments}\n", x);
    x ("Options are as follows:\n");
    x (" -c file      Use this control file\n");
    x (" -d n         Run as a daemon once per n seconds\n");
    x (" -g name      Set group name for start, stop, restart and status\n");
    x (" -l logfile   Print log information to this file\n");
    x (" -p pidfile   Use this lock file in daemon mode\n");
    x (" -s statefile Set the file monit should write state information to\n");
    x (" -I           Do not run in background (needed for run from init)\n");
    x (" -t           Run syntax check for the control file\n");
    x (" -v           Verbose mode, work noisy (diagnostic output)\n");
    x (" -V           Print version number and patchlevel\n");
    x (" -h           Print this text\n");
    x ("Optional action arguments for non-daemon mode are as follows:\n");
    x (" start all      - Start all services\n");
    x (" start name     - Only start the named service\n");
    x (" stop all       - Stop all services\n");
    x (" stop name      - Only stop the named service\n");
    x (" restart all    - Stop and start all services\n");
    x (" restart name   - Only restart the named service\n");
    x (" monitor all    - Enable monitoring of all services\n");
    x (" monitor name   - Only enable monitoring of the named service\n");
    x (" unmonitor all  - Disable monitoring of all services\n");
    x (" unmonitor name - Only disable monitoring of the named service\n");
    x (" reload         - Reinitialize monit\n");
    x (" status         - Print status information for each service\n");
    x (" quit           - Kill monit daemon process\n");
    x (" validate       - Check all services and start if not running\n");
    x ("\n");
    x ("(Action arguments operate on services defined in the control file)\n");
}
</source>
<source file="examples/monit-4.2/monitor.c.ifdefed" startline="734" endline="741">
static void x () {
    x ("This is monit version %s\n", x);
    x ("Copyright (C) 2000-2004 by the monit project group.");
    x (" All Rights Reserved.\n");
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="82" endline="117">
int x (char *x, int x, char *x, int x) {
    int x;
    char x [x];
    int x;
    ASSERT (x);
    ASSERT (x);
    x (x, x, "/proc/%d/%s", x, x);
    if ((x = x (x, x)) < 0) {
        return x;
    }
    if ((x = x (x, x, x -1)) < 0) {
        x (x);
        return x;
    }
    x[x] = '\0';
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="123" endline="131">
double x (void) {
    struct x x;
    x (& x, x);
    return (double) x.x * 10 + (double) x.x / 100000.0;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="139" endline="179">
int x (ProcInfo_T x) {
    double x;
    x = x ();
    if (!x (x)) {
        return x;
    }
    if (x->x == 0.0) {
        x->x = 0;
    }
    else {
        x->x = (int) ((x->x - x->x) * 1000) / (x - x->x) / x;
    }
    x->x = x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="189" endline="210">
int x (int x, ProcessTree_T *x) {
    ProcInfo_T x = x (x);
    x->x = x;
    if (!x (x)) {
        return x;
    }
    x->x = x;
    x->x = x->x;
    x->x = x->x;
    FREE (x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="219" endline="252">
int x (ProcessTree_T *x, ProcessTree_T *x) {
    ProcessTree_T **x;
    ASSERT (x);
    ASSERT (x);
    if (x->x == 0 || x->x == 0) {
        return x;
    }
    x->x++;
    x = x (sizeof (x *), x->x);
    if (x->x != x) {
        x (x, x -> x, sizeof (x *) * (x -> x - 1));
        x (x -> x);
    }
    x->x = x;
    x->x[x->x - 1] = x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="260" endline="295">
void x (ProcessTree_T *x) {
    int x;
    ProcessTree_T *x;
    ASSERT (x);
    if ((x->x == 0) || (x->x == 1)) {
        return;
    }
    x->x = 1;
    x->x = x->x;
    x->x = x->x;
    for (x = 0; x < x->x; x++) {
        x (x -> x [x]);
    }
    if (x->x != x) {
        x = x->x;
        x->x += x->x;
        x->x += x->x;
    }
}
</source>
<source file="examples/monit-4.2/process/process_common.c.ifdefed" startline="305" endline="324">
int x (ProcInfo_T x, ProcessTree_T *x, int x) {
    ProcessTree_T *x;
    x = x (x->x, x, x);
    if (x == (x = x (x->x, x, x))) {
        return x;
    }
    x->x = x->x;
    x->x = x->x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="101" endline="108">
int x (void) {
    x = 0;
    x = x (x);
    return (x () == 0);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="110" endline="115">
double x (struct x x) {
    return x.x * 10 + x.x * 1.0e-7;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="118" endline="186">
int x (ProcInfo_T x) {
    int x;
    int x, x;
    struct x user;
    x (& x, 0, sizeof (struct x));
    x = x (x, x, sizeof (struct x));
    for (x = 0; x < x; x++) {
        if (x->x == x[x].x) {
            if (x[x].x == x) {
            x :
                x->x = x->x = 0;
                x->x = 0;
                x->x = 0.0;
                x->x |= x;
            }
            else {
                x = x (&(x[x]), sizeof (struct x), &x, sizeof (struct x));
                if (x == -1) {
                    goto x;
                }
                x->x = x.x * 10;
                x->x = (x.x + x.x) * 4;
                x->x = x->x;
                x->x = (x (x.x.x) + x (x.x.x));
                if (x) {
                    x->x += (x (x.x.x) + x (x.x.x));
                }
                if (x->x == 0.0) {
                    x->x = x->x;
                }
            }
            return x;
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="193" endline="221">
int x (void *x, int x, x x) {
    int x;
    if (x < 0) {
        if ((x = x ("/dev/kmem", x)) < 0) {
            x ("kmem");
            x (1);
        }
    }
    x (x, (x) x, x);
    x = x (x, x, x);
    return (x);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="231" endline="271">
int x (double *x, int x) {
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/process/sysdep_AIX.c.ifdefed" startline="281" endline="338">
int x (ProcessTree_T **x) {
    int x;
    int x, x;
    struct x user;
    ProcessTree_T *x;
    x (& x, 0, sizeof (struct x));
    x = x (x, x, sizeof (struct x));
    x = x (sizeof (x), x);
    for (x = 0; x < x; x++) {
        x[x].x = x[x].x;
        x[x].x = x[x].x;
        if (x[x].x == x) {
            x[x].x = 0;
        }
        else {
            x = x (&(x[x]), sizeof (struct x), &x, sizeof (struct x));
            if (x == -1) {
                x[x].x = 0;
            }
            else {
                x[x].x = (x.x + x.x) * 4;
            }
        }
    }
    *x = x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="128" endline="203">
int x (void) {
    register int x;
    struct x x;
    int x [2];
    x x;
    struct x x [] = {{"_bufspace"}, {"_cnt"}, {0}};
    if (x () != 0) {
        return x;
    }
    x[0] = x;
    x[1] = x;
    x = sizeof (x);
    x (x, 2, & x, & x, x, 0);
    x = x (x, x, x, x, "monit");
    if (x == x) {
        return x;
    }
    if (x (x, x) < 0) {
        return x;
    }
    x = x ();
    x = 0;
    while (x > 1) {
        x++;
        x >>= 1;
    }
    x -= x;
    x = sizeof (x);
    if (x (x, 2, &x, &x, x, 0) < 0) {
        return x;
    }
    x = x.x + x.x + x.x + x.x + x.x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="205" endline="312">
int x (ProcInfo_T x) {
    struct x *x;
    struct x x;
    struct x *x;
    long x = 0;
    long x = 0;
    long x = 0;
    long x = 0;
    x x;
    int x;
    return x;
    x = x (x, x, x->x, &x);
    if ((x == x) || (x < 1)) {
        return x;
    }
    x->x = x->x;
    x->x = (x + x);
    if (x) {
        x->x += (x + x);
    }
    if (x->x == 0.0) {
        x->x = x->x;
    }
    x = (x) (x.x[x].x);
    x = &x[0].x.x;
    x->x = (x) x (x->x);
    if (x[0].x.x == x) {
        x->x |= x;
    }
    x->x = (int) ((double) x->x * 1000./ x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="321" endline="382">
int x (ProcessTree_T **x) {
    struct x *x;
    struct x x;
    struct x *x;
    x x;
    int x = 0;
    int x;
    ProcessTree_T *x;
    x = x (x, x, 0, &x);
    if ((x == x) || (x < 1)) {
        return 0;
    }
    x = x (sizeof (x), x);
    for (x = 0; x < x; x++) {
        x[x].x = x[x].x.x;
        x[x].x = x[x].x.x;
        x = (x) (x.x[x].x);
        x = &x[x].x.x;
        x[x].x = (x) x (x->x);
    }
    *x = x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_DARWIN.c.ifdefed" startline="391" endline="396">
int x (double *x, int x) {
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="109" endline="143">
int x (void) {
    struct x x;
    struct x x;
    if (x (&x, sizeof (x), (x) 1, 0) != -1) {
        x = x.x;
    }
    else {
        return x;
    }
    if (x (&x, sizeof (x), (x) 1, 0) != -1) {
        x = (long) (((double) x.x) * ((double) x.x) / 1024.0);
        x = x.x;
    }
    else {
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="146" endline="195">
int x (ProcInfo_T x) {
    struct x x;
    if (x (&x, sizeof (x), (x) 1, x->x) == -1) {
        return x;
    }
    x->x = x->x;
    x->x = (x.x + x.x) * 10 / x;
    x->x = (long) (((double) x.x) / 1024.0 * x);
    x->x = (((double) x->x) * 1000.0 / ((double) x));
    if (x) {
        x->x += (x.x.x + x.x.x) * 10 / x;
    }
    if (x->x == 0.0) {
        x->x = x->x;
    }
    if (x.x || x) {
        x->x |= x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="204" endline="237">
int x (double *x, int x) {
    struct x x;
    if (x (&x, sizeof (x), (x) 1, 0) != -1) {
        switch (x) {
        case 3 :
            x[2] = x.x;
        case 2 :
            x[1] = x.x;
        case 1 :
            x[0] = x.x;
        }
    }
    else {
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_HPUX.c.ifdefed" startline="246" endline="286">
int x (ProcessTree_T **x) {
    int x;
    int x;
    ProcessTree_T *x;
    ASSERT (x);
    if ((x = x (x, (x) x * sizeof (x), (x) x, 0)) == -1) {
        return 0;
    }
    x = x (sizeof (x), x);
    for (x = 0; x < x; x++, x++) {
        x[x]->x = x[x]->x;
        x[x]->x = x[x]->x;
        x->x = (long) (((double) x[x]->x) / 1024.0 * x);
    }
    *x = x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="93" endline="119">
int x (void) {
    int x;
    char x [1024], *x;
    if ((x = x ("/proc/meminfo", x)) == -1)
        return x;
    if (x (x, x, sizeof (x)) < 0) {
        x (x);
        return x;
    }
    x (x);
    if (!(x = x (x, x)))
        return x;
    if (x (x +x (x), "%ld", &x) != 1)
        return x;
    x = x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="122" endline="234">
int x (ProcInfo_T x) {
    char x [4096];
    char *x;
    char x;
    unsigned long x;
    unsigned long x;
    long x;
    long x;
    long x;
    int x;
    int x;
    int x;
    int x;
    if (!x (x, 4096, "stat", x->x)) {
        return x;
    }
    x = x (x, ')') + 2;
    x (x, "%c %d %*d %*d %*d %*d %*u %*u" "%*u %*u %*u %lu %lu %ld %ld %*d %*d %*d " "%*d %*u %*u %ld %*u %*u %*u %*u %*u " "%*u %*u %*u %*u %*u %*u %*u %*u %*d %*d\n", & x, & x, & x, & x, & x, & x, & x);
    x->x = x;
    x->x = x->x;
    x->x = (x + x) * 10 / x;
    if (x) {
        x->x += (x + x) * 10 / x;
    }
    if (x->x == 0.0) {
        x->x = x->x;
    }
    if (x == 'Z') {
        x->x |= x;
    }
    if (!x (x, 4096, "statm", x->x)) {
        return x;
    }
    x (x, "%*d %*d %d %d %*d %d %*d\n", & x, & x, & x);
    if (x < 0) {
        x->x = (x >> x (x)) + (x >> x (x)) - (x >> x (x));
    }
    else {
        x->x = (x << x (x)) + (x << x (x)) - (x << x (x));
    }
    x->x = (int) ((double) x->x * 1000.0 / x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="244" endline="296">
int x (ProcessTree_T **x) {
    int x;
    int x;
    int x;
    ProcessTree_T *x;
    x x;
    ASSERT (x);
    if (x ("/proc/[0-9]*", x, x, &x) != 0) {
        return 0;
    }
    x = x.x;
    x = x (sizeof (x), x);
    for (x = 0; x < x; x++) {
        x = x (x.x[x] + x ("/proc/"));
        if (!x (x, &x[x])) {
            continue;
        }
    }
    *x = x;
    x (& x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_LINUX.c.ifdefed" startline="305" endline="310">
int x (double *x, int x) {
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="149" endline="225">
int x (void) {
    register int x;
    struct x x;
    int x [2];
    x x;
    struct x x [] = {{"_bufspace"}, {x}};
    if (x () != 0) {
        return x;
    }
    x[0] = x;
    x[1] = x;
    x = sizeof (x);
    x (x, 2, & x, & x, x, 0);
    x = x (x, x, x, x, "monit");
    if (x == x) {
        return x;
    }
    if (x (x, x) < 0) {
        return x;
    }
    x = x ();
    x = 0;
    while (x > 1) {
        x++;
        x >>= 1;
    }
    x -= x;
    x = sizeof (x);
    if (x (x, 2, &x, &x, x, 0) < 0) {
        return x;
    }
    x = x.x * x.x * 1024;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="227" endline="339">
int x (ProcInfo_T x) {
    struct x *x;
    struct x x;
    struct x *x;
    struct x x;
    struct x x;
    long x;
    long x;
    long x;
    long x;
    x x;
    int x;
    x = x (x, x, x->x, &x);
    if ((x == x) || (x < 1)) {
        x ("kvm_getprocs\n");
        return x;
    }
    if (x (x, &x) < 0) {
        return x;
    }
    else {
        x = x (x.x);
        x = x (x.x);
    }
    x->x = x->x;
    x->x = (int) ((x + x) / 1000);
    if (x) {
        if (x (x, &x) < 0) {
            return x;
        }
        else {
            x = x (x.x);
            x = x (x.x);
        }
        x->x += (int) ((x + x) / 1000);
    }
    if (x->x == 0.0) {
        x->x = x->x;
    }
    if (x (x, (unsigned long) x[0].x.x, (char *) &x, sizeof (x)) != sizeof (x)) {
        return x;
    }
    x = (x) (x.x[x].x);
    x = &x[0].x.x;
    x->x = (x) x (x->x);
    if (x[0].x.x == x) {
        x->x |= x;
    }
    x->x = (int) ((double) x->x * 1000.0 / x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="348" endline="410">
int x (ProcessTree_T **x) {
    struct x *x;
    struct x x;
    struct x *x;
    x x;
    int x = 0;
    int x;
    ProcessTree_T *x;
    x = x (x, x, 0, &x);
    if ((x == x) || (x < 1)) {
        return 0;
    }
    x = x (sizeof (x), x);
    for (x = 0; x < x; x++) {
        x[x].x = x[x].x.x;
        x[x].x = x[x].x.x;
        if (x (x, (unsigned long) x[x].x.x, (char *) &x, sizeof (x)) != sizeof (x)) {
            return x;
        }
        x = (x) (x.x[x].x);
        x = &x[x].x.x;
        x[x].x = (x) x (x->x);
    }
    *x = x;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_OPENBSD.c.ifdefed" startline="419" endline="424">
int x (double *x, int x) {
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="89" endline="98">
int x (void) {
    x = x (x);
    x = (long) (((double) x (x)) * ((double) x (x)) / 1024.0);
    return (x () == 0);
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="100" endline="103">
double x (x x) {
    return x.x * 10 + x.x / 100000000.0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="105" endline="178">
int x (ProcInfo_T x) {
    char x [4096];
    x *x = (x *) &x;
    x *x = (x *) &x;
    if (!x (x, 4096, "psinfo", x->x)) {
        return x;
    }
    if (x->x == 0) {
        x->x = x;
    }
    x->x = x->x;
    if (x->x != x) {
        x->x = x->x * 1000 / 0x8000;
        x->x = x->x;
        if (!x (x, 4096, "status", x->x)) {
            return x;
        }
        x->x = x->x;
        x->x = (x (x->x) + x (x->x));
        if (x) {
            x->x += (x (x->x) + x (x->x));
        }
        if (x->x == 0.0) {
            x->x = x->x;
        }
    }
    else {
        x->x = x->x = 0;
        x->x = 0;
        x->x = 0.0;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="188" endline="240">
int x (ProcessTree_T **x) {
    int x;
    int x;
    int x;
    ProcessTree_T *x;
    x x;
    ASSERT (x);
    if (x ("/proc/[0-9]*", x, x, &x) != 0) {
        return 0;
    }
    x = x.x;
    x = x (sizeof (x), x);
    for (x = 0; x < x; x++) {
        x = x (x.x[x] + x ("/proc/"));
        if (!x (x, &x[x])) {
            continue;
        }
    }
    *x = x;
    x (& x);
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_SOLARIS.c.ifdefed" startline="249" endline="254">
int x (double *x, int x) {
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="39" endline="46">
int x (void) {
    x = 0;
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="49" endline="54">
int x (ProcInfo_T x) {
    return x;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="65" endline="70">
int x (ProcessTree_T **x) {
    return 0;
}
</source>
<source file="examples/monit-4.2/process/sysdep_UNKNOWN.c.ifdefed" startline="81" endline="95">
int x (double *x, int x) {
    int x;
    for (x = 0; x < x; x++) {
        x[x] = 0.0;
    }
    return -1;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="101" endline="106">
int x (void) {
    return (x ());
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="116" endline="156">
int x (Service_T x, ProcessTree_T *x, int x, x x) {
    ProcInfo_T x;
    ProcessTree_T *x;
    ASSERT (x);
    x = x->x;
    x->x = x;
    if (!x (x))
        return x;
    if ((x = x (x, x, x)) != x) {
        x->x = x->x;
        x->x = x->x;
        if (x == 0) {
            x->x = 0;
        }
        else {
            x->x = (int) ((double) x->x * 1000.0 / x);
        }
    }
    else {
        x->x = 0;
        x->x = x->x;
        x->x = x->x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="163" endline="170">
int x (void) {
    if (-1 == x (x.x, 3))
        return x;
    return x;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="177" endline="213">
int x (void) {
    int x;
    if ((x = x (&x)) <= 0)
        return 0;
    for (x = 0; x < x; x++) {
        if (x[x].x == 0)
            continue;
        if (x == (x[x].x = (x *) x (x[x].x, x, x))) {
            x[x].x = 0;
            continue;
        }
        if (!x ((x *) x[x].x, &x[x])) {
            x[x].x = 0;
            continue;
        }
    }
    x ((x *) x (1, x, x));
    return x;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="223" endline="239">
ProcessTree_T *x (int x, ProcessTree_T *x, int x) {
    int x;
    ASSERT (x);
    if ((x == 0) || (x <= 0))
        return x;
    for (x = 0; x < x; x++)
        if (x == x[x].x)
            return &x[x];
    return x;
}
</source>
<source file="examples/monit-4.2/process.c.ifdefed" startline="244" endline="262">
void x (void) {
    int x;
    ASSERT (x);
    if (x <= 0)
        return;
    for (x = 0; x < x; x++)
        if (x[x].x != x)
            x (x[x].x);
    FREE (x);
    return;
}
</source>
<source file="examples/monit-4.2/protocols/default.c.ifdefed" startline="33" endline="40">
int x (Socket_T x) {
    ASSERT (x);
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/dwp.c.ifdefed" startline="70" endline="107">
int x (Socket_T x) {
    int x;
    int x;
    char x [x];
    char x [x];
    ASSERT (x);
    if (x (x, "HEAD / HTTP/1.1\r\n" "Connection: close\r\n\r\n") < 0) {
        x ("DWP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, x, sizeof (x)) <= 0) {
        x ("DWP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x = x (x, "%s %d", x, &x);
    if (x != 2 || (x >= 400)) {
        x ("DWP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/ftp.c.ifdefed" startline="47" endline="102">
int x (Socket_T x) {
    int x;
    char x [x];
    char x [x];
    ASSERT (x);
    if (!x (x, x, x)) {
        x ("FTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x (x, "%d %s", & x, x);
    if (x != 220) {
        x ("FTP error: %s\n", x);
        return x;
    }
    while (x != x (x, x, x)) {
        if (x (x, "220"))
            continue;
    }
    if (x (x, "QUIT\r\n") < 0) {
        x ("FTP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, x, x) <= 0) {
        x ("FTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x (x, "%d %s", & x, x);
    if (x != 221) {
        x ("FTP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/generic.c.ifdefed" startline="53" endline="155">
int x (Socket_T x) {
    Generic_T x = x;
    char x [x];
    ASSERT (x);
    if (x (x)) {
        x = ((x) (x (x)))->x;
    }
    while (x != x) {
        if (x->x != x) {
            if (x (x, "%s", x->x) < 0) {
                x ("GENERIC: error sending data -- %s\n", x);
                return x;
            }
            else {
                x ("GENERIC: successfully sent: '%s'\n", x -> x);
            }
        }
        else if (x->x != x) {
            if (x (x, x, x) == x) {
                x ("GENERIC: error receiving data -- %s\n", x);
                return x;
            }
            if (x (x, x->x, x (x->x)) != 0) {
                x ("GENERIC: receiving unexpected data\n");
                return x;
            }
            else {
                x ("GENERIC: successfully received: '%s'\n", x);
            }
        }
        else {
            x ("GENERIC: unexpected strageness\n");
            return x;
        }
        x = x->x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="86" endline="123">
int x (Socket_T x) {
    char x [x];
    char *x = x;
    char *x = x;
    int x = 0;
    ASSERT (x);
    if (x (x)) {
        x = ((x) (x (x)))->x;
        x = ((x) (x (x)))->x;
        x = ((x) (x (x)))->x;
    }
    x = x ? x : "/";
    if (x (x, "GET %s HTTP/1.1\r\n" "Host: %s\r\n" "Accept: */*\r\n" "User-Agent: %s/%s\r\n" "Connection: close\r\n\r\n", x, x (x, x), x, x) < 0) {
        x ("HTTP: error sending data -- %s\n", x);
        return x;
    }
    if (x) {
        return x (x, x, x);
    }
    return x (x);
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="133" endline="154">
static char *x (Socket_T x, char *x) {
    if (!x (x, x (x)) || x (x (x), x)) {
        *x = 0;
    }
    else {
        x (x, x, "%s:%d", x (x), x (x));
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="162" endline="189">
static int x (Socket_T x) {
    int x;
    int x;
    char x [x];
    char x [x];
    char x [x];
    if (!x (x, x, sizeof (x))) {
        x ("HTTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x = x (x, "%s %d %s", x, &x, x);
    if (x != 3 || (x >= 400)) {
        x ("HTTP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/http.c.ifdefed" startline="202" endline="302">
static int x (Socket_T x, char *x, int x) {
    int x;
    char x [x];
    long x = 0;
    if (!x (x))
        return x;
    while (x != x (x, x, x)) {
        if (x (x, "\r\n") || x (x, "\n"))
            break;
        if (x (x, "Content-Length")) {
            if (1 != x (x, "%*s%*[: ]%ld", &x)) {
                x (x, x);
                x ("HTTP error: parsing Content-Length response header '%s'\n", x);
                return x;
            }
        }
    }
    if (!x) {
        x ("HTTP warning: Response does not contain Content-Length\n");
    }
    else {
        int x;
        char *x;
        long x;
        char x [x];
        char x [x];
        unsigned char x [x];
        int x = 0;
        switch (x) {
        case x :
            {
                struct x x;
                x (& x);
                while (x > 0) {
                    x = x > x ? x : x;
                    x = x (x, x, x);
                    if (x < 0)
                        break;
                    x (x, x, & x);
                    x -= x;
                }
                x (& x, x);
                x = 16;
                break;
            }
        case x :
            {
                struct x x;
                x (& x);
                while (x > 0) {
                    x = x > x ? x : x;
                    x = x (x, x, x);
                    if (x < 0)
                        break;
                    x (x, x, & x);
                    x -= x;
                }
                x (& x, x);
                x = 20;
                break;
            }
        default :
            x ("HTTP warning: Unknown hash type\n");
            return x;
        }
        x = x;
        for (x = 0; x < x; ++x)
            x += x (x, x -(x - x), "%02x", x[x]);
        if (x (x, x, x *2) != 0) {
            x ("HTTP warning: Document checksum mismatch\n");
            return x;
        }
        else {
            x ("HTTP: Succeeded testing document checksum\n");
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/imap.c.ifdefed" startline="50" endline="96">
int x (Socket_T x) {
    char x [x];
    const char *x = "* OK";
    const char *x = "* BYE";
    ASSERT (x);
    if (x (x, x, sizeof (x)) <= 0) {
        x ("IMAP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    if (x (x, x, x (x)) != 0) {
        x ("IMAP error: %s\n", x);
        return x;
    }
    if (x (x, "001 LOGOUT\r\n") < 0) {
        x ("IMAP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, x, sizeof (x)) <= 0) {
        x ("IMAP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    if (x (x, x, x (x)) != 0) {
        x ("IMAP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/ldap2.c.ifdefed" startline="56" endline="157">
int x (Socket_T x) {
    unsigned char x [x];
    unsigned char x [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x60, 0x07, 0x02, 0x01, 0x02, 0x04, 0x00, 0x80, 0x00};
    unsigned char x [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x61, 0x07, 0x0a, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};
    unsigned char x [7] = {0x30, 0x05, 0x02, 0x01, 0x01, 0x42, 0x00};
    ASSERT (x);
    if (x (x, (unsigned char *) x, sizeof (x)) < 0) {
        x ("LDAP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, (unsigned char *) x, sizeof (x)) <= 0) {
        x ("LDAP: error receiving data -- %s\n", x);
        return x;
    }
    if (x ((unsigned char *) x, (unsigned char *) x, sizeof (x))) {
        x ("LDAP: anonymous bind failed\n");
        return x;
    }
    if (x (x, (unsigned char *) x, sizeof (x)) < 0) {
        x ("LDAP: error sending data -- %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/ldap3.c.ifdefed" startline="56" endline="157">
int x (Socket_T x) {
    unsigned char x [x];
    unsigned char x [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x60, 0x07, 0x02, 0x01, 0x03, 0x04, 0x00, 0x80, 0x00};
    unsigned char x [14] = {0x30, 0x0c, 0x02, 0x01, 0x00, 0x61, 0x07, 0x0a, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};
    unsigned char x [7] = {0x30, 0x05, 0x02, 0x01, 0x01, 0x42, 0x00};
    ASSERT (x);
    if (x (x, (unsigned char *) x, sizeof (x)) < 0) {
        x ("LDAP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, (unsigned char *) x, sizeof (x)) <= 0) {
        x ("LDAP: error receiving data -- %s\n", x);
        return x;
    }
    if (x ((unsigned char *) x, (unsigned char *) x, sizeof (x))) {
        x ("LDAP: anonymous bind failed\n");
        return x;
    }
    if (x (x, (unsigned char *) x, sizeof (x)) < 0) {
        x ("LDAP: error sending data -- %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/nntp.c.ifdefed" startline="46" endline="95">
int x (Socket_T x) {
    int x;
    char x [x];
    char x [x];
    ASSERT (x);
    if (x (x, x, sizeof (x)) <= 0) {
        x ("NNTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x (x, "%d %s", & x, x);
    if (x != 200) {
        x ("NNTP error: %s\n", x);
        return x;
    }
    if (x (x, "QUIT\r\n") < 0) {
        x ("NNTP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, x, sizeof (x)) <= 0) {
        x ("NNTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x (x, "%d %s", & x, x);
    if (x != 205) {
        x ("NNTP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/pop.c.ifdefed" startline="50" endline="94">
int x (Socket_T x) {
    char x [x];
    const char *x = "+OK";
    ASSERT (x);
    if (x (x, x, sizeof (x)) <= 0) {
        x ("POP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    if (x (x, x, x (x)) != 0) {
        x ("POP error: %s\n", x);
        return x;
    }
    if (x (x, "QUIT\r\n") < 0) {
        x ("POP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, x, sizeof (x)) <= 0) {
        x ("POP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    if (x (x, x, x (x)) != 0) {
        x ("POP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="68" endline="86">
void x () {
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
    FREE (x);
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="89" endline="101">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "DEFAULT";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="104" endline="116">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "HTTP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="119" endline="131">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "FTP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="134" endline="146">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "SMTP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="149" endline="161">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "POP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="164" endline="176">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "IMAP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="179" endline="191">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "NNTP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="194" endline="206">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "SSH";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="209" endline="221">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "DWP";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="224" endline="236">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "LDAP2";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="239" endline="251">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "LDAP3";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="254" endline="266">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "RDATE";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="269" endline="281">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "RSYNC";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/protocol.c.ifdefed" startline="283" endline="295">
void *x () {
    if (x == x) {
        NEW (x);
        x->x = "generic";
        x->x = x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/rdate.c.ifdefed" startline="56" endline="97">
int x (Socket_T x) {
    x x;
    x x;
    x x;
    ASSERT (x);
    if (x (x, (char *) &x, sizeof (x)) <= 0) {
        x ("RDATE: error receiving data -- %s\n", x);
        return x;
    }
    x = x (x) - x;
    if ((x = x (x)) == -1) {
        x ("RDATE error: cannot get system time -- %s\n", x);
        return x;
    }
    if (x >= x)
        x = (x - x);
    else
        x = (x - x);
    if (x > x) {
        x ("RDATE error: time does not match system time -- %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/rsync.c.ifdefed" startline="47" endline="105">
int x (Socket_T x) {
    char x [x];
    char x [x];
    int x, x;
    char *x = "@RSYNCD:";
    ASSERT (x);
    if (x (x, x, sizeof (x)) <= 0) {
        x ("RSYNC: did not see server greeting  -- %s\n", x);
        return x;
    }
    x (x, x);
    x = x (x, "%s %d", x, &x);
    if ((x == x) || (x == 0)) {
        x ("RSYNC: server greeting parse error %s\n", x);
        return x;
    }
    if (x (x, x, x (x)) != 0) {
        x ("RSYNC: server sent \"%s\" rather than greeting\n", x);
        return x;
    }
    if (x (x, sizeof (x), "%s %d\n", x, x) < 0) {
        x ("RSYNC: string copy error -- %s\n", x);
        return x;
    }
    if (x (x, x, x (x)) <= 0) {
        x ("RSYNC: error sending identification string -- %s\n", x);
        return x;
    }
    if (x (x, "#list\n") < 0) {
        x ("RSYNC: error sending writing #list command  -- %s\n", x);
        return x;
    }
    if (x (x, x, sizeof (x)) <= 0) {
        x ("RSYNC: did not see server answer  -- %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/smtp.c.ifdefed" startline="47" endline="96">
int x (Socket_T x) {
    int x;
    char x [x];
    char x [x];
    ASSERT (x);
    if (x (x, x, sizeof (x)) <= 0) {
        x ("SMTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x (x, "%d %s", & x, x);
    if (x != 220) {
        x ("SMTP error: %s\n", x);
        return x;
    }
    if (x (x, "QUIT\r\n") < 0) {
        x ("SMTP: error sending data -- %s\n", x);
        return x;
    }
    if (x (x, x, sizeof (x)) <= 0) {
        x ("SMTP: error receiving data -- %s\n", x);
        return x;
    }
    x (x, x);
    x (x, "%d %s", & x, x);
    if (x != 221) {
        x ("SMTP error: %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/protocols/ssh.c.ifdefed" startline="44" endline="73">
int x (Socket_T x) {
    int x;
    char x [x];
    ASSERT (x);
    if ((x = x (x, x, sizeof (x))) <= 0) {
        x ("SSH: error receiving identification string -- %s\n", x);
        return x;
    }
    if (!x (x, "SSH-")) {
        x ("SSH: protocol error %s\n", x);
        return x;
    }
    if (x (x, x, x) <= 0) {
        x ("SSH: error sending identification string -- %s\n", x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="102" endline="168">
void x (Mail_T x) {
    Mail_T x;
    SendMail_T S;
    char *x = x (x);
    ASSERT (x);
    if (x (x.x, x)) {
        goto x;
    }
    x (& x);
    if (x (x.x, sizeof (x.x)) < 0) {
        x (x.x, sizeof (x.x), "%s", x);
    }
    x (& x);
    x (& x, "HELO %s\r\n", x.x);
    x (& x);
    for (x = x; x; x = x->x) {
        x (& x, "MAIL FROM: <%s>\r\n", x -> x);
        x (& x);
        x (& x, "RCPT TO: <%s>\r\n", x -> x);
        x (& x);
        x (& x, "DATA\r\n");
        x (& x);
        x (& x, "From: %s\r\n", x -> x);
        x (& x, "To: %s\r\n", x -> x);
        x (& x, "Subject: %s\r\n", x -> x);
        x (& x, "Date: %s\r\n", x);
        x (& x, "X-Mailer: %s %s\r\n", x, x);
        x (& x, "Mime-Version: 1.0\r\n");
        x (& x, "Content-Type: text/plain; charset=\"iso-8859-1\"\r\n");
        x (& x, "Content-Transfer-Encoding: quoted-printable\r\n");
        x (& x, "\r\n");
        x (& x, "%s\r\n", x -> x);
        if (x->x) {
            x (& x, "%s\r\n", x -> x);
        }
        x (& x, ".\r\n");
        x (& x);
    }
    x (& x, "QUIT\r\n");
x :
    x (x);
    if (x.x) {
        x (& x.x);
    }
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="174" endline="197">
void x (SendMail_T *x, const char *x, ... ) {
    long x;
    x x;
    char *x = x;
    x (x, x);
    x = x (x, x, &x);
    x (x);
    if (x (x->x, x, x (x)) <= 0) {
        FREE (x);
        x ("Sendmail: error sending data to the server '%s' -- %s\n", x -> x, x);
        x (x -> x, x);
    }
    FREE (x);
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="200" endline="226">
static void x (SendMail_T *x) {
    int x;
    char x [x];
    if (x (x->x, x, sizeof (x)) <= 0) {
        x ("Sendmail: error receiving data from the mailserver '%s' -- %s\n", x -> x, x);
        x (x -> x, x);
    }
    x (x, x);
    x (x, "%d", & x);
    if (x >= 400) {
        x ("Sendmail error: %s\n", x);
        x (x -> x, x);
    }
}
</source>
<source file="examples/monit-4.2/sendmail.c.ifdefed" startline="229" endline="259">
static void x (SendMail_T *x) {
    MailServer_T x = x.x;
    x->x = x ? x->x : x;
    do {
        x->x = x (x->x, x, x, x, x.x);
        if (x->x)
            break;
        x ("Cannot open a connection to the mailserver '%s' -- %s\n", x -> x, x);
        if (x && (x = x->x)) {
            x->x = x->x;
            x ("Trying the next mail server '%s'\n", x -> x);
            continue;
        }
        else {
            x ("No mail servers are available, aborting alert\n");
            x (x -> x, x);
        }
    }
    while (x);
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="52" endline="77">
Sigfunc *x (int x, Sigfunc *x) {
    struct x x, x;
    x.x = x;
    x (& x.x);
    x.x = 0;
    if (x == x) {
    }
    else {
    }
    if (x (x, &x, &x) < 0)
        return (x);
    return (x.x);
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="85" endline="95">
void x (x *x, x *x) {
    x (x);
    x (x, x);
    x (x, x);
    x (x, x);
    x (x, x);
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/signal.c.ifdefed" startline="102" endline="107">
void x (x *x) {
    x (x, x, x);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="93" endline="98">
Socket_T x (const char *x, int x, int x, int x) {
    return x (x, x, x, x, x);
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="106" endline="165">
Socket_T x (void *x) {
    int x;
    Socket_T S;
    Port_T x = x;
    ASSERT (x);
    if ((x = x (x)) != -1) {
        NEW (x);
        x->x = x;
        x->x = x->x;
        x->x = x->x;
        x->x = x->x;
        x->x = x;
        if (x->x == x) {
            x->x = x (x);
        }
        else {
            x->x = x (x->x);
        }
        if (x->x.x) {
            if (!(x->x = x (x, x->x.x))) {
                goto x;
            }
            if (!x (x->x, x->x)) {
                goto x;
            }
            if (x->x.x) {
                if (!x (x->x, x->x.x)) {
                    goto x;
                }
            }
        }
        x->x = x;
        return x;
    x :
        x (&x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="179" endline="228">
Socket_T x (const char *x, int x, int x, int x, int x) {
    int x;
    Socket_T S;
    int x = x == x ? x : x;
    ASSERT (x);
    x ((x == x) || (x == x));
    if (x) {
        x (x == x);
    }
    x (x > 0);
    if ((x = x (x, x, x, x)) != -1) {
        NEW (x);
        x->x = x;
        x->x = x;
        x->x = x;
        x->x = x;
        x->x = x (x);
        x->x = x;
        if (x) {
            if (!(x->x = x (x, x))) {
                goto x;
            }
            if (!x (x->x, x->x)) {
                goto x;
            }
        }
        return x;
    x :
        x (&x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="244" endline="280">
Socket_T x (int x, const char *x, int x, void *x) {
    Socket_T S;
    x (x >= 0);
    ASSERT (x);
    NEW (x);
    x->x = x;
    x->x = x;
    x->x = x;
    x->x = x;
    x->x = x (x);
    x->x = x;
    if (x) {
        x->x = x;
        if (!(x->x = x (x->x))) {
            goto x;
        }
        if (!x (x->x, x->x)) {
            goto x;
        }
    }
    return x;
x :
    x (&x);
    return x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="288" endline="313">
void x (Socket_T *x) {
    x (x && * x);
    x ((* x) -> x);
    x ((* x) -> x);
    FREE (*x);
    (*x) = x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="324" endline="341">
int x (Socket_T S) {
    ASSERT (x);
    switch (x->x) {
    case x :
        return x (x->x);
    case x :
        return x (x->x);
    default :
        break;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="349" endline="356">
int x (Socket_T S) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="365" endline="372">
void *x (Socket_T S) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="380" endline="387">
int x (Socket_T S) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="396" endline="403">
const char *x (Socket_T S) {
    ASSERT (x);
    return x->x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="416" endline="436">
int x (Socket_T S, const char *x, ... ) {
    int x;
    long x;
    x x;
    char *x = x;
    ASSERT (x);
    ASSERT (x);
    x (x, x);
    x = x (x, x, &x);
    x (x);
    x = x (x, x, x);
    FREE (x);
    return x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="446" endline="480">
int x (Socket_T S, void *x, int x) {
    int x = 0;
    void *x = x;
    ASSERT (x);
    while (x > 0) {
        if (x->x) {
            x = x (x->x, x, x);
        }
        else {
            x = x (x->x, x, x);
        }
        if (x <= 0)
            break;
        x += x;
        x -= x;
    }
    if (x < 0) {
        return -1;
    }
    return (int) x - (int) x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="490" endline="527">
int x (Socket_T S, void *x, int x) {
    int x = 0;
    void *x = x;
    int x = 0;
    ASSERT (x);
    x = x->x;
    while (x > 0) {
        if (x->x) {
            x = x (x->x, x, x, x);
        }
        else {
            x = x (x->x, x, x, x);
        }
        if (x <= 0)
            break;
        x += x;
        x -= x;
        x = 0;
    }
    if (x < 0 && x == x) {
        return -1;
    }
    return (int) x - (int) x;
}
</source>
<source file="examples/monit-4.2/socket.c.ifdefed" startline="541" endline="565">
char *x (Socket_T S, char *x, int x) {
    char *x = x;
    ASSERT (x);
    while (--x && ((x (x, x, 1)) > 0)) {
        if (*x++ == 10)
            break;
    }
    *x = 0;
    if (*x)
        return x;
    return x;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="124" endline="258">
void x (Service_T S, Command_T C, const char *x) {
    x x;
    x x;
    x x;
    int x = 0;
    int x;
    Environment_T x = x;
    ASSERT (x);
    ASSERT (x);
    if (x (x->x[0], x) != 0) {
        x ("Error: Could not execute %s\n", x -> x [0]);
        return;
    }
    x (& x);
    x (& x, x);
    x (x, & x, & x);
    x (x, x, & x);
    x = x ();
    if (x < 0) {
        x ("Cannot fork a new process\n");
        x (1);
    }
    if (x == 0) {
        x (x.x);
        if (x->x) {
            if (0 != x (x->x)) {
                x |= x;
            }
        }
        if (x->x) {
            if (0 != x (x->x)) {
                x |= x;
            }
        }
        x (x);
        if (!x.x) {
            int x;
            for (x = 0; x < 3; x++)
                if (x (x) == -1 || x ("/dev/null", x) != x)
                    x |= x;
        }
        x ();
        x ();
        x = x ();
        if (x < 0) {
            x |= x;
            _exit (x);
        }
        if (x == 0) {
            x (& x);
            x (x, & x, x);
            x (x, x);
            x (x, x);
            x (x, x);
            x (x, x);
            x (x, x);
            (void) x (x->x[0], x->x);
            x (1);
        }
        _exit (x);
    }
    if (x (x, &x, 0) != x) {
        x ("Waitpid error\n");
    }
    x = x (x);
    if (x & x)
        x ("Failed to change gid to '%d' for '%s'\n", x->x, x->x[0]);
    if (x & x)
        x ("Failed to change uid to '%d' for '%s'\n", x->x, x->x[0]);
    if (x & x)
        x ("Cannot fork a new process for '%s'\n", x->x[0]);
    if (x & x)
        x ("Cannot redirect IO to /dev/null for '%s'\n", x->x[0]);
    x (& x);
    x (x == x);
    x (x, & x, x);
    return;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="268" endline="306">
static void x (Service_T x, const char *x, Environment_T *x) {
    char x [x];
    char *x = x (x);
    x (x, x, "MONIT_DATE=%s", x);
    x (x, x);
    x (x, x, "MONIT_SERVICE=%s", x -> x);
    x (x, x);
    x (x, x, "MONIT_HOST=%s", x.x);
    x (x, x);
    x (x, x, "MONIT_EVENT=%s", x ? x : "No Event");
    x (x, x);
    if (x->x == x) {
        x (x, x, "MONIT_PROCESS_PID=%d", x (x));
        x (x, x);
        x (x, x, "MONIT_PROCESS_MEMORY=%ld", x -> x -> x);
        x (x, x);
        x (x, x, "MONIT_PROCESS_CHILDREN=%d", x -> x -> x);
        x (x, x);
        x (x, x, "MONIT_PROCESS_CPU_PERCENT=%d", x -> x -> x);
        x (x, x);
    }
    FREE (x);
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="309" endline="316">
static void x (char const *x, Environment_T *x) {
    Environment_T x;
    NEW (x);
    x (x -> x, x, x);
    x->x = *x;
    *x = x;
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="319" endline="326">
static void x (Environment_T x) {
    while (x != x) {
        x (x -> x);
        x = x->x;
    }
}
</source>
<source file="examples/monit-4.2/spawn.c.ifdefed" startline="329" endline="336">
static void x (Environment_T *x) {
    if (x && *x) {
        x (& (* x) -> x);
        FREE ((*x));
    }
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="177" endline="289">
int x (x *x, int x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="297" endline="328">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="337" endline="369">
int x (x *x, char *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="382" endline="426">
x *x (char *x, int x, int x, int x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="434" endline="478">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="486" endline="566">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="574" endline="614">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="622" endline="724">
x *x (char *x, char *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="737" endline="787">
x *x (char *x, int x, int x, char *x, char *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="795" endline="817">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="825" endline="874">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="882" endline="914">
int x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="922" endline="989">
x *x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="999" endline="1031">
int x (x *x, x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1041" endline="1093">
int x (x *x, x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1102" endline="1216">
int x (x *x, int x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1224" endline="1278">
x *x (x *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1288" endline="1317">
int x (x *x, void *x, int x) {
    return -1;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1328" endline="1357">
int x (x *x, void *x, int x, int x) {
    return -1;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1365" endline="1391">
int x () {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1398" endline="1424">
int x () {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1430" endline="1441">
void x (int x) {
    return;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1447" endline="1586">
x *x (char *x, int x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1593" endline="1638">
x *x (char *x, char *x) {
    return x;
}
</source>
<source file="examples/monit-4.2/ssl.c.ifdefed" startline="1645" endline="1658">
int x (void) {
    return x;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="106" endline="144">
void x () {
    int x = 0;
    Service_T x;
    State_T x;
    FILE *x = x;
    x x, x;
    if (!(x = x ("w")))
        return;
    x (& x, & x);
    x = x ();
    if (x (&x, 1, sizeof (int), x) != sizeof (int)) {
        x ("%s: Unable to save monit state information to '%s'\n", x, x.x);
        goto x;
    }
    for (x = x; x; x = x->x) {
        x (x, & x);
        if (x (&x, 1, sizeof (x), x) != sizeof (x)) {
            x ("%s: An error occured when saving monit state information " "for the service %s\n", x, x -> x);
            goto x;
        }
    }
x :
    x (x);
    x (& x);
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="154" endline="167">
int x () {
    if (x (x.x) && x (x.x)) {
        return (x (x.x, x) > x (x.x, x));
    }
    return x;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="192" endline="242">
void x () {
    int x;
    int x = 0;
    State_T x;
    FILE *x = x;
    x x, x;
    Service_T x;
    int x = x;
    if (!(x = x ("r")))
        return;
    x (& x, & x);
    x = 0;
    if (x (&x, 1, sizeof (int), x) != sizeof (int)) {
        x ("%s: Unable to read monit state information from '%s'\n", x, x.x);
        x = x;
        goto x;
    }
    if (x > 0) {
        for (x = 0; x < x; x++) {
            if (x (&x, 1, sizeof (x), x) != sizeof (x)) {
                x ("%s: An error occured when updating monit state information\n", x);
                x = x;
                goto x;
            }
            if ((x = x (x.x))) {
                x (x, & x);
            }
        }
    }
x :
    x (x);
    x (& x);
    if (!x)
        x ();
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="248" endline="268">
static FILE *x (const char *x) {
    FILE *x = x;
    x (x.x);
    x (x);
    if ((x = x (x.x, x)) == x) {
        x ("%s: Cannot open the monit state file '%s' -- %s\n", x, x.x, x);
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="271" endline="276">
static void x (FILE *x) {
    x (x (x) == 0);
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="279" endline="293">
static void x (Service_T x, State_T *x) {
    x (x, 0, sizeof (x));
    x (x -> x, x -> x, x);
    x->x = x->x;
    x->x = x->x;
    x->x = x->x;
    x->x = x->x;
    x->x = x->x ? x->x->x : x;
    x->x = x->x ? x->x->x : x;
    x->x = x->x ? x->x->x : x;
}
</source>
<source file="examples/monit-4.2/state.c.ifdefed" startline="296" endline="310">
static void x (Service_T x, State_T *x) {
    x->x = x->x;
    x->x = x->x;
    x->x = x->x;
    x->x = x->x;
    if (x->x)
        x->x->x = x->x;
    if (x->x)
        x->x->x = x->x;
    if (x->x)
        x->x->x = x->x;
}
</source>
<source file="examples/monit-4.2/status.c.ifdefed" startline="75" endline="125">
void x () {
    if (x ()) {
        Socket_T x = x (x.x ? x.x : "localhost", x.x, x, x.x);
        if (!x) {
            x ("%s: error connecting to the monit daemon\n", x);
            return;
        }
        else {
            char x [x];
            int x = x;
            char *x = x ();
            x (x, "GET /_status?format=text HTTP/1.0\r\n%s\r\n", x ? x : "");
            FREE (x);
            while (x (x, x, x)) {
                if (x (x, "\n") || x (x, "\r\n"))
                    break;
                if (x (x, "HTTP/1.0 200"))
                    x = x;
            }
            if (!x) {
                x ("%s: cannot read status from the monit daemon\n", x);
                goto x;
            }
            while (x (x, x, x)) {
                x ("%s", x);
            }
        x :
            x (&x);
        }
    }
    else {
        x ("%s: no status available -- the monit daemon is not running\n", x);
    }
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="123" endline="128">
int x (char *x) {
    return (x && *x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="136" endline="147">
char *x (char *x) {
    char *x;
    ASSERT (x);
    x = x (x, '/');
    return (x ? ++x : x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="154" endline="172">
void x (char *x, int x) {
    char *x = x;
    int x;
    ASSERT (x);
    for (x = 0; x < x; x++, x++) {
        if ((*x == '\r') || (*x == '\n')) {
            *x = 0;
            return;
        }
    }
    x[x - 1] = 0;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="180" endline="190">
char *x (char *x) {
    ASSERT (x);
    x (x);
    x (x);
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="198" endline="209">
char *x (char *x) {
    char *x = x;
    ASSERT (x);
    while (*x == ' ' || *x == '\t' || *x == '\r' || *x == '\n')
        x++;
    return x (x, x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="217" endline="229">
char *x (char *x) {
    char *x = x;
    ASSERT (x);
    while (*x)
        x++;
    while (*--x == ' ' || *x == '\t' || *x == '\r' || *x == '\n')
        *x = '\0';
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="237" endline="271">
void x (char *x) {
    char *x = x;
    char x = 0;
    ASSERT (x);
    if (*x == 39 || *x == 34) {
        x = *x;
        x++;
    }
    else {
        return;
    }
    while (*x != x && *x != '\0') {
        *(x - 1) = *x;
        x++;
    }
    *(x - 1) = '\0';
    return;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="282" endline="295">
char *x (char *x, char x, char x) {
    char *x = x;
    while (x && *x) {
        if (*x == x)
            *x = x;
        x++;
    }
    return (x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="309" endline="353">
char *x (char **x, const char *x, const char *x) {
    int x;
    int x;
    x (x && * x && x && x);
    x = x (*x, x);
    x = x (x) - x (x);
    if (x == 0)
        return *x;
    if (x > 0)
        x *= x;
    else
        x = 0;
    {
        char *x, *x;
        int x = x (x);
        char *x = x (x (*x) + x + 1);
        x = *x;
        *x = 0;
        while ((x = x (x, x))) {
            *x = '\0';
            x (x, x);
            x (x, x);
            x += x;
            x = x;
        }
        x (x, x);
        FREE (*x);
        *x = x;
    }
    return *x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="361" endline="377">
int x (char *x, const char *x) {
    int x = 0;
    char *x = x;
    x (x && x);
    while ((x = x (x, x))) {
        x++;
        x++;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="389" endline="403">
int x (const char *x, const char *x) {
    if ((!x || !x) || *x != *x)
        return x;
    while (*x && *x) {
        if (x (*x++) != x (*x++))
            return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="410" endline="468">
void x (char *x) {
    int x;
    int x;
    ASSERT (x);
    for (x = x = 0; *(x + x) != '\0'; x++, x++) {
        if (*(x + x) == '\\') {
            switch (*(x + x + 1)) {
            case 'n' :
                *(x + x) = '\n';
                x++;
                break;
            case 't' :
                *(x + x) = '\t';
                x++;
                break;
            case 'r' :
                *(x + x) = '\r';
                x++;
                break;
            case ' ' :
                *(x + x) = ' ';
                x++;
                break;
            case '\\' :
                *(x + x) = '\\';
                x++;
                break;
            default :
                *(x + x) = *(x + x);
            }
        }
        else {
            *(x + x) = *(x + x);
        }
    }
    *(x + x) = '\0';
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="475" endline="492">
Service_T x (const char *x) {
    Service_T x;
    ASSERT (x);
    for (x = x; x; x = x->x) {
        if (x (x->x, x)) {
            return x;
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="500" endline="513">
int x (const char *x) {
    Service_T x;
    ASSERT (x);
    for (x = x; x; x = x->x)
        if (x (x->x, x))
            return x;
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="521" endline="531">
int x () {
    int x = 0;
    Service_T x;
    for (x = x; x; x = x->x)
        x += 1;
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="537" endline="656">
void x () {
    x ("Runtime constants:\n");
    x (" %-18s = %s\n", "Control file", x (x.x));
    x (" %-18s = %s\n", "Log file", x (x.x));
    x (" %-18s = %s\n", "Pid file", x (x.x));
    x (" %-18s = %s\n", "Debug", x.x ? "True" : "False");
    x (" %-18s = %s\n", "Log", x.x ? "True" : "False");
    x (" %-18s = %s\n", "Use syslog", x.x ? "True" : "False");
    x (" %-18s = %s\n", "Is Daemon", x.x ? "True" : "False");
    x (" %-18s = %s\n", "Use process engine", x.x ? "True" : "False");
    x (" %-18s = %d seconds\n", "Poll time", x.x);
    x (" %-18s = ", "Mail server(s)");
    if (x.x) {
        MailServer_T x = x.x;
        for (x = x.x; x; x = x->x)
            x ("%s%s", x->x, x->x ? ", " : " ");
        x ("\n");
    }
    else {
        x ("localhost\n");
    }
    x (" %-18s = %s\n", "Mail from", x (x.x.x));
    x (" %-18s = %s\n", "Mail subject", x (x.x.x));
    x (" %-18s = %-.20s%s\n", "Mail message", x.x.x ? x.x.x : "(not defined)", x.x.x ? "..(truncated)" : "");
    x (" %-18s = %s\n", "Start monit httpd", x.x ? "True" : "False");
    if (x.x) {
        x (" %-18s = %s\n", "httpd bind address", x.x ? x.x : "Any/All");
        x (" %-18s = %d\n", "httpd portnumber", x.x);
        x (" %-18s = %s\n", "httpd signature", x.x ? "True" : "False");
        x (" %-18s = %s\n", "Use ssl encryption", x.x ? "True" : "False");
        if (x.x) {
            x (" %-18s = %s\n", "PEM key/cert file", x.x);
            if (x.x != x) {
                x (" %-18s = %s\n", "Client cert file", x.x);
            }
            else {
                x (" %-18s = %s\n", "Client cert file", "None");
            }
            x (" %-18s = %s\n", "Allow self certs", x.x ? "True" : "False");
        }
        x (" %-18s = %s\n", "httpd auth. style", (x.x != x) && x () ? "Basic Authentication and Host allow list" : (x.x != x) ? "Basic Authentication" : x () ? "Host allow list" : "No authentication!");
    }
    {
        Mail_T x;
        for (x = x.x; x; x = x->x) {
            x (" %-18s = %s\n", "Alert mail to", x (x -> x));
            x (" %-18s = ", "Alert on");
            if (x->x == (~((unsigned int) 0))) {
                x ("All events");
            }
            else {
                if (x (x->x, x))
                    x ("Start ");
                if (x (x->x, x))
                    x ("Stop ");
                if (x (x->x, x))
                    x ("Restart ");
                if (x (x->x, x))
                    x ("Checksum ");
                if (x (x->x, x))
                    x ("Resource ");
                if (x (x->x, x))
                    x ("Timeout ");
                if (x (x->x, x))
                    x ("Timestamp ");
                if (x (x->x, x))
                    x ("Size ");
                if (x (x->x, x))
                    x ("Connection ");
                if (x (x->x, x))
                    x ("Permission ");
                if (x (x->x, x))
                    x ("Uid ");
                if (x (x->x, x))
                    x ("Gid ");
                if (x (x->x, x))
                    x ("Unmonitor ");
            }
            x ("\n");
        }
    }
    x ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="663" endline="969">
void x (Service_T x) {
    Port_T x;
    Icmp_T x;
    Mail_T x;
    Device_T x;
    Resource_T x;
    Timestamp_T x;
    Size_T x;
    Dependant_T x;
    ASSERT (x);
    x ("%-21s = %s\n", x [x -> x], x -> x);
    x (" %-20s = %s\n", "Group", x (x -> x));
    if (x->x == x)
        x (" %-20s = %s\n", "Pid file", x->x);
    else if (x->x != x)
        x (" %-20s = %s\n", "Path", x->x);
    x (" %-20s = %s\n", "Monitoring mode", x [x -> x]);
    if (x->x) {
        int x = 0;
        x (" %-20s =", "Start program");
        while (x->x->x[x])
            x (" %s", x->x->x[x++]);
        x ("\n");
    }
    if (x->x) {
        int x = 0;
        x (" %-20s =", "Stop program");
        while (x->x->x[x])
            x (" %s", x->x->x[x++]);
        x ("\n");
    }
    for (x = x->x; x; x = x->x)
        if (x->x != x)
            x (" %-20s = %s\n", "Depends on Service", x->x);
    if (x->x) {
        switch (x->x->x) {
        case x :
            x (" %-20s = if failed MD5(%s) then %s\n", "Checksum", x->x->x, x[x->x->x]);
            break;
        case x :
            x (" %-20s = if failed SHA1(%s) then %s\n", "Checksum", x->x->x, x[x->x->x]);
            break;
        default :
            x (" %-20s = if failed UNKNOWN(%s) then %s\n", "Checksum", x->x->x, x[x->x->x]);
            break;
        }
    }
    if (x->x)
        x (" %-20s = if failed %o then %s\n", "Permission", x->x->x, x[x->x->x]);
    if (x->x)
        x (" %-20s = if failed %d then %s\n", "UID", (int) x->x->x, x[x->x->x]);
    if (x->x)
        x (" %-20s = if failed %d then %s\n", "GID", (int) x->x->x, x[x->x->x]);
    if (x->x) {
        for (x = x->x; x; x = x->x) {
            if (x->x == x) {
                if (x->x.x) {
                    x (" %-20s = %s:%d%s [protocol %s via SSL] with timeout %d seconds\n", "Host:Port", x -> x, x -> x, x -> x ? x -> x : "", x -> x -> x, x -> x);
                    if (x->x.x != x)
                        x (" %-20s = %s\n", "Server cert md5 sum", x->x.x);
                }
                else {
                    x (" %-20s = %s:%d%s [protocol %s] with timeout %d seconds\n", "Host:Port", x -> x, x -> x, x -> x ? x -> x : "", x -> x -> x, x -> x);
                }
            }
            else if (x->x == x) {
                x (" %-20s = %s [protocol %s] with timeout %d seconds\n", "Unix Socket", x -> x, x -> x -> x, x -> x);
            }
        }
    }
    if (x->x)
        for (x = x->x; x; x = x->x)
            x (" %-20s = if failed %s with timeout %d seconds then %s\n", "ICMP", x[x->x], x->x, x[x->x]);
    for (x = x->x; x; x = x->x) {
        if (x->x) {
            x (" %-20s = if changed then %s\n", "Timestamp", x [x -> x]);
        }
        else {
            x (" %-20s = if %s %d second(s) then %s\n", "Timestamp", x [x -> x], x -> x, x [x -> x]);
        }
    }
    for (x = x->x; x; x = x->x) {
        if (x->x) {
            x (" %-20s = if changed then %s\n", "Size", x [x -> x]);
        }
        else {
            x (" %-20s = if %s %lu byte(s) then %s\n", "Size", x [x -> x], x -> x, x [x -> x]);
        }
    }
    for (x = x->x; x; x = x->x) {
        if (x->x == x) {
            x (" %-20s = if %s %ld %s then %s\n", "Inodes usage limit", x [x -> x], (x -> x > - 1) ? x -> x : x -> x, (x -> x > - 1) ? "" : "%", x [x -> x]);
        }
        else if (x->x == x) {
            x (" %-20s = if %s %ld %s then %s\n", "Space usage limit", x [x -> x], (x -> x > - 1) ? x -> x : x -> x, (x -> x > - 1) ? "blocks" : "%", x [x -> x]);
        }
    }
    for (x = x->x; x; x = x->x) {
        switch (x->x) {
        case x :
            x (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "CPU usage limit", x[x->x], x->x / 10.0, x->x, x[x->x]);
            break;
        case x :
            x (" %-20s = if %s %.1f%% for %d cycle(s) then %s\n", "Memory usage limit", x[x->x], x->x / 10.0, x->x, x[x->x]);
            break;
        case x :
            x (" %-20s = if %s %ldkB for %d cycle(s) then %s\n", "Memory amount limit", x[x->x], x->x, x->x, x[x->x]);
            break;
        case x :
            x (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (1min)", x[x->x], x->x / 10.0, x->x, x[x->x]);
            break;
        case x :
            x (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (5min)", x[x->x], x->x / 10.0, x->x, x[x->x]);
            break;
        case x :
            x (" %-20s = if %s %.1f for %d cycle(s) then %s\n", "Load avg. (15min)", x[x->x], x->x / 10.0, x->x, x[x->x]);
            break;
        }
    }
    if (x->x)
        x (" %-20s = Check service every %d cycles\n", "Every", x->x);
    if (x->x)
        x (" %-20s = Do timeout if %d restart within %d cycles\n", "Timeout", x->x, x->x);
    for (x = x->x; x; x = x->x) {
        x (" %-20s = %s\n", "Alert mail to", x (x -> x));
        x (" %-20s = ", "Alert on");
        if (x->x == (~((unsigned int) 0))) {
            x ("All events");
        }
        else {
            if (x (x->x, x))
                x ("Start ");
            if (x (x->x, x))
                x ("Stop ");
            if (x (x->x, x))
                x ("Restart ");
            if (x (x->x, x))
                x ("Checksum ");
            if (x (x->x, x))
                x ("Resource ");
            if (x (x->x, x))
                x ("Timeout ");
            if (x (x->x, x))
                x ("Timestamp ");
            if (x (x->x, x))
                x ("Size ");
            if (x (x->x, x))
                x ("Connection ");
            if (x (x->x, x))
                x ("Permission ");
            if (x (x->x, x))
                x ("Uid ");
            if (x (x->x, x))
                x ("Gid ");
            if (x (x->x, x))
                x ("Unmonitor ");
        }
        x ("\n");
    }
    x ("\n");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="975" endline="993">
void x () {
    Service_T x;
    char x [x];
    x ("The service list contains the following entries:\n\n");
    for (x = x; x; x = x->x) {
        x (x);
    }
    x (x, '-', x);
    x ("%-.79s\n", x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1002" endline="1049">
x x (char *x) {
    FILE *x = x;
    int x = -1;
    ASSERT (x);
    if (!x (x)) {
        return (x);
    }
    if (!x (x)) {
        x ("%s: pidfile '%s' is not a regular file\n", x, x);
        return (x);
    }
    if ((x = x (x, "r")) == (x *) x) {
        x ("%s: Error opening the pidfile '%s' -- %s\n", x, x, x);
        return (x);
    }
    x (x, "%d", & x);
    x (x);
    if (x == -1) {
        x ("%s: pidfile `%s' does not contain a valid pidnumber\n", x, x);
        return (x);
    }
    return (x) x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1056" endline="1073">
int x (Service_T x) {
    x x;
    ASSERT (x);
    x = 0;
    if ((x = x (x->x)))
        if ((x (x) > -1) || (x == x))
            return x;
    x (x -> x, 0, sizeof * (x -> x));
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1082" endline="1100">
char *x (long *x) {
    char x [x];
    struct x *x;
    x x = (x && *x > 0) ? *x : x (x);
    x = x (&x);
    if (x (x, x, "%a, %d %b %Y %H:%M:%S %z", x) <= 0) {
        return x;
    }
    return x (x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1109" endline="1128">
char *x (char *x, char *x) {
    x x;
    ASSERT (x);
    if ((x = x (x, x))) {
        x x = x (&x);
        x x = x - x;
        return x (x, x);
    }
    return x ("");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1138" endline="1169">
char *x (x x, char *x) {
    static int x = 60;
    static int x = 3600;
    static int x = 86400;
    long x;
    long x;
    long x;
    char x [x];
    char *x = x;
    *x = 0;
    if ((x = x / x) > 0) {
        x += x (x, x -(x - x), "%ldd%s", x, x);
        x -= x * x;
    }
    if ((x = x / x) > 0 || (x > 0)) {
        x += x (x, x -(x - x), "%ldh%s", x, x);
        x -= x * x;
    }
    x = x / x;
    x += x (x, x -(x - x), "%ldm%s", x, x);
    x -= x * x;
    return x (x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1175" endline="1245">
char *x (char *x, int x) {
    int x = 16;
    ASSERT (x);
    switch (x) {
    case x :
        x = 16;
        break;
    case x :
        x = 20;
        break;
    default :
        return x;
    }
    if (x (x)) {
        FILE *x = x (x, "r");
        if (x) {
            int x;
            unsigned char x [x];
            char x [x];
            char *x = x;
            int x = 0;
            *x = 0;
            switch (x) {
            case x :
                x = x (x, x);
                break;
            case x :
                x = x (x, x);
                break;
            }
            if (x) {
                x (x);
                return x;
            }
            x (x);
            for (x = 0; x < x; ++x)
                x += x (x, x -(x - x), "%02x", x[x]);
            return (x (x));
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1255" endline="1293">
int x (char *x, char *x, int x) {
    char *x;
    ASSERT (x);
    ASSERT (x);
    x = x (x, x);
    if (x) {
        int x;
        switch (x) {
        case x :
            x = (!x (x, x, 32));
            break;
        case x :
            x = (!x (x, x, 40));
            break;
        default :
            x = x;
        }
        FREE (x);
        return (x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1302" endline="1328">
char *x (char *x) {
    register int x, x;
    unsigned char *x;
    static unsigned char x [] = "0123456789ABCDEF";
    ASSERT (x);
    x = (unsigned char *) x (3 * x (x) + 1);
    for (x = 0, x = 0; x[x]; x++, x++) {
        if (x ((unsigned char *) &x[x])) {
            x[x++] = '%';
            x[x++] = x[(unsigned char) x[x] >> 4];
            x[x] = x[(unsigned char) x[x] & 0xf];
        }
        else
            x[x] = (unsigned char) x[x];
    }
    x[x] = '\0';
    return ((char *) x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1337" endline="1354">
char *x (char *x) {
    register int x, x;
    if (!(x && *x))
        return x;
    x (x, '+', ' ');
    for (x = 0, x = 0; x[x]; ++x, ++x) {
        if ((x[x] = x[x]) == '%') {
            x[x] = x (&x[x + 1]);
            x += 2;
        }
    }
    x[x] = 0;
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1362" endline="1417">
char *x () {
    Auth_T x = x.x;
    if (x == x) {
        return x ("\r\n");
    }
    while (x != x) {
        if (x->x == x) {
            break;
        }
        x = x->x;
    }
    if (x != x) {
        char *x, *x;
        char x [x];
        x (x, x, "%s:%s", x -> x, x -> x);
        if (!(x = x (x (x), (unsigned char *) x))) {
            x ("Failed to base64 encode authentication header\n");
            return x;
        }
        x = x (sizeof (char), x +1);
        x (x, x, "Authorization: Basic %s\r\n", x);
        FREE (x);
        return x;
    }
    x ("Cleattext credentials needed for basic authorization!\n");
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1428" endline="1458">
char *x (const char *x, x x, long *x) {
    int x;
    int x = x;
    char *x = x (x);
    ASSERT (x);
    while (x) {
        x = x (x, x, x, x);
        if (x > -1 && x < x)
            break;
        if (x > -1)
            x = x + 1;
        else
            x *= 2;
        x = x (x, x);
    }
    *x = x;
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1465" endline="1474">
void x () {
    int x;
    for (x = 0; x < 3; x++)
        if (x (x) == -1 || x ("/dev/null", x) != x)
            x ("Cannot reopen standard file descriptor (%d) -- %s\n", x, x);
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1482" endline="1497">
void x () {
    int x;
    int x = 1024;
    for (x = 3; x < x; x++)
        (void) x (x);
    x = 0;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1503" endline="1523">
Auth_T x (char *x) {
    Auth_T x = x.x;
    while (x != x) {
        if (x (x->x, x) == 0) {
            return x;
        }
        x = x->x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1526" endline="1597">
int x (char *x, char *x) {
    Auth_T x = x (x);
    char x [x];
    if (x == x) {
        return x;
    }
    switch (x->x) {
    case x :
        {
            x (x, x, x);
            break;
        }
    case x :
        {
            char x [x];
            char x [x];
            char *x;
            x (x, x -> x, x);
            x = x (x +1, '$') + 1;
            *x = '\0';
            x (x, x -> x + x (x), x);
            x = x (x, '$');
            *x = '\0';
            if (x (x, x, x, x, x) == x) {
                x ("Cannot generate MD5 digest error.\n");
                return x;
            }
            break;
        }
    case x :
        {
            char x [3];
            char *x;
            x (x, 3, "%c%c", x -> x [0], x -> x [1]);
            x = x (x, x);
            x (x, x, x);
            break;
        }
    default :
        x ("Unknown password digestion method.\n");
        return x;
    }
    if (x (x, x->x) == 0) {
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1607" endline="1612">
static char *x (char *x) {
    return (x (x) ? x : "(not defined)");
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1620" endline="1642">
static int x (unsigned char *x) {
    int x;
    static unsigned char x [] = "<>\"#{}|\\^~[]`";
    ASSERT (x);
    if (33 > *x || *x > 176)
        return x;
    if (*x == '%') {
        if (x (*(x + 1)) && x (*(x + 2)))
            return x;
        return x;
    }
    for (x = 0; x[x]; x++)
        if (*x == x[x])
            return x;
    return x;
}
</source>
<source file="examples/monit-4.2/util.c.ifdefed" startline="1648" endline="1659">
static char x (char *x) {
    register char x;
    x = ((x[0] >= 'A') ? ((x[0] & 0xdf) - 'A') + 10 : (x[0] - '0'));
    x *= 16;
    x += (x[1] >= 'A' ? ((x[1] & 0xdf) - 'A') + 10 : (x[1] - '0'));
    return (x);
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="128" endline="157">
void x () {
    Service_T x;
    x x, x;
    if (!x ())
        x ("Update of loadavg has failed!\n");
    if (x.x)
        x ();
    for (x = x; x; x = x->x) {
        if (x->x)
            continue;
        x (x -> x)
        x (& x, & x);
        if (x->x && !x (x) && !x (x))
            x->x (x);
        x (& x);
        END_LOCK;
    }
    if (x.x)
        x ();
    x ();
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="164" endline="252">
int x (Service_T x) {
    x x = -1;
    Port_T x = x;
    Resource_T x = x;
    char x [x] = {0};
    if (!(x = x (x))) {
        x (x -> x, 0, sizeof * (x -> x));
        x (x, x, "Event: Process '%s' is not running.\n", x -> x);
        return x;
    }
    else {
        x ("'%s' is running with pid %d\n", x -> x, (int) x);
    }
    if (x.x) {
        if (x (x, x, x, x)) {
            if (!x (x, x)) {
                x (x, x, "Event: %s\n", x);
            }
            else {
                x ("'%s' check_process_state() passed.\n", x -> x);
            }
            for (x = x->x; x; x = x->x) {
                if (!x (x, x, x)) {
                    x->x = 0;
                    if (!x->x) {
                        x->x = x;
                        x->x = x;
                        if (!x (x->x, x, x, "resource", x)) {
                            x (x);
                            return x;
                        }
                    }
                }
                else {
                    x->x = x;
                }
            }
        }
        else {
            x ("'%s' failed to get service data\n", x -> x);
        }
    }
    for (x = x->x; x; x = x->x) {
        if (!x (x, x, x)) {
            if (!x->x) {
                x->x = x;
                x->x = x;
                if (!x (x->x, x, x, "connection", x)) {
                    return x;
                }
            }
        }
        else {
            x->x = x;
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="259" endline="355">
int x (Service_T x) {
    Device_T x;
    struct x x;
    char x [x] = {0};
    if (x (x->x, &x) != 0) {
        if (!x->x) {
            x (x, x, "Event: device '%s' doesn't exist\n", x -> x);
            x->x = x;
        }
        return x;
    }
    else {
        x->x = x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "permission", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "uid", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "gid", x))
            return x;
    }
    if (!x (x->x, x->x)) {
        if (!x->x->x) {
            x (x, x, "Event: unable to read device '%s' state\n", x -> x);
            x->x->x = x;
        }
        return x;
    }
    else {
        x->x->x = x;
        x ("'%s' succeeded getting device statistic for %s\n", x -> x, x -> x);
    }
    if (x->x) {
        for (x = x->x; x; x = x->x) {
            if (!x (x, x, x)) {
                if (!x->x) {
                    x->x = x;
                    x->x = x;
                    if (!x (x->x, x, x, "device", x)) {
                        return x;
                    }
                }
            }
            else {
                x->x = x;
            }
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="362" endline="460">
int x (Service_T x) {
    Size_T x;
    struct x x;
    char x [x] = {0};
    if (x (x->x, &x) != 0) {
        if (!x->x) {
            x (x, x, "Event: file '%s' doesn't exist\n", x -> x);
            x->x = x;
        }
        return x;
    }
    else {
        x->x = x;
    }
    if (!x (x.x)) {
        if (!x->x) {
            x (x, x, "Event: '%s' is not regular file\n", x -> x);
            x->x = x;
        }
        return x;
    }
    else {
        x->x = x;
    }
    if (x (x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "checksum", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "permission", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "uid", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "gid", x))
            return x;
    }
    for (x = x->x; x; x = x->x) {
        if (!x (x, x, (unsigned long) x.x, x)) {
            if (!x->x) {
                x->x = x;
                x->x = x;
                if (!x (x->x, x, x, "size", x)) {
                    return x;
                }
            }
        }
        else {
            x->x = x;
        }
    }
    if (!x (x))
        return x;
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="467" endline="530">
int x (Service_T x) {
    struct x x;
    char x [x] = {0};
    if (x (x->x, &x) != 0) {
        if (!x->x) {
            x (x, x, "Event: directory '%s' doesn't exist\n", x -> x);
            x->x = x;
        }
        return x;
    }
    else {
        x->x = x;
    }
    if (!x (x.x)) {
        if (!x->x) {
            x (x, x, "Event: '%s' is not directory\n", x -> x);
            x->x = x;
        }
        return x;
    }
    else {
        x->x = x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "permission", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "uid", x))
            return x;
    }
    if (x (x, x.x, x)) {
        x->x->x = x;
        if (!x (x->x->x, x, x, "gid", x))
            return x;
    }
    if (!x (x))
        return x;
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="538" endline="606">
int x (Service_T x) {
    Port_T x = x;
    char x [x] = {0};
    Icmp_T x, x = x;
    for (x = x->x; x; x = x->x) {
        if (!x (x, x, x)) {
            x->x = x;
            x = x;
            if (!x->x) {
                x->x = x;
                x->x = x;
                if (!x (x->x, x, x, "icmp", x)) {
                    return x;
                }
            }
        }
        else {
            x->x = x;
            x->x = x;
        }
    }
    if (x && !x->x) {
        x ("'%s' icmp ping failed, skipping any port connection tests\n", x -> x);
        return x;
    }
    for (x = x->x; x; x = x->x) {
        if (!x (x, x, x)) {
            x->x = x;
            if (!x->x) {
                x->x = x;
                x->x = x;
                if (!x (x->x, x, x, "connection", x)) {
                    return x;
                }
            }
        }
        else {
            x->x = x;
            x->x = x;
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="616" endline="654">
static int x (int x, Service_T x, char *x, char *x, int x) {
    ASSERT (x);
    ASSERT (x);
    ASSERT (x);
    switch (x) {
    case x :
        x (x, x, "Event: %s\n", x);
        break;
    case x :
        x (x, x, "Event: %s\n", x);
        return x;
    case x :
        x (x, x, "Event: %s\n", x);
        return x;
    case x :
        x (x, x, "Event: %s\n", x);
        break;
    case x :
        x (x, x, "Event: %s\n", x);
        x (x, x, "Event: %s\n", x);
        return x;
    default :
        x ("'%s' error -- unknown failure action: [%s]\n", x->x, x);
        break;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="661" endline="714">
static int x (Service_T x, Port_T x, char *x) {
    Socket_T x;
    volatile int x = x;
    x (x && x);
    x = x (x);
    if (!x) {
        x (x, x, "'%s' failed, cannot open a connection to %s", x -> x, x -> x);
        x = x;
        goto x;
    }
    else {
        x ("'%s' succeeded connecting to %s\n", x -> x, x -> x);
    }
    if (!x (x)) {
        x (x, x, "'%s' failed, the socket at %s is not ready for i|o -- %s", x -> x, x -> x, x);
        x = x;
        goto x;
    }
    if (!x->x->x (x)) {
        x (x, x, "'%s' failed protocol test [%s] at %s.", x -> x, x -> x -> x, x -> x);
        x = x;
        goto x;
    }
    else {
        x ("'%s' succeeded testing protocol [%s] at %s\n", x -> x, x -> x -> x, x -> x);
    }
x :
    if (x)
        x (&x);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="720" endline="737">
static int x (Service_T x, Icmp_T x, char *x) {
    if (x->x == x && !x (x->x, x->x)) {
        x (x, x, "'%s' failed ICMP test [%s]", x -> x, x [x -> x]);
        return x;
    }
    x ("'%s' succeeded testing ICMP [%s]\n", x -> x, x [x -> x]);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="744" endline="771">
static int x (Service_T x, char *x) {
    ProcInfo_T x;
    ASSERT (x);
    x = x->x;
    if (x->x & x) {
        x (x, x, "process with pid %d is a zombie", x -> x);
        x (x.x)
        x->x = x;
        END_LOCK;
        return x;
    }
    else {
        x ("'%s' zombie check passed [status_flag=%04x]\n", x -> x, x -> x);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="777" endline="789">
static void x (Service_T x) {
    Resource_T x;
    ASSERT (x);
    for (x = x->x; x; x = x->x) {
        x->x = 0;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="796" endline="963">
static int x (Service_T x, Resource_T x, char *x) {
    ProcInfo_T x;
    int x = x;
    ASSERT (x);
    ASSERT (x);
    x = x->x;
    switch (x->x) {
    case x :
        if (x (x->x, x->x, x->x)) {
            x (x, x, "cpu usage of %.1f%% matches resource limit [cpu usage%s%.1f%%]", x -> x / 10.0, x [x -> x], x -> x / 10.0);
            x = x;
        }
        else {
            x ("'%s' cpu usage check passed [current cpu usage=%.1f%%]\n", x -> x, x -> x / 10.0);
        }
        break;
    case x :
        if (x (x->x, x->x, x->x)) {
            x (x, x, "mem usage of %.1f%% matches resource limit [mem usage%s%.1f%%]", x -> x / 10.0, x [x -> x], x -> x / 10.0);
            x = x;
        }
        else {
            x ("'%s' mem usage check passed [current mem usage=%.1f%%]\n", x -> x, x -> x / 10.0);
        }
        break;
    case x :
        if (x (x->x, x->x, x->x)) {
            x (x, x, "mem amount of %ldkB matches resource limit [mem amount%s%ldkB]", x -> x, x [x -> x], x -> x);
            x = x;
        }
        else {
            x ("'%s' mem amount check passed [current mem amount=%ldkB]\n", x -> x, x -> x);
        }
        break;
    case x :
        if (x (x->x, (int) (x.x[0] * 10.0), x->x)) {
            x (x, x, "loadavg(1min) of %.1f matches resource limit " "[loadavg(1min)%s%.1f]", x.x [0], x [x -> x], x -> x / 10.0);
            x = x;
        }
        else {
            x ("'%s' loadavg(1min) check passed [current loadavg(1min)=%.1f]\n", x -> x, x.x [0]);
        }
        break;
    case x :
        if (x (x->x, (int) (x.x[1] * 10.0), x->x)) {
            x (x, x, "loadavg(5min) of %.1f matches resource limit " "[loadavg(5min)%s%.1f]", x.x [1], x [x -> x], x -> x / 10.0);
            x = x;
        }
        else {
            x ("'%s' loadavg(5min) check passed [current loadavg(5min)=%.1f]\n", x -> x, x.x [1]);
        }
        break;
    case x :
        if (x (x->x, (int) (x.x[2] * 10.0), x->x)) {
            x (x, x, "loadavg(15min) of %.1f matches resource limit " "[loadavg(15min)%s%.1f]", x.x [2], x [x -> x], x -> x / 10.0);
            x = x;
        }
        else {
            x ("'%s' loadavg(15min) check passed " "[current loadavg(15min)=%.1f]\n", x -> x, x.x [2]);
        }
        break;
    case x :
        if (x (x->x, x->x, x->x)) {
            x (x, x, "children of %i matches resource limit [children%s%ld]", x -> x, x [x -> x], x -> x);
            x = x;
        }
        else {
            x ("'%s' children check passed [current children=%i]\n", x -> x, x -> x);
        }
        break;
    case x :
        if (x (x->x, x->x, x->x)) {
            x (x, x, "total mem amount of %ldkB matches resource limit" " [total mem amount%s%ldkB]", x -> x, x [x -> x], x -> x);
            x = x;
        }
        else {
            x ("'%s' total mem amount check passed " "[current total mem amount=%ldkB]\n", x -> x, x -> x);
        }
        break;
    default :
        x ("'%s' error -- unknown resource ID: [%d]\n", x->x, x->x);
    }
    if (x && x->x > 0) {
        x->x--;
    }
    else if (!x) {
        x->x++;
    }
    if (x->x >= x->x) {
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="969" endline="1010">
static int x (Service_T x) {
    ASSERT (x);
    if (!x->x) {
        return x;
    }
    if (x->x > 0) {
        x->x++;
    }
    if (x->x >= x->x && x->x <= x->x) {
        x (x, x, "Service '%s' timed out and will not be checked anymore.\n", x -> x);
        return x;
    }
    if (x->x > x->x) {
        x->x = 0;
        x->x = 0;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1017" endline="1035">
static int x (Service_T x) {
    ASSERT (x);
    if (!x->x) {
        return x;
    }
    if (++x->x < x->x) {
        return x;
    }
    x->x = 0;
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1044" endline="1066">
static int x (Service_T x, char *x) {
    ASSERT (x);
    if (!x->x)
        return x;
    if (!x (x->x, x->x->x, x->x->x)) {
        x (x, x, "checksum test failed for %s", x -> x);
        x (x -> x -> x);
        x->x->x = x (x->x, x->x->x);
        return x;
    }
    x ("'%s' has valid checksums\n", x -> x);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1075" endline="1097">
static int x (Service_T x, x x, char *x) {
    ASSERT (x);
    if (!x->x)
        return x;
    if ((x & 07777) != x->x->x) {
        x (x, x, "permission test failed for %s -- current permission is %o", x -> x, x & 07777);
        x->x->x = (x & 07777);
        return x;
    }
    x ("'%s' file permission check passed [current permission=%o]\n", x -> x, x & 07777);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1106" endline="1128">
static int x (Service_T x, x x, char *x) {
    ASSERT (x);
    if (!x->x)
        return x;
    if (x != x->x->x) {
        x (x, x, "uid test failed for %s -- current uid is %d", x -> x, (int) x);
        x->x->x = x;
        return x;
    }
    x ("'%s' device uid check passed [current uid=%d]\n", x -> x, (int) x);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1137" endline="1159">
static int x (Service_T x, x x, char *x) {
    ASSERT (x);
    if (!x->x)
        return x;
    if (x != x->x->x) {
        x (x, x, "gid test failed for %s -- current gid is %d", x -> x, (int) x);
        x->x->x = x;
        return x;
    }
    x ("'%s' device gid check passed [current gid=%d]\n", x -> x, (int) x);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1166" endline="1189">
static int x (Service_T x) {
    Timestamp_T x;
    char x [x];
    for (x = x->x; x; x = x->x) {
        if (!x (x, x, x)) {
            x->x = x;
            if (!x (x->x, x, x, "timestamp", x)) {
                return x;
            }
        }
    }
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1195" endline="1248">
static int x (Service_T x, Timestamp_T x, char *x) {
    x x;
    x x;
    ASSERT (x);
    ASSERT (x);
    if ((int) x (&x) == -1) {
        x (x, x, "can't get actual time");
        return x;
    }
    if (!(x = x (x->x, x | x))) {
        x (x, x, "can't get timestamp for %s", x -> x);
        return x;
    }
    if (x->x) {
        if (x->x != x) {
            x (x, x, "timestamp was changed for %s", x -> x);
            x->x = x;
            return x;
        }
    }
    else {
        if (x (x->x, (int) (x - x), x->x)) {
            if (!x->x) {
                x (x, x, "timestamp test failed for %s", x -> x);
                x->x = x;
                return x;
            }
        }
        else {
            x->x = x;
        }
    }
    x ("'%s' timestamp test passed for %s\n", x -> x, x -> x);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1254" endline="1288">
static int x (Service_T x, Size_T x, unsigned long x, char *x) {
    ASSERT (x);
    ASSERT (x);
    if (x->x) {
        if (x->x != x) {
            x (x, x, "size was changed for %s", x -> x);
            x->x = x;
            return x;
        }
    }
    else {
        if (x (x->x, x, x->x)) {
            x (x, x, "size test failed for %s -- current size is %lu B", x -> x, x);
            return x;
        }
    }
    x ("'%s' file size check passed [current size=%lu B]\n", x -> x, x);
    return x;
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1295" endline="1394">
static int x (Service_T x, Device_T x, char *x) {
    ASSERT (x);
    ASSERT (x);
    if ((x->x < 0) && (x->x < 0)) {
        x ("'%s' error: device limit not set\n", x -> x);
        return x;
    }
    switch (x->x) {
    case x :
        if (x->x->x <= 0) {
            x ("'%s' filesystem doesn't support inodes\n", x -> x);
            return x;
        }
        if (x->x >= 0) {
            if (x (x->x, 100 * (x->x->x - x->x->x) / x->x->x, x->x)) {
                x (x, x, "inode usage %ld%% matches resource limit [inode usage%s%d%%]", 100 * (x -> x -> x - x -> x -> x) / x -> x -> x, x [x -> x], x -> x);
                return x;
            }
        }
        else {
            if (x (x->x, x->x->x - x->x->x, x->x)) {
                x (x, x, "inode usage %ld matches resource limit [inode usage%s%ld]", x -> x -> x - x -> x -> x, x [x -> x], x -> x);
                return x;
            }
        }
        x ("'%s' inode usage check passed [current inode usage=%.1f%%]\n", x -> x, (float) 100 * (x -> x -> x - x -> x -> x) / x -> x -> x);
        return x;
    case x :
        if (x->x >= 0) {
            if (x (x->x, 100 * (x->x->x - x->x->x) / x->x->x, x->x)) {
                x (x, x, "space usage %ld%% matches resource limit [space usage%s%d%%]", 100 * (x -> x -> x - x -> x -> x) / x -> x -> x, x [x -> x], x -> x);
                return x;
            }
        }
        else {
            if (x (x->x, x->x->x - x->x->x, x->x)) {
                x (x, x, "space usage %ld blocks matches resource limit [space usage%s%ld blocks]", x -> x -> x - x -> x -> x, x [x -> x], x -> x);
                return x;
            }
        }
        x ("'%s' space usage check passed [current space usage=%.1f%%]\n", x -> x, (float) 100 * (x -> x -> x - x -> x -> x) / x -> x -> x);
        return x;
    default :
        x ("'%s' error -- unknown resource type: [%d]\n", x->x, x->x);
        return x;
    }
}
</source>
<source file="examples/monit-4.2/validate.c.ifdefed" startline="1401" endline="1429">
static int x (int x, int x, int x) {
    switch (x) {
    case x :
        if (x > x)
            return x;
        break;
    case x :
        if (x < x)
            return x;
        break;
    case x :
        if (x == x)
            return x;
        break;
    case x :
        if (x != x)
            return x;
        break;
    default :
        x ("Unknown comparison operator\n");
        return x;
    }
    return x;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="60" endline="90">
void *x (int x) {
    void *x;
    x = (void *) x (x);
    if (x == x) {
        x ("%s: malloc failed -- %s\n", x, x);
        x (1);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="92" endline="108">
void *x (long x, long x) {
    void *x;
    x = (void *) x (x, x);
    if (x == x) {
        x ("%s: malloc failed -- %s\n", x, x);
        x (1);
    }
    return x;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="111" endline="123">
char *x (const char *x) {
    char *x;
    ASSERT (x);
    x = (char *) x (x (x) +1);
    x (x, x);
    return x;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="126" endline="139">
char *x (const char *x, long x) {
    char *x;
    ASSERT (x);
    x = x (x +1);
    x (x, x, x);
    x[x] = 0;
    return x;
}
</source>
<source file="examples/monit-4.2/xmalloc.c.ifdefed" startline="142" endline="163">
void *x (void *x, long x) {
    if (x == 0) {
        return x (x);
    }
    x = x (x, x);
    if (x == x) {
        x ("%s: realloc failed -- %s\n", x, x);
        x (1);
    }
    return x;
}
</source>
