<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="89" endline="91">
public DrawApplication () {
    this ("JHotDraw");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="96" endline="100">
public DrawApplication (String title) {
    super (title);
    setApplicationName (title);
    winCount ++;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="108" endline="110">
protected DrawApplication createApplication () {
    return new DrawApplication ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="116" endline="128">
public void newView () {
    if (view () == null) {
        return;
    }
    DrawApplication window = createApplication ();
    window.open (view ());
    if (view ().drawing ().getTitle () != null) {
        window.setDrawingTitle (view ().drawing ().getTitle () + " (View)");
    } else {
        window.setDrawingTitle (getDefaultDrawingTitle () + " (View)");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="134" endline="142">
public void newWindow (Drawing initialDrawing) {
    DrawApplication window = createApplication ();
    if (initialDrawing == null) {
        window.open ();
    } else {
        window.open (window.createDrawingView (initialDrawing));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="144" endline="146">
public final void newWindow () {
    newWindow (createDrawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="150" endline="152">
public void open () {
    open (createInitialDrawingView ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="157" endline="228">
protected void open (final DrawingView newDrawingView) {
    getVersionControlStrategy ().assertCompatibleVersion ();
    setUndoManager (new UndoManager ());
    setIconkit (createIconkit ());
    getContentPane ().setLayout (new BorderLayout ());
    setStatusLine (createStatusLine ());
    getContentPane ().add (getStatusLine (), BorderLayout.SOUTH);
    setTool (new NullTool (this), "");
    setView (newDrawingView);
    JToolBar tools = createToolPalette ();
    createTools (tools);
    JPanel activePanel = new JPanel ();
    activePanel.setAlignmentX (LEFT_ALIGNMENT);
    activePanel.setAlignmentY (TOP_ALIGNMENT);
    activePanel.setLayout (new BorderLayout ());
    activePanel.add (tools, BorderLayout.NORTH);
    setDesktopListener (createDesktopListener ());
    setDesktop (createDesktop ());
    activePanel.add ((Component) getDesktop (), BorderLayout.CENTER);
    getContentPane ().add (activePanel, BorderLayout.CENTER);
    JMenuBar mb = new JMenuBar ();
    createMenus (mb);
    setJMenuBar (mb);
    Dimension d = defaultSize ();
    if (d.width > mb.getPreferredSize ().width) {
        setSize (d.width, d.height);
    } else {
        setSize (mb.getPreferredSize ().width, d.height);
    }
    addListeners ();
    setStorageFormatManager (createStorageFormatManager ());
    Runnable r = new Runnable () {
        public void run () {
            if (newDrawingView.isInteractive ()) {
                getDesktop ().addToDesktop (newDrawingView, Desktop.PRIMARY);
            }
            toolDone ();
        }}

    ;
    if (java.awt.EventQueue.isDispatchThread () == false) {
        try {
            java.awt.EventQueue.invokeAndWait (r);
        } catch (java.lang.InterruptedException ie) {
            System.err.println (ie.getMessage ());
            exit ();
        } catch (java.lang.reflect.InvocationTargetException ite) {
            System.err.println (ite.getMessage ());
            exit ();
        }
    } else {
        r.run ();
    }
    setVisible (true);
    toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="201" endline="206">
public void run () {
    if (newDrawingView.isInteractive ()) {
        getDesktop ().addToDesktop (newDrawingView, Desktop.PRIMARY);
    }
    toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="233" endline="241">
protected void addListeners () {
    addWindowListener (new WindowAdapter () {
        public void windowClosing (WindowEvent event) {
            exit ();
        }}

    );
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="236" endline="238">
public void windowClosing (WindowEvent event) {
    exit ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="247" endline="253">
protected void createMenus (JMenuBar mb) {
    addMenuIfPossible (mb, createFileMenu ());
    addMenuIfPossible (mb, createEditMenu ());
    addMenuIfPossible (mb, createAlignmentMenu ());
    addMenuIfPossible (mb, createAttributesMenu ());
    addMenuIfPossible (mb, createDebugMenu ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="255" endline="259">
protected void addMenuIfPossible (JMenuBar mb, JMenu newMenu) {
    if (newMenu != null) {
        mb.add (newMenu);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="265" endline="304">
protected JMenu createFileMenu () {
    CommandMenu menu = new CommandMenu ("File");
    Command cmd = new AbstractCommand ("New", this, false) {
        public void execute () {
            promptNew ();
        }}

    ;
    menu.add (cmd, new MenuShortcut ('n'));
    cmd = new AbstractCommand ("Open...", this, false) {
        public void execute () {
            promptOpen ();
        }}

    ;
    menu.add (cmd, new MenuShortcut ('o'));
    cmd = new AbstractCommand ("Save As...", this, true) {
        public void execute () {
            promptSaveAs ();
        }}

    ;
    menu.add (cmd, new MenuShortcut ('s'));
    menu.addSeparator ();
    cmd = new AbstractCommand ("Print...", this, true) {
        public void execute () {
            print ();
        }}

    ;
    menu.add (cmd, new MenuShortcut ('p'));
    menu.addSeparator ();
    cmd = new AbstractCommand ("Exit", this, true) {
        public void execute () {
            exit ();
        }}

    ;
    menu.add (cmd);
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="268" endline="270">
public void execute () {
    promptNew ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="275" endline="277">
public void execute () {
    promptOpen ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="282" endline="284">
public void execute () {
    promptSaveAs ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="290" endline="292">
public void execute () {
    print ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="298" endline="300">
public void execute () {
    exit ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="310" endline="334">
protected JMenu createEditMenu () {
    CommandMenu menu = new CommandMenu ("Edit");
    menu.add (new UndoableCommand (new SelectAllCommand ("Select All", this)), new MenuShortcut ('a'));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new CutCommand ("Cut", this)), new MenuShortcut ('x'));
    menu.add (new CopyCommand ("Copy", this), new MenuShortcut ('c'));
    menu.add (new UndoableCommand (new PasteCommand ("Paste", this)), new MenuShortcut ('v'));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new DuplicateCommand ("Duplicate", this)), new MenuShortcut ('d'));
    menu.add (new UndoableCommand (new DeleteCommand ("Delete", this)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new GroupCommand ("Group", this)));
    menu.add (new UndoableCommand (new UngroupCommand ("Ungroup", this)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new SendToBackCommand ("Send to Back", this)));
    menu.add (new UndoableCommand (new BringToFrontCommand ("Bring to Front", this)));
    menu.addSeparator ();
    menu.add (new UndoCommand ("Undo Command", this));
    menu.add (new RedoCommand ("Redo Command", this));
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="340" endline="358">
protected JMenu createAlignmentMenu () {
    CommandMenu menu = new CommandMenu ("Align");
    menu.addCheckItem (new ToggleGridCommand ("Toggle Snap to Grid", this, new Point (4, 4)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.LEFTS, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.CENTERS, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.RIGHTS, this)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.TOPS, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.MIDDLES, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.BOTTOMS, this)));
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="364" endline="381">
protected JMenu createDebugMenu () {
    CommandMenu menu = new CommandMenu ("Debug");
    Command cmd = new AbstractCommand ("Simple Update", this) {
        public void execute () {
            this.view ().setDisplayUpdate (new SimpleUpdateStrategy ());
        }}

    ;
    menu.add (cmd);
    cmd = new AbstractCommand ("Buffered Update", this) {
        public void execute () {
            this.view ().setDisplayUpdate (new BufferedUpdateStrategy ());
        }}

    ;
    menu.add (cmd);
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="368" endline="370">
public void execute () {
    this.view ().setDisplayUpdate (new SimpleUpdateStrategy ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="375" endline="377">
public void execute () {
    this.view ().setDisplayUpdate (new BufferedUpdateStrategy ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="387" endline="398">
protected JMenu createAttributesMenu () {
    JMenu menu = new JMenu ("Attributes");
    menu.add (createColorMenu ("Fill Color", FigureAttributeConstant.FILL_COLOR));
    menu.add (createColorMenu ("Pen Color", FigureAttributeConstant.FRAME_COLOR));
    menu.add (createArrowMenu ());
    menu.addSeparator ();
    menu.add (createFontMenu ());
    menu.add (createFontSizeMenu ());
    menu.add (createFontStyleMenu ());
    menu.add (createColorMenu ("Text Color", FigureAttributeConstant.TEXT_COLOR));
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="403" endline="417">
protected JMenu createColorMenu (String title, FigureAttributeConstant attribute) {
    CommandMenu menu = new CommandMenu (title);
    for (int i = 0;
    i < ColorMap.size (); i ++) menu.add (new UndoableCommand (new ChangeAttributeCommand (ColorMap.name (i), attribute, ColorMap.color (i), this)));

    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="422" endline="434">
protected JMenu createArrowMenu () {
    FigureAttributeConstant arrowMode = FigureAttributeConstant.ARROW_MODE;
    CommandMenu menu = new CommandMenu ("Arrow");
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("none", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_NONE), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("at Start", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_START), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("at End", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_END), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("at Both", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_BOTH), this)));
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="440" endline="448">
protected JMenu createFontMenu () {
    CommandMenu menu = new CommandMenu ("Font");
    String fonts [] = Toolkit.getDefaultToolkit ().getFontList ();
    for (int i = 0;
    i < fonts.length; i ++) {
        menu.add (new UndoableCommand (new ChangeAttributeCommand (fonts [i], FigureAttributeConstant.FONT_NAME, fonts [i], this)));
    }
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="453" endline="463">
protected JMenu createFontStyleMenu () {
    FigureAttributeConstant fontStyle = FigureAttributeConstant.FONT_STYLE;
    CommandMenu menu = new CommandMenu ("Font Style");
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("Plain", fontStyle, new Integer (Font.PLAIN), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("Italic", fontStyle, new Integer (Font.ITALIC), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("Bold", fontStyle, new Integer (Font.BOLD), this)));
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="468" endline="484">
protected JMenu createFontSizeMenu () {
    CommandMenu menu = new CommandMenu ("Font Size");
    int sizes [] = {9, 10, 12, 14, 18, 24, 36, 48, 72};
    for (int i = 0;
    i < sizes.length; i ++) {
        menu.add (new UndoableCommand (new ChangeAttributeCommand (Integer.toString (sizes [i]), FigureAttributeConstant.FONT_SIZE, new Integer (sizes [i]), this)));
    }
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="489" endline="504">
public JMenu createLookAndFeelMenu () {
    CommandMenu menu = new CommandMenu ("Look'n'Feel");
    UIManager.LookAndFeelInfo [] lafs = UIManager.getInstalledLookAndFeels ();
    for (int i = 0;
    i < lafs.length; i ++) {
        final String lnfClassName = lafs [i].getClassName ();
        Command cmd = new AbstractCommand (lafs [i].getName (), this) {
            public void execute () {
                newLookAndFeel (lnfClassName);
            }}

        ;
        menu.add (cmd);
    }
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="497" endline="499">
public void execute () {
    newLookAndFeel (lnfClassName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="509" endline="515">
protected JToolBar createToolPalette () {
    JToolBar palette = new JToolBar ();
    palette.setBackground (Color.lightGray);
    return palette;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="523" endline="526">
protected void createTools (JToolBar palette) {
    setDefaultTool (createDefaultTool ());
    palette.add (fDefaultToolButton);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="532" endline="534">
protected Tool createSelectionTool () {
    return new SelectionTool (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="536" endline="538">
protected Tool createDefaultTool () {
    return createSelectionTool ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="540" endline="547">
protected void setDefaultTool (Tool newDefaultTool) {
    if (newDefaultTool != null) {
        fDefaultToolButton = createToolButton (IMAGES + "SEL", "Selection Tool", newDefaultTool);
    } else {
        fDefaultToolButton = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="549" endline="556">
public Tool getDefaultTool () {
    if (fDefaultToolButton != null) {
        return fDefaultToolButton.tool ();
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="561" endline="563">
protected ToolButton createToolButton (String iconName, String toolName, Tool tool) {
    return new ToolButton (this, iconName, toolName, tool);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="571" endline="575">
protected DrawingView createDrawingView () {
    DrawingView createdDrawingView = createDrawingView (createDrawing ());
    createdDrawingView.drawing ().setTitle (getDefaultDrawingTitle ());
    return createdDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="577" endline="584">
protected DrawingView createDrawingView (Drawing newDrawing) {
    Dimension d = getDrawingViewSize ();
    DrawingView newDrawingView = new StandardDrawingView (this, d.width, d.height);
    newDrawingView.setDrawing (newDrawing);
    return newDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="596" endline="598">
protected DrawingView createInitialDrawingView () {
    return createDrawingView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="603" endline="605">
protected Dimension getDrawingViewSize () {
    return new Dimension (800, 800);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="613" endline="615">
protected Drawing createDrawing () {
    return new StandardDrawing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="617" endline="620">
protected Desktop createDesktop () {
    return new JPanelDesktop (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="622" endline="625">
protected void setDesktop (Desktop newDesktop) {
    newDesktop.addDesktopListener (getDesktopListener ());
    fDesktop = newDesktop;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="631" endline="633">
public Desktop getDesktop () {
    return fDesktop;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="640" endline="647">
public StorageFormatManager createStorageFormatManager () {
    StorageFormatManager storageFormatManager = new StorageFormatManager ();
    storageFormatManager.setDefaultStorageFormat (new StandardStorageFormat ());
    storageFormatManager.addStorageFormat (storageFormatManager.getDefaultStorageFormat ());
    storageFormatManager.addStorageFormat (new SerializationStorageFormat ());
    return storageFormatManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="653" endline="655">
protected final void setStorageFormatManager (StorageFormatManager newStorageFormatManager) {
    fStorageFormatManager = newStorageFormatManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="661" endline="663">
public StorageFormatManager getStorageFormatManager () {
    return fStorageFormatManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="668" endline="670">
protected Dimension defaultSize () {
    return new Dimension (600, 450);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="675" endline="680">
protected JTextField createStatusLine () {
    JTextField field = new JTextField ("No Tool", 40);
    field.setBackground (Color.white);
    field.setEditable (false);
    return field;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="682" endline="684">
private void setStatusLine (JTextField newStatusLine) {
    fStatusLine = newStatusLine;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="686" endline="688">
protected JTextField getStatusLine () {
    return fStatusLine;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="694" endline="698">
public void paletteUserSelected (PaletteButton paletteButton) {
    ToolButton toolButton = (ToolButton) paletteButton;
    setTool (toolButton.tool (), toolButton.name ());
    setSelected (toolButton);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="704" endline="712">
public void paletteUserOver (PaletteButton paletteButton, boolean inside) {
    ToolButton toolButton = (ToolButton) paletteButton;
    if (inside) {
        showStatus (toolButton.name ());
    } else if (fSelectedToolButton != null) {
        showStatus (fSelectedToolButton.name ());
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="718" endline="720">
public Tool tool () {
    return fTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="727" endline="729">
public DrawingView view () {
    return fView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="731" endline="735">
protected void setView (DrawingView newView) {
    DrawingView oldView = fView;
    fView = newView;
    fireViewSelectionChangedEvent (oldView, view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="737" endline="739">
public DrawingView [] views () {
    return new DrawingView [] {view ()};
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="745" endline="751">
public void toolDone () {
    System.out.println ("ToolDone");
    if (fDefaultToolButton != null) {
        setTool (fDefaultToolButton.tool (), fDefaultToolButton.name ());
        setSelected (fDefaultToolButton);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="762" endline="764">
public void figureSelectionChanged (DrawingView view) {
    checkCommandMenus ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="766" endline="775">
protected void checkCommandMenus () {
    JMenuBar mb = getJMenuBar ();
    for (int x = 0;
    x < mb.getMenuCount (); x ++) {
        JMenu jm = mb.getMenu (x);
        if (CommandMenu.class.isInstance (jm)) {
            checkCommandMenu ((CommandMenu) jm);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="777" endline="785">
protected void checkCommandMenu (CommandMenu cm) {
    cm.checkEnabled ();
    for (int y = 0;
    y < cm.getItemCount (); y ++) {
        JMenuItem jmi = cm.getItem (y);
        if (CommandMenu.class.isInstance (jmi)) {
            checkCommandMenu ((CommandMenu) jmi);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="791" endline="793">
public void addViewChangeListener (ViewChangeListener vsl) {
    listenerList.add (ViewChangeListener.class, vsl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="798" endline="800">
public void removeViewChangeListener (ViewChangeListener vsl) {
    listenerList.remove (ViewChangeListener.class, vsl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="808" endline="817">
protected void fireViewSelectionChangedEvent (DrawingView oldView, DrawingView newView) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewSelectionChanged (oldView, newView);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="819" endline="828">
protected void fireViewCreatedEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewCreated (view);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="830" endline="839">
protected void fireViewDestroyingEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewDestroying (view);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="845" endline="847">
public void showStatus (String string) {
    getStatusLine ().setText (string);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="857" endline="869">
public void setTool (Tool t, String name) {
    if ((tool () != null) && (tool ().isActive ())) {
        tool ().deactivate ();
    }
    fTool = t;
    if (tool () != null) {
        showStatus (name);
        tool ().activate ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="871" endline="879">
private void setSelected (ToolButton button) {
    if (fSelectedToolButton != null) {
        fSelectedToolButton.reset ();
    }
    fSelectedToolButton = button;
    if (fSelectedToolButton != null) {
        fSelectedToolButton.select ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="884" endline="892">
public void exit () {
    destroy ();
    setVisible (false);
    dispose ();
    winCount --;
    if (winCount == 0) {
        System.exit (0);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="898" endline="899">
protected void destroy () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="904" endline="908">
public void promptNew () {
    newWindow (createDrawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="913" endline="926">
public void promptOpen () {
    toolDone ();
    JFileChooser openDialog = createOpenFileChooser ();
    getStorageFormatManager ().registerFileFilters (openDialog);
    if (openDialog.showOpenDialog (this) == JFileChooser.APPROVE_OPTION) {
        StorageFormat foundFormat = getStorageFormatManager ().findStorageFormat (openDialog.getFileFilter ());
        if (foundFormat != null) {
            loadDrawing (foundFormat, openDialog.getSelectedFile ().getAbsolutePath ());
        } else {
            showStatus ("Not a valid file format: " + openDialog.getFileFilter ().getDescription ());
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="931" endline="947">
public void promptSaveAs () {
    if (view () != null) {
        toolDone ();
        JFileChooser saveDialog = createSaveFileChooser ();
        getStorageFormatManager ().registerFileFilters (saveDialog);
        if (saveDialog.showSaveDialog (this) == JFileChooser.APPROVE_OPTION) {
            StorageFormat foundFormat = getStorageFormatManager ().findStorageFormat (saveDialog.getFileFilter ());
            if (foundFormat != null) {
                saveDrawing (foundFormat, saveDialog.getSelectedFile ().getAbsolutePath ());
            } else {
                showStatus ("Not a valid file format: " + saveDialog.getFileFilter ().getDescription ());
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="953" endline="957">
protected JFileChooser createOpenFileChooser () {
    JFileChooser openDialog = new JFileChooser ();
    openDialog.setDialogTitle ("Open File...");
    return openDialog;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="963" endline="967">
protected JFileChooser createSaveFileChooser () {
    JFileChooser saveDialog = new JFileChooser ();
    saveDialog.setDialogTitle ("Save File...");
    return saveDialog;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="972" endline="986">
public void print () {
    tool ().deactivate ();
    PrintJob printJob = getToolkit ().getPrintJob (this, "Print Drawing", null);
    if (printJob != null) {
        Graphics pg = printJob.getGraphics ();
        if (pg != null) {
            ((StandardDrawingView) view ()).printAll (pg);
            pg.dispose ();
        }
        printJob.end ();
    }
    tool ().activate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="991" endline="1004">
protected void saveDrawing (StorageFormat storeFormat, String file) {
    if (view () == null) {
        return;
    }
    try {
        String name = storeFormat.store (file, view ().drawing ());
        view ().drawing ().setTitle (name);
        setDrawingTitle (name);
    } catch (IOException e) {
        showStatus (e.toString ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1009" endline="1023">
protected void loadDrawing (StorageFormat restoreFormat, String file) {
    try {
        Drawing restoredDrawing = restoreFormat.restore (file);
        if (restoredDrawing != null) {
            restoredDrawing.setTitle (file);
            newWindow (restoredDrawing);
        } else {
            showStatus ("Unknown file type: could not open file '" + file + "'");
        }
    } catch (IOException e) {
        showStatus ("Error: " + e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1028" endline="1036">
private void newLookAndFeel (String landf) {
    try {
        UIManager.setLookAndFeel (landf);
        SwingUtilities.updateComponentTreeUI (this);
    } catch (Exception e) {
        System.err.println (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1041" endline="1048">
protected void setDrawingTitle (String drawingTitle) {
    if (getDefaultDrawingTitle ().equals (drawingTitle)) {
        setTitle (getApplicationName ());
    } else {
        setTitle (getApplicationName () + " - " + drawingTitle);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1053" endline="1055">
protected String getDrawingTitle () {
    return view ().drawing ().getTitle ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1060" endline="1062">
public void setApplicationName (String applicationName) {
    fApplicationName = applicationName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1067" endline="1069">
public String getApplicationName () {
    return fApplicationName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1071" endline="1073">
protected void setUndoManager (UndoManager newUndoManager) {
    myUndoManager = newUndoManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1075" endline="1077">
public UndoManager getUndoManager () {
    return myUndoManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1079" endline="1081">
protected VersionControlStrategy getVersionControlStrategy () {
    return new StandardVersionControlStrategy (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1091" endline="1096">
public String [] getRequiredVersions () {
    String [] requiredVersions = new String [1];
    requiredVersions [0] = VersionManagement.getPackageVersion (DrawApplication.class.getPackage ());
    return requiredVersions;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1098" endline="1100">
public String getDefaultDrawingTitle () {
    return fgUntitled;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1102" endline="1104">
protected DesktopListener getDesktopListener () {
    return fDesktopListener;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1106" endline="1108">
protected void setDesktopListener (DesktopListener desktopPaneListener) {
    fDesktopListener = desktopPaneListener;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1110" endline="1134">
protected DesktopListener createDesktopListener () {
    return new DesktopListener () {
        public void drawingViewAdded (DesktopEvent dpe) {
            DrawingView dv = dpe.getDrawingView ();
            fireViewCreatedEvent (dv);
        } public void drawingViewRemoved (DesktopEvent dpe) {
            DrawingView dv = dpe.getDrawingView ();
            getUndoManager ().clearUndos (dv);
            getUndoManager ().clearRedos (dv);
            fireViewDestroyingEvent (dv);
            checkCommandMenus ();
        } public void drawingViewSelected (DesktopEvent dpe) {
            DrawingView dv = dpe.getDrawingView ();
            if (dv != null) {
                if (dv.drawing () != null) dv.unfreezeView ();

            }
            setView (dv);
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1112" endline="1115">
public void drawingViewAdded (DesktopEvent dpe) {
    DrawingView dv = dpe.getDrawingView ();
    fireViewCreatedEvent (dv);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1116" endline="1123">
public void drawingViewRemoved (DesktopEvent dpe) {
    DrawingView dv = dpe.getDrawingView ();
    getUndoManager ().clearUndos (dv);
    getUndoManager ().clearRedos (dv);
    fireViewDestroyingEvent (dv);
    checkCommandMenus ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1124" endline="1132">
public void drawingViewSelected (DesktopEvent dpe) {
    DrawingView dv = dpe.getDrawingView ();
    if (dv != null) {
        if (dv.drawing () != null) dv.unfreezeView ();

    }
    setView (dv);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1136" endline="1138">
protected Iconkit createIconkit () {
    return new Iconkit (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1140" endline="1142">
protected void setIconkit (Iconkit newIconkit) {
    fIconkit = newIconkit;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/application/DrawApplication.java" startline="1144" endline="1146">
protected Iconkit getIconkit () {
    return fIconkit;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawException.java" startline="23" endline="25">
public JHotDrawException (String msg) {
    super (msg);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawException.java" startline="27" endline="31">
public JHotDrawException (Exception nestedException) {
    this (nestedException.getLocalizedMessage ());
    setNestedException (nestedException);
    nestedException.fillInStackTrace ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawException.java" startline="33" endline="35">
protected void setNestedException (Exception newNestedException) {
    myNestedException = newNestedException;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawException.java" startline="37" endline="39">
public Exception getNestedException () {
    return myNestedException;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/DrawingChangeEvent.java" startline="29" endline="32">
public DrawingChangeEvent (Drawing source, Rectangle r) {
    super (source);
    fRectangle = r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/DrawingChangeEvent.java" startline="37" endline="39">
public Drawing getDrawing () {
    return (Drawing) getSource ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/DrawingChangeEvent.java" startline="44" endline="46">
public Rectangle getInvalidatedRectangle () {
    return fRectangle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawRuntimeException.java" startline="23" endline="25">
public JHotDrawRuntimeException (String msg) {
    super (msg);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawRuntimeException.java" startline="27" endline="31">
public JHotDrawRuntimeException (Exception nestedException) {
    this (nestedException.getLocalizedMessage ());
    setNestedException (nestedException);
    nestedException.fillInStackTrace ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawRuntimeException.java" startline="33" endline="35">
protected void setNestedException (Exception newNestedException) {
    myNestedException = newNestedException;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/JHotDrawRuntimeException.java" startline="37" endline="39">
public Exception getNestedException () {
    return myNestedException;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="60" endline="64">
private FigureAttributeConstant (String newName, int newID) {
    setName (newName);
    setID (newID);
    addConstant (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="66" endline="68">
public FigureAttributeConstant (String newName) {
    this (newName, attributeConstants.length + 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="70" endline="72">
private void setName (String newName) {
    myName = newName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="74" endline="76">
public String getName () {
    return myName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="78" endline="80">
private void setID (int newID) {
    myID = newID;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="82" endline="84">
public int getID () {
    return myID;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="86" endline="107">
public boolean equals (Object compareObject) {
    if (compareObject == null) {
        return false;
    }
    if (! (compareObject instanceof FigureAttributeConstant)) {
        return false;
    }
    FigureAttributeConstant compareAttribute = (FigureAttributeConstant) compareObject;
    if (compareAttribute.getID () != getID ()) {
        return false;
    }
    if ((compareAttribute.getName () == null) && (getName () == null)) {
        return true;
    }
    if ((compareAttribute.getName () != null) && (getName () != null)) {
        return getName ().equals (compareAttribute.getName ());
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="109" endline="111">
public int hashCode () {
    return getID ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="117" endline="131">
private static void addConstant (FigureAttributeConstant newConstant) {
    int idPos = newConstant.getID () - 1;
    if ((idPos < attributeConstants.length) && (attributeConstants [idPos] != null)) {
        throw new JHotDrawRuntimeException ("No unique FigureAttribute ID: " + newConstant.getID ());
    }
    if (idPos >= attributeConstants.length) {
        FigureAttributeConstant [] tempStrs = new FigureAttributeConstant [idPos + 1];
        System.arraycopy (attributeConstants, 0, tempStrs, 0, attributeConstants.length);
        attributeConstants = tempStrs;
    }
    attributeConstants [idPos] = newConstant;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="136" endline="144">
public static FigureAttributeConstant getConstant (String constantName) {
    for (int i = 0;
    i < attributeConstants.length; i ++) {
        FigureAttributeConstant currentAttr = getConstant (i);
        if ((currentAttr != null) && (currentAttr.getName () != null) && (currentAttr.getName ().equals (constantName))) {
            return currentAttr;
        }
    }
    return new FigureAttributeConstant (constantName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureAttributeConstant.java" startline="146" endline="148">
public static FigureAttributeConstant getConstant (int constantId) {
    return attributeConstants [constantId];
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureChangeEvent.java" startline="33" endline="36">
public FigureChangeEvent (Figure source, Rectangle r) {
    super (source);
    fRectangle = r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureChangeEvent.java" startline="38" endline="41">
public FigureChangeEvent (Figure source) {
    super (source);
    fRectangle = fgEmptyRectangle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureChangeEvent.java" startline="43" endline="46">
public FigureChangeEvent (Figure source, Rectangle r, FigureChangeEvent nestedEvent) {
    this (source, r);
    myNestedEvent = nestedEvent;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureChangeEvent.java" startline="51" endline="53">
public Figure getFigure () {
    return (Figure) getSource ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureChangeEvent.java" startline="58" endline="60">
public Rectangle getInvalidatedRectangle () {
    return fRectangle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/framework/FigureChangeEvent.java" startline="62" endline="64">
public FigureChangeEvent getNestedEvent () {
    return myNestedEvent;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/nothing/NothingApplet.java" startline="28" endline="54">
protected void createTools (JPanel palette) {
    super.createTools (palette);
    Tool tool = new TextTool (this, new TextFigure ());
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new CreationTool (this, new RectangleFigure ());
    palette.add (createToolButton (IMAGES + "RECT", "Rectangle Tool", tool));
    tool = new CreationTool (this, new RoundRectangleFigure ());
    palette.add (createToolButton (IMAGES + "RRECT", "Round Rectangle Tool", tool));
    tool = new CreationTool (this, new EllipseFigure ());
    palette.add (createToolButton (IMAGES + "ELLIPSE", "Ellipse Tool", tool));
    tool = new CreationTool (this, new LineFigure ());
    palette.add (createToolButton (IMAGES + "LINE", "Line Tool", tool));
    tool = new PolygonTool (this);
    palette.add (createToolButton (IMAGES + "POLYGON", "Polygon Tool", tool));
    tool = new ConnectionTool (this, new LineConnection ());
    palette.add (createToolButton (IMAGES + "CONN", "Connection Tool", tool));
    tool = new ConnectionTool (this, new ElbowConnection ());
    palette.add (createToolButton (IMAGES + "OCONN", "Elbow Connection Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/nothing/NothingApp.java" startline="33" endline="35">
public NothingApp () {
    super ("Nothing");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/nothing/NothingApp.java" startline="37" endline="63">
protected void createTools (JToolBar palette) {
    super.createTools (palette);
    Tool tool = new TextTool (this, new TextFigure ());
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new CreationTool (this, new RectangleFigure ());
    palette.add (createToolButton (IMAGES + "RECT", "Rectangle Tool", tool));
    tool = new CreationTool (this, new RoundRectangleFigure ());
    palette.add (createToolButton (IMAGES + "RRECT", "Round Rectangle Tool", tool));
    tool = new CreationTool (this, new EllipseFigure ());
    palette.add (createToolButton (IMAGES + "ELLIPSE", "Ellipse Tool", tool));
    tool = new CreationTool (this, new LineFigure ());
    palette.add (createToolButton (IMAGES + "LINE", "Line Tool", tool));
    tool = new PolygonTool (this);
    palette.add (createToolButton (IMAGES + "POLYGON", "Polygon Tool", tool));
    tool = new ConnectionTool (this, new LineConnection ());
    palette.add (createToolButton (IMAGES + "CONN", "Connection Tool", tool));
    tool = new ConnectionTool (this, new ElbowConnection ());
    palette.add (createToolButton (IMAGES + "OCONN", "Elbow Connection Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/nothing/NothingApp.java" startline="67" endline="70">
public static void main (String [] args) {
    DrawApplication window = new NothingApp ();
    window.open ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigureCreationTool.java" startline="25" endline="27">
public PertFigureCreationTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigureCreationTool.java" startline="32" endline="34">
protected Figure createFigure () {
    return new PertFigure ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertDependency.java" startline="33" endline="36">
public PertDependency () {
    setEndDecoration (new ArrowTip ());
    setStartDecoration (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertDependency.java" startline="38" endline="49">
public void handleConnect (Figure start, Figure end) {
    PertFigure source = (PertFigure) start;
    PertFigure target = (PertFigure) end;
    if (source.hasCycle (target)) {
        setAttribute (FigureAttributeConstant.FRAME_COLOR.getName (), Color.red);
    } else {
        target.addPreTask (source);
        source.addPostTask (target);
        source.notifyPostTasks ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertDependency.java" startline="51" endline="61">
public void handleDisconnect (Figure start, Figure end) {
    PertFigure source = (PertFigure) start;
    PertFigure target = (PertFigure) end;
    if (target != null) {
        target.removePreTask (source);
        target.updateDurations ();
    }
    if (source != null) {
        source.removePostTask (target);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertDependency.java" startline="63" endline="65">
public boolean canConnect (Figure start, Figure end) {
    return ((start instanceof PertFigure) && (end instanceof PertFigure));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertDependency.java" startline="67" endline="72">
public HandleEnumeration handles () {
    List handles = super.handles ().toList ();
    handles.set (0, new NullHandle (this, PolyLineFigure.locator (0)));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertApplication.java" startline="27" endline="29">
public PertApplication () {
    super ("PERT Editor");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertApplication.java" startline="31" endline="49">
protected void createTools (JToolBar palette) {
    super.createTools (palette);
    Tool tool = new TextTool (this, new TextFigure ());
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new PertFigureCreationTool (this);
    palette.add (createToolButton (PERTIMAGES + "PERT", "Task Tool", tool));
    tool = new ConnectionTool (this, new PertDependency ());
    palette.add (createToolButton (IMAGES + "CONN", "Dependency Tool", tool));
    tool = new CreationTool (this, new LineFigure ());
    palette.add (createToolButton (IMAGES + "Line", "Line Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertApplication.java" startline="53" endline="56">
public static void main (String [] args) {
    PertApplication pert = new PertApplication ();
    pert.open ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertApplet.java" startline="27" endline="41">
protected void createTools (JPanel palette) {
    super.createTools (palette);
    Tool tool = new TextTool (this, new TextFigure ());
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new PertFigureCreationTool (this);
    palette.add (createToolButton (PERTIMAGES + "PERT", "Task Tool", tool));
    tool = new ConnectionTool (this, new PertDependency ());
    palette.add (createToolButton (IMAGES + "CONN", "Dependency Tool", tool));
    tool = new CreationTool (this, new LineFigure ());
    palette.add (createToolButton (IMAGES + "LINE", "Line Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="39" endline="41">
public PertFigure () {
    initialize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="43" endline="51">
public int start () {
    int start = 0;
    Iterator iter = fPreTasks.iterator ();
    while (iter.hasNext ()) {
        PertFigure f = (PertFigure) iter.next ();
        start = Math.max (start, f.end ());
    }
    return start;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="53" endline="55">
public int end () {
    return asInt (2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="57" endline="59">
public int duration () {
    return asInt (1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="61" endline="63">
public void setEnd (int value) {
    setInt (2, value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="65" endline="69">
public void addPreTask (PertFigure figure) {
    if (! fPreTasks.contains (figure)) {
        fPreTasks.add (figure);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="71" endline="75">
public void addPostTask (PertFigure figure) {
    if (! fPostTasks.contains (figure)) {
        fPostTasks.add (figure);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="77" endline="79">
public void removePreTask (PertFigure figure) {
    fPreTasks.remove (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="81" endline="83">
public void removePostTask (PertFigure figure) {
    fPostTasks.remove (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="85" endline="88">
private int asInt (int figureIndex) {
    NumberTextFigure t = (NumberTextFigure) figureAt (figureIndex);
    return t.getValue ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="90" endline="93">
private String taskName () {
    TextFigure t = (TextFigure) figureAt (0);
    return t.getText ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="95" endline="98">
private void setInt (int figureIndex, int value) {
    NumberTextFigure t = (NumberTextFigure) figureAt (figureIndex);
    t.setValue (value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="100" endline="103">
protected void basicMoveBy (int x, int y) {
    fDisplayBox.translate (x, y);
    super.basicMoveBy (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="105" endline="111">
public Rectangle displayBox () {
    return new Rectangle (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="113" endline="117">
public void basicDisplayBox (Point origin, Point corner) {
    fDisplayBox = new Rectangle (origin);
    fDisplayBox.add (corner);
    layout ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="119" endline="137">
private void drawBorder (Graphics g) {
    super.draw (g);
    Rectangle r = displayBox ();
    Figure f = figureAt (0);
    Rectangle rf = f.displayBox ();
    g.setColor (Color.gray);
    g.drawLine (r.x, r.y + rf.height + 2, r.x + r.width, r.y + rf.height + 2);
    g.setColor (Color.white);
    g.drawLine (r.x, r.y + rf.height + 3, r.x + r.width, r.y + rf.height + 3);
    g.setColor (Color.white);
    g.drawLine (r.x, r.y, r.x, r.y + r.height);
    g.drawLine (r.x, r.y, r.x + r.width, r.y);
    g.setColor (Color.gray);
    g.drawLine (r.x + r.width, r.y, r.x + r.width, r.y + r.height);
    g.drawLine (r.x, r.y + r.height, r.x + r.width, r.y + r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="139" endline="142">
public void draw (Graphics g) {
    drawBorder (g);
    super.draw (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="144" endline="154">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    handles.add (new NullHandle (this, RelativeLocator.northWest ()));
    handles.add (new NullHandle (this, RelativeLocator.northEast ()));
    handles.add (new NullHandle (this, RelativeLocator.southWest ()));
    handles.add (new NullHandle (this, RelativeLocator.southEast ()));
    handles.add (new ConnectionHandle (this, RelativeLocator.east (), new PertDependency ()));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="156" endline="180">
private void initialize () {
    fPostTasks = CollectionsFactory.current ().createList ();
    fPreTasks = CollectionsFactory.current ().createList ();
    fDisplayBox = new Rectangle (0, 0, 0, 0);
    Font f = new Font ("Helvetica", Font.PLAIN, 12);
    Font fb = new Font ("Helvetica", Font.BOLD, 12);
    TextFigure name = new TextFigure ();
    name.setFont (fb);
    name.setText ("Task");
    add (name);
    NumberTextFigure duration = new NumberTextFigure ();
    duration.setValue (0);
    duration.setFont (fb);
    add (duration);
    NumberTextFigure end = new NumberTextFigure ();
    end.setValue (0);
    end.setFont (f);
    end.setReadOnly (true);
    add (end);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="182" endline="203">
private void layout () {
    Point partOrigin = new Point (fDisplayBox.x, fDisplayBox.y);
    partOrigin.translate (BORDER, BORDER);
    Dimension extent = new Dimension (0, 0);
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Dimension partExtent = f.size ();
        Point corner = new Point (partOrigin.x + partExtent.width, partOrigin.y + partExtent.height);
        f.basicDisplayBox (partOrigin, corner);
        extent.width = Math.max (extent.width, partExtent.width);
        extent.height += partExtent.height;
        partOrigin.y += partExtent.height;
    }
    fDisplayBox.width = extent.width + 2 * BORDER;
    fDisplayBox.height = extent.height + 2 * BORDER;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="205" endline="215">
private boolean needsLayout () {
    Dimension extent = new Dimension (0, 0);
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        extent.width = Math.max (extent.width, f.size ().width);
    }
    int newExtent = extent.width + 2 * BORDER;
    return newExtent != fDisplayBox.width;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="217" endline="226">
public void update (FigureChangeEvent e) {
    if (e.getFigure () == figureAt (1)) {
        updateDurations ();
    }
    if (needsLayout ()) {
        layout ();
        changed ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="228" endline="230">
public void figureChanged (FigureChangeEvent e) {
    update (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="233" endline="235">
public void figureRemoved (FigureChangeEvent e) {
    update (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="237" endline="242">
public void notifyPostTasks () {
    Iterator iter = fPostTasks.iterator ();
    while (iter.hasNext ()) {
        ((PertFigure) iter.next ()).updateDurations ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="244" endline="250">
public void updateDurations () {
    int newEnd = start () + duration ();
    if (newEnd != end ()) {
        setEnd (newEnd);
        notifyPostTasks ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="252" endline="263">
public boolean hasCycle (Figure start) {
    if (start == this) {
        return true;
    }
    Iterator iter = fPreTasks.iterator ();
    while (iter.hasNext ()) {
        if (((PertFigure) iter.next ()).hasCycle (start)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="267" endline="276">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fDisplayBox.x);
    dw.writeInt (fDisplayBox.y);
    dw.writeInt (fDisplayBox.width);
    dw.writeInt (fDisplayBox.height);
    writeTasks (dw, fPreTasks);
    writeTasks (dw, fPostTasks);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="278" endline="284">
public void writeTasks (StorableOutput dw, List l) {
    dw.writeInt (l.size ());
    Iterator iter = l.iterator ();
    while (iter.hasNext ()) {
        dw.writeStorable ((Storable) iter.next ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="286" endline="296">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fDisplayBox = new Rectangle (dr.readInt (), dr.readInt (), dr.readInt (), dr.readInt ());
    layout ();
    fPreTasks = readTasks (dr);
    fPostTasks = readTasks (dr);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="298" endline="303">
public Insets connectionInsets () {
    Rectangle r = fDisplayBox;
    int cx = r.width / 2;
    int cy = r.height / 2;
    return new Insets (cy, cx, cy, cx);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/pert/PertFigure.java" startline="305" endline="312">
public List readTasks (StorableInput dr) throws IOException {
    int size = dr.readInt ();
    List l = CollectionsFactory.current ().createList (size);
    for (int i = 0;
    i < size; i ++) {
        l.add ((Figure) dr.readStorable ());
    }
    return l;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/minimap/MiniMapApplication.java" startline="12" endline="14">
protected Desktop createDesktop () {
    return new MiniMapDesktop ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/minimap/MiniMapApplication.java" startline="16" endline="19">
public static void main (String [] args) {
    MiniMapApplication window = new MiniMapApplication ();
    window.open ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/minimap/MiniMapDesktop.java" startline="24" endline="31">
protected Component createRightComponent (DrawingView view) {
    Image image = Iconkit.instance ().registerAndLoadImage ((Component) view, imageName);
    view.add (new ImageFigure (image, imageName, new Point (0, 0)));
    view.checkDamage ();
    return super.createRightComponent (view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/minimap/MiniMapDesktop.java" startline="33" endline="47">
protected Component createLeftComponent (DrawingView view) {
    JPanel blankPanel = new JPanel ();
    MiniMapView mmv = new MiniMapView (view, (JScrollPane) getRightComponent ());
    JSplitPane leftSplitPane = new JSplitPane (JSplitPane.VERTICAL_SPLIT, blankPanel, mmv);
    leftSplitPane.setOneTouchExpandable (true);
    leftSplitPane.setDividerLocation (200);
    return leftSplitPane;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="31" endline="34">
public NodeFigure () {
    initialize ();
    fConnectors = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="36" endline="41">
public Rectangle displayBox () {
    Rectangle box = super.displayBox ();
    int d = BORDER;
    box.grow (d, d);
    return box;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="43" endline="52">
public boolean containsPoint (int x, int y) {
    if (fConnectorsVisible) {
        Rectangle r = displayBox ();
        int d = LocatorConnector.SIZE / 2;
        r.grow (d, d);
        return r.contains (x, y);
    }
    return super.containsPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="54" endline="58">
private void drawBorder (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (getFrameColor ());
    g.drawRect (r.x, r.y, r.width - 1, r.height - 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="60" endline="64">
public void draw (Graphics g) {
    super.draw (g);
    drawBorder (g);
    drawConnectors (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="66" endline="79">
public HandleEnumeration handles () {
    ConnectionFigure prototype = new LineConnection ();
    List handles = CollectionsFactory.current ().createList ();
    handles.add (new ConnectionHandle (this, RelativeLocator.east (), prototype));
    handles.add (new ConnectionHandle (this, RelativeLocator.west (), prototype));
    handles.add (new ConnectionHandle (this, RelativeLocator.south (), prototype));
    handles.add (new ConnectionHandle (this, RelativeLocator.north (), prototype));
    handles.add (new NullHandle (this, RelativeLocator.southEast ()));
    handles.add (new NullHandle (this, RelativeLocator.southWest ()));
    handles.add (new NullHandle (this, RelativeLocator.northEast ()));
    handles.add (new NullHandle (this, RelativeLocator.northWest ()));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="81" endline="88">
private void drawConnectors (Graphics g) {
    if (fConnectorsVisible) {
        Iterator iter = connectors ();
        while (iter.hasNext ()) {
            ((Connector) iter.next ()).draw (g);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="92" endline="95">
public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
    fConnectorsVisible = isVisible;
    invalidate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="99" endline="101">
public Connector connectorAt (int x, int y) {
    return findConnector (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="105" endline="110">
private Iterator connectors () {
    if (fConnectors == null) {
        createConnectors ();
    }
    return fConnectors.iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="112" endline="118">
private void createConnectors () {
    fConnectors = CollectionsFactory.current ().createList (4);
    fConnectors.add (new LocatorConnector (this, RelativeLocator.north ()));
    fConnectors.add (new LocatorConnector (this, RelativeLocator.south ()));
    fConnectors.add (new LocatorConnector (this, RelativeLocator.west ()));
    fConnectors.add (new LocatorConnector (this, RelativeLocator.east ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="120" endline="135">
private Connector findConnector (int x, int y) {
    long min = Long.MAX_VALUE;
    Connector closest = null;
    Iterator iter = connectors ();
    while (iter.hasNext ()) {
        Connector c = (Connector) iter.next ();
        Point p2 = Geom.center (c.displayBox ());
        long d = Geom.length2 (x, y, p2.x, p2.y);
        if (d < min) {
            min = d;
            closest = c;
        }
    }
    return closest;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="137" endline="142">
private void initialize () {
    setText ("node");
    Font fb = new Font ("Helvetica", Font.BOLD, 12);
    setFont (fb);
    createConnectors ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NodeFigure.java" startline="152" endline="154">
public Figure getRepresentingFigure () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NetApp.java" startline="25" endline="27">
public NetApp () {
    super ("Net");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NetApp.java" startline="29" endline="40">
protected void createTools (JToolBar palette) {
    super.createTools (palette);
    Tool tool = new TextTool (this, new NodeFigure ());
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new CreationTool (this, new NodeFigure ());
    palette.add (createToolButton (IMAGES + "RECT", "Create Org Unit", tool));
    tool = new ConnectionTool (this, new LineConnection ());
    palette.add (createToolButton (IMAGES + "CONN", "Connection Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/net/NetApp.java" startline="44" endline="47">
public static void main (String [] args) {
    DrawApplication window = new NetApp ();
    window.open ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="34" endline="34">
public AnimationDecorator () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="36" endline="40">
public AnimationDecorator (Figure figure) {
    super (figure);
    fXVelocity = 4;
    fYVelocity = 4;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="42" endline="45">
public void velocity (int xVelocity, int yVelocity) {
    fXVelocity = xVelocity;
    fYVelocity = yVelocity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="47" endline="49">
public Point velocity () {
    return new Point (fXVelocity, fYVelocity);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="51" endline="70">
public void animationStep () {
    int xSpeed = fXVelocity;
    int ySpeed = fYVelocity;
    Rectangle box = displayBox ();
    if ((box.x + box.width > 300) && (xSpeed > 0)) xSpeed = - xSpeed;

    if ((box.y + box.height > 300) && (ySpeed > 0)) ySpeed = - ySpeed;

    if ((box.x < 0) && (xSpeed < 0)) xSpeed = - xSpeed;

    if ((box.y < 0) && (ySpeed < 0)) ySpeed = - ySpeed;

    velocity (xSpeed, ySpeed);
    moveBy (xSpeed, ySpeed);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="74" endline="76">
public synchronized void basicMoveBy (int x, int y) {
    super.basicMoveBy (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="78" endline="80">
public synchronized void basicDisplayBox (Point origin, Point corner) {
    super.basicDisplayBox (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="82" endline="84">
public synchronized Rectangle displayBox () {
    return super.displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="88" endline="92">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fXVelocity);
    dw.writeInt (fYVelocity);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/AnimationDecorator.java" startline="94" endline="98">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fXVelocity = dr.readInt ();
    fYVelocity = dr.readInt ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/PatternPainter.java" startline="30" endline="32">
public PatternPainter (Image image) {
    fImage = image;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/PatternPainter.java" startline="34" endline="36">
public void draw (Graphics g, DrawingView view) {
    drawPattern (g, fImage, view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/PatternPainter.java" startline="41" endline="56">
private void drawPattern (Graphics g, Image image, DrawingView view) {
    int iwidth = image.getWidth (view);
    int iheight = image.getHeight (view);
    Dimension d = view.getSize ();
    int x = 0;
    int y = 0;
    while (y < d.height) {
        while (x < d.width) {
            g.drawImage (image, x, y, view);
            x += iwidth;
        }
        y += iheight;
        x = 0;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="33" endline="48">
public void init () {
    setUndoManager (new UndoManager ());
    getContentPane ().setLayout (new BorderLayout ());
    fView = new StandardDrawingView (this, 400, 370);
    getContentPane ().add ("Center", fView);
    setTool (new FollowURLTool (this, this));
    String filename = getParameter ("Drawing");
    if (filename != null) {
        loadDrawing (filename);
        fView.setDrawing (fDrawing);
    } else {
        showStatus ("Unable to load drawing");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="50" endline="51">
public void addViewChangeListener (ViewChangeListener vsl) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="53" endline="54">
public void removeViewChangeListener (ViewChangeListener vsl) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="56" endline="68">
private void loadDrawing (String filename) {
    try {
        URL url = new URL (getCodeBase (), filename);
        InputStream stream = url.openStream ();
        StorableInput reader = new StorableInput (stream);
        fDrawing = (Drawing) reader.readStorable ();
    } catch (IOException e) {
        fDrawing = createDrawing ();
        System.err.println ("Error when Loading: " + e);
        showStatus ("Error when Loading: " + e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="70" endline="72">
protected Drawing createDrawing () {
    return new StandardDrawing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="77" endline="79">
public DrawingView view () {
    return fView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="81" endline="83">
public DrawingView [] views () {
    return new DrawingView [] {view ()};
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="88" endline="90">
public Drawing drawing () {
    return fDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="95" endline="97">
public Tool tool () {
    return fTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="102" endline="104">
public void setTool (Tool newTool) {
    fTool = newTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="109" endline="109">
public void toolDone () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="114" endline="114">
public void figureSelectionChanged (DrawingView view) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="116" endline="118">
protected void setUndoManager (UndoManager newUndoManager) {
    myUndoManager = newUndoManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawViewer.java" startline="120" endline="122">
public UndoManager getUndoManager () {
    return myUndoManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/MySelectionTool.java" startline="25" endline="27">
public MySelectionTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/MySelectionTool.java" startline="32" endline="42">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    if (e.getClickCount () == 2) {
        Figure figure = drawing ().findFigure (e.getX (), e.getY ());
        if (figure != null) {
            inspectFigure (figure);
            return;
        }
    }
    super.mouseDown (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/MySelectionTool.java" startline="44" endline="46">
protected void inspectFigure (Figure f) {
    System.out.println ("inspect figure" + f);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="34" endline="37">
public void destroy () {
    super.destroy ();
    endAnimation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="41" endline="88">
protected void createTools (JPanel palette) {
    super.createTools (palette);
    Tool tool = new TextTool (this, new TextFigure ());
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new ConnectedTextTool (this, new TextFigure ());
    palette.add (createToolButton (IMAGES + "ATEXT", "Connected Text Tool", tool));
    tool = new URLTool (this);
    palette.add (createToolButton (IMAGES + "URL", "URL Tool", tool));
    tool = new CreationTool (this, new RectangleFigure ());
    palette.add (createToolButton (IMAGES + "RECT", "Rectangle Tool", tool));
    tool = new CreationTool (this, new RoundRectangleFigure ());
    palette.add (createToolButton (IMAGES + "RRECT", "Round Rectangle Tool", tool));
    tool = new CreationTool (this, new EllipseFigure ());
    palette.add (createToolButton (IMAGES + "ELLIPSE", "Ellipse Tool", tool));
    tool = new PolygonTool (this);
    palette.add (createToolButton (IMAGES + "POLYGON", "Polygon Tool", tool));
    tool = new CreationTool (this, new TriangleFigure ());
    palette.add (createToolButton (IMAGES + "TRIANGLE", "Triangle Tool", tool));
    tool = new CreationTool (this, new DiamondFigure ());
    palette.add (createToolButton (IMAGES + "DIAMOND", "Diamond Tool", tool));
    tool = new CreationTool (this, new LineFigure ());
    palette.add (createToolButton (IMAGES + "LINE", "Line Tool", tool));
    tool = new ConnectionTool (this, new LineConnection ());
    palette.add (createToolButton (IMAGES + "CONN", "Connection Tool", tool));
    tool = new ConnectionTool (this, new ElbowConnection ());
    palette.add (createToolButton (IMAGES + "OCONN", "Elbow Connection Tool", tool));
    tool = new ScribbleTool (this);
    palette.add (createToolButton (IMAGES + "SCRIBBL", "Scribble Tool", tool));
    tool = new PolygonTool (this);
    palette.add (createToolButton (IMAGES + "POLYGON", "Polygon Tool", tool));
    tool = new BorderTool (this);
    palette.add (createToolButton (IMAGES + "BORDDEC", "Border Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="90" endline="101">
protected void createButtons (JPanel panel) {
    super.createButtons (panel);
    fAnimationButton = new JButton ("Start Animation");
    fAnimationButton.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            toggleAnimation ();
        }}

    );
    panel.add (fAnimationButton);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="95" endline="97">
public void actionPerformed (ActionEvent event) {
    toggleAnimation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="103" endline="105">
protected Drawing createDrawing () {
    return new BouncingDrawing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="109" endline="115">
public void startAnimation () {
    if ((drawing () instanceof Animatable) && (fAnimator == null)) {
        fAnimator = new Animator ((Animatable) drawing (), view ());
        fAnimator.start ();
        fAnimationButton.setText ("End Animation");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="117" endline="123">
public void endAnimation () {
    if (fAnimator != null) {
        fAnimator.end ();
        fAnimator = null;
        fAnimationButton.setText ("Start Animation");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApplet.java" startline="125" endline="130">
public void toggleAnimation () {
    if (fAnimator != null) endAnimation ();
    else startAnimation ();

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/BouncingDrawing.java" startline="28" endline="34">
public synchronized Figure add (Figure figure) {
    if (! (figure instanceof AnimationDecorator) && ! (figure instanceof ConnectionFigure)) {
        figure = new AnimationDecorator (figure);
    }
    return super.add (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/BouncingDrawing.java" startline="36" endline="42">
public synchronized Figure remove (Figure figure) {
    Figure f = super.remove (figure);
    if (f instanceof AnimationDecorator) {
        return ((AnimationDecorator) f).peelDecoration ();
    }
    return f;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/BouncingDrawing.java" startline="49" endline="55">
public synchronized Figure replace (Figure figure, Figure replacement) {
    if (! (replacement instanceof AnimationDecorator) && ! (replacement instanceof ConnectionFigure)) {
        replacement = new AnimationDecorator (replacement);
    }
    return super.replace (figure, replacement);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/BouncingDrawing.java" startline="57" endline="66">
public void animationStep () {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (! (f instanceof ConnectionFigure)) {
            ((AnimationDecorator) f).animationStep ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/Animator.java" startline="28" endline="32">
public Animator (Animatable animatable, DrawingView view) {
    super ("Animator");
    fView = view;
    fAnimatable = animatable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/Animator.java" startline="34" endline="37">
public void start () {
    super.start ();
    fIsRunning = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/Animator.java" startline="39" endline="41">
public void end () {
    fIsRunning = false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/Animator.java" startline="43" endline="60">
public void run () {
    while (fIsRunning) {
        long tm = System.currentTimeMillis ();
        fView.freezeView ();
        fAnimatable.animationStep ();
        fView.checkDamage ();
        fView.unfreezeView ();
        try {
            tm += DELAY;
            Thread.sleep (Math.max (0, tm - System.currentTimeMillis ()));
        } catch (InterruptedException e) {
            break;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="39" endline="41">
JavaDrawApp () {
    super ("JHotDraw");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="48" endline="50">
public JavaDrawApp (String title) {
    super (title);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="58" endline="60">
protected DrawApplication createApplication () {
    return new JavaDrawApp ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="62" endline="64">
protected DrawingView createDrawingView () {
    return new ZoomDrawingView (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="68" endline="71">
public void destroy () {
    super.destroy ();
    endAnimation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="75" endline="145">
protected void createTools (JToolBar palette) {
    super.createTools (palette);
    Tool tool = new ZoomTool (this);
    palette.add (createToolButton (IMAGES + "ZOOM", "Zoom Tool", tool));
    tool = new UndoableTool (new TextTool (this, new TextFigure ()));
    palette.add (createToolButton (IMAGES + "TEXT", "Text Tool", tool));
    tool = new UndoableTool (new ConnectedTextTool (this, new TextFigure ()));
    palette.add (createToolButton (IMAGES + "ATEXT", "Connected Text Tool", tool));
    tool = new URLTool (this);
    palette.add (createToolButton (IMAGES + "URL", "URL Tool", tool));
    tool = new UndoableTool (new CreationTool (this, new RectangleFigure ()));
    palette.add (createToolButton (IMAGES + "RECT", "Rectangle Tool", tool));
    tool = new UndoableTool (new CreationTool (this, new RoundRectangleFigure ()));
    palette.add (createToolButton (IMAGES + "RRECT", "Round Rectangle Tool", tool));
    tool = new UndoableTool (new CreationTool (this, new EllipseFigure ()));
    palette.add (createToolButton (IMAGES + "ELLIPSE", "Ellipse Tool", tool));
    tool = new UndoableTool (new PolygonTool (this));
    palette.add (createToolButton (IMAGES + "POLYGON", "Polygon Tool", tool));
    tool = new UndoableTool (new CreationTool (this, new TriangleFigure ()));
    palette.add (createToolButton (IMAGES + "TRIANGLE", "Triangle Tool", tool));
    tool = new UndoableTool (new CreationTool (this, new DiamondFigure ()));
    palette.add (createToolButton (IMAGES + "DIAMOND", "Diamond Tool", tool));
    tool = new UndoableTool (new CreationTool (this, new LineFigure ()));
    palette.add (createToolButton (IMAGES + "LINE", "Line Tool", tool));
    tool = new UndoableTool (new ConnectionTool (this, new LineConnection ()));
    palette.add (createToolButton (IMAGES + "CONN", "Connection Tool", tool));
    tool = new UndoableTool (new ConnectionTool (this, new ElbowConnection ()));
    palette.add (createToolButton (IMAGES + "OCONN", "Elbow Connection Tool", tool));
    tool = new UndoableTool (new ScribbleTool (this));
    palette.add (createToolButton (IMAGES + "SCRIBBL", "Scribble Tool", tool));
    tool = new UndoableTool (new BorderTool (this));
    palette.add (createToolButton (IMAGES + "BORDDEC", "Border Tool", tool));
    Component button = new JButton ("Hello World");
    tool = new CreationTool (this, new ComponentFigure (button));
    palette.add (createToolButton (IMAGES + "RECT", "Component Tool", tool));
    tool = new TextAreaTool (this, new TextAreaFigure ());
    palette.add (createToolButton (IMAGES + "TEXTAREA", "TextArea Tool", tool));
    GraphicalCompositeFigure fig = new GraphicalCompositeFigure ();
    fig.setLayouter (new SimpleLayouter (fig));
    tool = new CreationTool (this, fig);
    palette.add (createToolButton (IMAGES + "RECT", "Container Figure Tool", tool));
    tool = new CompositeFigureCreationTool (this, new RectangleFigure ());
    palette.add (createToolButton (IMAGES + "RECT", "Nested Figure Tool", tool));
    tool = new HTMLTextAreaTool (this, new HTMLTextAreaFigure ());
    palette.add (createToolButton (IMAGES + "TEXTAREA", "HTML TextArea Tool", tool));
    LineConnection lineConnection = new LineConnection ();
    lineConnection.setStartDecoration (null);
    tool = new UndoableTool (new SplitConnectionTool (this, lineConnection));
    palette.add (createToolButton (IMAGES + "OCONN", "Split Connection Tool", tool));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="147" endline="149">
protected Tool createSelectionTool () {
    return new MySelectionTool (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="151" endline="156">
protected void createMenus (JMenuBar mb) {
    super.createMenus (mb);
    addMenuIfPossible (mb, createAnimationMenu ());
    addMenuIfPossible (mb, createImagesMenu ());
    addMenuIfPossible (mb, createWindowMenu ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="158" endline="174">
protected JMenu createAnimationMenu () {
    CommandMenu menu = new CommandMenu ("Animation");
    Command cmd = new AbstractCommand ("Start Animation", this) {
        public void execute () {
            startAnimation ();
        }}

    ;
    menu.add (cmd);
    cmd = new AbstractCommand ("Stop Animation", this) {
        public void execute () {
            endAnimation ();
        }}

    ;
    menu.add (cmd);
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="161" endline="163">
public void execute () {
    startAnimation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="168" endline="170">
public void execute () {
    endAnimation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="176" endline="195">
protected JMenu createWindowMenu () {
    CommandMenu menu = new CommandMenu ("Window");
    Command cmd = new AbstractCommand ("New View", this) {
        public void execute () {
            newView ();
        }}

    ;
    menu.add (cmd);
    cmd = new AbstractCommand ("New Window", this, false) {
        public void execute () {
            newWindow (createDrawing ());
        }}

    ;
    menu.add (cmd);
    menu.addSeparator ();
    menu.add (new WindowMenu ("Window List", (MDIDesktopPane) getDesktop (), this));
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="179" endline="181">
public void execute () {
    newView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="186" endline="188">
public void execute () {
    newWindow (createDrawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="197" endline="215">
protected JMenu createImagesMenu () {
    CommandMenu menu = new CommandMenu ("Images");
    URL url = getClass ().getResource (fgSampleImagesPath);
    File imagesDirectory = new File (url.getFile ());
    try {
        String [] list = imagesDirectory.list ();
        for (int i = 0;
        i < list.length; i ++) {
            String name = list [i];
            String path = fgSampleImagesResourcePath + name;
            menu.add (new UndoableCommand (new InsertImageCommand (name, path, this)));
        }
    } catch (Exception e) {
    }
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="217" endline="222">
protected Drawing createDrawing () {
    Drawing dwg = new BouncingDrawing ();
    dwg.setTitle (getDefaultDrawingTitle ());
    return dwg;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="226" endline="231">
public void startAnimation () {
    if (view ().drawing () instanceof Animatable && fAnimator == null) {
        fAnimator = new Animator ((Animatable) view ().drawing (), view ());
        fAnimator.start ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="233" endline="238">
public void endAnimation () {
    if (fAnimator != null) {
        fAnimator.end ();
        fAnimator = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="240" endline="251">
protected JMenu createDebugMenu () {
    CommandMenu menu = (CommandMenu) super.createDebugMenu ();
    Command cmd = new AbstractCommand ("Clipping Update", this) {
        public void execute () {
            this.view ().setDisplayUpdate (new ClippingUpdateStrategy ());
        }}

    ;
    menu.add (cmd);
    return menu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="244" endline="246">
public void execute () {
    this.view ().setDisplayUpdate (new ClippingUpdateStrategy ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/JavaDrawApp.java" startline="255" endline="258">
public static void main (String [] args) {
    JavaDrawApp window = new JavaDrawApp ();
    window.open ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/FollowURLTool.java" startline="26" endline="29">
FollowURLTool (DrawingEditor newDrawingEditor, JApplet applet) {
    super (newDrawingEditor);
    fApplet = applet;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/FollowURLTool.java" startline="34" endline="46">
public void mouseMove (MouseEvent e, int x, int y) {
    String urlstring = null;
    Figure figure = drawing ().findFigureInside (x, y);
    if (figure != null) {
        urlstring = (String) figure.getAttribute (FigureAttributeConstant.URL);
    }
    if (urlstring != null) {
        fApplet.showStatus (urlstring);
    } else {
        fApplet.showStatus ("");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/FollowURLTool.java" startline="52" endline="69">
public void mouseUp (MouseEvent e, int x, int y) {
    Figure figure = getActiveDrawing ().findFigureInside (x, y);
    if (figure == null) {
        return;
    }
    String urlstring = (String) figure.getAttribute (FigureAttributeConstant.URL);
    if (urlstring == null) {
        return;
    }
    try {
        URL url = new URL (fApplet.getDocumentBase (), urlstring);
        fApplet.getAppletContext ().showDocument (url);
    } catch (MalformedURLException exception) {
        fApplet.showStatus (exception.toString ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="34" endline="36">
public URLTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="38" endline="48">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    Figure pressedFigure = drawing ().findFigureInside (x, y);
    if (pressedFigure != null) {
        beginEdit (pressedFigure);
        return;
    }
    endEdit ();
    editor ().toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="50" endline="51">
public void mouseUp (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="53" endline="56">
public void deactivate (DrawingView view) {
    super.deactivate ();
    endEdit ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="58" endline="78">
private void beginEdit (Figure figure) {
    if (fTextField == null) {
        fTextField = new FloatingTextField ();
        fTextField.addActionListener (new ActionListener () {
            public void actionPerformed (ActionEvent event) {
                endEdit ();
            }}

        );
    }
    if ((figure != fURLTarget) && (fURLTarget != null)) {
        endEdit ();
    }
    if (figure != fURLTarget) {
        fTextField.createOverlay ((Container) view ());
        fTextField.setBounds (fieldBounds (figure), getURL (figure));
        fURLTarget = figure;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="63" endline="65">
public void actionPerformed (ActionEvent event) {
    endEdit ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="80" endline="86">
private void endEdit () {
    if (fURLTarget != null) {
        setURL (fURLTarget, fTextField.getText ());
        fURLTarget = null;
        fTextField.endOverlay ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="88" endline="95">
private Rectangle fieldBounds (Figure figure) {
    Rectangle box = figure.displayBox ();
    int nChars = Math.max (20, getURL (figure).length ());
    Dimension d = fTextField.getPreferredSize (nChars);
    box.x = Math.max (0, box.x + (box.width - d.width) / 2);
    box.y = Math.max (0, box.y + (box.height - d.height) / 2);
    return new Rectangle (box.x, box.y, d.width, d.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="97" endline="103">
private String getURL (Figure figure) {
    String url = (String) figure.getAttribute (FigureAttributeConstant.URL);
    if (url == null) {
        url = "";
    }
    return url;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/samples/javadraw/URLTool.java" startline="105" endline="107">
private void setURL (Figure figure, String url) {
    figure.setAttribute (FigureAttributeConstant.URL, url);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="27" endline="30">
public DeleteFromDrawingVisitor (Drawing newDrawing) {
    myDeletedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="32" endline="34">
private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="36" endline="38">
protected Drawing getDrawing () {
    return myDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="40" endline="45">
public void visitFigure (Figure hostFigure) {
    if (! myDeletedFigures.contains (hostFigure) && getDrawing ().containsFigure (hostFigure)) {
        Figure orphanedFigure = getDrawing ().orphan (hostFigure);
        myDeletedFigures.add (orphanedFigure);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="47" endline="48">
public void visitHandle (Handle hostHandle) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="50" endline="53">
public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteFromDrawingVisitor.java" startline="55" endline="57">
public FigureEnumeration getDeletedFigures () {
    return new FigureEnumerator (myDeletedFigures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="56" endline="60">
public StandardDrawing () {
    super ();
    fListeners = CollectionsFactory.current ().createList (2);
    init (new Rectangle (- 500, - 500, 2000, 2000));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="65" endline="70">
public void addDrawingChangeListener (DrawingChangeListener listener) {
    if (fListeners == null) {
        fListeners = CollectionsFactory.current ().createList (2);
    }
    fListeners.add (listener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="75" endline="77">
public void removeDrawingChangeListener (DrawingChangeListener listener) {
    fListeners.remove (listener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="82" endline="84">
public Iterator drawingChangeListeners () {
    return fListeners.iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="93" endline="101">
public synchronized Figure orphan (Figure figure) {
    Figure orphanedFigure = super.orphan (figure);
    if (orphanedFigure.listener () != null) {
        Rectangle rect = invalidateRectangle (displayBox ());
        orphanedFigure.listener ().figureRequestRemove (new FigureChangeEvent (orphanedFigure, rect));
    }
    return orphanedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="103" endline="111">
public synchronized Figure add (Figure figure) {
    Figure addedFigure = super.add (figure);
    if (addedFigure.listener () != null) {
        Rectangle rect = invalidateRectangle (displayBox ());
        addedFigure.listener ().figureRequestUpdate (new FigureChangeEvent (figure, rect));
        return addedFigure;
    }
    return addedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="118" endline="125">
public void figureInvalidated (FigureChangeEvent e) {
    if (fListeners != null) {
        for (int i = 0;
        i < fListeners.size (); i ++) {
            DrawingChangeListener l = (DrawingChangeListener) fListeners.get (i);
            l.drawingInvalidated (new DrawingChangeEvent (this, e.getInvalidatedRectangle ()));
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="130" endline="137">
public void fireDrawingTitleChanged () {
    if (fListeners != null) {
        for (int i = 0;
        i < fListeners.size (); i ++) {
            DrawingChangeListener l = (DrawingChangeListener) fListeners.get (i);
            l.drawingTitleChanged (new DrawingChangeEvent (this, null));
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="142" endline="149">
public void figureRequestUpdate (FigureChangeEvent e) {
    if (fListeners != null) {
        for (int i = 0;
        i < fListeners.size (); i ++) {
            DrawingChangeListener l = (DrawingChangeListener) fListeners.get (i);
            l.drawingRequestUpdate (new DrawingChangeEvent (this, null));
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="155" endline="162">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    handles.add (new NullHandle (this, RelativeLocator.northWest ()));
    handles.add (new NullHandle (this, RelativeLocator.northEast ()));
    handles.add (new NullHandle (this, RelativeLocator.southWest ()));
    handles.add (new NullHandle (this, RelativeLocator.southEast ()));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="167" endline="179">
public Rectangle displayBox () {
    if (fFigures.size () > 0) {
        FigureEnumeration fe = figures ();
        Rectangle r = fe.nextFigure ().displayBox ();
        while (fe.hasNextFigure ()) {
            r.add (fe.nextFigure ().displayBox ());
        }
        return r;
    }
    return new Rectangle (0, 0, 0, 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="181" endline="182">
public void basicDisplayBox (Point p1, Point p2) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="187" endline="200">
public synchronized void lock () {
    Thread current = Thread.currentThread ();
    if (fDrawingLockHolder == current) {
        return;
    }
    while (fDrawingLockHolder != null) {
        try {
            wait ();
        } catch (InterruptedException ex) {
        }
    }
    fDrawingLockHolder = current;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="205" endline="210">
public synchronized void unlock () {
    if (fDrawingLockHolder != null) {
        fDrawingLockHolder = null;
        notify ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="212" endline="218">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    fListeners = CollectionsFactory.current ().createList (2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="220" endline="222">
public String getTitle () {
    return myTitle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawing.java" startline="224" endline="226">
public void setTitle (String newTitle) {
    myTitle = newTitle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PeripheralLocator.java" startline="29" endline="31">
private PeripheralLocator () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PeripheralLocator.java" startline="33" endline="39">
public PeripheralLocator (int pointsPerSide, int index) {
    fPPS = pointsPerSide;
    fIndex = index;
    if (index >= pointsPerSide * 4) {
        throw new IllegalArgumentException ("Index must be within the range of points starting with index = 0.");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PeripheralLocator.java" startline="41" endline="72">
public Point locate (Figure parm1) {
    Rectangle r = parm1.displayBox ();
    int circumference = r.width * 2 + r.height * 2;
    int insets = 2 * 4 * CORNERSPACE;
    int spacing = circumference / (fPPS * 4 + 4);
    float hSpacing = (float) r.width / (fPPS + 1);
    float vSpacing = (float) r.height / (fPPS + 1);
    int x, y;
    if (fIndex < fPPS) {
        x = Math.round ((fIndex + 1.0f) * hSpacing);
        y = 0;
    } else if (fIndex < fPPS * 2) {
        x = Math.round ((fPPS + 1) * hSpacing);
        y = Math.round ((fIndex + 1 - fPPS) * vSpacing);
    } else if (fIndex < fPPS * 3) {
        x = Math.round (((fPPS + 1) - (fIndex + 1 - fPPS * 2)) * hSpacing);
        y = Math.round ((fPPS + 1) * vSpacing);
    } else {
        x = 0;
        y = Math.round (((fPPS + 1) - (fIndex + 1 - fPPS * 3)) * vSpacing);
    }

    x = x + r.x;
    y = y + r.y;
    return new Point ((int) x, (int) y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureTransferCommand.java" startline="30" endline="32">
protected FigureTransferCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureTransferCommand.java" startline="37" endline="44">
protected void deleteFigures (FigureEnumeration fe) {
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (view ().drawing ());
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    view ().clearSelection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureTransferCommand.java" startline="49" endline="51">
protected void copyFigures (FigureEnumeration fe, int figureCount) {
    Clipboard.getClipboard ().setContents (new StandardFigureSelection (fe, figureCount));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureTransferCommand.java" startline="62" endline="64">
public FigureEnumeration insertFigures (FigureEnumeration fe, int dx, int dy) {
    return view ().insertFigures (fe, dx, dy, false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OrderedFigureElement.java" startline="29" endline="32">
public OrderedFigureElement (Figure aFigure, int nZ) {
    _theFigure = aFigure;
    _nZ = nZ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OrderedFigureElement.java" startline="36" endline="38">
public Figure getFigure () {
    return _theFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OrderedFigureElement.java" startline="40" endline="42">
public int getZValue () {
    return _nZ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OrderedFigureElement.java" startline="44" endline="55">
public int compareTo (Object o) {
    OrderedFigureElement ofe = (OrderedFigureElement) o;
    if (_nZ == ofe.getZValue ()) {
        return 0;
    }
    if (_nZ > ofe.getZValue ()) {
        return 1;
    }
    return - 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="61" endline="63">
protected AbstractFigure () {
    myDependendFigures = CollectionsFactory.current ().createList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="68" endline="72">
public void moveBy (int dx, int dy) {
    willChange ();
    basicMoveBy (dx, dy);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="90" endline="94">
public void displayBox (Point origin, Point corner) {
    willChange ();
    basicDisplayBox (origin, corner);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="121" endline="123">
public FigureEnumeration figures () {
    return FigureEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="128" endline="130">
public Dimension size () {
    return new Dimension (displayBox ().width, displayBox ().height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="137" endline="139">
public boolean isEmpty () {
    return (size ().width < 3) || (size ().height < 3);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="148" endline="153">
public Figure findFigureInside (int x, int y) {
    if (containsPoint (x, y)) {
        return this;
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="158" endline="160">
public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="168" endline="170">
public void displayBox (Rectangle r) {
    displayBox (new Point (r.x, r.y), new Point (r.x + r.width, r.y + r.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="175" endline="177">
public boolean includes (Figure figure) {
    return figure == this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="184" endline="188">
public FigureEnumeration decompose () {
    List figures = CollectionsFactory.current ().createList (1);
    figures.add (this);
    return new FigureEnumerator (figures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="196" endline="199">
public void addToContainer (FigureChangeListener c) {
    addFigureChangeListener (c);
    invalidate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="205" endline="208">
public void removeFromContainer (FigureChangeListener c) {
    invalidate ();
    removeFigureChangeListener (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="213" endline="215">
public synchronized void addFigureChangeListener (FigureChangeListener l) {
    fListener = FigureChangeEventMulticaster.add (listener (), l);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="220" endline="222">
public synchronized void removeFigureChangeListener (FigureChangeListener l) {
    fListener = FigureChangeEventMulticaster.remove (listener (), l);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="227" endline="229">
public synchronized FigureChangeListener listener () {
    return fListener;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="236" endline="240">
public void release () {
    if (listener () != null) {
        listener ().figureRemoved (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="247" endline="252">
public void invalidate () {
    if (listener () != null) {
        Rectangle r = invalidateRectangle (displayBox ());
        listener ().figureInvalidated (new FigureChangeEvent (this, r));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="257" endline="260">
protected Rectangle invalidateRectangle (Rectangle r) {
    r.grow (Handle.HANDLESIZE, Handle.HANDLESIZE);
    return r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="268" endline="271">
public void willChange () {
    invalidate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="279" endline="284">
public void changed () {
    invalidate ();
    if (listener () != null) {
        listener ().figureChanged (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="290" endline="292">
public Point center () {
    return Geom.center (displayBox ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="298" endline="300">
public boolean canConnect () {
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="309" endline="311">
public Insets connectionInsets () {
    return new Insets (0, 0, 0, 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="318" endline="320">
public Connector connectorAt (int x, int y) {
    return new ChopBoxConnector (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="326" endline="327">
public void connectorVisibility (boolean isVisible, ConnectionFigure connector) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="332" endline="334">
public Locator connectedTextLocator (Figure text) {
    return RelativeLocator.center ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="344" endline="346">
public Object getAttribute (String name) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="354" endline="356">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="364" endline="365">
public void setAttribute (String name, Object value) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="371" endline="372">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="381" endline="405">
public Object clone () {
    Object clone = null;
    ByteArrayOutputStream output = new ByteArrayOutputStream (200);
    try {
        ObjectOutput writer = new ObjectOutputStream (output);
        writer.writeObject (this);
        writer.close ();
    } catch (IOException e) {
        System.err.println ("Class not found: " + e);
    }
    InputStream input = new ByteArrayInputStream (output.toByteArray ());
    try {
        ObjectInput reader = new ObjectInputStream (input);
        clone = reader.readObject ();
    } catch (IOException e) {
        System.err.println (e.toString ());
    } catch (ClassNotFoundException e) {
        System.err.println ("Class not found: " + e);
    }
    return clone;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="410" endline="411">
public void write (StorableOutput dw) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="416" endline="417">
public void read (StorableInput dr) throws IOException {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="422" endline="424">
public int getZValue () {
    return _nZ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="429" endline="431">
public void setZValue (int z) {
    _nZ = z;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="433" endline="461">
public void visit (FigureVisitor visitor) {
    FigureChangeListener originalListener = listener ();
    FigureEnumeration fe = getDependendFigures ();
    visitor.visitFigure (this);
    FigureEnumeration visitFigures = figures ();
    while (visitFigures.hasNextFigure ()) {
        visitFigures.nextFigure ().visit (visitor);
    }
    HandleEnumeration visitHandles = handles ();
    while (visitHandles.hasNextHandle ()) {
        visitor.visitHandle (visitHandles.nextHandle ());
    }
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (visitor);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="463" endline="465">
public synchronized FigureEnumeration getDependendFigures () {
    return new FigureEnumerator (myDependendFigures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="467" endline="469">
public synchronized void addDependendFigure (Figure newDependendFigure) {
    myDependendFigures.add (newDependendFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="471" endline="473">
public synchronized void removeDependendFigure (Figure oldDependendFigure) {
    myDependendFigures.remove (oldDependendFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="475" endline="477">
public TextHolder getTextHolder () {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractFigure.java" startline="479" endline="481">
public Figure getDecoratedFigure () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="37" endline="41">
public OffsetLocator () {
    fBase = null;
    fOffsetX = 0;
    fOffsetY = 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="43" endline="46">
public OffsetLocator (Locator base) {
    this ();
    fBase = base;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="48" endline="52">
public OffsetLocator (Locator base, int offsetX, int offsetY) {
    this (base);
    fOffsetX = offsetX;
    fOffsetY = offsetY;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="54" endline="59">
public Point locate (Figure owner) {
    Point p = fBase.locate (owner);
    p.x += fOffsetX;
    p.y += fOffsetY;
    return p;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="61" endline="64">
public void moveBy (int dx, int dy) {
    fOffsetX += dx;
    fOffsetY += dy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="66" endline="71">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fOffsetX);
    dw.writeInt (fOffsetY);
    dw.writeStorable (fBase);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/OffsetLocator.java" startline="73" endline="78">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fOffsetX = dr.readInt ();
    fOffsetY = dr.readInt ();
    fBase = (Locator) dr.readStorable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="32" endline="74">
public ToolButton (PaletteListener listener, String iconName, String name, Tool tool) {
    super (listener);
    tool.addToolListener (this);
    setEnabled (tool.isUsable ());
    Iconkit kit = Iconkit.instance ();
    if (kit == null) {
        throw new JHotDrawRuntimeException ("Iconkit instance isn't set");
    }
    Image im [] = new Image [3];
    im [0] = kit.loadImageResource (iconName + "1.gif");
    im [1] = kit.loadImageResource (iconName + "2.gif");
    im [2] = kit.loadImageResource (iconName + "3.gif");
    MediaTracker tracker = new MediaTracker (this);
    for (int i = 0;
    i < 3; i ++) {
        tracker.addImage (im [i], i);
    }
    try {
        tracker.waitForAll ();
    } catch (Exception e) {
    }
    setPaletteIcon (new PaletteIcon (new Dimension (24, 24), im [0], im [1], im [2]));
    setTool (tool);
    setName (name);
    if (im [0] != null) {
        setIcon (new ImageIcon (im [0]));
    }
    if (im [1] != null) {
        setPressedIcon (new ImageIcon (im [1]));
    }
    if (im [2] != null) {
        setSelectedIcon (new ImageIcon (im [2]));
    }
    setToolTipText (name);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="76" endline="78">
public Tool tool () {
    return myTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="80" endline="82">
public String name () {
    return getName ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="84" endline="86">
public Object attributeValue () {
    return tool ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="88" endline="90">
public Dimension getMinimumSize () {
    return new Dimension (getPaletteIcon ().getWidth (), getPaletteIcon ().getHeight ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="92" endline="94">
public Dimension getPreferredSize () {
    return new Dimension (getPaletteIcon ().getWidth (), getPaletteIcon ().getHeight ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="96" endline="98">
public Dimension getMaximumSize () {
    return new Dimension (getPaletteIcon ().getWidth (), getPaletteIcon ().getHeight ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="114" endline="118">
public void paintSelected (Graphics g) {
    if (getPaletteIcon ().selected () != null) {
        g.drawImage (getPaletteIcon ().selected (), 0, 0, this);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="120" endline="129">
public void paint (Graphics g) {
    if (isSelected ()) {
        paintSelected (g);
    } else {
        super.paint (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="131" endline="133">
public void toolUsable (EventObject toolEvent) {
    setEnabled (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="135" endline="138">
public void toolUnusable (EventObject toolEvent) {
    setEnabled (false);
    setSelected (false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="140" endline="141">
public void toolActivated (EventObject toolEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="143" endline="144">
public void toolDeactivated (EventObject toolEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="146" endline="148">
public void toolEnabled (EventObject toolEvent) {
    setEnabled (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="150" endline="152">
public void toolDisabled (EventObject toolEvent) {
    setEnabled (false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="154" endline="156">
protected PaletteIcon getPaletteIcon () {
    return myIcon;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="158" endline="160">
private void setPaletteIcon (PaletteIcon myIcon) {
    this.myIcon = myIcon;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToolButton.java" startline="162" endline="164">
private void setTool (Tool myTool) {
    this.myTool = myTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FastBufferedUpdateStrategy.java" startline="39" endline="40">
public FastBufferedUpdateStrategy () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FastBufferedUpdateStrategy.java" startline="44" endline="88">
public void draw (Graphics g, DrawingView view) {
    _checkCaches (view);
    if (_bRedrawAll == true) {
        Graphics imageGraphics = _doubleBufferedImage.getGraphics ();
        view.drawAll (imageGraphics);
    } else {
        Rectangle viewClipRectangle = g.getClipBounds ();
        int nX1 = viewClipRectangle.x;
        int nY1 = viewClipRectangle.y;
        int nX2 = viewClipRectangle.x + viewClipRectangle.width;
        int nY2 = viewClipRectangle.y + viewClipRectangle.height;
        if (nX1 < 0) {
            nX1 = 0;
        }
        if (nY1 < 0) {
            nY1 = 0;
        }
        if (nX2 < 0) {
            nX2 = 0;
        }
        if (nY2 < 0) {
            nY2 = 0;
        }
        Rectangle viewClipRectangle2 = new Rectangle (nX1, nY1, nX2 - nX1, nY2 - nY1);
        Drawing theDrawing = view.drawing ();
        FigureEnumeration fe = theDrawing.figures (viewClipRectangle2);
        Graphics imageGraphics = _scratchPadBufferedImage.getGraphics ();
        imageGraphics.setColor (view.getBackground ());
        imageGraphics.fillRect (nX1, nY1, nX2 - nX1, nY2 - nY1);
        view.draw (imageGraphics, fe);
        Graphics dbGraphics = _doubleBufferedImage.getGraphics ();
        dbGraphics.drawImage (_scratchPadBufferedImage, nX1, nY1, nX2, nY2, nX1, nY1, nX2, nY2, view);
    }
    g.drawImage (_doubleBufferedImage, 0, 0, view);
    _bRedrawAll = false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FastBufferedUpdateStrategy.java" startline="94" endline="117">
private void _checkCaches (DrawingView view) {
    Dimension d = view.getSize ();
    if ((_doubleBufferedImage == null) || (_nImageWidth != d.width) || (_nImageHeight != d.height)) {
        _doubleBufferedImage = new BufferedImage (d.width, d.height, BufferedImage.TYPE_INT_RGB);
        _bRedrawAll = true;
    }
    if ((_scratchPadBufferedImage == null) || (_nImageWidth != d.width) || (_nImageHeight != d.height)) {
        _scratchPadBufferedImage = new BufferedImage (d.width, d.height, BufferedImage.TYPE_INT_RGB);
        Graphics imageGraphics = _scratchPadBufferedImage.getGraphics ();
        view.drawBackground (imageGraphics);
        _bRedrawAll = true;
    }
    _nImageWidth = d.width;
    _nImageHeight = d.height;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="44" endline="46">
public AbstractConnector () {
    fOwner = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="51" endline="53">
public AbstractConnector (Figure owner) {
    fOwner = owner;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="61" endline="63">
public Figure owner () {
    return fOwner;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="65" endline="67">
public Point findStart (ConnectionFigure connection) {
    return findPoint (connection);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="69" endline="71">
public Point findEnd (ConnectionFigure connection) {
    return findPoint (connection);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="78" endline="80">
protected Point findPoint (ConnectionFigure connection) {
    return Geom.center (displayBox ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="85" endline="87">
public Rectangle displayBox () {
    return owner ().displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="92" endline="94">
public boolean containsPoint (int x, int y) {
    return owner ().containsPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="99" endline="101">
public void draw (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="106" endline="108">
public void write (StorableOutput dw) {
    dw.writeStorable (owner ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="113" endline="115">
public void read (StorableInput dr) throws IOException {
    fOwner = (Figure) dr.readStorable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractConnector.java" startline="123" endline="125">
public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="32" endline="35">
public void moveBy (Figure f, Rectangle anchor) {
    Rectangle rr = f.displayBox ();
    f.moveBy (anchor.x - rr.x, 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="42" endline="45">
public void moveBy (Figure f, Rectangle anchor) {
    Rectangle rr = f.displayBox ();
    f.moveBy ((anchor.x + anchor.width / 2) - (rr.x + rr.width / 2), 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="52" endline="55">
public void moveBy (Figure f, Rectangle anchor) {
    Rectangle rr = f.displayBox ();
    f.moveBy ((anchor.x + anchor.width) - (rr.x + rr.width), 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="62" endline="65">
public void moveBy (Figure f, Rectangle anchor) {
    Rectangle rr = f.displayBox ();
    f.moveBy (0, anchor.y - rr.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="72" endline="75">
public void moveBy (Figure f, Rectangle anchor) {
    Rectangle rr = f.displayBox ();
    f.moveBy (0, (anchor.y + anchor.height / 2) - (rr.y + rr.height / 2));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="82" endline="85">
public void moveBy (Figure f, Rectangle anchor) {
    Rectangle rr = f.displayBox ();
    f.moveBy (0, (anchor.y + anchor.height) - (rr.y + rr.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="90" endline="92">
private Alignment (String newDescription) {
    setDescription (newDescription);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="94" endline="96">
public String toString () {
    return getDescription ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="98" endline="100">
public String getDescription () {
    return myDescription;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="102" endline="104">
private void setDescription (String newDescription) {
    myDescription = newDescription;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="116" endline="119">
public AlignCommand (Alignment newAlignment, DrawingEditor newDrawingEditor) {
    super (newAlignment.getDescription (), newDrawingEditor);
    setAlignment (newAlignment);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="121" endline="123">
protected boolean isExecutableWithView () {
    return view ().selectionCount () > 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="125" endline="132">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    ((AlignCommand.UndoActivity) getUndoActivity ()).alignAffectedFigures (getAlignment ());
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="134" endline="136">
protected void setAlignment (Alignment newAlignment) {
    myAlignment = newAlignment;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="138" endline="140">
public Alignment getAlignment () {
    return myAlignment;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="145" endline="147">
protected Undoable createUndoActivity () {
    return new AlignCommand.UndoActivity (view (), getAlignment ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="153" endline="159">
public UndoActivity (DrawingView newView, Alignment newAlignment) {
    super (newView);
    myOriginalPoints = new Hashtable ();
    setAppliedAlignment (newAlignment);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="161" endline="177">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="179" endline="185">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    alignAffectedFigures (getAppliedAlignment ());
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="187" endline="189">
protected void setAppliedAlignment (Alignment newAlignment) {
    myAppliedAlignment = newAlignment;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="191" endline="193">
public Alignment getAppliedAlignment () {
    return myAppliedAlignment;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="195" endline="197">
protected void addOriginalPoint (Figure f) {
    myOriginalPoints.put (f, f.displayBox ().getLocation ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="199" endline="201">
public Point getOriginalPoint (Figure f) {
    return (Point) myOriginalPoints.get (f);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="203" endline="212">
public void alignAffectedFigures (Alignment applyAlignment) {
    FigureEnumeration fe = getAffectedFigures ();
    Figure anchorFigure = fe.nextFigure ();
    Rectangle r = anchorFigure.displayBox ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        applyAlignment.moveBy (f, r);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AlignCommand.java" startline="214" endline="222">
public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        addOriginalPoint (copyFe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="31" endline="33">
public SendToBackCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="35" endline="44">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="46" endline="48">
protected boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="50" endline="52">
protected Undoable createUndoActivity () {
    return new SendToBackCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="57" endline="62">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
    myOriginalLayers = new Hashtable ();
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="64" endline="77">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="79" endline="91">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="93" endline="95">
protected void sendToCommand (Figure f) {
    getDrawingView ().drawing ().sendToBack (f);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="97" endline="99">
protected void addOriginalLayer (Figure affectedFigure, int newOriginalLayer) {
    myOriginalLayers.put (affectedFigure, new Integer (newOriginalLayer));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="101" endline="103">
protected int getOriginalLayer (Figure lookupAffectedFigure) {
    return ((Integer) myOriginalLayers.get (lookupAffectedFigure)).intValue ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SendToBackCommand.java" startline="105" endline="115">
public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        Figure f = copyFe.nextFigure ();
        int originalLayer = getDrawingView ().drawing ().getLayer (f);
        addOriginalLayer (f, originalLayer);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/GridConstrainer.java" startline="30" endline="33">
public GridConstrainer (int x, int y) {
    fGridX = Math.max (1, x);
    fGridY = Math.max (1, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/GridConstrainer.java" startline="39" endline="43">
public Point constrainPoint (Point p) {
    p.x = ((p.x + fGridX / 2) / fGridX) * fGridX;
    p.y = ((p.y + fGridY / 2) / fGridY) * fGridY;
    return p;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/GridConstrainer.java" startline="48" endline="50">
public int getStepX () {
    return fGridX;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/GridConstrainer.java" startline="55" endline="57">
public int getStepY () {
    return fGridY;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="33" endline="35">
public CutCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="37" endline="45">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    copyFigures (getUndoActivity ().getAffectedFigures (), view ().selectionCount ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="47" endline="49">
public boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="54" endline="56">
protected Undoable createUndoActivity () {
    return new CutCommand.UndoActivity (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="61" endline="66">
public UndoActivity (FigureTransferCommand newCommand) {
    super (newCommand.view ());
    myCommand = newCommand;
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="68" endline="79">
public boolean undo () {
    if (super.undo () && getAffectedFigures ().hasNextFigure ()) {
        getDrawingView ().clearSelection ();
        setAffectedFigures (myCommand.insertFigures (getAffectedFigures (), 0, 0));
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CutCommand.java" startline="81" endline="90">
public boolean redo () {
    if (isRedoable ()) {
        myCommand.copyFigures (getAffectedFigures (), getDrawingView ().selectionCount ());
        myCommand.deleteFigures (getAffectedFigures ());
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureAndEnumerator.java" startline="25" endline="28">
public FigureAndEnumerator (FigureEnumeration newFE1, FigureEnumeration newFE2) {
    myFE1 = newFE1;
    myFE2 = newFE2;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureAndEnumerator.java" startline="30" endline="41">
public Figure nextFigure () {
    if (myFE1.hasNextFigure ()) {
        return myFE1.nextFigure ();
    } else if (myFE2.hasNextFigure ()) {
        return myFE2.nextFigure ();
    } else {
        return null;
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureAndEnumerator.java" startline="43" endline="45">
public boolean hasNextFigure () {
    return myFE1.hasNextFigure () || myFE2.hasNextFigure ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureAndEnumerator.java" startline="53" endline="56">
public void reset () {
    myFE1.reset ();
    myFE2.reset ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="38" endline="41">
protected NullDrawingView (DrawingEditor editor) {
    setEditor (editor);
    setDrawing (new StandardDrawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="46" endline="48">
public void setEditor (DrawingEditor editor) {
    myDrawingEditor = editor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="53" endline="55">
public Tool tool () {
    return editor ().tool ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="60" endline="62">
public Drawing drawing () {
    return myDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="67" endline="69">
public void setDrawing (Drawing d) {
    myDrawing = d;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="74" endline="76">
public DrawingEditor editor () {
    return myDrawingEditor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="82" endline="84">
public Figure add (Figure figure) {
    return figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="90" endline="92">
public Figure remove (Figure figure) {
    return figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="97" endline="99">
public void addAll (Collection figures) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="104" endline="106">
public Dimension getSize () {
    return new Dimension ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="111" endline="113">
public Dimension getMinimumSize () {
    return new Dimension ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="118" endline="120">
public Dimension getPreferredSize () {
    return new Dimension ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="126" endline="128">
public void setDisplayUpdate (Painter newUpdateStrategy) {
    myUpdateStrategy = newUpdateStrategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="134" endline="136">
public Painter getDisplayUpdate () {
    return myUpdateStrategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="145" endline="147">
public FigureEnumeration selection () {
    return FigureEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="155" endline="157">
public FigureEnumeration selectionZOrdered () {
    return FigureEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="162" endline="164">
public int selectionCount () {
    return 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="169" endline="171">
public boolean isFigureSelected (Figure checkFigure) {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="176" endline="178">
public void addToSelection (Figure figure) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="183" endline="185">
public void addToSelectionAll (Collection figures) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="190" endline="192">
public void addToSelectionAll (FigureEnumeration fe) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="197" endline="199">
public void removeFromSelection (Figure figure) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="205" endline="207">
public void toggleSelection (Figure figure) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="212" endline="214">
public void clearSelection () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="220" endline="222">
public FigureSelection getFigureSelection () {
    return new StandardFigureSelection (selection (), 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="228" endline="230">
public Handle findHandle (int x, int y) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="235" endline="237">
public Point lastClick () {
    return new Point ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="242" endline="244">
public void setConstrainer (PointConstrainer p) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="249" endline="251">
public PointConstrainer getConstrainer () {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="256" endline="258">
public void checkDamage () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="263" endline="265">
public void repairDamage () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="272" endline="274">
public void paint (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="279" endline="281">
public Image createImage (int width, int height) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="286" endline="288">
public Graphics getGraphics () {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="293" endline="295">
public Color getBackground () {
    return myBackgroundColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="300" endline="302">
public void setBackground (Color c) {
    myBackgroundColor = c;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="309" endline="311">
public void drawAll (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="318" endline="320">
public void draw (Graphics g, FigureEnumeration fe) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="325" endline="327">
public void drawHandles (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="332" endline="334">
public void drawDrawing (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="341" endline="343">
public void drawBackground (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="348" endline="350">
public void setCursor (Cursor c) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="356" endline="358">
public void freezeView () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="364" endline="366">
public void unfreezeView () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="372" endline="374">
public void addFigureSelectionListener (FigureSelectionListener fsl) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="380" endline="382">
public void removeFigureSelectionListener (FigureSelectionListener fsl) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="387" endline="389">
public FigureEnumeration getConnectionFigures (Figure inFigure) {
    return FigureEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="397" endline="399">
public FigureEnumeration insertFigures (FigureEnumeration inFigures, int dx, int dy, boolean bCheck) {
    return FigureEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="401" endline="403">
public void drawingInvalidated (DrawingChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="405" endline="407">
public void drawingRequestUpdate (DrawingChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="409" endline="411">
public void drawingTitleChanged (DrawingChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="413" endline="415">
public boolean isInteractive () {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullDrawingView.java" startline="417" endline="426">
public synchronized static DrawingView getManagedDrawingView (DrawingEditor editor) {
    if (drawingViewManager.containsKey (editor)) {
        return (DrawingView) drawingViewManager.get (editor);
    } else {
        DrawingView newDrawingView = new NullDrawingView (editor);
        drawingViewManager.put (editor, newDrawingView);
        return newDrawingView;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="38" endline="40">
public AbstractHandle (Figure owner) {
    fOwner = owner;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="50" endline="50">
public void invokeStart (int x, int y, Drawing drawing) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="57" endline="59">
public void invokeStart (int x, int y, DrawingView view) {
    invokeStart (x, y, view.drawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="69" endline="69">
public void invokeStep (int dx, int dy, Drawing drawing) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="78" endline="80">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    invokeStep (x - anchorX, y - anchorY, view.drawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="89" endline="91">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    invokeEnd (x - anchorX, y - anchorY, view.drawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="99" endline="99">
public void invokeEnd (int dx, int dy, Drawing drawing) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="104" endline="106">
public Figure owner () {
    return fOwner;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="111" endline="118">
public Rectangle displayBox () {
    Point p = locate ();
    return new Rectangle (p.x - HANDLESIZE / 2, p.y - HANDLESIZE / 2, HANDLESIZE, HANDLESIZE);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="123" endline="125">
public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="130" endline="138">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.white);
    g.fillRect (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="140" endline="142">
public Undoable getUndoActivity () {
    return myUndoableActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractHandle.java" startline="144" endline="146">
public void setUndoActivity (Undoable newUndoableActivity) {
    myUndoableActivity = newUndoableActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardFigureSelection.java" startline="42" endline="53">
public StandardFigureSelection (FigureEnumeration fe, int figureCount) {
    ByteArrayOutputStream output = new ByteArrayOutputStream (200);
    StorableOutput writer = new StorableOutput (output);
    writer.writeInt (figureCount);
    while (fe.hasNextFigure ()) {
        writer.writeStorable (fe.nextFigure ());
    }
    writer.close ();
    fData = output.toByteArray ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardFigureSelection.java" startline="58" endline="60">
public String getType () {
    return TYPE;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardFigureSelection.java" startline="68" endline="88">
public Object getData (String type) {
    if (type.equals (TYPE)) {
        InputStream input = new ByteArrayInputStream (fData);
        List result = CollectionsFactory.current ().createList (10);
        StorableInput reader = new StorableInput (input);
        int numRead = 0;
        try {
            int count = reader.readInt ();
            while (numRead < count) {
                Figure newFigure = (Figure) reader.readStorable ();
                result.add (newFigure);
                numRead ++;
            }
        } catch (IOException e) {
            System.err.println (e.toString ());
        }
        return new FigureEnumerator (result);
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardFigureSelection.java" startline="90" endline="93">
public static FigureEnumeration duplicateFigures (FigureEnumeration toBeCloned, int figureCount) {
    StandardFigureSelection duplicater = new StandardFigureSelection (toBeCloned, figureCount);
    return (FigureEnumeration) duplicater.getData (duplicater.getType ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BringToFrontCommand.java" startline="31" endline="33">
public BringToFrontCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BringToFrontCommand.java" startline="35" endline="44">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BringToFrontCommand.java" startline="46" endline="48">
public boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BringToFrontCommand.java" startline="50" endline="52">
protected Undoable createUndoActivity () {
    return new BringToFrontCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BringToFrontCommand.java" startline="55" endline="57">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BringToFrontCommand.java" startline="59" endline="61">
protected void sendToCommand (Figure f) {
    getDrawingView ().drawing ().bringToFront (f);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="43" endline="45">
public QuadTree (Rectangle2D absoluteBoundingRectangle2D) {
    this (2, absoluteBoundingRectangle2D);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="47" endline="50">
public QuadTree (int nMaxTreeDepth, Rectangle2D absoluteBoundingRectangle2D) {
    _init (nMaxTreeDepth, absoluteBoundingRectangle2D);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="54" endline="113">
public void add (Object anObject, Rectangle2D absoluteBoundingRectangle2D) {
    if (_nMaxTreeDepth == 1) {
        if (absoluteBoundingRectangle2D.intersects (_absoluteBoundingRectangle2D)) {
            _theHashtable.put (anObject, absoluteBoundingRectangle2D);
        } else {
            _outsideHashtable.put (anObject, absoluteBoundingRectangle2D);
        }
        return;
    }
    boolean bNW = absoluteBoundingRectangle2D.intersects (_nwQuadTree.getAbsoluteBoundingRectangle2D ());
    boolean bNE = absoluteBoundingRectangle2D.intersects (_neQuadTree.getAbsoluteBoundingRectangle2D ());
    boolean bSW = absoluteBoundingRectangle2D.intersects (_swQuadTree.getAbsoluteBoundingRectangle2D ());
    boolean bSE = absoluteBoundingRectangle2D.intersects (_seQuadTree.getAbsoluteBoundingRectangle2D ());
    int nCount = 0;
    if (bNW == true) {
        nCount ++;
    }
    if (bNE == true) {
        nCount ++;
    }
    if (bSW == true) {
        nCount ++;
    }
    if (bSE == true) {
        nCount ++;
    }
    if (nCount > 1) {
        _theHashtable.put (anObject, absoluteBoundingRectangle2D);
        return;
    }
    if (nCount == 0) {
        _outsideHashtable.put (anObject, absoluteBoundingRectangle2D);
        return;
    }
    if (bNW == true) {
        _nwQuadTree.add (anObject, absoluteBoundingRectangle2D);
    }
    if (bNE == true) {
        _neQuadTree.add (anObject, absoluteBoundingRectangle2D);
    }
    if (bSW == true) {
        _swQuadTree.add (anObject, absoluteBoundingRectangle2D);
    }
    if (bSE == true) {
        _seQuadTree.add (anObject, absoluteBoundingRectangle2D);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="115" endline="149">
public Object remove (Object anObject) {
    Object returnObject = _theHashtable.remove (anObject);
    if (returnObject != null) {
        return returnObject;
    }
    if (_nMaxTreeDepth > 1) {
        returnObject = _nwQuadTree.remove (anObject);
        if (returnObject != null) {
            return returnObject;
        }
        returnObject = _neQuadTree.remove (anObject);
        if (returnObject != null) {
            return returnObject;
        }
        returnObject = _swQuadTree.remove (anObject);
        if (returnObject != null) {
            return returnObject;
        }
        returnObject = _seQuadTree.remove (anObject);
        if (returnObject != null) {
            return returnObject;
        }
    }
    returnObject = _outsideHashtable.remove (anObject);
    if (returnObject != null) {
        return returnObject;
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="152" endline="161">
public void clear () {
    _theHashtable.clear ();
    _outsideHashtable.clear ();
    if (_nMaxTreeDepth > 1) {
        _nwQuadTree.clear ();
        _neQuadTree.clear ();
        _swQuadTree.clear ();
        _seQuadTree.clear ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="163" endline="165">
public int getMaxTreeDepth () {
    return _nMaxTreeDepth;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="182" endline="214">
public FigureEnumeration getAllWithin (Rectangle2D r) {
    List l = CollectionsFactory.current ().createList ();
    for (Iterator ii = _outsideHashtable.keySet ().iterator ();
    ii.hasNext ();) {
        Object anObject = ii.next ();
        Rectangle2D itsAbsoluteBoundingRectangle2D = (Rectangle2D) _outsideHashtable.get (anObject);
        if (itsAbsoluteBoundingRectangle2D.intersects (r)) {
            l.add (anObject);
        }
    }
    if (_absoluteBoundingRectangle2D.intersects (r)) {
        for (Iterator i = _theHashtable.keySet ().iterator ();
        i.hasNext ();) {
            Object anObject = i.next ();
            Rectangle2D itsAbsoluteBoundingRectangle2D = (Rectangle2D) _theHashtable.get (anObject);
            if (itsAbsoluteBoundingRectangle2D.intersects (r)) {
                l.add (anObject);
            }
        }
        if (_nMaxTreeDepth > 1) {
            l.add (_nwQuadTree.getAllWithin (r));
            l.add (_neQuadTree.getAllWithin (r));
            l.add (_swQuadTree.getAllWithin (r));
            l.add (_seQuadTree.getAllWithin (r));
        }
    }
    return new FigureEnumerator (l);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="216" endline="218">
public Rectangle2D getAbsoluteBoundingRectangle2D () {
    return _absoluteBoundingRectangle2D;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="222" endline="236">
private void _init (int nMaxTreeDepth, Rectangle2D absoluteBoundingRectangle2D) {
    _absoluteBoundingRectangle2D.setRect (absoluteBoundingRectangle2D);
    _nMaxTreeDepth = nMaxTreeDepth;
    if (_nMaxTreeDepth > 1) {
        _nwQuadTree = new QuadTree (_nMaxTreeDepth - 1, _makeNorthwest (absoluteBoundingRectangle2D));
        _neQuadTree = new QuadTree (_nMaxTreeDepth - 1, _makeNortheast (absoluteBoundingRectangle2D));
        _swQuadTree = new QuadTree (_nMaxTreeDepth - 1, _makeSouthwest (absoluteBoundingRectangle2D));
        _seQuadTree = new QuadTree (_nMaxTreeDepth - 1, _makeSoutheast (absoluteBoundingRectangle2D));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="238" endline="240">
private Rectangle2D _makeNorthwest (Rectangle2D r) {
    return new Rectangle2D.Double (r.getX (), r.getY (), r.getWidth () / 2.0, r.getHeight () / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="242" endline="245">
private Rectangle2D _makeNortheast (Rectangle2D r) {
    return new Rectangle2D.Double (r.getX () + r.getWidth () / 2.0, r.getY (), r.getWidth () / 2.0, r.getHeight () / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="247" endline="250">
private Rectangle2D _makeSouthwest (Rectangle2D r) {
    return new Rectangle2D.Double (r.getX (), r.getY () + r.getHeight () / 2.0, r.getWidth () / 2.0, r.getHeight () / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/QuadTree.java" startline="252" endline="256">
private Rectangle2D _makeSoutheast (Rectangle2D r) {
    return new Rectangle2D.Double (r.getX () + r.getWidth () / 2.0, r.getY () + r.getHeight () / 2.0, r.getWidth () / 2.0, r.getHeight () / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="34" endline="37">
public DragTracker (DrawingEditor newDrawingEditor, Figure anchor) {
    super (newDrawingEditor);
    fAnchorFigure = anchor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="39" endline="55">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    fLastX = x;
    fLastY = y;
    if (e.isShiftDown ()) {
        getActiveView ().toggleSelection (fAnchorFigure);
        fAnchorFigure = null;
    } else if (! getActiveView ().isFigureSelected (fAnchorFigure)) {
        getActiveView ().clearSelection ();
        getActiveView ().addToSelection (fAnchorFigure);
    }

    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (getActiveView ().selection ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="57" endline="69">
public void mouseDrag (MouseEvent e, int x, int y) {
    super.mouseDrag (e, x, y);
    fMoved = (Math.abs (x - getAnchorX ()) > 4) || (Math.abs (y - getAnchorY ()) > 4);
    if (fMoved) {
        FigureEnumeration figures = getUndoActivity ().getAffectedFigures ();
        while (figures.hasNextFigure ()) {
            figures.nextFigure ().moveBy (x - fLastX, y - fLastY);
        }
    }
    fLastX = x;
    fLastY = y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="71" endline="74">
public void activate () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="76" endline="83">
public void deactivate () {
    if (fMoved) {
        ((DragTracker.UndoActivity) getUndoActivity ()).setBackupPoint (new Point (fLastX, fLastY));
    } else {
        setUndoActivity (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="88" endline="90">
protected Undoable createUndoActivity () {
    return new DragTracker.UndoActivity (getActiveView (), new Point (fLastX, fLastY));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="96" endline="101">
public UndoActivity (DrawingView newDrawingView, Point newOriginalPoint) {
    super (newDrawingView);
    setOriginalPoint (newOriginalPoint);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="107" endline="113">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    moveAffectedFigures (getBackupPoint (), getOriginalPoint ());
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="119" endline="125">
public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    moveAffectedFigures (getOriginalPoint (), getBackupPoint ());
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="127" endline="129">
public void setBackupPoint (Point newBackupPoint) {
    myBackupPoint = newBackupPoint;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="131" endline="133">
public Point getBackupPoint () {
    return myBackupPoint;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="135" endline="137">
public void setOriginalPoint (Point newOriginalPoint) {
    myOriginalPoint = newOriginalPoint;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="139" endline="141">
public Point getOriginalPoint () {
    return myOriginalPoint;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DragTracker.java" startline="143" endline="149">
public void moveAffectedFigures (Point startPoint, Point endPoint) {
    FigureEnumeration figures = getAffectedFigures ();
    while (figures.hasNextFigure ()) {
        figures.nextFigure ().moveBy (endPoint.x - startPoint.x, endPoint.y - startPoint.y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SimpleUpdateStrategy.java" startline="37" endline="39">
public void draw (Graphics g, DrawingView view) {
    view.drawAll (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleAndEnumerator.java" startline="28" endline="31">
public HandleAndEnumerator (HandleEnumeration newHE1, HandleEnumeration newHE2) {
    myHE1 = newHE1;
    myHE2 = newHE2;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleAndEnumerator.java" startline="33" endline="44">
public Handle nextHandle () {
    if (myHE1.hasNextHandle ()) {
        return myHE1.nextHandle ();
    } else if (myHE2.hasNextHandle ()) {
        return myHE2.nextHandle ();
    } else {
        return null;
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleAndEnumerator.java" startline="46" endline="48">
public boolean hasNextHandle () {
    return myHE1.hasNextHandle () || myHE2.hasNextHandle ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleAndEnumerator.java" startline="50" endline="54">
public List toList () {
    List joinedList = myHE1.toList ();
    joinedList.addAll (myHE2.toList ());
    return joinedList;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleAndEnumerator.java" startline="56" endline="59">
public void reset () {
    myHE1.reset ();
    myHE2.reset ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="36" endline="41">
public ChangeAttributeCommand (String name, FigureAttributeConstant attribute, Object value, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
    fAttribute = attribute;
    fValue = value;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="43" endline="52">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="54" endline="56">
public boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="61" endline="63">
protected Undoable createUndoActivity () {
    return new ChangeAttributeCommand.UndoActivity (view (), fAttribute, fValue);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="70" endline="77">
public UndoActivity (DrawingView newDrawingView, FigureAttributeConstant newUndoAttribute, Object newUndoValue) {
    super (newDrawingView);
    myOriginalValues = new Hashtable ();
    setAttribute (newUndoAttribute);
    setBackupValue (newUndoValue);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="79" endline="93">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="95" endline="109">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="111" endline="113">
protected void addOriginalValue (Figure affectedFigure, Object newOriginalValue) {
    myOriginalValues.put (affectedFigure, newOriginalValue);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="115" endline="117">
protected Object getOriginalValue (Figure lookupAffectedFigure) {
    return myOriginalValues.get (lookupAffectedFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="119" endline="121">
protected void setAttribute (FigureAttributeConstant newUndoAttribute) {
    myUndoAttribute = newUndoAttribute;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="123" endline="125">
public FigureAttributeConstant getAttribute () {
    return myUndoAttribute;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="127" endline="129">
protected void setBackupValue (Object newUndoValue) {
    myUndoValue = newUndoValue;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="131" endline="133">
public Object getBackupValue () {
    return myUndoValue;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="135" endline="138">
public void release () {
    super.release ();
    myOriginalValues = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeAttributeCommand.java" startline="140" endline="152">
public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        Figure f = copyFe.nextFigure ();
        Object attributeValue = f.getAttribute (getAttribute ());
        if (attributeValue != null) {
            addOriginalValue (f, attributeValue);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="29" endline="31">
public ChangeConnectionEndHandle (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="36" endline="38">
protected Connector target () {
    return getConnection ().getEndConnector ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="43" endline="45">
protected void disconnect () {
    getConnection ().disconnectEnd ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="50" endline="52">
protected void connect (Connector c) {
    getConnection ().connectEnd (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="57" endline="59">
protected void setPoint (int x, int y) {
    getConnection ().endPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="64" endline="66">
public Point locate () {
    return getConnection ().endPoint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="71" endline="73">
protected Undoable createUndoActivity (DrawingView newView) {
    return new ChangeConnectionEndHandle.UndoActivity (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="76" endline="78">
public UndoActivity (DrawingView newView) {
    super (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionEndHandle.java" startline="80" endline="84">
protected Connector replaceConnector (ConnectionFigure connection) {
    Connector tempEndConnector = connection.getEndConnector ();
    connection.connectEnd (getOldConnector ());
    return tempEndConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DuplicateCommand.java" startline="29" endline="31">
public DuplicateCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DuplicateCommand.java" startline="33" endline="46">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DuplicateCommand.java" startline="48" endline="50">
protected boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DuplicateCommand.java" startline="55" endline="57">
protected Undoable createUndoActivity () {
    return new PasteCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="45" endline="47">
public LocatorConnector () {
    setLocator (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="49" endline="52">
public LocatorConnector (Figure owner, Locator l) {
    super (owner);
    setLocator (l);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="57" endline="59">
public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="64" endline="71">
public Rectangle displayBox () {
    Point p = getLocator ().locate (owner ());
    return new Rectangle (p.x - SIZE / 2, p.y - SIZE / 2, SIZE, SIZE);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="76" endline="83">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.blue);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="88" endline="91">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getLocator ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="96" endline="99">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setLocator ((Locator) dr.readStorable ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="101" endline="103">
protected void setLocator (Locator newLocator) {
    myLocator = newLocator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorConnector.java" startline="105" endline="107">
public Locator getLocator () {
    return myLocator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToggleGridCommand.java" startline="32" endline="35">
public ToggleGridCommand (String name, DrawingEditor newDrawingEditor, Point grid) {
    super (name, newDrawingEditor);
    fGrid = new Point (grid.x, grid.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ToggleGridCommand.java" startline="37" endline="46">
public void execute () {
    super.execute ();
    PointConstrainer grid = view ().getConstrainer ();
    if (grid != null) {
        view ().setConstrainer (null);
    } else {
        view ().setConstrainer (new GridConstrainer (fGrid.x, fGrid.y));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="44" endline="46">
public AbstractCommand (String newName, DrawingEditor newDrawingEditor) {
    this (newName, newDrawingEditor, true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="48" endline="54">
public AbstractCommand (String newName, DrawingEditor newDrawingEditor, boolean newIsViewRequired) {
    setName (newName);
    setDrawingEditor (newDrawingEditor);
    getDrawingEditor ().addViewChangeListener (this);
    myIsViewRequired = newIsViewRequired;
    setEventDispatcher (createEventDispatcher ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="56" endline="75">
public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
    if (oldView != null) {
        oldView.removeFigureSelectionListener (this);
    }
    if (newView != null) {
        newView.addFigureSelectionListener (this);
    }
    if (isViewRequired ()) {
        boolean isOldViewInteractive = (oldView != null) && oldView.isInteractive ();
        boolean isNewViewInteractive = (newView != null) && newView.isInteractive ();
        if (! isOldViewInteractive && isNewViewInteractive) {
            getEventDispatcher ().fireCommandExecutableEvent ();
        } else if (isOldViewInteractive && ! isNewViewInteractive) {
            getEventDispatcher ().fireCommandNotExecutableEvent ();
        }

    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="80" endline="81">
public void viewCreated (DrawingView view) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="86" endline="87">
public void viewDestroying (DrawingView view) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="92" endline="93">
public void figureSelectionChanged (DrawingView view) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="98" endline="100">
public DrawingEditor getDrawingEditor () {
    return myDrawingEditor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="102" endline="104">
private void setDrawingEditor (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="111" endline="113">
public DrawingView view () {
    return getDrawingEditor ().view ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="118" endline="120">
public String name () {
    return myName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="122" endline="124">
public void setName (String newName) {
    myName = newName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="129" endline="133">
public void dispose () {
    if (view () != null) {
        view ().removeFigureSelectionListener (this);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="138" endline="142">
public void execute () {
    if (view () == null) {
        throw new JHotDrawRuntimeException ("execute should NOT be getting called when view() == null");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="150" endline="159">
public boolean isExecutable () {
    if (isViewRequired ()) {
        if ((view () == null) || ! view ().isInteractive ()) {
            return false;
        }
    }
    return isExecutableWithView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="161" endline="163">
protected boolean isViewRequired () {
    return myIsViewRequired;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="165" endline="167">
protected boolean isExecutableWithView () {
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="169" endline="171">
public Undoable getUndoActivity () {
    return myUndoableActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="173" endline="175">
public void setUndoActivity (Undoable newUndoableActivity) {
    myUndoableActivity = newUndoableActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="177" endline="179">
public void addCommandListener (CommandListener newCommandListener) {
    getEventDispatcher ().addCommandListener (newCommandListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="181" endline="183">
public void removeCommandListener (CommandListener oldCommandListener) {
    getEventDispatcher ().removeCommandListener (oldCommandListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="185" endline="187">
private void setEventDispatcher (AbstractCommand.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="189" endline="191">
protected AbstractCommand.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="193" endline="195">
public AbstractCommand.EventDispatcher createEventDispatcher () {
    return new AbstractCommand.EventDispatcher (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="201" endline="204">
public EventDispatcher (Command newObservedCommand) {
    myRegisteredListeners = CollectionsFactory.current ().createList ();
    myObservedCommand = newObservedCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="206" endline="211">
public void fireCommandExecutedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((CommandListener) iter.next ()).commandExecuted (new EventObject (myObservedCommand));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="213" endline="218">
public void fireCommandExecutableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((CommandListener) iter.next ()).commandExecutable (new EventObject (myObservedCommand));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="220" endline="225">
public void fireCommandNotExecutableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((CommandListener) iter.next ()).commandNotExecutable (new EventObject (myObservedCommand));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="227" endline="231">
public void addCommandListener (CommandListener newCommandListener) {
    if (! myRegisteredListeners.contains (newCommandListener)) {
        myRegisteredListeners.add (newCommandListener);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractCommand.java" startline="233" endline="237">
public void removeCommandListener (CommandListener oldCommandListener) {
    if (myRegisteredListeners.contains (oldCommandListener)) {
        myRegisteredListeners.remove (oldCommandListener);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="30" endline="32">
public ChangeConnectionStartHandle (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="37" endline="39">
protected Connector target () {
    return getConnection ().getStartConnector ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="44" endline="46">
protected void disconnect () {
    getConnection ().disconnectStart ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="51" endline="53">
protected void connect (Connector c) {
    getConnection ().connectStart (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="58" endline="60">
protected void setPoint (int x, int y) {
    getConnection ().startPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="65" endline="67">
public Point locate () {
    return getConnection ().startPoint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="72" endline="74">
protected Undoable createUndoActivity (DrawingView newView) {
    return new ChangeConnectionStartHandle.UndoActivity (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="77" endline="79">
public UndoActivity (DrawingView newView) {
    super (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionStartHandle.java" startline="81" endline="85">
protected Connector replaceConnector (ConnectionFigure connection) {
    Connector tempStartConnector = connection.getStartConnector ();
    connection.connectStart (getOldConnector ());
    return tempStartConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorHandle.java" startline="32" endline="35">
public LocatorHandle (Figure owner, Locator l) {
    super (owner);
    fLocator = l;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorHandle.java" startline="40" endline="42">
public Locator getLocator () {
    return fLocator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/LocatorHandle.java" startline="48" endline="50">
public Point locate () {
    return fLocator.locate (owner ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="28" endline="30">
public SelectAreaTracker (DrawingEditor newDrawingEditor) {
    this (newDrawingEditor, Color.black);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="32" endline="35">
public SelectAreaTracker (DrawingEditor newDrawingEditor, Color rubberBandColor) {
    super (newDrawingEditor);
    fRubberBandColor = rubberBandColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="37" endline="42">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, e.getX (), e.getY ());
    rubberBand (getAnchorX (), getAnchorY (), getAnchorX (), getAnchorY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="44" endline="48">
public void mouseDrag (MouseEvent e, int x, int y) {
    super.mouseDrag (e, x, y);
    eraseRubberBand ();
    rubberBand (getAnchorX (), getAnchorY (), x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="50" endline="54">
public void mouseUp (MouseEvent e, int x, int y) {
    eraseRubberBand ();
    selectGroup (e.isShiftDown ());
    super.mouseUp (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="56" endline="60">
private void rubberBand (int x1, int y1, int x2, int y2) {
    fSelectGroup = new Rectangle (new Point (x1, y1));
    fSelectGroup.add (new Point (x2, y2));
    drawXORRect (fSelectGroup);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="62" endline="64">
private void eraseRubberBand () {
    drawXORRect (fSelectGroup);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="66" endline="86">
private void drawXORRect (Rectangle r) {
    Graphics g = view ().getGraphics ();
    if (g != null) {
        try {
            if (g instanceof Graphics2D) {
                Stroke dashedStroke = new BasicStroke (1.0f, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER, 10.0f, new float [] {5f, 5f, 5f, 5f}, 5.0f);
                ((Graphics2D) g).setStroke (dashedStroke);
            }
            g.setXORMode (view ().getBackground ());
            g.setColor (fRubberBandColor);
            g.drawRect (r.x, r.y, r.width, r.height);
        } finally {
            g.dispose ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAreaTracker.java" startline="88" endline="102">
private void selectGroup (boolean toggle) {
    FigureEnumeration fe = drawing ().figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle r2 = figure.displayBox ();
        if (fSelectGroup.contains (r2.x, r2.y) && fSelectGroup.contains (r2.x + r2.width, r2.y + r2.height)) {
            if (toggle) {
                view ().toggleSelection (figure);
            } else {
                view ().addToSelection (figure);
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="41" endline="43">
public SelectionTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="48" endline="77">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    if (getDelegateTool () != null) {
        return;
    }
    view ().freezeView ();
    Handle handle = view ().findHandle (e.getX (), e.getY ());
    if (handle != null) {
        setDelegateTool (createHandleTracker (view (), handle));
    } else {
        Figure figure = drawing ().findFigure (e.getX (), e.getY ());
        if (figure != null) {
            setDelegateTool (createDragTracker (figure));
        } else {
            if (! e.isShiftDown ()) {
                view ().clearSelection ();
            }
            setDelegateTool (createAreaTracker ());
        }
    }
    getDelegateTool ().activate ();
    getDelegateTool ().mouseDown (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="83" endline="87">
public void mouseMove (MouseEvent evt, int x, int y) {
    if (evt.getSource () == getActiveView ()) {
        DragNDropTool.setCursor (evt.getX (), evt.getY (), getActiveView ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="93" endline="97">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (getDelegateTool () != null) {
        getDelegateTool ().mouseDrag (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="103" endline="112">
public void mouseUp (MouseEvent e, int x, int y) {
    if (getDelegateTool () != null) {
        getDelegateTool ().mouseUp (e, x, y);
        getDelegateTool ().deactivate ();
        setDelegateTool (null);
    }
    if (view () != null) {
        view ().unfreezeView ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="117" endline="119">
protected Tool createHandleTracker (DrawingView view, Handle handle) {
    return new HandleTracker (editor (), new UndoableHandle (handle, view));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="124" endline="126">
protected Tool createDragTracker (Figure f) {
    return new UndoableTool (new DragTracker (editor (), f));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="132" endline="134">
protected Tool createAreaTracker () {
    return new SelectAreaTracker (editor ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="136" endline="138">
protected Tool getDelegateTool () {
    return fChild;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectionTool.java" startline="140" endline="142">
private void setDelegateTool (Tool newDelegateTool) {
    fChild = newDelegateTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="37" endline="40">
public RelativeLocator () {
    fRelativeX = 0.0;
    fRelativeY = 0.0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="42" endline="50">
public boolean equals (Object o) {
    if (RelativeLocator.class.isInstance (o)) {
        RelativeLocator rl = (RelativeLocator) o;
        if ((rl.fRelativeX) == fRelativeX && (rl.fRelativeY == fRelativeY)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="52" endline="55">
public RelativeLocator (double relativeX, double relativeY) {
    fRelativeX = relativeX;
    fRelativeY = relativeY;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="57" endline="63">
public Point locate (Figure owner) {
    Rectangle r = owner.displayBox ();
    return new Point (r.x + (int) (r.width * fRelativeX), r.y + (int) (r.height * fRelativeY));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="65" endline="69">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeDouble (fRelativeX);
    dw.writeDouble (fRelativeY);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="71" endline="75">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fRelativeX = dr.readDouble ();
    fRelativeY = dr.readDouble ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="77" endline="79">
static public Locator east () {
    return new RelativeLocator (1.0, 0.5);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="84" endline="86">
static public Locator north () {
    return new RelativeLocator (0.5, 0.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="91" endline="93">
static public Locator west () {
    return new RelativeLocator (0.0, 0.5);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="98" endline="100">
static public Locator northEast () {
    return new RelativeLocator (1.0, 0.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="105" endline="107">
static public Locator northWest () {
    return new RelativeLocator (0.0, 0.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="112" endline="114">
static public Locator south () {
    return new RelativeLocator (0.5, 1.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="119" endline="121">
static public Locator southEast () {
    return new RelativeLocator (1.0, 1.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="126" endline="128">
static public Locator southWest () {
    return new RelativeLocator (0.0, 1.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/RelativeLocator.java" startline="133" endline="135">
static public Locator center () {
    return new RelativeLocator (0.5, 0.5);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="27" endline="29">
public FigureChangeEventMulticaster (EventListener a, EventListener b) {
    super (a, b);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="31" endline="34">
public void figureInvalidated (FigureChangeEvent e) {
    ((FigureChangeListener) a).figureInvalidated (e);
    ((FigureChangeListener) b).figureInvalidated (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="36" endline="39">
public void figureRequestRemove (FigureChangeEvent e) {
    ((FigureChangeListener) a).figureRequestRemove (e);
    ((FigureChangeListener) b).figureRequestRemove (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="41" endline="44">
public void figureRequestUpdate (FigureChangeEvent e) {
    ((FigureChangeListener) a).figureRequestUpdate (e);
    ((FigureChangeListener) b).figureRequestUpdate (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="46" endline="49">
public void figureChanged (FigureChangeEvent e) {
    ((FigureChangeListener) a).figureChanged (e);
    ((FigureChangeListener) b).figureChanged (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="51" endline="54">
public void figureRemoved (FigureChangeEvent e) {
    ((FigureChangeListener) a).figureRemoved (e);
    ((FigureChangeListener) b).figureRemoved (e);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="56" endline="58">
public static FigureChangeListener add (FigureChangeListener a, FigureChangeListener b) {
    return (FigureChangeListener) addInternal (a, b);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="61" endline="63">
public static FigureChangeListener remove (FigureChangeListener l, FigureChangeListener oldl) {
    return (FigureChangeListener) removeInternal (l, oldl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="65" endline="81">
protected EventListener remove (EventListener oldl) {
    if (oldl == a) {
        return b;
    }
    if (oldl == b) {
        return a;
    }
    EventListener a2 = removeInternal ((FigureChangeListener) a, oldl);
    EventListener b2 = removeInternal ((FigureChangeListener) b, oldl);
    if (a2 == a && b2 == b) {
        return this;
    } else {
        return addInternal ((FigureChangeListener) a2, (FigureChangeListener) b2);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="83" endline="91">
protected static EventListener addInternal (FigureChangeListener a, FigureChangeListener b) {
    if (a == null) {
        return b;
    }
    if (b == null) {
        return a;
    }
    return new FigureChangeEventMulticaster (a, b);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeEventMulticaster.java" startline="93" endline="103">
protected static EventListener removeInternal (EventListener l, EventListener oldl) {
    if (l == oldl || l == null) {
        return null;
    } else if (l instanceof FigureChangeEventMulticaster) {
        return ((FigureChangeEventMulticaster) l).remove (oldl);
    } else {
        return l;
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeAdapter.java" startline="26" endline="26">
public void figureInvalidated (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeAdapter.java" startline="31" endline="31">
public void figureChanged (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeAdapter.java" startline="36" endline="36">
public void figureRemoved (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeAdapter.java" startline="41" endline="41">
public void figureRequestRemove (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureChangeAdapter.java" startline="47" endline="47">
public void figureRequestUpdate (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="30" endline="32">
public SelectAllCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="34" endline="40">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    view ().addToSelectionAll (view ().drawing ().figures ());
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="47" endline="54">
public boolean isExecutableWithView () {
    FigureEnumeration fe = view ().drawing ().figures ();
    if (fe.hasNextFigure () && (fe.nextFigure () != null)) {
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="59" endline="61">
protected Undoable createUndoActivity () {
    return new SelectAllCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="64" endline="68">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="70" endline="79">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    getDrawingView ().addToSelectionAll (getAffectedFigures ());
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SelectAllCommand.java" startline="81" endline="89">
public boolean redo () {
    if (isRedoable ()) {
        getDrawingView ().addToSelectionAll (getDrawingView ().drawing ().figures ());
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="32" endline="34">
public PasteCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="36" endline="59">
public void execute () {
    super.execute ();
    Point lastClick = view ().lastClick ();
    FigureSelection selection = (FigureSelection) Clipboard.getClipboard ().getContents ();
    if (selection != null) {
        setUndoActivity (createUndoActivity ());
        getUndoActivity ().setAffectedFigures ((FigureEnumerator) selection.getData (StandardFigureSelection.TYPE));
        if (! getUndoActivity ().getAffectedFigures ().hasNextFigure ()) {
            setUndoActivity (null);
            return;
        }
        Rectangle r = getBounds (getUndoActivity ().getAffectedFigures ());
        view ().clearSelection ();
        FigureEnumeration fe = insertFigures (getUndoActivity ().getAffectedFigures (), lastClick.x - r.x, lastClick.y - r.y);
        getUndoActivity ().setAffectedFigures (fe);
        view ().checkDamage ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="61" endline="63">
public boolean isExecutableWithView () {
    return Clipboard.getClipboard ().getContents () != null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="65" endline="71">
private Rectangle getBounds (FigureEnumeration fe) {
    Rectangle r = fe.nextFigure ().displayBox ();
    while (fe.hasNextFigure ()) {
        r.add (fe.nextFigure ().displayBox ());
    }
    return r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="76" endline="78">
protected Undoable createUndoActivity () {
    return new PasteCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="82" endline="86">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="88" endline="102">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/PasteCommand.java" startline="104" endline="115">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    setAffectedFigures (getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false));
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChopBoxConnector.java" startline="34" endline="35">
public ChopBoxConnector () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChopBoxConnector.java" startline="37" endline="39">
public ChopBoxConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChopBoxConnector.java" startline="41" endline="54">
public Point findStart (ConnectionFigure connection) {
    Figure startFigure = connection.getStartConnector ().owner ();
    Rectangle r2 = connection.getEndConnector ().displayBox ();
    Point r2c = null;
    if (connection.pointCount () == 2) {
        r2c = new Point (r2.x + r2.width / 2, r2.y + r2.height / 2);
    } else {
        r2c = connection.pointAt (1);
    }
    return chop (startFigure, r2c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChopBoxConnector.java" startline="56" endline="69">
public Point findEnd (ConnectionFigure connection) {
    Figure endFigure = connection.getEndConnector ().owner ();
    Rectangle r1 = connection.getStartConnector ().displayBox ();
    Point r1c = null;
    if (connection.pointCount () == 2) {
        r1c = new Point (r1.x + r1.width / 2, r1.y + r1.height / 2);
    } else {
        r1c = connection.pointAt (connection.pointCount () - 2);
    }
    return chop (endFigure, r1c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChopBoxConnector.java" startline="71" endline="74">
protected Point chop (Figure target, Point from) {
    Rectangle r = target.displayBox ();
    return Geom.angleToPoint (r, (Geom.pointToAngle (r, from)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ActionTool.java" startline="26" endline="28">
public ActionTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ActionTool.java" startline="34" endline="41">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    Figure target = drawing ().findFigure (x, y);
    if (target != null) {
        view ().addToSelection (target);
        action (target);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ActionTool.java" startline="43" endline="45">
public void mouseUp (MouseEvent e, int x, int y) {
    editor ().toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="27" endline="30">
public InsertIntoDrawingVisitor (Drawing newDrawing) {
    myInsertedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="32" endline="34">
private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="36" endline="38">
protected Drawing getDrawing () {
    return myDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="40" endline="45">
public void visitFigure (Figure hostFigure) {
    if (! myInsertedFigures.contains (hostFigure) && ! getDrawing ().includes (hostFigure)) {
        Figure addedFigure = getDrawing ().add (hostFigure);
        myInsertedFigures.add (addedFigure);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="47" endline="48">
public void visitHandle (Handle hostHandle) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="50" endline="52">
public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/InsertIntoDrawingVisitor.java" startline="54" endline="56">
public FigureEnumeration getInsertedFigures () {
    return new FigureEnumerator (myInsertedFigures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="79" endline="82">
public ConnectionTool (DrawingEditor newDrawingEditor, ConnectionFigure newPrototype) {
    super (newDrawingEditor);
    fPrototype = newPrototype;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="87" endline="89">
public void mouseMove (MouseEvent e, int x, int y) {
    trackConnectors (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="96" endline="124">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    int ex = e.getX ();
    int ey = e.getY ();
    setTargetFigure (findConnectionStart (ex, ey, drawing ()));
    if (getTargetFigure () != null) {
        setStartConnector (findConnector (ex, ey, getTargetFigure ()));
        if (getStartConnector () != null) {
            setConnection (createConnection ());
            getConnection ().startPoint (ex, ey);
            getConnection ().endPoint (ex, ey);
            setAddedFigure (view ().add (getConnection ()));
        }
    } else {
        ConnectionFigure connection = findConnection (ex, ey, drawing ());
        if (connection != null) {
            if (! connection.joinSegments (ex, ey)) {
                fSplitPoint = connection.splitSegment (ex, ey);
                fEditedConnection = connection;
            } else {
                fEditedConnection = null;
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="129" endline="142">
public void mouseDrag (MouseEvent e, int x, int y) {
    Point p = new Point (e.getX (), e.getY ());
    if (getConnection () != null) {
        trackConnectors (e, x, y);
        if (getTargetConnector () != null) {
            p = Geom.center (getTargetConnector ().displayBox ());
        }
        getConnection ().endPoint (p.x, p.y);
    } else if (fEditedConnection != null) {
        Point pp = new Point (x, y);
        fEditedConnection.setPointAt (pp, fSplitPoint);
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="148" endline="175">
public void mouseUp (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () != null) {
        c = findTarget (e.getX (), e.getY (), drawing ());
    }
    if (c != null) {
        setEndConnector (findConnector (e.getX (), e.getY (), c));
        if (getEndConnector () != null) {
            getConnection ().connectStart (getStartConnector ());
            getConnection ().connectEnd (getEndConnector ());
            getConnection ().updateConnection ();
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
        }
    } else if (getConnection () != null) {
        view ().remove (getConnection ());
    }

    setConnection (null);
    setStartConnector (null);
    setEndConnector (null);
    setAddedFigure (null);
    editor ().toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="177" endline="182">
public void deactivate () {
    super.deactivate ();
    if (getTargetFigure () != null) {
        getTargetFigure ().connectorVisibility (false, null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="188" endline="190">
protected ConnectionFigure createConnection () {
    return (ConnectionFigure) fPrototype.clone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="195" endline="197">
protected Figure findSource (int x, int y, Drawing drawing) {
    return findConnectableFigure (x, y, drawing);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="206" endline="218">
protected Figure findTarget (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    Figure start = getStartConnector ().owner ();
    if (target != null && getConnection () != null && target.canConnect () && ! target.includes (start) && getConnection ().canConnect (start, target)) {
        return target;
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="223" endline="233">
protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="235" endline="237">
protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="242" endline="244">
protected ConnectionFigure getConnection () {
    return myConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="250" endline="293">
protected void trackConnectors (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () == null) {
        c = findSource (x, y, getActiveDrawing ());
    } else {
        c = findTarget (x, y, getActiveDrawing ());
    }
    if (c != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (c);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector cc = null;
    if (c != null) {
        cc = findConnector (e.getX (), e.getY (), c);
    }
    if (cc != getTargetConnector ()) {
        setTargetConnector (cc);
    }
    getActiveView ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="295" endline="297">
protected Connector findConnector (int x, int y, Figure f) {
    return f.connectorAt (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="302" endline="308">
protected Figure findConnectionStart (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    if ((target != null) && target.canConnect ()) {
        return target;
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="314" endline="324">
protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="326" endline="328">
protected void setStartConnector (Connector newStartConnector) {
    myStartConnector = newStartConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="330" endline="332">
protected Connector getStartConnector () {
    return myStartConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="334" endline="336">
protected void setEndConnector (Connector newEndConnector) {
    myEndConnector = newEndConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="338" endline="340">
protected Connector getEndConnector () {
    return myEndConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="342" endline="344">
protected void setTargetConnector (Connector newTargetConnector) {
    myTargetConnector = newTargetConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="346" endline="348">
protected Connector getTargetConnector () {
    return myTargetConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="350" endline="352">
protected void setTargetFigure (Figure newTarget) {
    myTarget = newTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="354" endline="356">
protected Figure getTargetFigure () {
    return myTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="362" endline="364">
protected Figure getAddedFigure () {
    return myAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="366" endline="368">
protected void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="373" endline="375">
protected Undoable createUndoActivity () {
    return new ConnectionTool.UndoActivity (view (), getConnection ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="383" endline="390">
public UndoActivity (DrawingView newDrawingView, ConnectionFigure newConnection) {
    super (newDrawingView);
    setConnection (newConnection);
    myStartConnector = getConnection ().getStartConnector ();
    myEndConnector = getConnection ().getEndConnector ();
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="396" endline="412">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="418" endline="430">
public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="432" endline="434">
protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionTool.java" startline="439" endline="441">
protected ConnectionFigure getConnection () {
    return myConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="51" endline="53">
public DecoratorFigure () {
    initialize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="58" endline="61">
public DecoratorFigure (Figure figure) {
    initialize ();
    decorate (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="67" endline="68">
protected void initialize () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="73" endline="75">
public Insets connectionInsets () {
    return getDecoratedFigure ().connectionInsets ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="80" endline="82">
public boolean canConnect () {
    return getDecoratedFigure ().canConnect ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="87" endline="89">
public boolean containsPoint (int x, int y) {
    return getDecoratedFigure ().containsPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="94" endline="98">
public void decorate (Figure figure) {
    setDecoratedFigure (figure);
    getDecoratedFigure ().addToContainer (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="103" endline="107">
public Figure peelDecoration () {
    getDecoratedFigure ().removeFromContainer (this);
    removeDependendFigure (getDecoratedFigure ());
    return getDecoratedFigure ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="109" endline="111">
public void setDecoratedFigure (Figure newDecoratedFigure) {
    myDecoratedFigure = newDecoratedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="113" endline="115">
public Figure getDecoratedFigure () {
    return myDecoratedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="120" endline="122">
public Rectangle displayBox () {
    return getDecoratedFigure ().displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="127" endline="129">
public void basicDisplayBox (Point origin, Point corner) {
    getDecoratedFigure ().basicDisplayBox (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="134" endline="136">
public void draw (Graphics g) {
    getDecoratedFigure ().draw (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="141" endline="151">
public Figure findFigureInside (int x, int y) {
    Figure foundFigure = getDecoratedFigure ().findFigureInside (x, y);
    if ((foundFigure != null) && (foundFigure == getDecoratedFigure ())) {
        return this;
    } else {
        return foundFigure;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="156" endline="158">
public HandleEnumeration handles () {
    return getDecoratedFigure ().handles ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="163" endline="165">
public boolean includes (Figure figure) {
    return (super.includes (figure) || getDecoratedFigure ().includes (figure));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="170" endline="172">
public void moveBy (int x, int y) {
    getDecoratedFigure ().moveBy (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="177" endline="179">
protected void basicMoveBy (int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="184" endline="188">
public void release () {
    super.release ();
    getDecoratedFigure ().removeFromContainer (this);
    getDecoratedFigure ().release ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="194" endline="198">
public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="200" endline="201">
public void figureChanged (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="203" endline="204">
public void figureRemoved (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="210" endline="214">
public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="220" endline="224">
public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="229" endline="231">
public FigureEnumeration figures () {
    return getDecoratedFigure ().figures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="236" endline="238">
public FigureEnumeration decompose () {
    return getDecoratedFigure ().decompose ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="245" endline="247">
public void setAttribute (String name, Object value) {
    getDecoratedFigure ().setAttribute (name, value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="252" endline="254">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    getDecoratedFigure ().setAttribute (attributeConstant, value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="261" endline="263">
public Object getAttribute (String name) {
    return getDecoratedFigure ().getAttribute (name);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="268" endline="270">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return getDecoratedFigure ().getAttribute (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="275" endline="277">
public Locator connectedTextLocator (Figure text) {
    return getDecoratedFigure ().connectedTextLocator (text);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="282" endline="284">
public Connector connectorAt (int x, int y) {
    return getDecoratedFigure ().connectorAt (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="289" endline="291">
public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
    getDecoratedFigure ().connectorVisibility (isVisible, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="296" endline="299">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getDecoratedFigure ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="304" endline="307">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    decorate ((Figure) dr.readStorable ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="309" endline="315">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    getDecoratedFigure ().addToContainer (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="322" endline="324">
public TextHolder getTextHolder () {
    return getDecoratedFigure ().getTextHolder ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="326" endline="328">
public synchronized FigureEnumeration getDependendFigures () {
    return getDecoratedFigure ().getDependendFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="330" endline="332">
public synchronized void addDependendFigure (Figure newDependendFigure) {
    getDecoratedFigure ().addDependendFigure (newDependendFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DecoratorFigure.java" startline="334" endline="336">
public synchronized void removeDependendFigure (Figure oldDependendFigure) {
    getDecoratedFigure ().removeDependendFigure (oldDependendFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SingleFigureEnumerator.java" startline="28" endline="31">
public SingleFigureEnumerator (Figure newSingleFigure) {
    myInitialFigure = newSingleFigure;
    reset ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SingleFigureEnumerator.java" startline="37" endline="39">
public boolean hasNextFigure () {
    return mySingleFigure != null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SingleFigureEnumerator.java" startline="46" endline="50">
public Figure nextFigure () {
    Figure returnFigure = mySingleFigure;
    mySingleFigure = null;
    return returnFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/SingleFigureEnumerator.java" startline="58" endline="60">
public void reset () {
    mySingleFigure = myInitialFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleEnumerator.java" startline="33" endline="36">
public HandleEnumerator (Collection c) {
    myInitialCollection = c;
    reset ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleEnumerator.java" startline="42" endline="44">
public boolean hasNextHandle () {
    return myIterator.hasNext ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleEnumerator.java" startline="51" endline="53">
public Handle nextHandle () {
    return (Handle) myIterator.next ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleEnumerator.java" startline="64" endline="72">
public List toList () {
    List handles = CollectionsFactory.current ().createList ();
    while (hasNextHandle ()) {
        handles.add (nextHandle ());
    }
    myIterator = handles.iterator ();
    return handles;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleEnumerator.java" startline="80" endline="82">
public void reset () {
    myIterator = myInitialCollection.iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleEnumerator.java" startline="84" endline="86">
public static HandleEnumeration getEmptyEnumeration () {
    return singletonEmptyEnumerator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CopyCommand.java" startline="31" endline="33">
public CopyCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CopyCommand.java" startline="35" endline="38">
public void execute () {
    super.execute ();
    copyFigures (view ().selection (), view ().selectionCount ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CopyCommand.java" startline="40" endline="42">
protected boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="57" endline="61">
protected CompositeFigure () {
    fFigures = CollectionsFactory.current ().createList ();
    _nLowestZ = 0;
    _nHighestZ = 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="70" endline="78">
public Figure add (Figure figure) {
    if (! containsFigure (figure)) {
        figure.setZValue (++ _nHighestZ);
        fFigures.add (figure);
        figure.addToContainer (this);
        _addToQuadTree (figure);
    }
    return figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="86" endline="88">
public void addAll (List newFigures) {
    addAll (new FigureEnumerator (newFigures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="96" endline="100">
public void addAll (FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        add (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="109" endline="115">
public Figure remove (Figure figure) {
    Figure orphanedFigure = orphan (figure);
    if (orphanedFigure != null) {
        orphanedFigure.release ();
    }
    return orphanedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="123" endline="125">
public void removeAll (List figures) {
    removeAll (new FigureEnumerator (figures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="131" endline="135">
public void removeAll (FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        remove (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="141" endline="152">
public void removeAll () {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.removeFromContainer (this);
    }
    fFigures.clear ();
    _clearQuadTree ();
    _nLowestZ = 0;
    _nHighestZ = 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="161" endline="166">
public synchronized Figure orphan (Figure figure) {
    figure.removeFromContainer (this);
    fFigures.remove (figure);
    _removeFromQuadTree (figure);
    return figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="175" endline="177">
public void orphanAll (List newFigures) {
    orphanAll (new FigureEnumerator (newFigures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="179" endline="183">
public void orphanAll (FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        orphan (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="193" endline="204">
public synchronized Figure replace (Figure figure, Figure replacement) {
    int index = fFigures.indexOf (figure);
    if (index != - 1) {
        replacement.setZValue (figure.getZValue ());
        replacement.addToContainer (this);
        figure.removeFromContainer (this);
        fFigures.set (index, replacement);
        figure.changed ();
        replacement.changed ();
    }
    return replacement;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="211" endline="219">
public synchronized void sendToBack (Figure figure) {
    if (containsFigure (figure)) {
        fFigures.remove (figure);
        fFigures.add (0, figure);
        _nLowestZ --;
        figure.setZValue (_nLowestZ);
        figure.changed ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="226" endline="234">
public synchronized void bringToFront (Figure figure) {
    if (containsFigure (figure)) {
        fFigures.remove (figure);
        fFigures.add (figure);
        _nHighestZ ++;
        figure.setZValue (_nHighestZ);
        figure.changed ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="254" endline="275">
public void sendToLayer (Figure figure, int layerNr) {
    if (containsFigure (figure)) {
        if (layerNr >= fFigures.size ()) {
            layerNr = fFigures.size () - 1;
        }
        Figure layerFigure = getFigureFromLayer (layerNr);
        int layerFigureZValue = layerFigure.getZValue ();
        int figureLayer = getLayer (figure);
        if (figureLayer < layerNr) {
            assignFiguresToPredecessorZValue (figureLayer + 1, layerNr);
        } else if (figureLayer > layerNr) {
            assignFiguresToSuccessorZValue (layerNr, figureLayer - 1);
        }

        fFigures.remove (figure);
        fFigures.add (layerNr, figure);
        figure.setZValue (layerFigureZValue);
        figure.changed ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="277" endline="289">
private void assignFiguresToPredecessorZValue (int lowerBound, int upperBound) {
    if (upperBound >= fFigures.size ()) {
        upperBound = fFigures.size () - 1;
    }
    for (int i = upperBound;
    i >= lowerBound; i --) {
        Figure currentFigure = (Figure) fFigures.get (i);
        Figure predecessorFigure = (Figure) fFigures.get (i - 1);
        currentFigure.setZValue (predecessorFigure.getZValue ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="291" endline="301">
private void assignFiguresToSuccessorZValue (int lowerBound, int upperBound) {
    if (upperBound >= fFigures.size ()) {
        upperBound = fFigures.size () - 1;
    }
    for (int i = upperBound;
    i >= lowerBound; i --) {
        Figure currentFigure = (Figure) fFigures.get (i);
        Figure successorFigure = (Figure) fFigures.get (i + 1);
        currentFigure.setZValue (successorFigure.getZValue ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="312" endline="319">
public int getLayer (Figure figure) {
    if (! containsFigure (figure)) {
        return - 1;
    } else {
        return fFigures.indexOf (figure);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="329" endline="336">
public Figure getFigureFromLayer (int layerNr) {
    if ((layerNr >= 0) && (layerNr < fFigures.size ())) {
        return (Figure) fFigures.get (layerNr);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="342" endline="344">
public void draw (Graphics g) {
    draw (g, figures ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="350" endline="354">
public void draw (Graphics g, FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().draw (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="359" endline="361">
public Figure figureAt (int i) {
    return (Figure) fFigures.get (i);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="370" endline="372">
public FigureEnumeration figures () {
    return new FigureEnumerator (CollectionsFactory.current ().createList (fFigures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="379" endline="406">
public FigureEnumeration figures (Rectangle viewRectangle) {
    if (_theQuadTree != null) {
        FigureEnumeration fe = _theQuadTree.getAllWithin (new Bounds (viewRectangle).asRectangle2D ());
        List l2 = CollectionsFactory.current ().createList ();
        while (fe.hasNextFigure ()) {
            Figure f = fe.nextFigure ();
            l2.add (new OrderedFigureElement (f, f.getZValue ()));
        }
        Collections.sort (l2);
        List l3 = CollectionsFactory.current ().createList ();
        for (Iterator iter = l2.iterator ();
        iter.hasNext ();) {
            OrderedFigureElement ofe = (OrderedFigureElement) iter.next ();
            l3.add (ofe.getFigure ());
        }
        return new FigureEnumerator (l3);
    }
    return figures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="411" endline="413">
public int figureCount () {
    return fFigures.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="418" endline="420">
public boolean containsFigure (Figure checkFigure) {
    return fFigures.contains (checkFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="426" endline="428">
public final FigureEnumeration figuresReverse () {
    return new ReverseFigureEnumerator (CollectionsFactory.current ().createList (fFigures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="434" endline="443">
public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="448" endline="458">
public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="469" endline="482">
public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="490" endline="504">
public Figure findFigure (Rectangle r, Figure without) {
    if (without == null) {
        return findFigure (r);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="512" endline="528">
public Figure findFigureInside (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ().findFigureInside (x, y);
        if (figure != null) {
            return figure;
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="536" endline="558">
public Figure findFigureInsideWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigureInside (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure != without) {
            Figure found = figure.findFigureInside (x, y);
            if ((found != null) && ! figure.includes (without)) {
                return found;
            }
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="565" endline="578">
public boolean includes (Figure figure) {
    if (super.includes (figure)) {
        return true;
    }
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (f.includes (figure)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="586" endline="591">
protected void basicMoveBy (int x, int y) {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().moveBy (x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="596" endline="604">
public void release () {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.release ();
    }
    super.release ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="610" endline="614">
public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="620" endline="624">
public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="630" endline="634">
public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="636" endline="639">
public void figureChanged (FigureChangeEvent e) {
    _removeFromQuadTree (e.getFigure ());
    _addToQuadTree (e.getFigure ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="641" endline="645">
public void figureRemoved (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRemoved (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="650" endline="657">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (figureCount ());
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        dw.writeStorable (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="662" endline="670">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    int size = dr.readInt ();
    fFigures = CollectionsFactory.current ().createList (size);
    for (int i = 0;
    i < size; i ++) {
        add ((Figure) dr.readStorable ());
    }
    init (displayBox ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="672" endline="684">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.addToContainer (this);
    }
    init (new Rectangle (0, 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="697" endline="704">
public void init (Rectangle viewRectangle) {
    _theQuadTree = new QuadTree (new Bounds (viewRectangle).asRectangle2D ());
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        _addToQuadTree (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="706" endline="721">
private void _addToQuadTree (Figure f) {
    if (_theQuadTree != null) {
        Rectangle r = f.displayBox ();
        if (r.height == 0) {
            r.grow (0, 1);
        }
        if (r.width == 0) {
            r.grow (1, 0);
        }
        _theQuadTree.add (f, new Bounds (r).asRectangle2D ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="723" endline="727">
private void _removeFromQuadTree (Figure f) {
    if (_theQuadTree != null) {
        _theQuadTree.remove (f);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CompositeFigure.java" startline="729" endline="733">
private void _clearQuadTree () {
    if (_theQuadTree != null) {
        _theQuadTree.clear ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="37" endline="42">
static public void addCornerHandles (Figure f, List handles) {
    handles.add (southEast (f));
    handles.add (southWest (f));
    handles.add (northEast (f));
    handles.add (northWest (f));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="48" endline="54">
static public void addHandles (Figure f, List handles) {
    addCornerHandles (f, handles);
    handles.add (south (f));
    handles.add (north (f));
    handles.add (east (f));
    handles.add (west (f));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="56" endline="58">
static public Handle south (Figure owner) {
    return new SouthHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="60" endline="62">
static public Handle southEast (Figure owner) {
    return new SouthEastHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="64" endline="66">
static public Handle southWest (Figure owner) {
    return new SouthWestHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="68" endline="70">
static public Handle north (Figure owner) {
    return new NorthHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="72" endline="74">
static public Handle northEast (Figure owner) {
    return new NorthEastHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="76" endline="78">
static public Handle northWest (Figure owner) {
    return new NorthWestHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="80" endline="82">
static public Handle east (Figure owner) {
    return new EastHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="84" endline="86">
static public Handle west (Figure owner) {
    return new WestHandle (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="90" endline="92">
ResizeHandle (Figure owner, Locator loc) {
    super (owner, loc);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="94" endline="98">
public void invokeStart (int x, int y, DrawingView view) {
    setUndoActivity (createUndoActivity (view));
    getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (owner ()));
    ((ResizeHandle.UndoActivity) getUndoActivity ()).setOldDisplayBox (owner ().displayBox ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="100" endline="106">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle oldDisplayBox = ((ResizeHandle.UndoActivity) getUndoActivity ()).getOldDisplayBox ();
    if (owner ().displayBox ().equals (oldDisplayBox)) {
        setUndoActivity (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="111" endline="113">
protected Undoable createUndoActivity (DrawingView view) {
    return new ResizeHandle.UndoActivity (view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="118" endline="122">
public UndoActivity (DrawingView newView) {
    super (newView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="124" endline="130">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    return resetDisplayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="132" endline="139">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    return resetDisplayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="141" endline="152">
private boolean resetDisplayBox () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    Figure currentFigure = fe.nextFigure ();
    Rectangle figureDisplayBox = currentFigure.displayBox ();
    currentFigure.displayBox (getOldDisplayBox ());
    setOldDisplayBox (figureDisplayBox);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="154" endline="156">
protected void setOldDisplayBox (Rectangle newOldDisplayBox) {
    myOldDisplayBox = newOldDisplayBox;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="158" endline="160">
public Rectangle getOldDisplayBox () {
    return myOldDisplayBox;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="165" endline="167">
NorthEastHandle (Figure owner) {
    super (owner, RelativeLocator.northEast ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="169" endline="175">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (r.x, Math.min (r.y + r.height, y)), new Point (Math.max (r.x, x), r.y + r.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="179" endline="181">
EastHandle (Figure owner) {
    super (owner, RelativeLocator.east ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="183" endline="188">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (r.x, r.y), new Point (Math.max (r.x, x), r.y + r.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="192" endline="194">
NorthHandle (Figure owner) {
    super (owner, RelativeLocator.north ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="196" endline="202">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (r.x, Math.min (r.y + r.height, y)), new Point (r.x + r.width, r.y + r.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="206" endline="208">
NorthWestHandle (Figure owner) {
    super (owner, RelativeLocator.northWest ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="210" endline="216">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (Math.min (r.x + r.width, x), Math.min (r.y + r.height, y)), new Point (r.x + r.width, r.y + r.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="220" endline="222">
SouthEastHandle (Figure owner) {
    super (owner, RelativeLocator.southEast ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="224" endline="230">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (r.x, r.y), new Point (Math.max (r.x, x), Math.max (r.y, y)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="234" endline="236">
SouthHandle (Figure owner) {
    super (owner, RelativeLocator.south ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="238" endline="244">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (r.x, r.y), new Point (r.x + r.width, Math.max (r.y, y)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="248" endline="250">
SouthWestHandle (Figure owner) {
    super (owner, RelativeLocator.southWest ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="252" endline="258">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (Math.min (r.x + r.width, x), r.y), new Point (r.x + r.width, Math.max (r.y, y)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="262" endline="264">
WestHandle (Figure owner) {
    super (owner, RelativeLocator.west ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BoxHandleKit.java" startline="266" endline="272">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Rectangle r = owner ().displayBox ();
    owner ().displayBox (new Point (Math.min (r.x + r.width, x), r.y), new Point (r.x + r.width, r.y + r.height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ReverseFigureEnumerator.java" startline="29" endline="32">
public ReverseFigureEnumerator (List l) {
    myInitialList = l;
    reset ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ReverseFigureEnumerator.java" startline="38" endline="40">
public boolean hasNextFigure () {
    return myIterator.hasNext ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ReverseFigureEnumerator.java" startline="47" endline="49">
public Figure nextFigure () {
    return (Figure) myIterator.next ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ReverseFigureEnumerator.java" startline="57" endline="59">
public void reset () {
    myIterator = new ReverseListEnumerator (myInitialList);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="64" endline="70">
public AbstractTool (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
    setEventDispatcher (createEventDispatcher ());
    setEnabled (true);
    checkUsable ();
    editor ().addViewChangeListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="81" endline="87">
public void activate () {
    if (getActiveView () != null) {
        getActiveView ().clearSelection ();
        getActiveView ().checkDamage ();
        getEventDispatcher ().fireToolActivatedEvent ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="96" endline="103">
public void deactivate () {
    if (isActive ()) {
        if (getActiveView () != null) {
            getActiveView ().setCursor (Cursor.getDefaultCursor ());
        }
        getEventDispatcher ().fireToolDeactivatedEvent ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="110" endline="117">
public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
    if (isActive ()) {
        deactivate ();
        activate ();
    }
    checkUsable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="122" endline="123">
public void viewCreated (DrawingView view) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="128" endline="129">
public void viewDestroying (DrawingView view) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="134" endline="138">
public void mouseDown (MouseEvent e, int x, int y) {
    setAnchorX (x);
    setAnchorY (y);
    setView ((DrawingView) e.getSource ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="143" endline="144">
public void mouseDrag (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="149" endline="154">
public void mouseUp (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="159" endline="160">
public void mouseMove (MouseEvent evt, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="165" endline="166">
public void keyDown (KeyEvent evt, int key) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="171" endline="173">
public Drawing drawing () {
    return view ().drawing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="175" endline="177">
public Drawing getActiveDrawing () {
    return getActiveView ().drawing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="182" endline="184">
public DrawingEditor editor () {
    return myDrawingEditor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="186" endline="188">
protected void setEditor (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="193" endline="195">
public DrawingView view () {
    return myDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="197" endline="199">
protected void setView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="201" endline="203">
public DrawingView getActiveView () {
    return editor ().view ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="208" endline="210">
public boolean isUsable () {
    return isEnabled () && myIsUsable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="212" endline="223">
public void setUsable (boolean newIsUsable) {
    if (isUsable () != newIsUsable) {
        myIsUsable = newIsUsable;
        if (isUsable ()) {
            getEventDispatcher ().fireToolUsableEvent ();
        } else {
            getEventDispatcher ().fireToolUnusableEvent ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="225" endline="238">
public void setEnabled (boolean newIsEnabled) {
    if (isEnabled () != newIsEnabled) {
        myIsEnabled = newIsEnabled;
        if (isEnabled ()) {
            getEventDispatcher ().fireToolEnabledEvent ();
        } else {
            getEventDispatcher ().fireToolDisabledEvent ();
            setUsable (false);
            deactivate ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="240" endline="242">
public boolean isEnabled () {
    return myIsEnabled;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="248" endline="250">
protected void setAnchorX (int newAnchorX) {
    myAnchorX = newAnchorX;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="258" endline="260">
protected int getAnchorX () {
    return myAnchorX;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="266" endline="268">
protected void setAnchorY (int newAnchorY) {
    myAnchorY = newAnchorY;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="276" endline="278">
protected int getAnchorY () {
    return myAnchorY;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="280" endline="282">
public Undoable getUndoActivity () {
    return myUndoActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="284" endline="286">
public void setUndoActivity (Undoable newUndoActivity) {
    myUndoActivity = newUndoActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="288" endline="290">
public boolean isActive () {
    return (editor ().tool () == this) && isUsable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="292" endline="294">
public void addToolListener (ToolListener newToolListener) {
    getEventDispatcher ().addToolListener (newToolListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="296" endline="298">
public void removeToolListener (ToolListener oldToolListener) {
    getEventDispatcher ().removeToolListener (oldToolListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="300" endline="302">
private void setEventDispatcher (AbstractTool.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="304" endline="306">
protected AbstractTool.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="308" endline="310">
public AbstractTool.EventDispatcher createEventDispatcher () {
    return new AbstractTool.EventDispatcher (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="312" endline="316">
protected void checkUsable () {
    if (isEnabled ()) {
        setUsable ((getActiveView () != null) && getActiveView ().isInteractive ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="322" endline="325">
public EventDispatcher (Tool newObservedTool) {
    myRegisteredListeners = CollectionsFactory.current ().createList ();
    myObservedTool = newObservedTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="327" endline="332">
public void fireToolUsableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUsable (new EventObject (myObservedTool));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="334" endline="339">
public void fireToolUnusableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUnusable (new EventObject (myObservedTool));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="341" endline="346">
public void fireToolActivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolActivated (new EventObject (myObservedTool));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="348" endline="353">
public void fireToolDeactivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDeactivated (new EventObject (myObservedTool));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="355" endline="360">
public void fireToolEnabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolEnabled (new EventObject (myObservedTool));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="362" endline="367">
public void fireToolDisabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDisabled (new EventObject (myObservedTool));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="369" endline="373">
public void addToolListener (ToolListener newToolListener) {
    if (! myRegisteredListeners.contains (newToolListener)) {
        myRegisteredListeners.add (newToolListener);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractTool.java" startline="375" endline="379">
public void removeToolListener (ToolListener oldToolListener) {
    if (myRegisteredListeners.contains (oldToolListener)) {
        myRegisteredListeners.remove (oldToolListener);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleTracker.java" startline="28" endline="31">
public HandleTracker (DrawingEditor newDrawingEditor, Handle anchorHandle) {
    super (newDrawingEditor);
    fAnchorHandle = anchorHandle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleTracker.java" startline="33" endline="36">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    fAnchorHandle.invokeStart (x, y, view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleTracker.java" startline="38" endline="41">
public void mouseDrag (MouseEvent e, int x, int y) {
    super.mouseDrag (e, x, y);
    fAnchorHandle.invokeStep (x, y, getAnchorX (), getAnchorY (), view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleTracker.java" startline="43" endline="46">
public void mouseUp (MouseEvent e, int x, int y) {
    super.mouseUp (e, x, y);
    fAnchorHandle.invokeEnd (x, y, getAnchorX (), getAnchorY (), view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/HandleTracker.java" startline="48" endline="51">
public void activate () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="132" endline="134">
public StandardDrawingView (DrawingEditor editor) {
    this (editor, MINIMUM_WIDTH, MINIMUM_HEIGHT);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="136" endline="156">
public StandardDrawingView (DrawingEditor editor, int width, int height) {
    setAutoscrolls (true);
    counter ++;
    fEditor = editor;
    fViewSize = new Dimension (width, height);
    setSize (width, height);
    fSelectionListeners = CollectionsFactory.current ().createList ();
    addFigureSelectionListener (editor ());
    setLastClick (new Point (0, 0));
    fConstrainer = null;
    fSelection = CollectionsFactory.current ().createList ();
    setDisplayUpdate (createDisplayUpdate ());
    setBackground (Color.lightGray);
    addMouseListener (createMouseListener ());
    addMouseMotionListener (createMouseMotionListener ());
    addKeyListener (createKeyListener ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="158" endline="160">
protected MouseListener createMouseListener () {
    return new DrawingViewMouseListener ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="162" endline="164">
protected MouseMotionListener createMouseMotionListener () {
    return new DrawingViewMouseMotionListener ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="166" endline="168">
protected KeyListener createKeyListener () {
    return new DrawingViewKeyListener ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="173" endline="176">
protected Painter createDisplayUpdate () {
    return new SimpleUpdateStrategy ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="181" endline="183">
public void setEditor (DrawingEditor editor) {
    fEditor = editor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="188" endline="190">
public Tool tool () {
    return editor ().tool ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="195" endline="197">
public Drawing drawing () {
    return fDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="202" endline="215">
public void setDrawing (Drawing d) {
    if (drawing () != null) {
        clearSelection ();
        drawing ().removeDrawingChangeListener (this);
    }
    fDrawing = d;
    if (drawing () != null) {
        drawing ().addDrawingChangeListener (this);
    }
    checkMinimumSize ();
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="220" endline="222">
public DrawingEditor editor () {
    return fEditor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="228" endline="230">
public Figure add (Figure figure) {
    return drawing ().add (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="236" endline="238">
public Figure remove (Figure figure) {
    return drawing ().remove (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="243" endline="248">
public void addAll (Collection figures) {
    FigureEnumeration fe = new FigureEnumerator (figures);
    while (fe.hasNextFigure ()) {
        add (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="253" endline="263">
public boolean figureExists (Figure inf, FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.includes (inf)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="272" endline="321">
public FigureEnumeration insertFigures (FigureEnumeration fe, int dx, int dy, boolean bCheck) {
    if (fe == null) {
        return FigureEnumerator.getEmptyEnumeration ();
    }
    List vCF = CollectionsFactory.current ().createList (10);
    InsertIntoDrawingVisitor visitor = new InsertIntoDrawingVisitor (drawing ());
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure instanceof ConnectionFigure) {
            vCF.add (figure);
        } else if (figure != null) {
            figure.moveBy (dx, dy);
            figure.visit (visitor);
        }

    }
    FigureEnumeration ecf = new FigureEnumerator (vCF);
    while (ecf.hasNextFigure ()) {
        ConnectionFigure cf = (ConnectionFigure) ecf.nextFigure ();
        Figure sf = cf.startFigure ();
        Figure ef = cf.endFigure ();
        if (figureExists (sf, drawing ().figures ()) && figureExists (ef, drawing ().figures ()) && (! bCheck || cf.canConnect (sf, ef))) {
            if (bCheck) {
                Point sp = sf.center ();
                Point ep = ef.center ();
                Connector fStartConnector = cf.startFigure ().connectorAt (ep.x, ep.y);
                Connector fEndConnector = cf.endFigure ().connectorAt (sp.x, sp.y);
                if (fEndConnector != null && fStartConnector != null) {
                    cf.connectStart (fStartConnector);
                    cf.connectEnd (fEndConnector);
                    cf.updateConnection ();
                }
            }
            cf.visit (visitor);
        }
    }
    addToSelectionAll (visitor.getInsertedFigures ());
    return visitor.getInsertedFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="326" endline="353">
public FigureEnumeration getConnectionFigures (Figure inFigure) {
    if (inFigure == null || ! inFigure.canConnect ()) {
        return null;
    }
    List result = CollectionsFactory.current ().createList (5);
    FigureEnumeration figures = drawing ().figures ();
    while (figures.hasNextFigure ()) {
        Figure f = figures.nextFigure ();
        if ((f instanceof ConnectionFigure) && ! (isFigureSelected (f))) {
            ConnectionFigure cf = (ConnectionFigure) f;
            if (cf.startFigure ().includes (inFigure) || cf.endFigure ().includes (inFigure)) {
                result.add (f);
            }
        }
    }
    return new FigureEnumerator (result);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="358" endline="360">
public Dimension getMinimumSize () {
    return fViewSize;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="365" endline="367">
public Dimension getPreferredSize () {
    return getMinimumSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="373" endline="375">
public void setDisplayUpdate (Painter updateStrategy) {
    fUpdateStrategy = updateStrategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="381" endline="383">
public Painter getDisplayUpdate () {
    return fUpdateStrategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="392" endline="394">
public FigureEnumeration selection () {
    return selectionZOrdered ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="402" endline="413">
public FigureEnumeration selectionZOrdered () {
    List result = CollectionsFactory.current ().createList (selectionCount ());
    FigureEnumeration figures = drawing ().figures ();
    while (figures.hasNextFigure ()) {
        Figure f = figures.nextFigure ();
        if (isFigureSelected (f)) {
            result.add (f);
        }
    }
    return new ReverseFigureEnumerator (result);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="418" endline="420">
public int selectionCount () {
    return fSelection.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="425" endline="427">
public boolean isFigureSelected (Figure checkFigure) {
    return fSelection.contains (checkFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="433" endline="440">
public void addToSelection (Figure figure) {
    if (! isFigureSelected (figure) && drawing ().includes (figure)) {
        fSelection.add (figure);
        fSelectionHandles = null;
        figure.invalidate ();
        fireSelectionChanged ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="445" endline="447">
public void addToSelectionAll (Collection figures) {
    addToSelectionAll (new FigureEnumerator (figures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="452" endline="456">
public void addToSelectionAll (FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        addToSelection (fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="461" endline="468">
public void removeFromSelection (Figure figure) {
    if (isFigureSelected (figure)) {
        fSelection.remove (figure);
        fSelectionHandles = null;
        figure.invalidate ();
        fireSelectionChanged ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="474" endline="482">
public void toggleSelection (Figure figure) {
    if (isFigureSelected (figure)) {
        removeFromSelection (figure);
    } else {
        addToSelection (figure);
    }
    fireSelectionChanged ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="487" endline="501">
public void clearSelection () {
    if (selectionCount () == 0) {
        return;
    }
    FigureEnumeration fe = selection ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().invalidate ();
    }
    fSelection = CollectionsFactory.current ().createList ();
    fSelectionHandles = null;
    fireSelectionChanged ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="506" endline="519">
protected HandleEnumeration selectionHandles () {
    if (fSelectionHandles == null) {
        fSelectionHandles = CollectionsFactory.current ().createList ();
        FigureEnumeration fe = selection ();
        while (fe.hasNextFigure ()) {
            Figure figure = fe.nextFigure ();
            HandleEnumeration kk = figure.handles ();
            while (kk.hasNextHandle ()) {
                fSelectionHandles.add (kk.nextHandle ());
            }
        }
    }
    return new HandleEnumerator (fSelectionHandles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="525" endline="527">
public FigureSelection getFigureSelection () {
    return new StandardFigureSelection (selectionZOrdered (), selectionCount ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="533" endline="544">
public Handle findHandle (int x, int y) {
    Handle handle;
    HandleEnumeration he = selectionHandles ();
    while (he.hasNextHandle ()) {
        handle = he.nextHandle ();
        if (handle.containsPoint (x, y)) {
            return handle;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="551" endline="558">
protected void fireSelectionChanged () {
    if (fSelectionListeners != null) {
        for (int i = 0;
        i < fSelectionListeners.size (); i ++) {
            FigureSelectionListener l = (FigureSelectionListener) fSelectionListeners.get (i);
            l.figureSelectionChanged (this);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="560" endline="562">
protected Rectangle getDamage () {
    return fDamage;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="564" endline="566">
protected void setDamage (Rectangle r) {
    fDamage = r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="571" endline="573">
public Point lastClick () {
    return fLastClick;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="575" endline="577">
protected void setLastClick (Point newLastClick) {
    fLastClick = newLastClick;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="582" endline="584">
public void setConstrainer (PointConstrainer c) {
    fConstrainer = c;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="589" endline="591">
public PointConstrainer getConstrainer () {
    return fConstrainer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="596" endline="608">
protected Point constrainPoint (Point p) {
    Dimension size = getSize ();
    p.x = Geom.range (1, size.width, p.x);
    p.y = Geom.range (1, size.height, p.y);
    if (fConstrainer != null) {
        return fConstrainer.constrainPoint (p);
    }
    return p;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="610" endline="616">
private void moveSelection (int dx, int dy) {
    FigureEnumeration figures = selection ();
    while (figures.hasNextFigure ()) {
        figures.nextFigure ().moveBy (dx, dy);
    }
    checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="621" endline="629">
public synchronized void checkDamage () {
    Iterator each = drawing ().drawingChangeListeners ();
    while (each.hasNext ()) {
        Object l = each.next ();
        if (l instanceof DrawingView) {
            ((DrawingView) l).repairDamage ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="631" endline="636">
public void repairDamage () {
    if (getDamage () != null) {
        repaint (getDamage ().x, getDamage ().y, getDamage ().width, getDamage ().height);
        setDamage (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="638" endline="650">
public void drawingInvalidated (DrawingChangeEvent e) {
    Rectangle r = e.getInvalidatedRectangle ();
    if (getDamage () == null) {
        setDamage (r);
    } else {
        Rectangle damagedR = getDamage ();
        damagedR.add (r);
        setDamage (damagedR);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="652" endline="654">
public void drawingRequestUpdate (DrawingChangeEvent e) {
    repairDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="656" endline="657">
public void drawingTitleChanged (DrawingChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="664" endline="666">
protected void paintComponent (Graphics g) {
    getDisplayUpdate ().draw (g, this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="673" endline="686">
public void drawAll (Graphics g) {
    boolean isPrinting = g instanceof PrintGraphics;
    drawBackground (g);
    if ((fBackgrounds != null) && ! isPrinting) {
        drawPainters (g, fBackgrounds);
    }
    drawDrawing (g);
    if ((fForegrounds != null) && ! isPrinting) {
        drawPainters (g, fForegrounds);
    }
    if (! isPrinting) {
        drawHandles (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="694" endline="707">
public void draw (Graphics g, FigureEnumeration fe) {
    boolean isPrinting = g instanceof PrintGraphics;
    if ((fBackgrounds != null) && ! isPrinting) {
        drawPainters (g, fBackgrounds);
    }
    drawing ().draw (g, fe);
    if ((fForegrounds != null) && ! isPrinting) {
        drawPainters (g, fForegrounds);
    }
    if (! isPrinting) {
        drawHandles (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="712" endline="717">
public void drawHandles (Graphics g) {
    HandleEnumeration he = selectionHandles ();
    while (he.hasNextHandle ()) {
        (he.nextHandle ()).draw (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="722" endline="724">
public void drawDrawing (Graphics g) {
    drawing ().draw (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="731" endline="734">
public void drawBackground (Graphics g) {
    g.setColor (getBackground ());
    g.fillRect (0, 0, getBounds ().width, getBounds ().height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="736" endline="740">
protected void drawPainters (Graphics g, List v) {
    for (int i = 0;
    i < v.size (); i ++) {
        ((Painter) v.get (i)).draw (g, this);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="745" endline="751">
public void addBackground (Painter painter) {
    if (fBackgrounds == null) {
        fBackgrounds = CollectionsFactory.current ().createList (3);
    }
    fBackgrounds.add (painter);
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="756" endline="761">
public void removeBackground (Painter painter) {
    if (fBackgrounds != null) {
        fBackgrounds.remove (painter);
    }
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="763" endline="765">
protected List getBackgrounds () {
    return fBackgrounds;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="770" endline="775">
public void removeForeground (Painter painter) {
    if (fForegrounds != null) {
        fForegrounds.remove (painter);
    }
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="780" endline="786">
public void addForeground (Painter painter) {
    if (fForegrounds == null) {
        fForegrounds = CollectionsFactory.current ().createList (3);
    }
    fForegrounds.add (painter);
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="788" endline="790">
protected List getForegrounds () {
    return fForegrounds;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="796" endline="798">
public void freezeView () {
    drawing ().lock ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="804" endline="806">
public void unfreezeView () {
    drawing ().unlock ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="808" endline="818">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    fSelection = CollectionsFactory.current ().createList ();
    if (drawing () != null) {
        drawing ().addDrawingChangeListener (this);
    }
    fSelectionListeners = CollectionsFactory.current ().createList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="820" endline="828">
protected void checkMinimumSize () {
    Dimension d = getDrawingSize ();
    if (fViewSize.height < d.height || fViewSize.width < d.width) {
        fViewSize.height = d.height + SCROLL_OFFSET;
        fViewSize.width = d.width + SCROLL_OFFSET;
        setSize (fViewSize);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="834" endline="843">
protected Dimension getDrawingSize () {
    FigureEnumeration fe = drawing ().figures ();
    Dimension d = new Dimension (0, 0);
    while (fe.hasNextFigure ()) {
        Rectangle r = fe.nextFigure ().displayBox ();
        d.width = Math.max (d.width, r.x + r.width);
        d.height = Math.max (d.height, r.y + r.height);
    }
    return d;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="845" endline="847">
public boolean isFocusTraversable () {
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="849" endline="851">
public boolean isInteractive () {
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="853" endline="853">
public void keyTyped (KeyEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="854" endline="854">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="860" endline="862">
public void addFigureSelectionListener (FigureSelectionListener fsl) {
    fSelectionListeners.add (fsl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="868" endline="870">
public void removeFigureSelectionListener (FigureSelectionListener fsl) {
    fSelectionListeners.remove (fsl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="872" endline="874">
public int getDefaultDNDActions () {
    return java.awt.dnd.DnDConstants.ACTION_COPY_OR_MOVE;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="880" endline="882">
public void autoscroll (java.awt.Point p) {
    ash.autoscroll (p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="883" endline="885">
public Insets getAutoscrollInsets () {
    return ash.getAutoscrollInsets ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="887" endline="889">
public ASH (int margin) {
    super (margin);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="890" endline="892">
public Dimension getSize () {
    return StandardDrawingView.this.getSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="893" endline="895">
public Rectangle getVisibleRect () {
    return StandardDrawingView.this.getVisibleRect ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="896" endline="898">
public void scrollRectToVisible (Rectangle aRect) {
    StandardDrawingView.this.scrollRectToVisible (aRect);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="901" endline="903">
public String toString () {
    return "DrawingView Nr: " + myCounter;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="910" endline="915">
protected void handleMouseEventException (Throwable t) {
    JOptionPane.showMessageDialog (this, t.getClass ().getName () + " - " + t.getMessage (), "Error", JOptionPane.ERROR_MESSAGE);
    t.printStackTrace ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="922" endline="933">
public void mousePressed (MouseEvent e) {
    try {
        requestFocus ();
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        setLastClick (new Point (e.getX (), e.getY ()));
        tool ().mouseDown (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="939" endline="948">
public void mouseReleased (MouseEvent e) {
    try {
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        tool ().mouseUp (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="956" endline="965">
public void mouseDragged (MouseEvent e) {
    try {
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        tool ().mouseDrag (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="971" endline="978">
public void mouseMoved (MouseEvent e) {
    try {
        tool ().mouseMove (e, e.getX (), e.getY ());
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="984" endline="986">
public DrawingViewKeyListener () {
    deleteCmd = createDeleteCommand ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="993" endline="1009">
public void keyPressed (KeyEvent e) {
    int code = e.getKeyCode ();
    if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_DELETE)) {
        if (deleteCmd.isExecutable ()) {
            deleteCmd.execute ();
        }
    } else if ((code == KeyEvent.VK_DOWN) || (code == KeyEvent.VK_UP) || (code == KeyEvent.VK_RIGHT) || (code == KeyEvent.VK_LEFT)) {
        handleCursorKey (code);
    } else {
        tool ().keyDown (e, code);
    }

    checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1015" endline="1039">
protected void handleCursorKey (int key) {
    int dx = 0, dy = 0;
    int stepX = 1, stepY = 1;
    if (fConstrainer != null) {
        stepX = fConstrainer.getStepX ();
        stepY = fConstrainer.getStepY ();
    }
    switch (key) {
        case KeyEvent.VK_DOWN :
            dy = stepY;
            break;
        case KeyEvent.VK_UP :
            dy = - stepY;
            break;
        case KeyEvent.VK_RIGHT :
            dx = stepX;
            break;
        case KeyEvent.VK_LEFT :
            dx = - stepX;
            break;
    }
    moveSelection (dx, dy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1041" endline="1043">
public void keyTyped (KeyEvent event) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1045" endline="1047">
public void keyReleased (KeyEvent event) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1049" endline="1051">
protected Command createDeleteCommand () {
    return new UndoableCommand (new DeleteCommand ("Delete", editor ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1054" endline="1060">
protected DNDHelper createDNDHelper () {
    return new DNDHelper () {
        protected DrawingView view () {
            return StandardDrawingView.this;
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1056" endline="1058">
protected DrawingView view () {
    return StandardDrawingView.this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1062" endline="1067">
protected DNDHelper getDNDHelper () {
    if (dndh == null) {
        dndh = createDNDHelper ();
    }
    return dndh;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1069" endline="1071">
public boolean setDragSourceActive (boolean state) {
    return getDNDHelper ().setDragSourceActive (state);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/StandardDrawingView.java" startline="1073" endline="1075">
public boolean setDropTargetActive (boolean state) {
    return getDNDHelper ().setDropTargetActive (state);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureEnumerator.java" startline="33" endline="36">
public FigureEnumerator (Collection c) {
    myInitialCollection = c;
    reset ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureEnumerator.java" startline="42" endline="44">
public boolean hasNextFigure () {
    return myIterator.hasNext ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureEnumerator.java" startline="51" endline="53">
public Figure nextFigure () {
    return (Figure) myIterator.next ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureEnumerator.java" startline="55" endline="57">
public static FigureEnumeration getEmptyEnumeration () {
    return singletonEmptyEnumerator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/FigureEnumerator.java" startline="65" endline="67">
public void reset () {
    myIterator = myInitialCollection.iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractLocator.java" startline="36" endline="37">
protected AbstractLocator () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractLocator.java" startline="39" endline="46">
public Object clone () {
    try {
        return super.clone ();
    } catch (CloneNotSupportedException e) {
        throw new InternalError ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractLocator.java" startline="51" endline="52">
public void write (StorableOutput dw) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/AbstractLocator.java" startline="57" endline="58">
public void read (StorableInput dr) throws IOException {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullHandle.java" startline="36" endline="38">
public NullHandle (Figure owner, Locator locator) {
    super (owner, locator);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullHandle.java" startline="44" endline="49">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.black);
    g.drawRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="59" endline="62">
public CreationTool (DrawingEditor newDrawingEditor, Figure prototype) {
    super (newDrawingEditor);
    setPrototypeFigure (prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="68" endline="70">
protected CreationTool (DrawingEditor newDrawingEditor) {
    this (newDrawingEditor, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="75" endline="80">
public void activate () {
    super.activate ();
    if (isUsable ()) {
        getActiveView ().setCursor (Cursor.getPredefinedCursor (Cursor.CROSSHAIR_CURSOR));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="85" endline="90">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    setCreatedFigure (createFigure ());
    setAddedFigure (view ().add (getCreatedFigure ()));
    getAddedFigure ().displayBox (new Point (getAnchorX (), getAnchorY ()), new Point (getAnchorX (), getAnchorY ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="95" endline="100">
protected Figure createFigure () {
    if (getPrototypeFigure () == null) {
        throw new JHotDrawRuntimeException ("No protoype defined");
    }
    return (Figure) getPrototypeFigure ().clone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="105" endline="109">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (getAddedFigure () != null) {
        getAddedFigure ().displayBox (new Point (getAnchorX (), getAnchorY ()), new Point (x, y));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="116" endline="134">
public void mouseUp (MouseEvent e, int x, int y) {
    if (getAddedFigure () != null) {
        if (getCreatedFigure ().isEmpty ()) {
            drawing ().remove (getAddedFigure ());
            setUndoActivity (null);
        } else {
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
        }
        setAddedFigure (null);
    }
    setCreatedFigure (null);
    editor ().toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="142" endline="144">
protected void setPrototypeFigure (Figure newPrototypeFigure) {
    myPrototypeFigure = newPrototypeFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="152" endline="154">
protected Figure getPrototypeFigure () {
    return myPrototypeFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="159" endline="161">
protected Figure getCreatedFigure () {
    return fCreatedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="166" endline="168">
protected void setCreatedFigure (Figure newCreatedFigure) {
    fCreatedFigure = newCreatedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="174" endline="176">
protected Figure getAddedFigure () {
    return myAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="181" endline="183">
protected void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/CreationTool.java" startline="188" endline="190">
protected Undoable createUndoActivity () {
    return new PasteCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/BufferedUpdateStrategy.java" startline="44" endline="59">
public void draw (Graphics g, DrawingView view) {
    Dimension d = view.getSize ();
    if ((fOffscreen == null) || (d.width != fImagewidth) || (d.height != fImageheight)) {
        fOffscreen = view.createImage (d.width, d.height);
        fImagewidth = d.width;
        fImageheight = d.height;
    }
    Graphics g2 = fOffscreen.getGraphics ();
    view.drawAll (g2);
    g.drawImage (fOffscreen, 0, 0, view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullTool.java" startline="26" endline="28">
public NullTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullTool.java" startline="30" endline="32">
public void activate () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullTool.java" startline="34" endline="36">
public void deactivate () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/NullTool.java" startline="38" endline="40">
protected void checkUsable () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="30" endline="32">
public DeleteCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="34" endline="40">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="42" endline="44">
protected boolean isExecutableWithView () {
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="49" endline="51">
protected Undoable createUndoActivity () {
    return new DeleteCommand.UndoActivity (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="56" endline="61">
public UndoActivity (FigureTransferCommand newCommand) {
    super (newCommand.view ());
    myCommand = newCommand;
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="63" endline="72">
public boolean undo () {
    if (super.undo () && getAffectedFigures ().hasNextFigure ()) {
        getDrawingView ().clearSelection ();
        setAffectedFigures (myCommand.insertFigures (getAffectedFigures (), 0, 0));
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/DeleteCommand.java" startline="74" endline="84">
public boolean redo () {
    if (isRedoable ()) {
        myCommand.deleteFigures (getAffectedFigures ());
        getDrawingView ().clearSelection ();
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="39" endline="43">
protected ChangeConnectionHandle (Figure owner) {
    super (owner);
    setConnection ((ConnectionFigure) owner ());
    setTargetFigure (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="69" endline="74">
protected Connector source () {
    if (target () == getConnection ().getStartConnector ()) {
        return getConnection ().getEndConnector ();
    }
    return getConnection ().getStartConnector ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="79" endline="87">
public void invokeStart (int x, int y, DrawingView view) {
    fOriginalTarget = target ();
    fStart = new Point (x, y);
    setUndoActivity (createUndoActivity (view));
    ((ChangeConnectionHandle.UndoActivity) getUndoActivity ()).setOldConnector (target ());
    disconnect ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="92" endline="111">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Point p = new Point (x, y);
    Figure f = findConnectableFigure (x, y, view.drawing ());
    if (f != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (f);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector target = findConnectionTarget (p.x, p.y, view.drawing ());
    if (target != null) {
        p = Geom.center (target.displayBox ());
    }
    setPoint (p.x, p.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="117" endline="143">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Connector target = findConnectionTarget (x, y, view.drawing ());
    if (target == null) {
        target = fOriginalTarget;
    }
    setPoint (x, y);
    connect (target);
    getConnection ().updateConnection ();
    Connector oldConnector = ((ChangeConnectionHandle.UndoActivity) getUndoActivity ()).getOldConnector ();
    if ((oldConnector == null) || (target () == null) || (oldConnector.owner () == target ().owner ())) {
        setUndoActivity (null);
    } else {
        getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getConnection ()));
    }
    if (getTargetFigure () != null) {
        getTargetFigure ().connectorVisibility (false, null);
        setTargetFigure (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="145" endline="155">
private Connector findConnectionTarget (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    if ((target != null) && target.canConnect () && target != fOriginalTarget && ! target.includes (owner ()) && getConnection ().canConnect (source ().owner (), target)) {
        return findConnector (x, y, target);
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="157" endline="159">
protected Connector findConnector (int x, int y, Figure f) {
    return f.connectorAt (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="164" endline="172">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.green);
    g.fillRect (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="174" endline="185">
private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="187" endline="189">
protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="191" endline="193">
protected ConnectionFigure getConnection () {
    return myConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="195" endline="197">
protected void setTargetFigure (Figure newTarget) {
    myTarget = newTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="199" endline="201">
protected Figure getTargetFigure () {
    return myTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="211" endline="215">
public UndoActivity (DrawingView newView) {
    super (newView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="217" endline="224">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    swapConnectors ();
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="226" endline="234">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    swapConnectors ();
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="236" endline="243">
private void swapConnectors () {
    FigureEnumeration fe = getAffectedFigures ();
    if (fe.hasNextFigure ()) {
        ConnectionFigure connection = (ConnectionFigure) fe.nextFigure ();
        setOldConnector (replaceConnector (connection));
        connection.updateConnection ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="247" endline="249">
public void setOldConnector (Connector newOldConnector) {
    myOldConnector = newOldConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ChangeConnectionHandle.java" startline="251" endline="253">
public Connector getOldConnector () {
    return myOldConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="55" endline="58">
public ConnectionHandle (Figure owner, Locator l, ConnectionFigure prototype) {
    super (owner, l);
    fPrototype = prototype;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="63" endline="69">
public void invokeStart (int x, int y, DrawingView view) {
    setConnection (createConnection ());
    Point p = locate ();
    getConnection ().startPoint (p.x, p.y);
    getConnection ().endPoint (p.x, p.y);
    view.drawing ().add (getConnection ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="74" endline="93">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Point p = new Point (x, y);
    Figure f = findConnectableFigure (x, y, view.drawing ());
    if (f != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (f);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector target = findConnectionTarget (p.x, p.y, view.drawing ());
    if (target != null) {
        p = Geom.center (target.displayBox ());
    }
    getConnection ().endPoint (p.x, p.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="99" endline="114">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Connector target = findConnectionTarget (x, y, view.drawing ());
    if (target != null) {
        getConnection ().connectStart (startConnector ());
        getConnection ().connectEnd (target);
        getConnection ().updateConnection ();
    } else {
        view.drawing ().remove (getConnection ());
    }
    setConnection (null);
    if (getTargetFigure () != null) {
        getTargetFigure ().connectorVisibility (false, null);
        setTargetFigure (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="116" endline="119">
private Connector startConnector () {
    Point p = locate ();
    return owner ().connectorAt (p.x, p.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="125" endline="127">
protected ConnectionFigure createConnection () {
    return (ConnectionFigure) fPrototype.clone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="132" endline="140">
protected Connector findConnectionTarget (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    if ((target != null) && target.canConnect () && ! target.includes (owner ()) && getConnection ().canConnect (owner (), target)) {
        return findConnector (x, y, target);
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="142" endline="152">
private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="154" endline="156">
protected Connector findConnector (int x, int y, Figure f) {
    return f.connectorAt (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="163" endline="167">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.blue);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="169" endline="171">
protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="173" endline="175">
protected ConnectionFigure getConnection () {
    return myConnection;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="177" endline="179">
protected Figure getTargetFigure () {
    return myTargetFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/standard/ConnectionHandle.java" startline="181" endline="183">
protected void setTargetFigure (Figure newTargetFigure) {
    myTargetFigure = newTargetFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/RedoCommand.java" startline="29" endline="31">
public RedoCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/RedoCommand.java" startline="33" endline="51">
public void execute () {
    super.execute ();
    UndoManager um = getDrawingEditor ().getUndoManager ();
    if ((um == null) || ! um.isRedoable ()) {
        return;
    }
    Undoable lastRedoable = um.popRedo ();
    boolean hasBeenUndone = lastRedoable.redo ();
    if (hasBeenUndone && lastRedoable.isUndoable ()) {
        um.pushUndo (lastRedoable);
    }
    lastRedoable.getDrawingView ().checkDamage ();
    getDrawingEditor ().figureSelectionChanged (lastRedoable.getDrawingView ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/RedoCommand.java" startline="58" endline="65">
public boolean isExecutableWithView () {
    UndoManager um = getDrawingEditor ().getUndoManager ();
    if ((um != null) && (um.getRedoSize () > 0)) {
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CollectionsFactory.java" startline="42" endline="44">
public static CollectionsFactory current () {
    return factory;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CollectionsFactory.java" startline="46" endline="55">
protected static CollectionsFactory determineCollectionsFactory () {
    String jdkVersion = null;
    if (isJDK12 ()) {
        jdkVersion = "12";
    } else {
        jdkVersion = "11";
    }
    return createCollectionsFactory (jdkVersion);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CollectionsFactory.java" startline="57" endline="66">
protected static boolean isJDK12 () {
    try {
        Class.forName (JAVA_UTIL_LIST);
        return true;
    } catch (ClassNotFoundException e) {
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CollectionsFactory.java" startline="68" endline="82">
protected static CollectionsFactory createCollectionsFactory (String jdkVersion) {
    try {
        Class factoryClass = Class.forName (COLLECTIONS_FACTORY_PACKAGE + jdkVersion + ".CollectionsFactoryJDK" + jdkVersion);
        return (CollectionsFactory) factoryClass.newInstance ();
    } catch (ClassNotFoundException e) {
        throw new JHotDrawRuntimeException (e);
    } catch (InstantiationException e) {
        throw new JHotDrawRuntimeException (e);
    } catch (IllegalAccessException e) {
        throw new JHotDrawRuntimeException (e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="33" endline="35">
public PaletteLayout (int gap) {
    this (gap, new Point (0, 0), true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="37" endline="39">
public PaletteLayout (int gap, Point border) {
    this (gap, border, true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="41" endline="45">
public PaletteLayout (int gap, Point border, boolean vertical) {
    fGap = gap;
    fBorder = border;
    fVerticalLayout = vertical;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="47" endline="48">
public void addLayoutComponent (String name, Component comp) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="50" endline="51">
public void removeLayoutComponent (Component comp) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="53" endline="55">
public Dimension preferredLayoutSize (Container target) {
    return minimumLayoutSize (target);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="57" endline="88">
public Dimension minimumLayoutSize (Container target) {
    Dimension dim = new Dimension (0, 0);
    int nmembers = target.getComponentCount ();
    for (int i = 0;
    i < nmembers; i ++) {
        Component m = target.getComponent (i);
        if (m.isVisible ()) {
            Dimension d = m.getMinimumSize ();
            if (fVerticalLayout) {
                dim.width = Math.max (dim.width, d.width);
                if (i > 0) {
                    dim.height += fGap;
                }
                dim.height += d.height;
            } else {
                dim.height = Math.max (dim.height, d.height);
                if (i > 0) {
                    dim.width += fGap;
                }
                dim.width += d.width;
            }
        }
    }
    Insets insets = target.getInsets ();
    dim.width += insets.left + insets.right;
    dim.width += 2 * fBorder.x;
    dim.height += insets.top + insets.bottom;
    dim.height += 2 * fBorder.y;
    return dim;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteLayout.java" startline="90" endline="111">
public void layoutContainer (Container target) {
    Insets insets = target.getInsets ();
    int nmembers = target.getComponentCount ();
    int x = insets.left + fBorder.x;
    int y = insets.top + fBorder.y;
    for (int i = 0;
    i < nmembers; i ++) {
        Component m = target.getComponent (i);
        if (m.isVisible ()) {
            Dimension d = m.getMinimumSize ();
            m.setBounds (x, y, d.width, d.height);
            if (fVerticalLayout) {
                y += d.height;
                y += fGap;
            } else {
                x += d.width;
                x += fGap;
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoCommand.java" startline="35" endline="37">
public UndoCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoCommand.java" startline="39" endline="58">
public void execute () {
    super.execute ();
    UndoManager um = getDrawingEditor ().getUndoManager ();
    if ((um == null) || ! um.isUndoable ()) {
        return;
    }
    Undoable lastUndoable = um.popUndo ();
    boolean hasBeenUndone = lastUndoable.undo ();
    if (hasBeenUndone && lastUndoable.isRedoable ()) {
        um.pushRedo (lastUndoable);
    }
    lastUndoable.getDrawingView ().checkDamage ();
    getDrawingEditor ().figureSelectionChanged (lastUndoable.getDrawingView ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoCommand.java" startline="65" endline="73">
public boolean isExecutableWithView () {
    UndoManager um = getDrawingEditor ().getUndoManager ();
    if ((um != null) && (um.getUndoSize () > 0)) {
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseVectorEnumerator.java" startline="26" endline="29">
public ReverseVectorEnumerator (Vector v) {
    vector = v;
    count = vector.size () - 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseVectorEnumerator.java" startline="31" endline="33">
public boolean hasMoreElements () {
    return count >= 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseVectorEnumerator.java" startline="35" endline="40">
public Object nextElement () {
    if (count >= 0) {
        return vector.elementAt (count --);
    }
    throw new NoSuchElementException ("ReverseVectorEnumerator");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="36" endline="40">
public StorableOutput (OutputStream stream) {
    fStream = new PrintWriter (stream);
    fMap = CollectionsFactory.current ().createList ();
    fIndent = 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="45" endline="65">
public void writeStorable (Storable storable) {
    if (storable == null) {
        fStream.print ("NULL");
        space ();
        return;
    }
    if (mapped (storable)) {
        writeRef (storable);
        return;
    }
    incrementIndent ();
    startNewLine ();
    map (storable);
    fStream.print (storable.getClass ().getName ());
    space ();
    storable.write (this);
    space ();
    decrementIndent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="70" endline="73">
public void writeInt (int i) {
    fStream.print (i);
    space ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="78" endline="81">
public void writeLong (long l) {
    fStream.print (l);
    space ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="83" endline="87">
public void writeColor (Color c) {
    writeInt (c.getRed ());
    writeInt (c.getGreen ());
    writeInt (c.getBlue ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="92" endline="95">
public void writeDouble (double d) {
    fStream.print (d);
    space ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="100" endline="108">
public void writeBoolean (boolean b) {
    if (b) {
        fStream.print (1);
    } else {
        fStream.print (0);
    }
    space ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="114" endline="129">
public void writeString (String s) {
    fStream.print ('"');
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        switch (c) {
            case '\n' :
                fStream.print ('\\');
                fStream.print ('n');
                break;
            case '"' :
                fStream.print ('\\');
                fStream.print ('"');
                break;
            case '\\' :
                fStream.print ('\\');
                fStream.print ('\\');
                break;
            case '\t' :
                fStream.print ('\\');
                fStream.print ('\t');
                break;
            default :
                fStream.print (c);
        }
    }
    fStream.print ('"');
    space ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="134" endline="136">
public void close () {
    fStream.close ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="138" endline="140">
private boolean mapped (Storable storable) {
    return fMap.contains (storable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="142" endline="146">
private void map (Storable storable) {
    if (! fMap.contains (storable)) {
        fMap.add (storable);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="148" endline="155">
private void writeRef (Storable storable) {
    int ref = fMap.indexOf (storable);
    fStream.print ("REF");
    space ();
    fStream.print (ref);
    space ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="157" endline="159">
private void incrementIndent () {
    fIndent += 4;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="161" endline="164">
private void decrementIndent () {
    fIndent -= 4;
    if (fIndent < 0) fIndent = 0;

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="166" endline="171">
private void startNewLine () {
    fStream.println ();
    for (int i = 0;
    i < fIndent; i ++) {
        space ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableOutput.java" startline="173" endline="175">
private void space () {
    fStream.print (' ');
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="34" endline="36">
public UndoableAdapter (DrawingView newDrawingView) {
    setDrawingView (newDrawingView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="42" endline="44">
public boolean undo () {
    return isUndoable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="50" endline="52">
public boolean redo () {
    return isRedoable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="54" endline="56">
public boolean isUndoable () {
    return myIsUndoable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="58" endline="60">
public void setUndoable (boolean newIsUndoable) {
    myIsUndoable = newIsUndoable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="62" endline="64">
public boolean isRedoable () {
    return myIsRedoable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="66" endline="68">
public void setRedoable (boolean newIsRedoable) {
    myIsRedoable = newIsRedoable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="70" endline="74">
public void setAffectedFigures (FigureEnumeration newAffectedFigures) {
    rememberFigures (newAffectedFigures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="76" endline="78">
public FigureEnumeration getAffectedFigures () {
    return new FigureEnumerator (CollectionsFactory.current ().createList (myAffectedFigures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="80" endline="82">
public int getAffectedFiguresCount () {
    return myAffectedFigures.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="84" endline="89">
protected void rememberFigures (FigureEnumeration toBeRemembered) {
    myAffectedFigures = CollectionsFactory.current ().createList ();
    while (toBeRemembered.hasNextFigure ()) {
        myAffectedFigures.add (toBeRemembered.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="94" endline="100">
public void release () {
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().release ();
    }
    setAffectedFigures (FigureEnumerator.getEmptyEnumeration ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="109" endline="112">
protected void duplicateAffectedFigures () {
    setAffectedFigures (StandardFigureSelection.duplicateFigures (getAffectedFigures (), getAffectedFiguresCount ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="114" endline="116">
public DrawingView getDrawingView () {
    return myDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableAdapter.java" startline="118" endline="120">
protected void setDrawingView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="28" endline="32">
public UndoableCommand (Command newWrappedCommand) {
    setWrappedCommand (newWrappedCommand);
    getWrappedCommand ().addCommandListener (this);
    setEventDispatcher (createEventDispatcher ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="37" endline="59">
public void execute () {
    hasSelectionChanged = false;
    view ().addFigureSelectionListener (this);
    getWrappedCommand ().execute ();
    Undoable undoableCommand = getWrappedCommand ().getUndoActivity ();
    if ((undoableCommand != null) && (undoableCommand.isUndoable ())) {
        getDrawingEditor ().getUndoManager ().pushUndo (undoableCommand);
        getDrawingEditor ().getUndoManager ().clearRedos ();
    }
    if (! hasSelectionChanged || (getDrawingEditor ().getUndoManager ().getUndoSize () == 1)) {
        getDrawingEditor ().figureSelectionChanged (view ());
    }
    view ().removeFigureSelectionListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="64" endline="66">
public boolean isExecutable () {
    return getWrappedCommand ().isExecutable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="68" endline="70">
protected void setWrappedCommand (Command newWrappedCommand) {
    myWrappedCommand = newWrappedCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="72" endline="74">
protected Command getWrappedCommand () {
    return myWrappedCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="79" endline="81">
public String name () {
    return getWrappedCommand ().name ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="83" endline="85">
public DrawingEditor getDrawingEditor () {
    return getWrappedCommand ().getDrawingEditor ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="87" endline="89">
public DrawingView view () {
    return getDrawingEditor ().view ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="91" endline="93">
public void figureSelectionChanged (DrawingView view) {
    hasSelectionChanged = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="95" endline="97">
public Undoable getUndoActivity () {
    return new UndoableAdapter (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="99" endline="101">
public void setUndoActivity (Undoable newUndoableActivity) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="103" endline="105">
public void addCommandListener (CommandListener newCommandListener) {
    getEventDispatcher ().addCommandListener (newCommandListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="107" endline="109">
public void removeCommandListener (CommandListener oldCommandListener) {
    getEventDispatcher ().removeCommandListener (oldCommandListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="111" endline="113">
private void setEventDispatcher (AbstractCommand.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="115" endline="117">
protected AbstractCommand.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="119" endline="121">
public AbstractCommand.EventDispatcher createEventDispatcher () {
    return new AbstractCommand.EventDispatcher (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="123" endline="125">
public void commandExecuted (EventObject commandEvent) {
    getEventDispatcher ().fireCommandExecutedEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="127" endline="129">
public void commandExecutable (EventObject commandEvent) {
    getEventDispatcher ().fireCommandExecutableEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableCommand.java" startline="131" endline="133">
public void commandNotExecutable (EventObject commandEvent) {
    getEventDispatcher ().fireCommandNotExecutableEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="43" endline="45">
public UndoManager () {
    this (DEFAULT_BUFFER_SIZE);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="47" endline="51">
public UndoManager (int newUndoStackSize) {
    maxStackCapacity = newUndoStackSize;
    undoStack = CollectionsFactory.current ().createList (maxStackCapacity);
    redoStack = CollectionsFactory.current ().createList (maxStackCapacity);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="53" endline="64">
public void pushUndo (Undoable undoActivity) {
    if (undoActivity.isUndoable ()) {
        removeFirstElementInFullList (undoStack);
        undoStack.add (undoActivity);
    } else {
        undoStack = CollectionsFactory.current ().createList (maxStackCapacity);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="66" endline="83">
public void pushRedo (Undoable redoActivity) {
    if (redoActivity.isRedoable ()) {
        removeFirstElementInFullList (redoStack);
        if ((getRedoSize () == 0) || (peekRedo () != redoActivity)) {
            redoStack.add (redoActivity);
        }
    } else {
        redoStack = CollectionsFactory.current ().createList (maxStackCapacity);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="88" endline="93">
private void removeFirstElementInFullList (List l) {
    if (l.size () >= maxStackCapacity) {
        Undoable removedActivity = (Undoable) l.remove (0);
        removedActivity.release ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="95" endline="102">
private Undoable getLastElement (List l) {
    if (l.size () > 0) {
        return (Undoable) l.get (l.size () - 1);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="103" endline="110">
public boolean isUndoable () {
    if (getUndoSize () > 0) {
        return getLastElement (undoStack).isUndoable ();
    } else {
        return false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="112" endline="119">
public boolean isRedoable () {
    if (getRedoSize () > 0) {
        return getLastElement (redoStack).isRedoable ();
    } else {
        return false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="121" endline="128">
protected Undoable peekUndo () {
    if (getUndoSize () > 0) {
        return getLastElement (undoStack);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="130" endline="137">
protected Undoable peekRedo () {
    if (getRedoSize () > 0) {
        return getLastElement (redoStack);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="142" endline="144">
public int getUndoSize () {
    return undoStack.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="149" endline="151">
public int getRedoSize () {
    return redoStack.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="156" endline="164">
public Undoable popUndo () {
    Undoable lastUndoable = peekUndo ();
    undoStack.remove (getUndoSize () - 1);
    return lastUndoable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="169" endline="177">
public Undoable popRedo () {
    Undoable lastUndoable = peekRedo ();
    redoStack.remove (getRedoSize () - 1);
    return lastUndoable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="179" endline="181">
public void clearUndos () {
    clearStack (undoStack);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="183" endline="185">
public void clearRedos () {
    clearStack (redoStack);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="187" endline="189">
protected void clearStack (List clearStack) {
    clearStack.clear ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="195" endline="203">
public void clearUndos (DrawingView checkDV) {
    Iterator iter = undoStack.iterator ();
    while (iter.hasNext ()) {
        Undoable currentUndo = (Undoable) iter.next ();
        if (currentUndo.getDrawingView () == checkDV) {
            iter.remove ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoManager.java" startline="209" endline="217">
public void clearRedos (DrawingView checkDV) {
    Iterator iter = redoStack.iterator ();
    while (iter.hasNext ()) {
        Undoable currentRedo = (Undoable) iter.next ();
        if (currentRedo.getDrawingView () == checkDV) {
            iter.remove ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseListEnumerator.java" startline="28" endline="31">
public ReverseListEnumerator (List l) {
    myList = l;
    count = myList.size () - 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseListEnumerator.java" startline="33" endline="35">
public boolean hasNext () {
    return count >= 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseListEnumerator.java" startline="37" endline="42">
public Object next () {
    if (count >= 0) {
        return myList.get (count --);
    }
    throw new NoSuchElementException ("ReverseListEnumerator");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ReverseListEnumerator.java" startline="44" endline="47">
public void remove () {
    myList.remove (count);
    count --;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="22" endline="24">
public CollectionsFactoryJDK12 () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="26" endline="28">
public List createList () {
    return new ArrayList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="30" endline="32">
public List createList (Collection initList) {
    return new ArrayList (initList);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="34" endline="36">
public List createList (int initSize) {
    return new ArrayList (initSize);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="38" endline="40">
public Map createMap () {
    return new Hashtable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="42" endline="44">
public Map createMap (Map initMap) {
    return new Hashtable (initMap);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="46" endline="48">
public Set createSet () {
    return new HashSet ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk12/CollectionsFactoryJDK12.java" startline="50" endline="52">
public Set createSet (Set initSet) {
    return new HashSet (initSet);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="22" endline="24">
public SetWrapper () {
    myDelegee = new Hashtable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="26" endline="32">
public SetWrapper (Set initSet) {
    myDelegee = new Hashtable ();
    Iterator iter = initSet.iterator ();
    while (iter.hasNext ()) {
        add (iter.next ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="34" endline="36">
public int size () {
    return myDelegee.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="38" endline="40">
public boolean isEmpty () {
    return myDelegee.isEmpty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="42" endline="44">
public boolean contains (Object o) {
    return myDelegee.containsKey (o);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="46" endline="48">
public Iterator iterator () {
    return new IteratorWrapper (myDelegee.elements ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="50" endline="52">
public Object [] toArray () {
    return new Object [0];
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="54" endline="56">
public Object [] toArray (Object a []) {
    return new Object [0];
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="58" endline="60">
public boolean add (Object o) {
    return myDelegee.put (o, o) == null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="62" endline="64">
public boolean remove (Object o) {
    return myDelegee.remove (o) != null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="66" endline="68">
public boolean containsAll (Collection c) {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="70" endline="72">
public boolean addAll (Collection c) {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="74" endline="76">
public boolean retainAll (Collection c) {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="78" endline="80">
public boolean removeAll (Collection c) {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/SetWrapper.java" startline="82" endline="84">
public void clear () {
    myDelegee.clear ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="22" endline="24">
public CollectionsFactoryJDK11 () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="26" endline="28">
public List createList () {
    return new ListWrapper ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="30" endline="32">
public List createList (Collection initList) {
    return new ListWrapper (initList);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="34" endline="36">
public List createList (int initSize) {
    return new ListWrapper (initSize);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="38" endline="40">
public Map createMap () {
    return new MapWrapper ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="42" endline="44">
public Map createMap (Map initMap) {
    return new MapWrapper (initMap);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="46" endline="48">
public Set createSet () {
    return new SetWrapper ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/CollectionsFactoryJDK11.java" startline="50" endline="52">
public Set createSet (Set initSet) {
    return new SetWrapper (initSet);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="23" endline="25">
public MapWrapper () {
    myDelegee = new Hashtable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="27" endline="29">
public MapWrapper (Map copyMap) {
    myDelegee = new Hashtable (copyMap);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="31" endline="33">
public int size () {
    return myDelegee.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="35" endline="37">
public boolean isEmpty () {
    return myDelegee.isEmpty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="39" endline="41">
public boolean containsKey (Object key) {
    return myDelegee.containsKey (key);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="43" endline="45">
public boolean containsValue (Object value) {
    return myDelegee.containsKey (value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="47" endline="49">
public Object get (Object key) {
    return myDelegee.get (key);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="51" endline="53">
public Object put (Object key, Object value) {
    return myDelegee.put (key, value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="55" endline="57">
public Object remove (Object key) {
    return myDelegee.remove (key);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="59" endline="61">
public void putAll (Map t) {
    myDelegee.putAll (t);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="63" endline="65">
public void clear () {
    myDelegee.clear ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="67" endline="69">
public Set keySet () {
    return myDelegee.keySet ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="71" endline="73">
public Collection values () {
    return myDelegee.values ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/MapWrapper.java" startline="75" endline="77">
public Set entrySet () {
    return myDelegee.entrySet ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/IteratorWrapper.java" startline="23" endline="25">
public IteratorWrapper (Enumeration enumeration) {
    myEnumeration = enumeration;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/IteratorWrapper.java" startline="27" endline="29">
public boolean hasNext () {
    return myEnumeration.hasMoreElements ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/IteratorWrapper.java" startline="31" endline="33">
public Object next () {
    return myEnumeration.nextElement ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/IteratorWrapper.java" startline="35" endline="38">
public void remove () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="23" endline="25">
public ListWrapper () {
    myDelegee = new Vector ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="27" endline="29">
public ListWrapper (int initialSize) {
    myDelegee = new Vector (initialSize);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="31" endline="33">
public ListWrapper (Collection copyCollection) {
    myDelegee = new Vector (copyCollection);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="35" endline="37">
public int size () {
    return myDelegee.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="39" endline="41">
public boolean isEmpty () {
    return myDelegee.isEmpty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="43" endline="45">
public boolean contains (Object o) {
    return myDelegee.contains (o);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="47" endline="49">
public Iterator iterator () {
    return new IteratorWrapper (myDelegee.elements ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="51" endline="53">
public Object [] toArray () {
    return myDelegee.toArray ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="55" endline="57">
public Object [] toArray (Object a []) {
    return myDelegee.toArray (a);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="59" endline="61">
public boolean add (Object o) {
    return myDelegee.add (o);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="63" endline="65">
public boolean remove (Object o) {
    return myDelegee.removeElement (o);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="67" endline="69">
public boolean containsAll (Collection c) {
    return myDelegee.containsAll (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="71" endline="73">
public boolean addAll (Collection c) {
    return myDelegee.addAll (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="75" endline="77">
public boolean addAll (int index, Collection c) {
    return myDelegee.addAll (index, c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="79" endline="81">
public boolean removeAll (Collection c) {
    return myDelegee.removeAll (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="83" endline="85">
public boolean retainAll (Collection c) {
    return myDelegee.retainAll (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="87" endline="89">
public void clear () {
    myDelegee.clear ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="91" endline="93">
public Object get (int index) {
    return myDelegee.elementAt (index);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="95" endline="97">
public Object set (int index, Object element) {
    return myDelegee.set (index, element);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="99" endline="101">
public void add (int index, Object element) {
    myDelegee.add (index, element);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="103" endline="105">
public Object remove (int index) {
    return myDelegee.remove (index);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="107" endline="109">
public int indexOf (Object o) {
    return myDelegee.indexOf (o);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="111" endline="113">
public int lastIndexOf (Object o) {
    return myDelegee.lastIndexOf (o);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="115" endline="117">
public ListIterator listIterator () {
    return myDelegee.listIterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="119" endline="121">
public ListIterator listIterator (int index) {
    return myDelegee.listIterator (index);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/collections/jdk11/ListWrapper.java" startline="123" endline="125">
public List subList (int fromIndex, int toIndex) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="33" endline="35">
public FloatingTextField () {
    fEditWidget = new JTextField (20);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="40" endline="42">
public void createOverlay (Container container) {
    createOverlay (container, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="48" endline="54">
public void createOverlay (Container container, Font font) {
    container.add (fEditWidget, 0);
    if (font != null) {
        fEditWidget.setFont (font);
    }
    fContainer = container;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="59" endline="61">
public void addActionListener (ActionListener listener) {
    fEditWidget.addActionListener (listener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="66" endline="68">
public void removeActionListener (ActionListener listener) {
    fEditWidget.removeActionListener (listener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="73" endline="79">
public void setBounds (Rectangle r, String text) {
    fEditWidget.setText (text);
    fEditWidget.setBounds (r.x, r.y, r.width, r.height);
    fEditWidget.setVisible (true);
    fEditWidget.selectAll ();
    fEditWidget.requestFocus ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="84" endline="86">
public String getText () {
    return fEditWidget.getText ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="91" endline="94">
public Dimension getPreferredSize (int cols) {
    fEditWidget.setColumns (cols);
    return fEditWidget.getPreferredSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/FloatingTextField.java" startline="99" endline="108">
public void endOverlay () {
    fContainer.requestFocus ();
    if (fEditWidget != null) {
        fEditWidget.setVisible (false);
        fContainer.remove (fEditWidget);
        Rectangle bounds = fEditWidget.getBounds ();
        fContainer.repaint (bounds.x, bounds.y, bounds.width, bounds.height);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardVersionControlStrategy.java" startline="23" endline="25">
public StandardVersionControlStrategy (VersionRequester newVersionRequester) {
    setVersionRequester (newVersionRequester);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardVersionControlStrategy.java" startline="31" endline="45">
public void assertCompatibleVersion () {
    String [] requiredVersions = getVersionRequester ().getRequiredVersions ();
    if (requiredVersions.length == 0) {
        return;
    }
    for (int i = 0;
    i < requiredVersions.length; i ++) {
        if (isCompatibleVersion (requiredVersions [i])) {
            return;
        }
    }
    handleIncompatibleVersions ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardVersionControlStrategy.java" startline="53" endline="69">
protected void handleIncompatibleVersions () {
    String [] requiredVersions = getVersionRequester ().getRequiredVersions ();
    StringBuffer expectedVersions = new StringBuffer ("[");
    for (int i = 0;
    i < requiredVersions.length - 1; i ++) {
        expectedVersions.append (requiredVersions [i] + ", ");
    }
    if (requiredVersions.length > 0) {
        expectedVersions.append (requiredVersions [requiredVersions.length - 1]);
    }
    expectedVersions.append ("]");
    throw new JHotDrawRuntimeException ("Incompatible version of JHotDraw found: " + VersionManagement.getJHotDrawVersion () + " (expected: " + expectedVersions + ")");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardVersionControlStrategy.java" startline="81" endline="83">
protected boolean isCompatibleVersion (String compareVersionString) {
    return VersionManagement.isCompatibleVersion (compareVersionString);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardVersionControlStrategy.java" startline="85" endline="87">
private void setVersionRequester (VersionRequester newVersionRequester) {
    myVersionRequester = newVersionRequester;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardVersionControlStrategy.java" startline="89" endline="91">
protected VersionRequester getVersionRequester () {
    return myVersionRequester;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="26" endline="29">
public UndoableHandle (Handle newWrappedHandle, DrawingView newDrawingView) {
    setWrappedHandle (newWrappedHandle);
    setDrawingView (newDrawingView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="35" endline="37">
public Point locate () {
    return getWrappedHandle ().locate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="47" endline="49">
public void invokeStart (int x, int y, Drawing drawing) {
    getWrappedHandle ().invokeStart (x, y, drawing);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="60" endline="62">
public void invokeStart (int x, int y, DrawingView view) {
    getWrappedHandle ().invokeStart (x, y, view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="72" endline="74">
public void invokeStep (int dx, int dy, Drawing drawing) {
    getWrappedHandle ().invokeStep (dx, dy, drawing);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="83" endline="85">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    getWrappedHandle ().invokeStep (x, y, anchorX, anchorY, view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="94" endline="102">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    getWrappedHandle ().invokeEnd (x, y, anchorX, anchorY, view);
    Undoable undoableActivity = getWrappedHandle ().getUndoActivity ();
    if ((undoableActivity != null) && (undoableActivity.isUndoable ())) {
        getDrawingView ().editor ().getUndoManager ().pushUndo (undoableActivity);
        getDrawingView ().editor ().getUndoManager ().clearRedos ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="110" endline="112">
public void invokeEnd (int dx, int dy, Drawing drawing) {
    getWrappedHandle ().invokeEnd (dx, dy, drawing);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="117" endline="119">
public Figure owner () {
    return getWrappedHandle ().owner ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="124" endline="126">
public Rectangle displayBox () {
    return getWrappedHandle ().displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="131" endline="133">
public boolean containsPoint (int x, int y) {
    return getWrappedHandle ().containsPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="138" endline="140">
public void draw (Graphics g) {
    getWrappedHandle ().draw (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="142" endline="144">
protected void setWrappedHandle (Handle newWrappedHandle) {
    myWrappedHandle = newWrappedHandle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="146" endline="148">
protected Handle getWrappedHandle () {
    return myWrappedHandle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="150" endline="152">
public DrawingView getDrawingView () {
    return myDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="154" endline="156">
protected void setDrawingView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="158" endline="160">
public Undoable getUndoActivity () {
    return new UndoableAdapter (getDrawingView ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableHandle.java" startline="162" endline="164">
public void setUndoActivity (Undoable newUndoableActivity) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Filler.java" startline="30" endline="32">
public Filler (int width, int height) {
    this (width, height, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Filler.java" startline="34" endline="38">
public Filler (int width, int height, Color background) {
    fWidth = width;
    fHeight = height;
    fBackground = background;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Filler.java" startline="40" endline="42">
public Dimension getMinimumSize () {
    return new Dimension (fWidth, fHeight);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Filler.java" startline="44" endline="46">
public Dimension getPreferredSize () {
    return getMinimumSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Filler.java" startline="48" endline="53">
public Color getBackground () {
    if (fBackground != null) {
        return fBackground;
    }
    return super.getBackground ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="46" endline="48">
public StorageFormatManager () {
    myStorageFormats = CollectionsFactory.current ().createList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="55" endline="57">
public void addStorageFormat (StorageFormat newStorageFormat) {
    myStorageFormats.add (newStorageFormat);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="65" endline="67">
public void removeStorageFormat (StorageFormat oldStorageFormat) {
    myStorageFormats.remove (oldStorageFormat);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="72" endline="74">
public boolean containsStorageFormat (StorageFormat checkStorageFormat) {
    return myStorageFormats.contains (checkStorageFormat);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="85" endline="87">
public void setDefaultStorageFormat (StorageFormat newDefaultStorageFormat) {
    myDefaultStorageFormat = newDefaultStorageFormat;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="94" endline="96">
public StorageFormat getDefaultStorageFormat () {
    return myDefaultStorageFormat;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="103" endline="113">
public void registerFileFilters (JFileChooser fileChooser) {
    Iterator formatsIterator = myStorageFormats.iterator ();
    while (formatsIterator.hasNext ()) {
        fileChooser.addChoosableFileFilter (((StorageFormat) formatsIterator.next ()).getFileFilter ());
    }
    if (getDefaultStorageFormat () != null) {
        fileChooser.setFileFilter (getDefaultStorageFormat ().getFileFilter ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorageFormatManager.java" startline="122" endline="133">
public StorageFormat findStorageFormat (FileFilter findFileFilter) {
    Iterator formatsIterator = myStorageFormats.iterator ();
    StorageFormat currentStorageFormat = null;
    while (formatsIterator.hasNext ()) {
        currentStorageFormat = (StorageFormat) formatsIterator.next ();
        if (currentStorageFormat.getFileFilter ().equals (findFileFilter)) {
            return currentStorageFormat;
        }
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="39" endline="51">
public JDOStorageFormat () {
    super ();
    pms = CollectionsFactory.current ().createMap ();
    Runtime.getRuntime ().addShutdownHook (new Thread () {
        public void run () {
            Iterator iter = pms.values ().iterator ();
        }}

    );
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="44" endline="49">
public void run () {
    Iterator iter = pms.values ().iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="60" endline="62">
protected String createFileExtension () {
    return "j2";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="70" endline="72">
public String createFileDescription () {
    return "Database (" + getFileExtension () + ")";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="81" endline="106">
public String store (String fileName, Drawing storeDrawing) throws IOException {
    PersistenceManager pm = getPersistenceManager (fileName);
    String drawingName = null;
    Drawing txnDrawing = crossTxnBoundaries (storeDrawing);
    endTransaction (pm, false);
    startTransaction (pm);
    try {
        Extent extent = pm.getExtent (StandardDrawing.class, true);
        DrawingListModel listModel = new DrawingListModel (extent.iterator ());
        drawingName = showStoreDialog (listModel, storeDrawing);
        if (drawingName != null) {
            storeDrawing.setTitle (drawingName);
            txnDrawing.setTitle (drawingName);
            pm.makePersistent (txnDrawing);
        }
    } finally {
        endTransaction (pm, (drawingName != null));
    }
    startTransaction (pm);
    return drawingName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="115" endline="140">
public synchronized Drawing restore (String fileName) throws IOException {
    PersistenceManager pm = getPersistenceManager (fileName);
    endTransaction (pm, false);
    startTransaction (pm);
    Drawing restoredDrawing = null;
    try {
        Extent extent = pm.getExtent (StandardDrawing.class, true);
        DrawingListModel listModel = new DrawingListModel (extent.iterator ());
        Drawing txnDrawing = showRestoreDialog (listModel);
        if (txnDrawing != null) {
            restoredDrawing = txnDrawing;
        }
    } finally {
        endTransaction (pm, false);
    }
    startTransaction (pm);
    return restoredDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="142" endline="148">
private void retrieveAll (PersistenceManager pm, Figure figure) {
    pm.retrieve (figure);
    FigureEnumeration fe = figure.figures ();
    while (fe.hasNextFigure ()) {
        retrieveAll (pm, fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="150" endline="153">
private Drawing crossTxnBoundaries (Drawing originalDrawing) {
    return (Drawing) ((StandardDrawing) originalDrawing).clone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="155" endline="162">
private synchronized PersistenceManager getPersistenceManager (String fileName) {
    PersistenceManager pm = (PersistenceManager) pms.get (fileName);
    if (pm == null) {
        pm = createPersistenceManagerFactory (fileName).getPersistenceManager ();
        pms.put (fileName, pm);
    }
    return pm;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="164" endline="177">
private PersistenceManagerFactory createPersistenceManagerFactory (String dbFileName) {
    Properties pmfProps = new Properties ();
    pmfProps.put ("javax.jdo.PersistenceManagerFactoryClass", "com.poet.jdo.PersistenceManagerFactories");
    pmfProps.put ("javax.jdo.option.ConnectionURL", "fastobjects://LOCAL/MyBase.j1");
    final PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory (pmfProps);
    return pmf;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="179" endline="183">
private static void startTransaction (PersistenceManager pm) {
    if (! pm.currentTransaction ().isActive ()) {
        pm.currentTransaction ().begin ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="185" endline="194">
private static void endTransaction (PersistenceManager pm, boolean doCommit) {
    if (pm.currentTransaction ().isActive ()) {
        if (doCommit) {
            pm.currentTransaction ().commit ();
        } else {
            pm.currentTransaction ().rollback ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="196" endline="231">
private String showStoreDialog (ListModel listModel, Drawing storeDrawing) {
    final String msgString = "Specify a name for the drawing";
    final JTextField nameTextField = new JTextField (storeDrawing.getTitle ());
    final JList dataList = new JList (listModel);
    final JScrollPane dbContentScrollPane = new JScrollPane (dataList);
    Object [] guiComponents = {msgString, dbContentScrollPane, nameTextField};
    dataList.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);
    dataList.setValueIsAdjusting (true);
    dataList.addListSelectionListener (new ListSelectionListener () {
        public void valueChanged (ListSelectionEvent e) {
            nameTextField.setText (dataList.getSelectedValue ().toString ());
        }}

    );
    final JOptionPane optionPane = new JOptionPane (guiComponents, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
    final JDialog dialog = optionPane.createDialog (null, "Restore a drawing from the database");
    dialog.setVisible (true);
    if ((optionPane.getValue () != null) && (optionPane.getValue ().equals (new Integer (JOptionPane.OK_OPTION)))) {
        return nameTextField.getText ();
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="207" endline="209">
public void valueChanged (ListSelectionEvent e) {
    nameTextField.setText (dataList.getSelectedValue ().toString ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="233" endline="259">
private Drawing showRestoreDialog (DrawingListModel listModel) {
    final String msgString = "Select a drawing";
    final JList dataList = new JList (listModel);
    final JScrollPane dbContentScrollPane = new JScrollPane (dataList);
    Object [] guiComponents = {msgString, dbContentScrollPane};
    dataList.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);
    dataList.setValueIsAdjusting (true);
    final JOptionPane optionPane = new JOptionPane (guiComponents, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
    final JDialog dialog = optionPane.createDialog (null, "Restore a drawing from the database");
    dialog.setVisible (true);
    if ((optionPane.getValue () != null) && (optionPane.getValue ().equals (new Integer (JOptionPane.OK_OPTION))) && (dataList.getSelectedIndex () >= 0) && (dataList.getSelectedIndex () < dataList.getModel ().getSize ())) {
        return listModel.getDrawingAt (dataList.getSelectedIndex ());
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="264" endline="271">
DrawingListModel (Iterator iter) {
    myList = CollectionsFactory.current ().createList ();
    while (iter.hasNext ()) {
        Object o = iter.next ();
        System.out.println ("extent: " + o + " .. " + ((Drawing) o).getTitle ());
        myList.add (o);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="273" endline="275">
public Object getElementAt (int index) {
    return getDrawingAt (index).getTitle ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="277" endline="279">
protected Drawing getDrawingAt (int index) {
    return ((Drawing) myList.get (index));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="281" endline="283">
public int getSize () {
    return myList.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="287" endline="289">
DrawingSelector () {
    init ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="291" endline="296">
private void init () {
    setTitle ("Select Drawing");
    getContentPane ().setLayout (new BorderLayout ());
    getContentPane ().add (new JLabel ("Database content"), BorderLayout.NORTH);
    setSize (200, 200);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/JDOStorageFormat.java" startline="299" endline="311">
public static void main (String [] args) {
    DrawingSelector frame = new DrawingSelector ();
    try {
        Drawing newDrawing = new StandardDrawing ();
        newDrawing.setTitle ("TestDrawingName" + new Random (System.currentTimeMillis ()).nextLong ());
        new JDOStorageFormat ().store ("base.j2", newDrawing);
        System.exit (0);
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteIcon.java" startline="30" endline="35">
public PaletteIcon (Dimension size, Image normal, Image pressed, Image selected) {
    fSize = size;
    fNormal = normal;
    fPressed = pressed;
    fSelected = selected;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteIcon.java" startline="37" endline="37">
public Image normal () {
    return fNormal;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteIcon.java" startline="38" endline="38">
public Image pressed () {
    return fPressed;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteIcon.java" startline="39" endline="39">
public Image selected () {
    return fSelected;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteIcon.java" startline="41" endline="41">
public int getWidth () {
    return fSize.width;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteIcon.java" startline="42" endline="42">
public int getHeight () {
    return fSize.height;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandButton.java" startline="34" endline="38">
public CommandButton (Command command) {
    super (command.name ());
    fCommand = command;
    addActionListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandButton.java" startline="45" endline="50">
public void actionPerformed (ActionEvent e) {
    fCommand.execute ();
    if (! getLabel ().equals (fCommand.name ())) {
        setLabel (fCommand.name ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="46" endline="50">
public static String getJHotDrawVersion () {
    Package pack = packages [4];
    return pack.getSpecificationVersion ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="55" endline="70">
public static String getPackageVersion (final Package lookupPackage) {
    if (lookupPackage == null) {
        return null;
    }
    String specVersion = lookupPackage.getSpecificationVersion ();
    if (specVersion != null) {
        return specVersion;
    } else {
        String normalizedPackageName = normalizePackageName (lookupPackage.getName ());
        String nextPackageName = getNextPackage (normalizedPackageName);
        return getPackageVersion (Package.getPackage (nextPackageName));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="78" endline="87">
public static boolean isCompatibleVersion (String compareVersionString) {
    Package pack = packages [4];
    if (compareVersionString == null) {
        return pack.getSpecificationVersion () == null;
    } else {
        return pack.isCompatibleWith (compareVersionString);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="97" endline="122">
public static String readVersionFromFile (String applicationName, String versionFileName) {
    try {
        FileInputStream fileInput = new FileInputStream (versionFileName);
        Manifest manifest = new Manifest ();
        manifest.read (fileInput);
        Map entries = manifest.getEntries ();
        Iterator entryIterator = entries.entrySet ().iterator ();
        while (entryIterator.hasNext ()) {
            Map.Entry currentEntry = (Map.Entry) entryIterator.next ();
            String packageName = currentEntry.getKey ().toString ();
            packageName = normalizePackageName (packageName);
            Attributes attributes = (Attributes) currentEntry.getValue ();
            String packageSpecVersion = attributes.getValue (Attributes.Name.SPECIFICATION_VERSION);
            packageSpecVersion = extractVersionInfo (packageSpecVersion);
            return packageSpecVersion;
        }
    } catch (IOException exception) {
        exception.printStackTrace ();
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="132" endline="144">
protected static String getNextPackage (String searchPackage) {
    if (searchPackage == null) {
        return null;
    }
    int foundNextPackage = searchPackage.lastIndexOf ('.');
    if (foundNextPackage > 0) {
        return searchPackage.substring (0, foundNextPackage);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="154" endline="166">
public static String normalizePackageName (String toBeNormalized) {
    String replaced = toBeNormalized.replace ('/', '.');
    replaced = replaced.replace (File.pathSeparatorChar, '.');
    if (replaced.endsWith (".")) {
        int lastSeparator = replaced.lastIndexOf ('.');
        return replaced.substring (0, lastSeparator);
    } else {
        return replaced;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/VersionManagement.java" startline="175" endline="199">
public static String extractVersionInfo (String versionString) {
    if (versionString == null) {
        return null;
    }
    if (versionString.length () == 0) {
        return "";
    }
    int startIndex = versionString.indexOf ("\"");
    if (startIndex < 0) {
        startIndex = 0;
    } else {
        startIndex ++;
    }
    int endIndex = versionString.lastIndexOf ("\"");
    if (endIndex < 0) {
        endIndex = versionString.length ();
    }
    return versionString.substring (startIndex, endIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandChoice.java" startline="31" endline="35">
public CommandChoice () {
    super ();
    fCommands = CollectionsFactory.current ().createList (10);
    addItemListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandChoice.java" startline="40" endline="43">
public synchronized void addItem (Command command) {
    addItem (command.name ());
    fCommands.add (command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandChoice.java" startline="48" endline="55">
public void itemStateChanged (ItemEvent e) {
    if ((getSelectedIndex () >= 0) && (getSelectedIndex () < fCommands.size ())) {
        Command command = (Command) fCommands.get (getSelectedIndex ());
        if (command.isExecutable ()) {
            command.execute ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="27" endline="29">
protected UndoRedoActivity (Undoable newReversedActivity) {
    setReversedActivity (newReversedActivity);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="35" endline="41">
public boolean undo () {
    if (isRedoable ()) {
        return getReversedActivity ().redo ();
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="47" endline="53">
public boolean redo () {
    if (isUndoable ()) {
        return getReversedActivity ().undo ();
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="58" endline="60">
public boolean isUndoable () {
    return getReversedActivity ().isRedoable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="65" endline="67">
public void setUndoable (boolean newIsUndoable) {
    getReversedActivity ().setRedoable (newIsUndoable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="72" endline="74">
public boolean isRedoable () {
    return getReversedActivity ().isUndoable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="79" endline="81">
public void setRedoable (boolean newIsRedoable) {
    getReversedActivity ().setUndoable (newIsRedoable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="83" endline="85">
public void setAffectedFigures (FigureEnumeration newAffectedFigures) {
    getReversedActivity ().setAffectedFigures (newAffectedFigures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="87" endline="89">
public FigureEnumeration getAffectedFigures () {
    return getReversedActivity ().getAffectedFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="91" endline="93">
public int getAffectedFiguresCount () {
    return getReversedActivity ().getAffectedFiguresCount ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="95" endline="97">
public DrawingView getDrawingView () {
    return getReversedActivity ().getDrawingView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="99" endline="101">
public void release () {
    getReversedActivity ().release ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="103" endline="105">
protected void setReversedActivity (Undoable newReversedActivity) {
    myReversedActivity = newReversedActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="107" endline="109">
public Undoable getReversedActivity () {
    return myReversedActivity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoRedoActivity.java" startline="111" endline="119">
public static Undoable createUndoRedoActivity (Undoable toBeReversed) {
    if (toBeReversed instanceof UndoRedoActivity) {
        return ((UndoRedoActivity) toBeReversed).getReversedActivity ();
    } else {
        return new UndoRedoActivity (toBeReversed);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="51" endline="56">
public Iconkit (Component component) {
    fMap = new Hashtable (53);
    fRegisteredImages = CollectionsFactory.current ().createList (10);
    fComponent = component;
    fgIconkit = this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="61" endline="63">
public static Iconkit instance () {
    return fgIconkit;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="69" endline="92">
public void loadRegisteredImages (Component component) {
    if (fRegisteredImages.size () == 0) return;

    MediaTracker tracker = new MediaTracker (component);
    Iterator iter = fRegisteredImages.iterator ();
    while (iter.hasNext ()) {
        String fileName = (String) iter.next ();
        if (basicGetImage (fileName) == null) {
            tracker.addImage (loadImage (fileName), ID);
        }
    }
    fRegisteredImages.clear ();
    try {
        tracker.waitForAll ();
    } catch (Exception e) {
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="99" endline="101">
public void registerImage (String fileName) {
    fRegisteredImages.add (fileName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="106" endline="110">
public Image registerAndLoadImage (Component component, String fileName) {
    registerImage (fileName);
    loadRegisteredImages (component);
    return getImage (fileName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="115" endline="124">
public Image loadImage (String filename) {
    if (fMap.containsKey (filename)) {
        return (Image) fMap.get (filename);
    }
    Image image = loadImageResource (filename);
    if (image != null) {
        fMap.put (filename, image);
    }
    return image;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="126" endline="133">
public Image loadImage (String filename, boolean waitForLoad) {
    Image image = loadImage (filename);
    if (image != null && waitForLoad) {
        ImageIcon icon = new ImageIcon (image);
        image = icon.getImage ();
    }
    return image;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="135" endline="147">
public Image loadImageResource (String resourcename) {
    Toolkit toolkit = Toolkit.getDefaultToolkit ();
    try {
        URL url = getClass ().getResource (resourcename);
        if (fgDebug) {
            System.out.println (resourcename);
        }
        return toolkit.createImage ((ImageProducer) url.getContent ());
    } catch (Exception ex) {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="154" endline="163">
public Image getImage (String filename) {
    Image image = basicGetImage (filename);
    if (image != null) {
        return image;
    }
    loadRegisteredImages (fComponent);
    return basicGetImage (filename);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Iconkit.java" startline="165" endline="170">
private Image basicGetImage (String filename) {
    if (fMap.containsKey (filename)) {
        return (Image) fMap.get (filename);
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="55" endline="55">
public GraphLayout () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="57" endline="59">
private GraphNode getGraphNode (Figure node) {
    return (GraphNode) nodes.get (node);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="61" endline="63">
private double len (Figure edge) {
    return ((Double) edges.get (edge)).doubleValue () * LENGTH_FACTOR;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="65" endline="68">
public void addNode (Figure node) {
    nodes.put (node, new GraphNode (node));
    node.addFigureChangeListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="70" endline="76">
public void addEdge (ConnectionFigure edge, int addlen) {
    Dimension d1 = edge.getStartConnector ().owner ().size ();
    Dimension d2 = edge.getEndConnector ().owner ().size ();
    int len = Math.max (d1.width, d1.height) / 2 + Math.max (d2.width, d2.height) / 2 + addlen;
    edges.put (edge, new Double (len));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="78" endline="180">
public synchronized void relax () {
    if (nodes == null) return;

    Enumeration edgeEnum = edges.keys ();
    while (edgeEnum.hasMoreElements ()) {
        ConnectionFigure e = (ConnectionFigure) edgeEnum.nextElement ();
        double targetlen = len (e);
        GraphNode from = getGraphNode (e.getStartConnector ().owner ());
        GraphNode to = getGraphNode (e.getEndConnector ().owner ());
        double vx = to.x - from.x;
        double vy = to.y - from.y;
        double len = Math.sqrt (vx * vx + vy * vy);
        if (len > 0) {
            double f = SPRING_STRENGTH * (targetlen - len) / len;
            double dx = f * vx;
            double dy = f * vy;
            double phi = Math.atan2 (vx, vy);
            double dir = - Math.sin (4 * phi);
            dx += TORQUE_STRENGTH * vy * dir / len;
            dy += - TORQUE_STRENGTH * vx * dir / len;
            to.dx += dx;
            to.dy += dy;
            from.dx += - dx;
            from.dy += - dy;
        }
    }
    Enumeration nodeEnum1 = nodes.elements ();
    while (nodeEnum1.hasMoreElements ()) {
        GraphNode n1 = (GraphNode) nodeEnum1.nextElement ();
        double dx = 0;
        double dy = 0;
        Enumeration nodeEnum2 = nodes.elements ();
        while (nodeEnum2.hasMoreElements ()) {
            GraphNode n2 = (GraphNode) nodeEnum2.nextElement ();
            if (n1 == n2) {
                continue;
            }
            double vx = n1.x - n2.x;
            double vy = n1.y - n2.y;
            double lensqr = vx * vx + vy * vy;
            double len = Math.sqrt (lensqr);
            if (len == 0) {
                dx += REPULSION_STRENGTH * Math.random ();
                dy += REPULSION_STRENGTH * Math.random ();
            } else if (len < REPULSION_LIMIT) {
                vx = vx / REPULSION_LIMIT;
                vy = vy / REPULSION_LIMIT;
                len = len / REPULSION_LIMIT;
                double f = 0;
                switch (REPULSION_TYPE) {
                    case 0 :
                        f = 0.5 * (1 - len) / len;
                        break;
                    case 1 :
                        f = 1 - len;
                        break;
                    case 2 :
                        f = 2 * (1 - len) * (1 - len);
                        break;
                }
                f *= REPULSION_STRENGTH;
                dx += f * vx;
                dy += f * vy;
            }

        }
        n1.dx += dx;
        n1.dy += dy;
    }
    Enumeration nodeEnum = nodes.keys ();
    while (nodeEnum.hasMoreElements ()) {
        Figure node = (Figure) nodeEnum.nextElement ();
        GraphNode n = getGraphNode (node);
        if (! Boolean.TRUE.equals (node.getAttribute ("Location"))) {
            n.x += Math.max (- 5, Math.min (5, n.dx));
            n.y += Math.max (- 5, Math.min (5, n.dy));
            Point c = node.center ();
            node.moveBy ((int) Math.round (n.x) - c.x, (int) Math.round (n.y) - c.y);
            if (n.x < 0) {
                n.x = 0;
            }
            if (n.y < 0) {
                n.y = 0;
            }
        }
        n.dx *= FRICTION_FACTOR;
        n.dy *= FRICTION_FACTOR;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="185" endline="192">
synchronized public void figureChanged (FigureChangeEvent e) {
    if (nodes != null) {
        Figure node = e.getFigure ();
        if (nodes.containsKey (node)) {
            getGraphNode (node).update ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="194" endline="204">
public void remove () {
    if (nodes != null) {
        Enumeration nodeEnum = nodes.keys ();
        while (nodeEnum.hasMoreElements ()) {
            Figure node = (Figure) nodeEnum.nextElement ();
            node.removeFigureChangeListener (this);
        }
        nodes = null;
        edges = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="213" endline="216">
GraphNode (Figure node) {
    this.node = node;
    update ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/GraphLayout.java" startline="218" endline="226">
void update () {
    Point p = node.center ();
    if (Math.abs (p.x - Math.round (x)) > 1 || Math.abs (p.y - Math.round (y)) > 1) {
        x = p.x;
        y = p.y;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Clipboard.java" startline="27" endline="29">
static public Clipboard getClipboard () {
    return fgClipboard;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Clipboard.java" startline="33" endline="34">
private Clipboard () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Clipboard.java" startline="39" endline="41">
public void setContents (Object contents) {
    fContents = contents;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Clipboard.java" startline="46" endline="48">
public Object getContents () {
    return fContents;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="25" endline="25">
private Geom () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="30" endline="56">
static public boolean lineContainsPoint (int x1, int y1, int x2, int y2, int px, int py) {
    Rectangle r = new Rectangle (new Point (x1, y1));
    r.add (x2, y2);
    r.grow (2, 2);
    if (! r.contains (px, py)) {
        return false;
    }
    double a, b, x, y;
    if (x1 == x2) {
        return (Math.abs (px - x1) < 3);
    }
    if (y1 == y2) {
        return (Math.abs (py - y1) < 3);
    }
    a = (double) (y1 - y2) / (double) (x1 - x2);
    b = (double) y1 - a * (double) x1;
    x = (py - b) / a;
    y = a * px + b;
    return (Math.min (Math.abs (x - px), Math.abs (y - py)) < 4);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="67" endline="85">
static public int direction (int x1, int y1, int x2, int y2) {
    int direction = 0;
    int vx = x2 - x1;
    int vy = y2 - y1;
    if (vy < vx && vx > - vy) {
        direction = EAST;
    } else if (vy > vx && vy > - vx) {
        direction = NORTH;
    } else if (vx < vy && vx < - vy) {
        direction = WEST;
    } else {
        direction = SOUTH;
    }

    return direction;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="87" endline="89">
static public Point south (Rectangle r) {
    return new Point (r.x + r.width / 2, r.y + r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="91" endline="93">
static public Point center (Rectangle r) {
    return new Point (r.x + r.width / 2, r.y + r.height / 2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="95" endline="97">
static public Point west (Rectangle r) {
    return new Point (r.x, r.y + r.height / 2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="99" endline="101">
static public Point east (Rectangle r) {
    return new Point (r.x + r.width, r.y + r.height / 2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="103" endline="105">
static public Point north (Rectangle r) {
    return new Point (r.x + r.width / 2, r.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="113" endline="116">
public static Point corner (Rectangle r) {
    return new Point ((int) r.getMaxX (), (int) r.getMaxY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="125" endline="128">
public static Point topLeftCorner (Rectangle r) {
    return r.getLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="137" endline="140">
public static Point topRightCorner (Rectangle r) {
    return new Point ((int) r.getMaxX (), (int) r.getMinY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="149" endline="152">
public static Point bottomLeftCorner (Rectangle r) {
    return new Point ((int) r.getMinX (), (int) r.getMaxY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="163" endline="166">
public static Point bottomRightCorner (Rectangle r) {
    return corner (r);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="172" endline="180">
static public int range (int min, int max, int value) {
    if (value < min) {
        value = min;
    }
    if (value > max) {
        value = max;
    }
    return value;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="185" endline="187">
static public long length2 (int x1, int y1, int x2, int y2) {
    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="192" endline="194">
static public long length (int x1, int y1, int x2, int y2) {
    return (long) Math.sqrt (length2 (x1, y1, x2, y2));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="199" endline="203">
static public double pointToAngle (Rectangle r, Point p) {
    int px = p.x - (r.x + r.width / 2);
    int py = p.y - (r.y + r.height / 2);
    return Math.atan2 (py * r.width, px * r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="208" endline="229">
static public Point angleToPoint (Rectangle r, double angle) {
    double si = Math.sin (angle);
    double co = Math.cos (angle);
    double e = 0.0001;
    int x = 0, y = 0;
    if (Math.abs (si) > e) {
        x = (int) ((1.0 + co / Math.abs (si)) / 2.0 * r.width);
        x = range (0, r.width, x);
    } else if (co >= 0.0) {
        x = r.width;
    }

    if (Math.abs (co) > e) {
        y = (int) ((1.0 + si / Math.abs (co)) / 2.0 * r.height);
        y = range (0, r.height, y);
    } else if (si >= 0.0) {
        y = r.height;
    }

    return new Point (r.x + x, r.y + y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="234" endline="238">
static public Point polarToPoint (double angle, double fx, double fy) {
    double si = Math.sin (angle);
    double co = Math.cos (angle);
    return new Point ((int) (fx * co + 0.5), (int) (fy * si + 0.5));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="243" endline="247">
static public Point ovalAngleToPoint (Rectangle r, double angle) {
    Point center = Geom.center (r);
    Point p = Geom.polarToPoint (angle, r.width / 2, r.height / 2);
    return new Point (center.x + p.x, center.y + p.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="254" endline="306">
static public Point intersect (int xa, int ya, int xb, int yb, int xc, int yc, int xd, int yd) {
    double denom = ((xb - xa) * (yd - yc) - (yb - ya) * (xd - xc));
    double rnum = ((ya - yc) * (xd - xc) - (xa - xc) * (yd - yc));
    if (denom == 0.0) {
        if (rnum == 0.0) {
            if ((xa < xb && (xb < xc || xb < xd)) || (xa > xb && (xb > xc || xb > xd))) {
                return new Point (xb, yb);
            } else {
                return new Point (xa, ya);
            }
        } else {
            return null;
        }
    }
    double r = rnum / denom;
    double snum = ((ya - yc) * (xb - xa) - (xa - xc) * (yb - ya));
    double s = snum / denom;
    if (0.0 <= r && r <= 1.0 && 0.0 <= s && s <= 1.0) {
        int px = (int) (xa + (xb - xa) * r);
        int py = (int) (ya + (yb - ya) * r);
        return new Point (px, py);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="314" endline="382">
public static double distanceFromLine (int xa, int ya, int xb, int yb, int xc, int yc) {
    int xdiff = xb - xa;
    int ydiff = yb - ya;
    long l2 = xdiff * xdiff + ydiff * ydiff;
    if (l2 == 0) {
        return Geom.length (xa, ya, xc, yc);
    }
    double rnum = (ya - yc) * (ya - yb) - (xa - xc) * (xb - xa);
    double r = rnum / l2;
    if (r < 0.0 || r > 1.0) {
        return Double.MAX_VALUE;
    }
    double xi = xa + r * xdiff;
    double yi = ya + r * ydiff;
    double xd = xc - xi;
    double yd = yc - yi;
    return Math.sqrt (xd * xd + yd * yd);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Geom.java" startline="388" endline="393">
public static double distanceFromLine2D (int xa, int ya, int xb, int yb, int xc, int yc) {
    Line2D.Double line = new Line2D.Double (xa, xb, ya, yb);
    return line.ptSegDist (xc, yc);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/SerializationStorageFormat.java" startline="30" endline="32">
public SerializationStorageFormat () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/SerializationStorageFormat.java" startline="41" endline="43">
protected String createFileExtension () {
    return "ser";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/SerializationStorageFormat.java" startline="51" endline="53">
public String createFileDescription () {
    return "Serialization (" + getFileExtension () + ")";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/SerializationStorageFormat.java" startline="62" endline="68">
public String store (String fileName, Drawing saveDrawing) throws IOException {
    FileOutputStream stream = new FileOutputStream (adjustFileName (fileName));
    ObjectOutput output = new ObjectOutputStream (stream);
    output.writeObject (saveDrawing);
    output.close ();
    return adjustFileName (fileName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/SerializationStorageFormat.java" startline="77" endline="86">
public Drawing restore (String fileName) throws IOException {
    try {
        FileInputStream stream = new FileInputStream (fileName);
        ObjectInput input = new ObjectInputStream (stream);
        return (Drawing) input.readObject ();
    } catch (ClassNotFoundException exception) {
        throw new IOException ("Could not restore drawing '" + fileName + "': class not found!");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="51" endline="55">
public StandardStorageFormat () {
    setFileExtension (createFileExtension ());
    setFileDescription (createFileDescription ());
    setFileFilter (createFileFilter ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="64" endline="66">
protected String createFileExtension () {
    return myFileExtension = "draw";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="73" endline="75">
public void setFileExtension (String newFileExtension) {
    myFileExtension = newFileExtension;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="82" endline="84">
public String getFileExtension () {
    return myFileExtension;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="92" endline="94">
public String createFileDescription () {
    return "Internal Format (" + getFileExtension () + ")";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="101" endline="103">
public void setFileDescription (String newFileDescription) {
    myFileDescription = newFileDescription;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="110" endline="112">
public String getFileDescription () {
    return myFileDescription;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="121" endline="137">
protected FileFilter createFileFilter () {
    return new FileFilter () {
        public boolean accept (File checkFile) {
            if (checkFile.isDirectory ()) {
                return true;
            } else {
                return checkFile.getName ().endsWith ("." + myFileExtension);
            }
        } public String getDescription () {
            return getFileDescription ();
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="123" endline="131">
public boolean accept (File checkFile) {
    if (checkFile.isDirectory ()) {
        return true;
    } else {
        return checkFile.getName ().endsWith ("." + myFileExtension);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="133" endline="135">
public String getDescription () {
    return getFileDescription ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="145" endline="147">
public void setFileFilter (FileFilter newFileFilter) {
    myFileFilter = newFileFilter;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="155" endline="157">
public FileFilter getFileFilter () {
    return myFileFilter;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="167" endline="173">
public String store (String fileName, Drawing saveDrawing) throws IOException {
    FileOutputStream stream = new FileOutputStream (adjustFileName (fileName));
    StorableOutput output = new StorableOutput (stream);
    output.writeStorable (saveDrawing);
    output.close ();
    return adjustFileName (fileName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="181" endline="190">
public Drawing restore (String fileName) throws IOException {
    if (! hasCorrectFileExtension (fileName)) {
        return null;
    } else {
        FileInputStream stream = new FileInputStream (fileName);
        StorableInput input = new StorableInput (stream);
        return (Drawing) input.readStorable ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="198" endline="205">
public boolean equals (Object compareObject) {
    if (compareObject instanceof StandardStorageFormat) {
        return getFileExtension ().equals (((StandardStorageFormat) compareObject).getFileExtension ());
    } else {
        return false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="213" endline="220">
protected String adjustFileName (String testFileName) {
    if (! hasCorrectFileExtension (testFileName)) {
        return testFileName + "." + getFileExtension ();
    } else {
        return testFileName;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StandardStorageFormat.java" startline="227" endline="229">
protected boolean hasCorrectFileExtension (String testFileName) {
    return testFileName.endsWith ("." + getFileExtension ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="29" endline="33">
public UndoableTool (Tool newWrappedTool) {
    setEventDispatcher (createEventDispatcher ());
    setWrappedTool (newWrappedTool);
    getWrappedTool ().addToolListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="40" endline="42">
public void activate () {
    getWrappedTool ().activate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="50" endline="59">
public void deactivate () {
    getWrappedTool ().deactivate ();
    Undoable undoActivity = getWrappedTool ().getUndoActivity ();
    if ((undoActivity != null) && (undoActivity.isUndoable ())) {
        editor ().getUndoManager ().pushUndo (undoActivity);
        editor ().getUndoManager ().clearRedos ();
        editor ().figureSelectionChanged (getActiveView ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="64" endline="66">
public void mouseDown (MouseEvent e, int x, int y) {
    getWrappedTool ().mouseDown (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="71" endline="73">
public void mouseDrag (MouseEvent e, int x, int y) {
    getWrappedTool ().mouseDrag (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="82" endline="84">
public void mouseUp (MouseEvent e, int x, int y) {
    getWrappedTool ().mouseUp (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="89" endline="91">
public void mouseMove (MouseEvent evt, int x, int y) {
    getWrappedTool ().mouseMove (evt, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="96" endline="98">
public void keyDown (KeyEvent evt, int key) {
    getWrappedTool ().keyDown (evt, key);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="100" endline="102">
public boolean isUsable () {
    return getWrappedTool ().isUsable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="104" endline="107">
public boolean isActive () {
    return editor ().tool () == this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="109" endline="111">
public boolean isEnabled () {
    return getWrappedTool ().isEnabled ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="113" endline="115">
public void setUsable (boolean newIsUsable) {
    getWrappedTool ().setUsable (newIsUsable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="117" endline="119">
public void setEnabled (boolean newIsEnabled) {
    getWrappedTool ().setEnabled (newIsEnabled);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="121" endline="123">
protected void setWrappedTool (Tool newWrappedTool) {
    myWrappedTool = newWrappedTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="125" endline="127">
protected Tool getWrappedTool () {
    return myWrappedTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="129" endline="131">
public DrawingEditor editor () {
    return getWrappedTool ().editor ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="133" endline="135">
public DrawingView view () {
    return editor ().view ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="137" endline="139">
public Undoable getUndoActivity () {
    return new UndoableAdapter (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="141" endline="143">
public void setUndoActivity (Undoable newUndoableActivity) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="145" endline="147">
public void toolUsable (EventObject toolEvent) {
    getEventDispatcher ().fireToolUsableEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="149" endline="151">
public void toolUnusable (EventObject toolEvent) {
    getEventDispatcher ().fireToolUnusableEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="153" endline="155">
public void toolActivated (EventObject toolEvent) {
    getEventDispatcher ().fireToolActivatedEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="157" endline="159">
public void toolDeactivated (EventObject toolEvent) {
    getEventDispatcher ().fireToolDeactivatedEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="161" endline="163">
public void toolEnabled (EventObject toolEvent) {
    getEventDispatcher ().fireToolEnabledEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="165" endline="167">
public void toolDisabled (EventObject toolEvent) {
    getEventDispatcher ().fireToolDisabledEvent ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="169" endline="171">
public void addToolListener (ToolListener newToolListener) {
    getEventDispatcher ().addToolListener (newToolListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="173" endline="175">
public void removeToolListener (ToolListener oldToolListener) {
    getEventDispatcher ().removeToolListener (oldToolListener);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="177" endline="179">
private void setEventDispatcher (AbstractTool.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="181" endline="183">
protected AbstractTool.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="185" endline="187">
public AbstractTool.EventDispatcher createEventDispatcher () {
    return new AbstractTool.EventDispatcher (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/UndoableTool.java" startline="189" endline="191">
public DrawingView getActiveView () {
    return editor ().view ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="44" endline="49">
public PaletteButton (PaletteListener listener) {
    fListener = listener;
    fState = fOldState = NORMAL;
    addMouseListener (this);
    addMouseMotionListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="51" endline="53">
public Object value () {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="55" endline="57">
public String name () {
    return "";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="59" endline="65">
public void reset () {
    if (isEnabled ()) {
        fState = NORMAL;
        setSelected (false);
        repaint ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="67" endline="73">
public void select () {
    if (isEnabled ()) {
        fState = SELECTED;
        setSelected (true);
        repaint ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="75" endline="81">
public void mousePressed (MouseEvent e) {
    if (isEnabled ()) {
        fOldState = fState;
        fState = PRESSED;
        repaint ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="83" endline="93">
public void mouseDragged (MouseEvent e) {
    if (isEnabled ()) {
        if (contains (e.getX (), e.getY ())) {
            fState = PRESSED;
        } else {
            fState = fOldState;
        }
        repaint ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="95" endline="103">
public void mouseReleased (MouseEvent e) {
    if (isEnabled ()) {
        fState = fOldState;
        repaint ();
        if (contains (e.getX (), e.getY ())) {
            fListener.paletteUserSelected (this);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="105" endline="107">
public void mouseMoved (MouseEvent e) {
    fListener.paletteUserOver (this, true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="109" endline="115">
public void mouseExited (MouseEvent e) {
    if (fState == PRESSED) {
        mouseDragged (e);
    }
    fListener.paletteUserOver (this, false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="117" endline="117">
public void mouseClicked (MouseEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/PaletteButton.java" startline="118" endline="118">
public void mouseEntered (MouseEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="35" endline="41">
public StorableInput (InputStream stream) {
    Reader r = new BufferedReader (new InputStreamReader (stream));
    fTokenizer = new StreamTokenizer (r);
    fTokenizer.wordChars ('$', '$');
    fMap = CollectionsFactory.current ().createList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="46" endline="63">
public Storable readStorable () throws IOException {
    Storable storable;
    String s = readString ();
    if (s.equals ("NULL")) {
        return null;
    }
    if (s.equals ("REF")) {
        int ref = readInt ();
        return (Storable) retrieve (ref);
    }
    storable = (Storable) makeInstance (s);
    map (storable);
    storable.read (this);
    return storable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="68" endline="76">
public String readString () throws IOException {
    int token = fTokenizer.nextToken ();
    if (token == StreamTokenizer.TT_WORD || token == '"') {
        return fTokenizer.sval;
    }
    String msg = "String expected in line: " + fTokenizer.lineno ();
    throw new IOException (msg);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="81" endline="91">
public int readInt () throws IOException {
    int token = fTokenizer.nextToken ();
    if (token == StreamTokenizer.TT_NUMBER) {
        return (int) fTokenizer.nval;
    }
    String msg = "Integer expected in line: " + fTokenizer.lineno ();
    IOException exception = new IOException (msg);
    exception.printStackTrace ();
    throw new IOException (msg);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="96" endline="105">
public long readLong () throws IOException {
    long token = fTokenizer.nextToken ();
    if (token == StreamTokenizer.TT_NUMBER) {
        return (long) fTokenizer.nval;
    }
    String msg = "Long expected in line: " + fTokenizer.lineno ();
    IOException exception = new IOException (msg);
    throw exception;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="110" endline="112">
public Color readColor () throws IOException {
    return new Color (readInt (), readInt (), readInt ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="117" endline="125">
public double readDouble () throws IOException {
    int token = fTokenizer.nextToken ();
    if (token == StreamTokenizer.TT_NUMBER) {
        return fTokenizer.nval;
    }
    String msg = "Double expected in line: " + fTokenizer.lineno ();
    throw new IOException (msg);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="130" endline="138">
public boolean readBoolean () throws IOException {
    int token = fTokenizer.nextToken ();
    if (token == StreamTokenizer.TT_NUMBER) {
        return ((int) fTokenizer.nval) == 1;
    }
    String msg = "Integer expected in line: " + fTokenizer.lineno ();
    throw new IOException (msg);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="140" endline="158">
private Object makeInstance (String className) throws IOException {
    try {
        Class cl = Class.forName (className);
        return cl.newInstance ();
    } catch (NoSuchMethodError e) {
        throw new IOException ("Class " + className + " does not seem to have a no-arg constructor");
    } catch (ClassNotFoundException e) {
        throw new IOException ("No class: " + className);
    } catch (InstantiationException e) {
        throw new IOException ("Cannot instantiate: " + className);
    } catch (IllegalAccessException e) {
        throw new IOException ("Class (" + className + ") not accessible");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="160" endline="164">
private void map (Storable storable) {
    if (! fMap.contains (storable)) {
        fMap.add (storable);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/StorableInput.java" startline="166" endline="168">
private Storable retrieve (int ref) {
    return (Storable) fMap.get (ref);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="33" endline="36">
public CommandMenu (String name) {
    super (name);
    hm = new HashMap ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="42" endline="44">
public synchronized void add (Command command) {
    addMenuItem (command, new JMenuItem (command.name ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="50" endline="52">
public synchronized void add (Command command, MenuShortcut shortcut) {
    addMenuItem (command, new JMenuItem (command.name (), shortcut.getKey ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="58" endline="60">
public synchronized void addCheckItem (Command command) {
    addMenuItem (command, new JCheckBoxMenuItem (command.name ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="62" endline="69">
protected void addMenuItem (Command command, JMenuItem m) {
    m.setName (command.name ());
    m.addActionListener (this);
    add (m);
    command.addCommandListener (this);
    hm.put (m, command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="71" endline="73">
public synchronized void remove (Command command) {
    throw new JHotDrawRuntimeException ("not implemented");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="75" endline="77">
public synchronized void remove (MenuItem item) {
    throw new JHotDrawRuntimeException ("not implemented");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="82" endline="90">
public synchronized void enable (String name, boolean state) {
    for (int i = 0;
    i < getItemCount (); i ++) {
        JMenuItem item = getItem (i);
        if (name.equals (item.getLabel ())) {
            item.setEnabled (state);
            return;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="92" endline="101">
public synchronized void checkEnabled () {
    for (int i = 0;
    i < getMenuComponentCount (); i ++) {
        Component c = getMenuComponent (i);
        Command cmd = (Command) hm.get (c);
        if (cmd != null) {
            c.setEnabled (cmd.isExecutable ());
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="106" endline="119">
public void actionPerformed (ActionEvent e) {
    Object source = e.getSource ();
    for (int i = 0;
    i < getItemCount (); i ++) {
        JMenuItem item = getItem (i);
        if (source == item) {
            Command cmd = (Command) hm.get (item);
            if (cmd != null) {
                cmd.execute ();
            }
            break;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="121" endline="123">
public void commandExecuted (EventObject commandEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="125" endline="127">
public void commandExecutable (EventObject commandEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/CommandMenu.java" startline="129" endline="131">
public void commandNotExecutable (EventObject commandEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="41" endline="46">
public Bounds (double x, double y) {
    _dX1 = x;
    _dX2 = x;
    _dY1 = y;
    _dY2 = y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="48" endline="53">
public Bounds (double x1, double y1, double x2, double y2) {
    _dX1 = Math.min (x1, x2);
    _dX2 = Math.max (x1, x2);
    _dY1 = Math.min (y1, y2);
    _dY2 = Math.max (y1, y2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="55" endline="57">
public Bounds (Point2D aPoint2D) {
    this (aPoint2D.getX (), aPoint2D.getY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="59" endline="62">
public Bounds (Point2D firstPoint2D, Point2D secondPoint2D) {
    this (firstPoint2D.getX (), firstPoint2D.getY (), secondPoint2D.getX (), secondPoint2D.getY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="64" endline="67">
public Bounds (Bounds aBounds) {
    this (aBounds.getLesserX (), aBounds.getLesserY (), aBounds.getGreaterX (), aBounds.getGreaterY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="69" endline="74">
public Bounds (Rectangle2D aRectangle2D) {
    _dX1 = aRectangle2D.getMinX ();
    _dX2 = aRectangle2D.getMaxX ();
    _dY1 = aRectangle2D.getMinY ();
    _dY2 = aRectangle2D.getMaxY ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="76" endline="81">
public Bounds (Point2D centerPoint2D, double dWidth, double dHeight) {
    _dX1 = centerPoint2D.getX () - (dWidth / 2.0);
    _dX2 = centerPoint2D.getX () + (dWidth / 2.0);
    _dY1 = centerPoint2D.getY () - (dHeight / 2.0);
    _dY2 = centerPoint2D.getY () + (dHeight / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="83" endline="85">
public Bounds (Dimension aDimension) {
    this (0, 0, aDimension.width, aDimension.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="87" endline="89">
protected Bounds () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="93" endline="95">
public double getLesserX () {
    return _dX1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="97" endline="99">
public double getGreaterX () {
    return _dX2;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="101" endline="103">
public double getLesserY () {
    return _dY1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="105" endline="107">
public double getGreaterY () {
    return _dY2;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="109" endline="111">
public double getWest () {
    return _dX1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="113" endline="115">
public double getEast () {
    return _dX2;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="117" endline="119">
public double getSouth () {
    return _dY1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="121" endline="123">
public double getNorth () {
    return _dY2;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="125" endline="127">
public double getWidth () {
    return _dX2 - _dX1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="129" endline="131">
public double getHeight () {
    return _dY2 - _dY1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="133" endline="136">
public Rectangle2D asRectangle2D () {
    return new Rectangle2D.Double (getLesserX (), getLesserY (), getWidth (), getHeight ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="138" endline="143">
public void setCenter (Point2D centerPoint2D) {
    Point2D currentCenterPoint2D = getCenter ();
    double dDeltaX = centerPoint2D.getX () - currentCenterPoint2D.getX ();
    double dDeltaY = centerPoint2D.getY () - currentCenterPoint2D.getY ();
    offset (dDeltaX, dDeltaY);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="145" endline="147">
public Point2D getCenter () {
    return new Point2D.Double ((_dX1 + _dX2) / 2.0, (_dY1 + _dY2) / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="149" endline="159">
public void zoomBy (double dRatio) {
    double dWidth = _dX2 - _dX1;
    double dHeight = _dY2 - _dY1;
    double dNewWidth = (dWidth * dRatio);
    double dNewHeight = (dHeight * dRatio);
    Point2D centerPoint2D = getCenter ();
    _dX1 = centerPoint2D.getX () - (dNewWidth / 2.0);
    _dY1 = centerPoint2D.getY () - (dNewHeight / 2.0);
    _dX2 = centerPoint2D.getX () + (dNewWidth / 2.0);
    _dY2 = centerPoint2D.getY () + (dNewHeight / 2.0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="161" endline="167">
public void shiftBy (int nXPercentage, int nYPercentage) {
    double dWidth = _dX2 - _dX1;
    double dHeight = _dY2 - _dY1;
    double dDeltaX = (dWidth * nXPercentage) / 100.0;
    double dDeltaY = (dHeight * nYPercentage) / 100.0;
    offset (dDeltaX, dDeltaY);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="169" endline="174">
public void offset (double dDeltaX, double dDeltaY) {
    _dX1 += dDeltaX;
    _dX2 += dDeltaX;
    _dY1 += dDeltaY;
    _dY2 += dDeltaY;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="181" endline="197">
public void expandToRatio (double dRatio) {
    double dCurrentRatio = getWidth () / getHeight ();
    if (dCurrentRatio < dRatio) {
        double dNewWidth = dRatio * getHeight ();
        double dCenterX = (_dX1 + _dX2) / 2.0;
        double dDelta = dNewWidth / 2.0;
        _dX1 = dCenterX - dDelta;
        _dX2 = dCenterX + dDelta;
    }
    if (dCurrentRatio > dRatio) {
        double dNewHeight = getWidth () / dRatio;
        double dCenterY = (_dY1 + _dY2) / 2.0;
        double dDelta = dNewHeight / 2.0;
        _dY1 = dCenterY - dDelta;
        _dY2 = dCenterY + dDelta;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="199" endline="202">
public void includeXCoordinate (double x) {
    _dX1 = min (_dX1, _dX2, x);
    _dX2 = max (_dX1, _dX2, x);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="204" endline="207">
public void includeYCoordinate (double y) {
    _dY1 = min (_dY1, _dY2, y);
    _dY2 = max (_dY1, _dY2, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="209" endline="212">
public void includePoint (double x, double y) {
    includeXCoordinate (x);
    includeYCoordinate (y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="214" endline="216">
public void includePoint (Point2D aPoint2D) {
    includePoint (aPoint2D.getX (), aPoint2D.getY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="218" endline="221">
public void includeLine (double x1, double y1, double x2, double y2) {
    includePoint (x1, y1);
    includePoint (x2, y2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="223" endline="226">
public void includeLine (Point2D onePoint2D, Point2D twoPoint2D) {
    includeLine (onePoint2D.getX (), onePoint2D.getY (), twoPoint2D.getX (), twoPoint2D.getY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="228" endline="233">
public void includeBounds (Bounds aBounds) {
    includeXCoordinate (aBounds.getLesserX ());
    includeXCoordinate (aBounds.getGreaterX ());
    includeYCoordinate (aBounds.getLesserY ());
    includeYCoordinate (aBounds.getGreaterY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="235" endline="240">
public void includeRectangle2D (Rectangle2D aRectangle2D) {
    includeXCoordinate (aRectangle2D.getMinX ());
    includeXCoordinate (aRectangle2D.getMaxX ());
    includeYCoordinate (aRectangle2D.getMinY ());
    includeYCoordinate (aRectangle2D.getMaxY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="242" endline="254">
public void intersect (Bounds aBounds) {
    _dX1 = Math.max (_dX1, aBounds.getLesserX ());
    _dY1 = Math.max (_dY1, aBounds.getLesserY ());
    _dX2 = Math.min (_dX2, aBounds.getGreaterX ());
    _dY2 = Math.min (_dY2, aBounds.getGreaterY ());
    if (_dX1 > _dX2) {
        _dX1 = _dX2;
    }
    if (_dY1 > _dY2) {
        _dY1 = _dY2;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="256" endline="258">
public boolean intersectsPoint (double x, double y) {
    return ((_dX1 <= x) && (x <= _dX2) && (_dY1 <= y) && (y <= _dY2));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="260" endline="262">
public boolean intersectsPoint (Point2D aPoint2D) {
    return intersectsPoint (aPoint2D.getX (), aPoint2D.getY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="265" endline="301">
public boolean intersectsLine (double x1, double y1, double x2, double y2) {
    if (intersectsPoint (x1, y1)) {
        return true;
    }
    if (intersectsPoint (x2, y2)) {
        return true;
    }
    if ((x1 < _dX1) && (x2 < _dX1)) {
        return false;
    }
    if ((x1 > _dX2) && (x2 > _dX2)) {
        return false;
    }
    if ((y1 < _dY1) && (y2 < _dY1)) {
        return false;
    }
    if ((y1 > _dY2) && (y2 > _dY2)) {
        return false;
    }
    if (((_dX1 <= x1) && (x1 <= _dX2)) && ((_dX1 <= x2) && (x2 <= _dX2))) {
        return true;
    }
    if (((_dY1 <= y1) && (y1 <= _dY2)) && ((_dY1 <= y2) && (y2 <= _dY2))) {
        return true;
    }
    double dSlope = (y2 - y1) / (x2 - x1);
    double _dYIntersectionAtX1 = dSlope * (_dX1 - x1) + y1;
    double _dYIntersectionAtX2 = dSlope * (_dX2 - x1) + y1;
    double _dXIntersectionAtY1 = (_dY1 - y1) / dSlope + x1;
    double _dXIntersectionAtY2 = (_dY2 - y1) / dSlope + x1;
    return (intersectsPoint (_dX1, _dYIntersectionAtX1)) || (intersectsPoint (_dX2, _dYIntersectionAtX2)) || (intersectsPoint (_dXIntersectionAtY1, _dY1)) || (intersectsPoint (_dXIntersectionAtY2, _dY2));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="303" endline="306">
public boolean intersectsLine (Point2D onePoint2D, Point2D twoPoint2D) {
    return intersectsLine (onePoint2D.getX (), onePoint2D.getY (), twoPoint2D.getX (), twoPoint2D.getY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="309" endline="331">
public boolean intersectsBounds (Bounds aBounds) {
    double dLesserX = aBounds.getLesserX ();
    double dGreaterX = aBounds.getGreaterX ();
    double dLesserY = aBounds.getLesserY ();
    double dGreaterY = aBounds.getGreaterY ();
    if (dLesserX < _dX1) {
        if (dLesserY < _dY1) {
            return ((dGreaterX >= _dX1) && (dGreaterY >= _dY1));
        } else {
            return ((dGreaterX >= _dX1) && (dLesserY <= _dY2));
        }
    } else {
        if (dLesserY < _dY1) {
            return ((dLesserX <= _dX2) && (dGreaterY >= _dY1));
        } else {
            return ((dLesserX <= _dX2) && (dLesserY <= _dY2));
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="333" endline="338">
public boolean completelyContainsLine (double x1, double y1, double x2, double y2) {
    return (_dX1 > Math.min (x1, x2)) && (_dX2 < Math.max (x1, x2)) && (_dY1 > Math.min (y1, y2)) && (_dY2 < Math.max (y1, y2));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="340" endline="345">
public boolean isCompletelyInside (Bounds aBounds) {
    return (_dX1 > aBounds.getLesserX ()) && (_dX2 < aBounds.getGreaterX ()) && (_dY1 > aBounds.getLesserY ()) && (_dY2 < aBounds.getGreaterY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="347" endline="454">
public Point2D [] cropLine (double x1, double y1, double x2, double y2) {
    if (! intersectsLine (x1, y1, x2, y2)) {
        return null;
    }
    Point2D [] resultLine = new Point2D [2];
    Point2D beginPoint2D = new Point2D.Double (x1, y1);
    Point2D endPoint2D = new Point2D.Double (x2, y2);
    if (beginPoint2D.getX () == endPoint2D.getX ()) {
        if (beginPoint2D.getY () > _dY2) {
            beginPoint2D.setLocation (beginPoint2D.getX (), _dY2);
        }
        if (endPoint2D.getY () > _dY2) {
            endPoint2D.setLocation (endPoint2D.getX (), _dY2);
        }
        if (beginPoint2D.getY () < _dY1) {
            beginPoint2D.setLocation (beginPoint2D.getX (), _dY1);
        }
        if (endPoint2D.getY () < _dY1) {
            endPoint2D.setLocation (endPoint2D.getX (), _dY1);
        }
    } else if (beginPoint2D.getY () == endPoint2D.getY ()) {
        if (beginPoint2D.getX () > _dX2) {
            beginPoint2D.setLocation (_dX2, beginPoint2D.getY ());
        }
        if (endPoint2D.getX () > _dX2) {
            endPoint2D.setLocation (_dX2, endPoint2D.getY ());
        }
        if (beginPoint2D.getX () < _dX1) {
            beginPoint2D.setLocation (_dX1, beginPoint2D.getY ());
        }
        if (endPoint2D.getX () < _dX1) {
            endPoint2D.setLocation (_dX1, endPoint2D.getY ());
        }
    } else {
        double dSlope = (beginPoint2D.getY () - endPoint2D.getY ()) / (beginPoint2D.getX () - endPoint2D.getX ());
        if (! intersectsPoint (beginPoint2D)) {
            if (beginPoint2D.getY () > _dY2) {
                double x = ((_dY2 - beginPoint2D.getY ()) / dSlope) + beginPoint2D.getX ();
                if ((x >= _dX1) && (x <= _dX2)) {
                    beginPoint2D.setLocation (x, beginPoint2D.getY ());
                    beginPoint2D.setLocation (beginPoint2D.getX (), _dY2);
                }
            }
            if (beginPoint2D.getY () < _dY1) {
                double x = ((_dY1 - beginPoint2D.getY ()) / dSlope) + beginPoint2D.getX ();
                if ((x >= _dX1) && (x <= _dX2)) {
                    beginPoint2D.setLocation (x, beginPoint2D.getY ());
                    beginPoint2D.setLocation (beginPoint2D.getX (), _dY1);
                }
            }
            if (beginPoint2D.getX () > _dX2) {
                double y = dSlope * (_dX2 - beginPoint2D.getX ()) + beginPoint2D.getY ();
                if ((y >= _dY1) && (y <= _dY2)) {
                    beginPoint2D.setLocation (_dX2, beginPoint2D.getY ());
                    beginPoint2D.setLocation (beginPoint2D.getX (), y);
                }
            }
            if (beginPoint2D.getX () < _dX1) {
                double y = dSlope * (_dX1 - beginPoint2D.getX ()) + beginPoint2D.getY ();
                if ((y >= _dY1) && (y <= _dY2)) {
                    beginPoint2D.setLocation (_dX1, beginPoint2D.getY ());
                    beginPoint2D.setLocation (beginPoint2D.getX (), y);
                }
            }
        }
        if (! intersectsPoint (endPoint2D)) {
            if (endPoint2D.getY () > _dY2) {
                double x = ((_dY2 - beginPoint2D.getY ()) / dSlope) + beginPoint2D.getX ();
                if ((x >= _dX1) && (x <= _dX2)) {
                    endPoint2D.setLocation (x, endPoint2D.getY ());
                    endPoint2D.setLocation (endPoint2D.getX (), _dY2);
                }
            }
            if (endPoint2D.getY () < _dY1) {
                double x = ((_dY1 - beginPoint2D.getY ()) / dSlope) + beginPoint2D.getX ();
                if ((x >= _dX1) && (x <= _dX2)) {
                    endPoint2D.setLocation (x, endPoint2D.getY ());
                    endPoint2D.setLocation (endPoint2D.getX (), _dY1);
                }
            }
            if (endPoint2D.getX () > _dX2) {
                double y = dSlope * (_dX2 - beginPoint2D.getX ()) + beginPoint2D.getY ();
                if ((y >= _dY1) && (y <= _dY2)) {
                    endPoint2D.setLocation (_dX2, endPoint2D.getY ());
                    endPoint2D.setLocation (endPoint2D.getX (), y);
                }
            }
            if (endPoint2D.getX () < _dX1) {
                double y = dSlope * (_dX1 - beginPoint2D.getX ()) + beginPoint2D.getY ();
                if ((y >= _dY1) && (y <= _dY2)) {
                    endPoint2D.setLocation (_dX1, endPoint2D.getY ());
                    endPoint2D.setLocation (endPoint2D.getX (), y);
                }
            }
        }
    }

    resultLine [0] = beginPoint2D;
    resultLine [1] = endPoint2D;
    return resultLine;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="456" endline="470">
public boolean equals (Object anObject) {
    if ((anObject == null) || (! (anObject instanceof Bounds))) {
        return false;
    }
    Bounds aBounds = (Bounds) anObject;
    if ((_dX1 == aBounds.getLesserX ()) && (_dX2 == aBounds.getGreaterX ()) && (_dY1 == aBounds.getLesserY ()) && (_dY2 == aBounds.getGreaterY ())) {
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="472" endline="479">
public int hashCode () {
    double temp = Math.abs (_dX1 + _dX2 + _dY1 + _dY2);
    while ((temp != 0) && (temp < 1)) {
        temp *= 4;
    }
    return (int) temp;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="481" endline="484">
public String toString () {
    return Double.toString (_dX1) + " " + Double.toString (_dY1) + " " + Double.toString (_dX2) + " " + Double.toString (_dY2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="486" endline="488">
private double min (double x1, double x2, double x3) {
    return Math.min (Math.min (x1, x2), x3);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/Bounds.java" startline="490" endline="492">
private double max (double x1, double x2, double x3) {
    return Math.max (Math.max (x1, x2), x3);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="20" endline="23">
ColorEntry (String name, Color color) {
    fColor = color;
    fName = name;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="54" endline="56">
public static int size () {
    return fMap.length;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="58" endline="64">
public static Color color (int index) {
    if (index < size () && index >= 0) {
        return fMap [index].fColor;
    }
    throw new ArrayIndexOutOfBoundsException ("Color index: " + index);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="66" endline="74">
public static Color color (String name) {
    for (int i = 0;
    i < fMap.length; i ++) {
        if (fMap [i].fName.equals (name)) {
            return fMap [i].fColor;
        }
    }
    return Color.black;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="76" endline="82">
public static String name (int index) {
    if (index < size () && index >= 0) {
        return fMap [index].fName;
    }
    throw new ArrayIndexOutOfBoundsException ("Color index: " + index);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="84" endline="92">
public static int colorIndex (Color color) {
    for (int i = 0;
    i < fMap.length; i ++) {
        if (fMap [i].fColor.equals (color)) {
            return i;
        }
    }
    return 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/util/ColorMap.java" startline="94" endline="96">
public static boolean isTransparent (Color color) {
    return color.equals (color ("None"));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="45" endline="48">
public PolygonFigure () {
    super ();
    setInternalPolygon (new Polygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="50" endline="53">
public PolygonFigure (int x, int y) {
    this ();
    getInternalPolygon ().addPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="55" endline="57">
public PolygonFigure (Polygon p) {
    setInternalPolygon (new Polygon (p.xpoints, p.ypoints, p.npoints));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="59" endline="61">
public Rectangle displayBox () {
    return bounds (getInternalPolygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="64" endline="67">
public boolean isEmpty () {
    return ((pointCount () < 3) || ((size ().width < TOO_CLOSE) && (size ().height < TOO_CLOSE)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="69" endline="76">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList (pointCount ());
    for (int i = 0;
    i < pointCount (); i ++) {
        handles.add (new PolygonHandle (this, locator (i), i));
    }
    handles.add (new PolygonScaleHandle (this));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="79" endline="87">
public void basicDisplayBox (Point origin, Point corner) {
    Rectangle r = displayBox ();
    int dx = origin.x - r.x;
    int dy = origin.y - r.y;
    getInternalPolygon ().translate (dx, dy);
    r = displayBox ();
    Point oldCorner = new Point (r.x + r.width, r.y + r.height);
    scaleRotate (oldCorner, getInternalPolygon (), corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="92" endline="94">
public Polygon getPolygon () {
    return new Polygon (fPoly.xpoints, fPoly.ypoints, fPoly.npoints);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="96" endline="98">
protected void setInternalPolygon (Polygon newPolygon) {
    fPoly = newPolygon;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="100" endline="102">
public Polygon getInternalPolygon () {
    return fPoly;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="104" endline="106">
public Point center () {
    return center (getInternalPolygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="108" endline="115">
public Iterator points () {
    List pts = CollectionsFactory.current ().createList (pointCount ());
    for (int i = 0;
    i < pointCount (); ++ i) {
        pts.add (new Point (getInternalPolygon ().xpoints [i], getInternalPolygon ().ypoints [i]));
    }
    return pts.iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="117" endline="119">
public int pointCount () {
    return getInternalPolygon ().npoints;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="121" endline="123">
public void basicMoveBy (int dx, int dy) {
    getInternalPolygon ().translate (dx, dy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="125" endline="127">
public void drawBackground (Graphics g) {
    g.fillPolygon (getInternalPolygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="129" endline="131">
public void drawFrame (Graphics g) {
    g.drawPolygon (getInternalPolygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="133" endline="135">
public boolean containsPoint (int x, int y) {
    return getInternalPolygon ().contains (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="137" endline="139">
public Connector connectorAt (int x, int y) {
    return new ChopPolygonConnector (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="144" endline="147">
public void addPoint (int x, int y) {
    getInternalPolygon ().addPoint (x, y);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="153" endline="158">
public void setPointAt (Point p, int i) {
    willChange ();
    getInternalPolygon ().xpoints [i] = p.x;
    getInternalPolygon ().ypoints [i] = p.y;
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="163" endline="181">
public void insertPointAt (Point p, int i) {
    willChange ();
    int n = pointCount () + 1;
    int [] xs = new int [n];
    int [] ys = new int [n];
    for (int j = 0;
    j < i; ++ j) {
        xs [j] = getInternalPolygon ().xpoints [j];
        ys [j] = getInternalPolygon ().ypoints [j];
    }
    xs [i] = p.x;
    ys [i] = p.y;
    for (int j = i;
    j < pointCount (); ++ j) {
        xs [j + 1] = getInternalPolygon ().xpoints [j];
        ys [j + 1] = getInternalPolygon ().ypoints [j];
    }
    setInternalPolygon (new Polygon (xs, ys, n));
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="183" endline="198">
public void removePointAt (int i) {
    willChange ();
    int n = pointCount () - 1;
    int [] xs = new int [n];
    int [] ys = new int [n];
    for (int j = 0;
    j < i; ++ j) {
        xs [j] = getInternalPolygon ().xpoints [j];
        ys [j] = getInternalPolygon ().ypoints [j];
    }
    for (int j = i;
    j < n; ++ j) {
        xs [j] = getInternalPolygon ().xpoints [j + 1];
        ys [j] = getInternalPolygon ().ypoints [j + 1];
    }
    setInternalPolygon (new Polygon (xs, ys, n));
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="203" endline="233">
public void scaleRotate (Point anchor, Polygon originalPolygon, Point p) {
    willChange ();
    Point ctr = center (originalPolygon);
    double anchorLen = Geom.length (ctr.x, ctr.y, anchor.x, anchor.y);
    if (anchorLen > 0.0) {
        double newLen = Geom.length (ctr.x, ctr.y, p.x, p.y);
        double ratio = newLen / anchorLen;
        double anchorAngle = Math.atan2 (anchor.y - ctr.y, anchor.x - ctr.x);
        double newAngle = Math.atan2 (p.y - ctr.y, p.x - ctr.x);
        double rotation = newAngle - anchorAngle;
        int n = originalPolygon.npoints;
        int [] xs = new int [n];
        int [] ys = new int [n];
        for (int i = 0;
        i < n; ++ i) {
            int x = originalPolygon.xpoints [i];
            int y = originalPolygon.ypoints [i];
            double l = Geom.length (ctr.x, ctr.y, x, y) * ratio;
            double a = Math.atan2 (y - ctr.y, x - ctr.x) + rotation;
            xs [i] = (int) (ctr.x + l * Math.cos (a) + 0.5);
            ys [i] = (int) (ctr.y + l * Math.sin (a) + 0.5);
        }
        setInternalPolygon (new Polygon (xs, ys, n));
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="239" endline="273">
public void smoothPoints () {
    willChange ();
    boolean removed = false;
    int n = pointCount ();
    do {
        removed = false;
        int i = 0;
        while (i < n && n >= 3) {
            int nxt = (i + 1) % n;
            int prv = (i - 1 + n) % n;
            if ((Geom.distanceFromLine (getInternalPolygon ().xpoints [prv], getInternalPolygon ().ypoints [prv], getInternalPolygon ().xpoints [nxt], getInternalPolygon ().ypoints [nxt], getInternalPolygon ().xpoints [i], getInternalPolygon ().ypoints [i]) < TOO_CLOSE)) {
                removed = true;
                -- n;
                for (int j = i;
                j < n; ++ j) {
                    getInternalPolygon ().xpoints [j] = getInternalPolygon ().xpoints [j + 1];
                    getInternalPolygon ().ypoints [j] = getInternalPolygon ().ypoints [j + 1];
                }
            } else {
                ++ i;
            }
        }
    } while (removed);
    if (n != pointCount ()) {
        setInternalPolygon (new Polygon (getInternalPolygon ().xpoints, getInternalPolygon ().ypoints, n));
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="279" endline="288">
public int splitSegment (int x, int y) {
    int i = findSegment (x, y);
    if (i != - 1) {
        insertPointAt (new Point (x, y), i + 1);
        return i + 1;
    } else {
        return - 1;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="290" endline="293">
public Point pointAt (int i) {
    return new Point (getInternalPolygon ().xpoints [i], getInternalPolygon ().ypoints [i]);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="298" endline="314">
public Point outermostPoint () {
    Point ctr = center ();
    int outer = 0;
    long dist = 0;
    for (int i = 0;
    i < pointCount (); ++ i) {
        long d = Geom.length2 (ctr.x, ctr.y, getInternalPolygon ().xpoints [i], getInternalPolygon ().ypoints [i]);
        if (d > dist) {
            dist = d;
            outer = i;
        }
    }
    return new Point (getInternalPolygon ().xpoints [outer], getInternalPolygon ().ypoints [outer]);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="321" endline="337">
public int findSegment (int x, int y) {
    double dist = TOO_CLOSE;
    int best = - 1;
    for (int i = 0;
    i < pointCount (); i ++) {
        int n = (i + 1) % pointCount ();
        double d = Geom.distanceFromLine (getInternalPolygon ().xpoints [i], getInternalPolygon ().ypoints [i], getInternalPolygon ().xpoints [n], getInternalPolygon ().ypoints [n], x, y);
        if (d < dist) {
            dist = d;
            best = i;
        }
    }
    return best;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="339" endline="341">
public Point chop (Point p) {
    return chop (getInternalPolygon (), p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="343" endline="350">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (pointCount ());
    for (int i = 0;
    i < pointCount (); ++ i) {
        dw.writeInt (getInternalPolygon ().xpoints [i]);
        dw.writeInt (getInternalPolygon ().ypoints [i]);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="352" endline="362">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    int size = dr.readInt ();
    int [] xs = new int [size];
    int [] ys = new int [size];
    for (int i = 0;
    i < size; i ++) {
        xs [i] = dr.readInt ();
        ys [i] = dr.readInt ();
    }
    setInternalPolygon (new Polygon (xs, ys, size));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="367" endline="378">
public static Locator locator (final int pointIndex) {
    return new AbstractLocator () {
        public Point locate (Figure owner) {
            PolygonFigure plf = (PolygonFigure) owner;
            if (pointIndex < plf.pointCount ()) {
                return ((PolygonFigure) owner).pointAt (pointIndex);
            }
            return new Point (- 1, - 1);
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="369" endline="376">
public Point locate (Figure owner) {
    PolygonFigure plf = (PolygonFigure) owner;
    if (pointIndex < plf.pointCount ()) {
        return ((PolygonFigure) owner).pointAt (pointIndex);
    }
    return new Point (- 1, - 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="383" endline="407">
public static Rectangle bounds (Polygon p) {
    int minx = Integer.MAX_VALUE;
    int miny = Integer.MAX_VALUE;
    int maxx = Integer.MIN_VALUE;
    int maxy = Integer.MIN_VALUE;
    int n = p.npoints;
    for (int i = 0;
    i < n; i ++) {
        int x = p.xpoints [i];
        int y = p.ypoints [i];
        if (x > maxx) {
            maxx = x;
        }
        if (x < minx) {
            minx = x;
        }
        if (y > maxy) {
            maxy = y;
        }
        if (y < miny) {
            miny = y;
        }
    }
    return new Rectangle (minx, miny, maxx - minx, maxy - miny);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="409" endline="419">
public static Point center (Polygon p) {
    long sx = 0;
    long sy = 0;
    int n = p.npoints;
    for (int i = 0;
    i < n; i ++) {
        sx += p.xpoints [i];
        sy += p.ypoints [i];
    }
    return new Point ((int) (sx / n), (int) (sy / n));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonFigure.java" startline="421" endline="461">
public static Point chop (Polygon poly, Point p) {
    Point ctr = center (poly);
    int cx = - 1;
    int cy = - 1;
    long len = Long.MAX_VALUE;
    for (int i = 0;
    i < poly.npoints; ++ i) {
        int nxt = (i + 1) % poly.npoints;
        Point chop = Geom.intersect (poly.xpoints [i], poly.ypoints [i], poly.xpoints [nxt], poly.ypoints [nxt], p.x, p.y, ctr.x, ctr.y);
        if (chop != null) {
            long cl = Geom.length2 (chop.x, chop.y, p.x, p.y);
            if (cl < len) {
                len = cl;
                cx = chop.x;
                cy = chop.y;
            }
        }
    }
    {
        for (int i = 0;
        i < poly.npoints; ++ i) {
            long l = Geom.length2 (poly.xpoints [i], poly.ypoints [i], p.x, p.y);
            if (l < len) {
                len = l;
                cx = poly.xpoints [i];
                cy = poly.ypoints [i];
            }
        }
    } return new Point (cx, cy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="35" endline="37">
public CTXCommandMenu (String name) {
    super (name);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="43" endline="45">
public synchronized void add (Command command) {
    addMenuItem (new CommandMenuItem (command));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="51" endline="53">
public synchronized void add (Command command, MenuShortcut shortcut) {
    addMenuItem (new CommandMenuItem (command, shortcut.getKey ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="59" endline="61">
public synchronized void addCheckItem (Command command) {
    addMenuItem (new CommandCheckBoxMenuItem (command));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="68" endline="70">
public synchronized void add (CommandMenuItem item) {
    addMenuItem (item);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="77" endline="79">
public synchronized void add (CommandCheckBoxMenuItem checkItem) {
    addMenuItem (checkItem);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="86" endline="90">
protected void addMenuItem (JMenuItem m) {
    m.addActionListener (this);
    add (m);
    ((CommandHolder) m).getCommand ().addCommandListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="97" endline="99">
public synchronized void remove (Command command) {
    throw new JHotDrawRuntimeException ("not implemented");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="106" endline="108">
public synchronized void remove (MenuItem item) {
    throw new JHotDrawRuntimeException ("not implemented");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="116" endline="124">
public synchronized void enable (String name, boolean state) {
    for (int i = 0;
    i < getItemCount (); i ++) {
        JMenuItem item = getItem (i);
        if (name.equals (item.getLabel ())) {
            item.setEnabled (state);
            return;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="127" endline="145">
public synchronized void checkEnabled () {
    int j = 0;
    for (int i = 0;
    i < getMenuComponentCount (); i ++) {
        JMenuItem currentItem = getItem (i);
        if (currentItem instanceof CommandMenu) {
            ((CommandMenu) currentItem).checkEnabled ();
        } else if (currentItem instanceof CTXCommandMenu) {
            ((CTXCommandMenu) currentItem).checkEnabled ();
        } else if (currentItem instanceof CommandHolder) {
            currentItem.setEnabled (((CommandHolder) currentItem).getCommand ().isExecutable ());
        } else if (currentItem instanceof Command) {
            currentItem.setEnabled (((Command) currentItem).isExecutable ());
        }

        j ++;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="152" endline="169">
public void actionPerformed (ActionEvent e) {
    int j = 0;
    Object source = e.getSource ();
    for (int i = 0;
    i < getItemCount (); i ++) {
        if (getMenuComponent (i) instanceof JSeparator) {
            continue;
        }
        JMenuItem item = getItem (i);
        if (source == item) {
            Command cmd = ((CommandHolder) item).getCommand ();
            cmd.execute ();
            break;
        }
        j ++;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="176" endline="178">
public void commandExecuted (EventObject commandEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="185" endline="187">
public void commandExecutable (EventObject commandEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXCommandMenu.java" startline="194" endline="196">
public void commandNotExecutable (EventObject commandEvent) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="40" endline="42">
private SimpleLayouter () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="44" endline="47">
public SimpleLayouter (Layoutable newLayoutable) {
    setLayoutable (newLayoutable);
    setInsets (new Insets (0, 0, 0, 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="54" endline="56">
public Layoutable getLayoutable () {
    return myLayoutable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="63" endline="65">
public void setLayoutable (Layoutable newLayoutable) {
    myLayoutable = newLayoutable;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="72" endline="74">
public void setInsets (Insets newInsets) {
    myInsets = newInsets;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="81" endline="83">
public Insets getInsets () {
    return myInsets;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="88" endline="92">
public Layouter create (Layoutable newLayoutable) {
    SimpleLayouter newLayouter = new SimpleLayouter (newLayoutable);
    newLayouter.setInsets ((Insets) getInsets ().clone ());
    return newLayouter;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="94" endline="105">
public Rectangle calculateLayout (Point origin, Point corner) {
    Rectangle maxRect = new Rectangle (origin);
    maxRect.add (corner);
    FigureEnumeration fe = getLayoutable ().figures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        maxRect.union (currentFigure.displayBox ());
    }
    maxRect.width += getInsets ().left + getInsets ().right;
    maxRect.height += getInsets ().top + getInsets ().bottom;
    return maxRect;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="107" endline="109">
public Rectangle layout (Point origin, Point corner) {
    return calculateLayout (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="114" endline="117">
public void read (StorableInput dr) throws IOException {
    setLayoutable ((Layoutable) dr.readStorable ());
    setInsets (new Insets (dr.readInt (), dr.readInt (), dr.readInt (), dr.readInt ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SimpleLayouter.java" startline="122" endline="129">
public void write (StorableOutput dw) {
    dw.writeStorable (getLayoutable ());
    Insets i = getInsets ();
    dw.writeInt (i.top);
    dw.writeInt (i.left);
    dw.writeInt (i.bottom);
    dw.writeInt (i.right);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandCheckBoxMenuItem.java" startline="34" endline="37">
public CommandCheckBoxMenuItem (Command command) {
    super (command.name ());
    setCommand (command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandCheckBoxMenuItem.java" startline="45" endline="48">
public CommandCheckBoxMenuItem (Command command, Icon icon) {
    super (command.name (), icon);
    setCommand (command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandCheckBoxMenuItem.java" startline="56" endline="59">
public CommandCheckBoxMenuItem (Command command, boolean b) {
    super (command.name (), b);
    setCommand (command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandCheckBoxMenuItem.java" startline="68" endline="71">
public CommandCheckBoxMenuItem (Command command, Icon icon, boolean b) {
    super (command.name (), icon, b);
    setCommand (command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandCheckBoxMenuItem.java" startline="79" endline="81">
public Command getCommand () {
    return fCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandCheckBoxMenuItem.java" startline="89" endline="91">
public void setCommand (Command newCommand) {
    fCommand = newCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/StandardLayouter.java" startline="40" endline="42">
public StandardLayouter () {
    this (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/StandardLayouter.java" startline="50" endline="52">
public StandardLayouter (Layoutable newLayoutable) {
    super (newLayoutable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/StandardLayouter.java" startline="57" endline="59">
public Layouter create (Layoutable newLayoutable) {
    return new StandardLayouter (newLayoutable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/StandardLayouter.java" startline="69" endline="94">
public Rectangle calculateLayout (Point origin, Point corner) {
    int maxWidth = Math.abs (corner.x - origin.x);
    int maxHeight = 0;
    FigureEnumeration fe = getLayoutable ().figures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        Rectangle r = null;
        if (currentFigure instanceof Layoutable) {
            Layouter layoutStrategy = ((Layoutable) currentFigure).getLayouter ();
            r = layoutStrategy.calculateLayout (new Point (0, 0), new Point (0, 0));
            r.grow (layoutStrategy.getInsets ().left + layoutStrategy.getInsets ().right, layoutStrategy.getInsets ().top + layoutStrategy.getInsets ().bottom);
        } else {
            r = new Rectangle (currentFigure.displayBox ().getBounds ());
        }
        maxWidth = Math.max (maxWidth, r.width);
        maxHeight += r.height;
    }
    return new Rectangle (origin.x, origin.y, maxWidth, maxHeight);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/StandardLayouter.java" startline="106" endline="133">
public Rectangle layout (Point origin, Point corner) {
    Rectangle r = calculateLayout (origin, corner);
    int maxHeight = getInsets ().top;
    FigureEnumeration fe = getLayoutable ().figures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        Point partOrigin = new Point (r.x + getInsets ().left, r.y + maxHeight);
        Point partCorner = new Point (r.x + getInsets ().left - getInsets ().right + r.width, r.y + currentFigure.displayBox ().height);
        currentFigure.displayBox (partOrigin, partCorner);
        maxHeight += currentFigure.displayBox ().height;
    }
    return new Rectangle (r.x, r.y, r.width, maxHeight + getInsets ().bottom);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="36" endline="38">
public MDI_DrawApplication () {
    this ("JHotDraw");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="43" endline="45">
public MDI_DrawApplication (String title) {
    super (title);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="53" endline="55">
protected DrawApplication createApplication () {
    return new MDI_DrawApplication ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="63" endline="68">
protected void createTools (JToolBar palette) {
    super.createTools (palette);
    Tool tool = new DragNDropTool (this);
    ToolButton tb = createToolButton (IMAGES + "SEL", "Drag N Drop Tool", tool);
    palette.add (tb);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="73" endline="75">
public void promptNew () {
    newWindow (createDrawing ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="81" endline="85">
public void newWindow (Drawing newDrawing) {
    DrawingView newView = createDrawingView (newDrawing);
    getDesktop ().addToDesktop (newView, Desktop.PRIMARY);
    toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="97" endline="99">
protected DrawingView createInitialDrawingView () {
    return NullDrawingView.getManagedDrawingView (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="105" endline="120">
public void newView () {
    if (! view ().isInteractive ()) {
        return;
    }
    newWindow (view ().drawing ());
    String copyTitle = getDrawingTitle ();
    if (copyTitle != null) {
        setDrawingTitle (copyTitle);
    } else {
        setDrawingTitle (getDefaultDrawingTitle ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="125" endline="127">
protected Desktop createDesktop () {
    return new MDIDesktopPane (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="132" endline="134">
public DrawingView [] views () {
    return getDesktop ().getAllFromDesktop (Desktop.PRIMARY);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="136" endline="138">
public String getDefaultDrawingTitle () {
    return super.getDefaultDrawingTitle () + views ().length;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDI_DrawApplication.java" startline="143" endline="145">
protected void setDrawingTitle (String drawingTitle) {
    getDesktop ().updateTitle (drawingTitle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/AutoscrollHelper.java" startline="25" endline="27">
public AutoscrollHelper (int margin) {
    autoscrollMargin = margin;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/AutoscrollHelper.java" startline="28" endline="30">
public void setAutoscrollMargin (int margin) {
    autoscrollMargin = margin;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/AutoscrollHelper.java" startline="31" endline="33">
public int getAutoscrollMargin () {
    return autoscrollMargin;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/AutoscrollHelper.java" startline="57" endline="75">
public void autoscroll (Point location) {
    int top = 0, left = 0, bottom = 0, right = 0;
    Dimension size = getSize ();
    Rectangle rect = getVisibleRect ();
    int bottomEdge = rect.y + rect.height;
    int rightEdge = rect.x + rect.width;
    if (location.y - rect.y <= autoscrollMargin && rect.y > 0) top = autoscrollMargin;

    if (location.x - rect.x <= autoscrollMargin && rect.x > 0) left = autoscrollMargin;

    if (bottomEdge - location.y <= autoscrollMargin && bottomEdge < size.height) bottom = autoscrollMargin;

    if (rightEdge - location.x <= autoscrollMargin && rightEdge < size.width) right = autoscrollMargin;

    rect.x += right - left;
    rect.y += bottom - top;
    scrollRectToVisible (rect);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/AutoscrollHelper.java" startline="76" endline="84">
public Insets getAutoscrollInsets () {
    Dimension size = getSize ();
    Rectangle rect = getVisibleRect ();
    autoscrollInsets.top = rect.y + autoscrollMargin;
    autoscrollInsets.left = rect.x + autoscrollMargin;
    autoscrollInsets.bottom = size.height - (rect.y + rect.height) + autoscrollMargin;
    autoscrollInsets.right = size.width - (rect.x + rect.width) + autoscrollMargin;
    return autoscrollInsets;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="50" endline="57">
public FloatingTextArea () {
    fEditWidget = new JEditorPane ();
    fEditScrollContainer = new JScrollPane (fEditWidget, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    fEditScrollContainer.setCursor (Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    fEditScrollContainer.setBorder (BorderFactory.createLineBorder (Color.black));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="64" endline="66">
public void createOverlay (Container container) {
    createOverlay (container, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="75" endline="81">
public void createOverlay (Container container, Font font) {
    container.add (fEditScrollContainer, 0);
    if (font != null) {
        fEditWidget.setFont (font);
    }
    fContainer = container;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="89" endline="95">
public void setBounds (Rectangle r, String text) {
    fEditWidget.setText (text);
    fEditScrollContainer.setBounds (r.x, r.y, r.width, r.height);
    fEditScrollContainer.setVisible (true);
    fEditWidget.setCaretPosition (0);
    fEditWidget.requestFocus ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="102" endline="104">
public String getText () {
    return fEditWidget.getText ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="112" endline="114">
public Dimension getPreferredSize (int cols) {
    return new Dimension (fEditWidget.getWidth (), fEditWidget.getHeight ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/FloatingTextArea.java" startline="120" endline="129">
public void endOverlay () {
    fContainer.requestFocus ();
    if (fEditScrollContainer != null) {
        fEditScrollContainer.setVisible (false);
        fContainer.remove (fEditScrollContainer);
        Rectangle bounds = fEditScrollContainer.getBounds ();
        fContainer.repaint (bounds.x, bounds.y, bounds.width, bounds.height);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="57" endline="59">
public TextAreaTool (DrawingEditor newDrawingEditor, Figure prototype) {
    super (newDrawingEditor, prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="69" endline="105">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    Figure pressedFigure = drawing ().findFigureInside (x, y);
    TextHolder textHolder = null;
    if (pressedFigure != null) {
        textHolder = pressedFigure.getTextHolder ();
    }
    if ((textHolder != null) && (textHolder.acceptsTyping ())) {
        beginEdit (textHolder, pressedFigure);
        return;
    }
    if (getTypingTarget () != null) {
        endEdit ();
        if (getCreatedFigure () != null && getCreatedFigure ().isEmpty ()) {
            drawing ().remove (getAddedFigure ());
            setUndoActivity (null);
        } else {
        }
        setTypingTarget (null);
        setCreatedFigure (null);
        setEditedFigure (null);
        setAddedFigure (null);
        editor ().toolDone ();
    } else {
        super.mouseDown (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="114" endline="120">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (getCreatedFigure () == null) {
        return;
    }
    super.mouseDrag (e, x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="129" endline="146">
public void mouseUp (MouseEvent e, int x, int y) {
    if (getCreatedFigure () == null) {
        return;
    }
    view ().checkDamage ();
    TextHolder textHolder = (TextHolder) getCreatedFigure ();
    if (textHolder.acceptsTyping ()) {
        beginEdit (textHolder, getCreatedFigure ());
    } else {
        editor ().toolDone ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="151" endline="154">
public void deactivate () {
    endEdit ();
    super.deactivate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="159" endline="162">
public void activate () {
    super.activate ();
    getActiveView ().clearSelection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="170" endline="172">
public boolean isActivated () {
    return getTypingTarget () != null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="180" endline="195">
protected void beginEdit (TextHolder figure, Figure selectedFigure) {
    if (fTextField == null) {
        fTextField = new FloatingTextArea ();
    }
    if (figure != getTypingTarget () && getTypingTarget () != null) {
        endEdit ();
    }
    fTextField.createOverlay ((Container) view (), getFont (figure));
    fTextField.setBounds (fieldBounds (figure), figure.getText ());
    setTypingTarget (figure);
    setEditedFigure (selectedFigure);
    setUndoActivity (createUndoActivity ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="203" endline="205">
protected Font getFont (TextHolder figure) {
    return figure.getFont ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="208" endline="228">
protected void endEdit () {
    if (getTypingTarget () != null) {
        if (fTextField.getText ().length () > 0) {
            getTypingTarget ().setText (fTextField.getText ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getEditedFigure ()));
            ((TextAreaTool.UndoActivity) getUndoActivity ()).setBackupText (getTypingTarget ().getText ());
        } else {
            drawing ().orphan (getAddedFigure ());
        }
        fTextField.endOverlay ();
        fTextField = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="236" endline="238">
private Rectangle fieldBounds (TextHolder figure) {
    return figure.textDisplayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="246" endline="248">
protected void setTypingTarget (TextHolder newTypingTarget) {
    fTypingTarget = newTypingTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="256" endline="258">
protected Figure getEditedFigure () {
    return fEditedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="265" endline="267">
protected void setEditedFigure (Figure figure) {
    fEditedFigure = figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="275" endline="277">
protected TextHolder getTypingTarget () {
    return fTypingTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="284" endline="286">
protected Undoable createUndoActivity () {
    return new TextAreaTool.UndoActivity (view (), getTypingTarget ().getText ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="306" endline="311">
public UndoActivity (DrawingView newDrawingView, String newOriginalText) {
    super (newDrawingView);
    setOriginalText (newOriginalText);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="322" endline="348">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    if (! isValidText (getOriginalText ())) {
        FigureEnumeration fe = getAffectedFigures ();
        while (fe.hasNextFigure ()) {
            getDrawingView ().drawing ().orphan (fe.nextFigure ());
        }
    } else if (! isValidText (getBackupText ())) {
        FigureEnumeration fe = getAffectedFigures ();
        while (fe.hasNextFigure ()) {
            getDrawingView ().add (fe.nextFigure ());
        }
        setText (getOriginalText ());
    } else {
        setText (getOriginalText ());
    }

    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="359" endline="386">
public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    if (! isValidText (getBackupText ())) {
        FigureEnumeration fe = getAffectedFigures ();
        while (fe.hasNextFigure ()) {
            getDrawingView ().drawing ().orphan (fe.nextFigure ());
        }
    } else if (! isValidText (getOriginalText ())) {
        FigureEnumeration fe = getAffectedFigures ();
        while (fe.hasNextFigure ()) {
            getDrawingView ().drawing ().add (fe.nextFigure ());
            setText (getBackupText ());
        }
    } else {
        setText (getBackupText ());
    }

    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="394" endline="396">
protected boolean isValidText (String toBeChecked) {
    return ((toBeChecked != null) && (toBeChecked.length () > 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="403" endline="411">
protected void setText (String newText) {
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        if (currentFigure.getTextHolder () != null) {
            currentFigure.getTextHolder ().setText (newText);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="418" endline="420">
public void setBackupText (String newBackupText) {
    myBackupText = newBackupText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="427" endline="429">
public String getBackupText () {
    return myBackupText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="436" endline="438">
public void setOriginalText (String newOriginalText) {
    myOriginalText = newOriginalText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaTool.java" startline="445" endline="447">
public String getOriginalText () {
    return myOriginalText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="67" endline="69">
public GraphicalCompositeFigure () {
    this (new RectangleFigure ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="77" endline="81">
public GraphicalCompositeFigure (Figure newPresentationFigure) {
    super ();
    setPresentationFigure (newPresentationFigure);
    initialize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="89" endline="97">
protected void initialize () {
    if (getLayouter () != null) {
        setLayouter (getLayouter ().create (this));
    } else {
        setLayouter (new StandardLayouter (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="104" endline="108">
public Object clone () {
    Object cloneObject = super.clone ();
    ((GraphicalCompositeFigure) cloneObject).initialize ();
    return cloneObject;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="113" endline="115">
public Rectangle displayBox () {
    return getPresentationFigure ().displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="120" endline="130">
public void basicDisplayBox (Point origin, Point corner) {
    Rectangle r = getLayouter ().layout (origin, corner);
    getPresentationFigure ().basicDisplayBox (r.getLocation (), new Point ((int) r.getMaxX (), (int) r.getMaxY ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="136" endline="139">
protected void basicMoveBy (int dx, int dy) {
    super.basicMoveBy (dx, dy);
    getPresentationFigure ().moveBy (dx, dy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="144" endline="149">
public void update () {
    willChange ();
    layout ();
    change ();
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="154" endline="157">
public void draw (Graphics g) {
    getPresentationFigure ().draw (g);
    super.draw (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="162" endline="167">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="180" endline="187">
public Object getAttribute (String name) {
    if (getPresentationFigure () != null) {
        return getPresentationFigure ().getAttribute (name);
    } else {
        return super.getAttribute (name);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="198" endline="205">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    if (getPresentationFigure () != null) {
        return getPresentationFigure ().getAttribute (attributeConstant);
    } else {
        return super.getAttribute (attributeConstant);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="218" endline="225">
public void setAttribute (String name, Object value) {
    if (getPresentationFigure () != null) {
        getPresentationFigure ().setAttribute (name, value);
    } else {
        super.setAttribute (name, value);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="236" endline="243">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    if (getPresentationFigure () != null) {
        getPresentationFigure ().setAttribute (attributeConstant, value);
    } else {
        super.setAttribute (attributeConstant, value);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="252" endline="254">
public void setPresentationFigure (Figure newPresentationFigure) {
    myPresentationFigure = newPresentationFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="263" endline="265">
public Figure getPresentationFigure () {
    return myPresentationFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="273" endline="278">
public void layout () {
    if (getLayouter () != null) {
        Rectangle r = getLayouter ().calculateLayout (displayBox ().getLocation (), displayBox ().getLocation ());
        displayBox (r.getLocation (), new Point (r.x + r.width, r.y + r.height));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="291" endline="293">
public void setLayouter (Layouter newLayouter) {
    myLayouter = newLayouter;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="303" endline="305">
public Layouter getLayouter () {
    return myLayouter;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="311" endline="315">
protected void change () {
    if (listener () != null) {
        listener ().figureRequestUpdate (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="320" endline="330">
public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        if (includes (e.getFigure ())) {
            Rectangle r = invalidateRectangle (displayBox ());
            listener ().figureRequestRemove (new FigureChangeEvent (this, r, e));
        } else {
            super.figureRequestRemove (e);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="338" endline="342">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setPresentationFigure ((Figure) dr.readStorable ());
    setLayouter ((Layouter) dr.readStorable ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/GraphicalCompositeFigure.java" startline="350" endline="354">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getPresentationFigure ());
    dw.writeStorable (getLayouter ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandMenuItem.java" startline="34" endline="38">
public CommandMenuItem (Command command) {
    super (command.name ());
    setCommand (command);
    addActionListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandMenuItem.java" startline="45" endline="49">
public CommandMenuItem (Command command, Icon icon) {
    super (command.name (), icon);
    setCommand (command);
    addActionListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandMenuItem.java" startline="58" endline="61">
public CommandMenuItem (Command command, int mnemonic) {
    super (command.name (), mnemonic);
    setCommand (command);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandMenuItem.java" startline="68" endline="70">
public Command getCommand () {
    return fCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandMenuItem.java" startline="77" endline="79">
public void setCommand (Command newCommand) {
    fCommand = newCommand;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CommandMenuItem.java" startline="84" endline="86">
public void actionPerformed (ActionEvent e) {
    getCommand ().execute ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="32" endline="34">
public PolygonScaleHandle (PolygonFigure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="41" endline="47">
public void invokeStart (int x, int y, DrawingView view) {
    fCurrent = new Point (x, y);
    PolygonScaleHandle.UndoActivity activity = (PolygonScaleHandle.UndoActivity) createUndoActivity (view);
    setUndoActivity (activity);
    activity.setAffectedFigures (new SingleFigureEnumerator (owner ()));
    activity.setPolygon (((PolygonFigure) (owner ())).getPolygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="56" endline="60">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    fCurrent = new Point (x, y);
    Polygon polygon = ((PolygonScaleHandle.UndoActivity) getUndoActivity ()).getPolygon ();
    ((PolygonFigure) (owner ())).scaleRotate (new Point (anchorX, anchorY), polygon, fCurrent);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="69" endline="76">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    ((PolygonFigure) (owner ())).smoothPoints ();
    if ((fCurrent.x == anchorX) && (fCurrent.y == anchorY)) {
        setUndoActivity (null);
    }
    fCurrent = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="78" endline="85">
public Point locate () {
    if (fCurrent == null) {
        return getOrigin ();
    } else {
        return fCurrent;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="87" endline="109">
Point getOrigin () {
    Point outer = ((PolygonFigure) (owner ())).outermostPoint ();
    Point ctr = ((PolygonFigure) (owner ())).center ();
    double len = Geom.length (outer.x, outer.y, ctr.x, ctr.y);
    if (len == 0) {
        return new Point (outer.x - HANDLESIZE / 2, outer.y + HANDLESIZE / 2);
    }
    double u = HANDLESIZE / len;
    if (u > 1.0) {
        return new Point ((outer.x * 3 + ctr.x) / 4, (outer.y * 3 + ctr.y) / 4);
    } else {
        return new Point ((int) (outer.x * (1.0 - u) + ctr.x * u), (int) (outer.y * (1.0 - u) + ctr.y * u));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="111" endline="129">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.yellow);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="134" endline="136">
protected Undoable createUndoActivity (DrawingView newView) {
    return new PolygonScaleHandle.UndoActivity (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="141" endline="145">
public UndoActivity (DrawingView newView) {
    super (newView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="147" endline="153">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    return resetPolygon ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="155" endline="162">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    return resetPolygon ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="164" endline="176">
protected boolean resetPolygon () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    PolygonFigure figure = (PolygonFigure) fe.nextFigure ();
    Polygon backupPolygon = figure.getPolygon ();
    figure.willChange ();
    figure.setInternalPolygon (getPolygon ());
    figure.changed ();
    setPolygon (backupPolygon);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="178" endline="180">
protected void setPolygon (Polygon newPolygon) {
    myPolygon = newPolygon;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonScaleHandle.java" startline="182" endline="184">
public Polygon getPolygon () {
    return myPolygon;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="28" endline="30">
public NestedCreationTool (DrawingEditor newDrawingEditor, Figure prototype) {
    super (newDrawingEditor, prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="32" endline="47">
public void mouseDown (MouseEvent e, int x, int y) {
    Figure figure = drawing ().findFigure (e.getX (), e.getY ());
    if (figure != null) {
        figure = figure.getDecoratedFigure ();
        if (figure instanceof CompositeFigure) {
            setContainerFigure ((CompositeFigure) figure);
            super.mouseDown (e, x, y);
        } else {
            toolDone ();
        }
    } else {
        toolDone ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="49" endline="58">
public void mouseMove (MouseEvent e, int x, int y) {
    if ((getContainerFigure () != null) && ! getContainerFigure ().containsPoint (e.getX (), e.getY ())) {
        toolDone ();
    } else {
        super.mouseMove (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="60" endline="66">
public void mouseUp (MouseEvent e, int x, int y) {
    if ((getContainerFigure () != null) && (getCreatedFigure () != null) && getContainerFigure ().containsPoint (e.getX (), e.getY ())) {
        getContainerFigure ().add (getCreatedFigure ());
    }
    toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="68" endline="70">
protected void setContainerFigure (CompositeFigure newContainerFigure) {
    myContainerFigure = newContainerFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="72" endline="74">
public CompositeFigure getContainerFigure () {
    return myContainerFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/NestedCreationTool.java" startline="76" endline="81">
protected void toolDone () {
    setCreatedFigure (null);
    setAddedFigure (null);
    setContainerFigure (null);
    editor ().toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="31" endline="33">
public TriangleRotationHandle (TriangleFigure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="40" endline="48">
public void invokeStart (int x, int y, DrawingView view) {
    fOrigin = getOrigin ();
    TriangleRotationHandle.UndoActivity activity = (TriangleRotationHandle.UndoActivity) createUndoActivity (view);
    setUndoActivity (activity);
    activity.setAffectedFigures (new SingleFigureEnumerator (owner ()));
    double rotation = ((TriangleFigure) (owner ())).getRotationAngle ();
    activity.setRotationAngle (rotation);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="57" endline="62">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Point fCenter = owner ().center ();
    double angle = Math.atan2 (fOrigin.y + y - anchorY - fCenter.y, fOrigin.x + x - anchorX - fCenter.x);
    ((TriangleFigure) (owner ())).rotate (angle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="71" endline="73">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    fOrigin = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="75" endline="77">
public Point locate () {
    return getOrigin ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="79" endline="98">
Point getOrigin () {
    Polygon p = ((TriangleFigure) (owner ())).getPolygon ();
    Point first = new Point (p.xpoints [0], p.ypoints [0]);
    Point ctr = owner ().center ();
    double len = Geom.length (first.x, first.y, ctr.x, ctr.y);
    if (len == 0) {
        return new Point (first.x - HANDLESIZE / 2, first.y + HANDLESIZE / 2);
    }
    double u = HANDLESIZE / len;
    if (u > 1.0) {
        return new Point ((first.x * 3 + ctr.x) / 4, (first.y * 3 + ctr.y) / 4);
    } else {
        return new Point ((int) (first.x * (1.0 - u) + ctr.x * u), (int) (first.y * (1.0 - u) + ctr.y * u));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="100" endline="108">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.yellow);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="113" endline="115">
protected Undoable createUndoActivity (DrawingView newView) {
    return new TriangleRotationHandle.UndoActivity (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="120" endline="124">
public UndoActivity (DrawingView newView) {
    super (newView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="126" endline="132">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    return resetRotationAngle ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="134" endline="141">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    return resetRotationAngle ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="143" endline="155">
protected boolean resetRotationAngle () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    TriangleFigure figure = (TriangleFigure) fe.nextFigure ();
    double backupAngle = figure.getRotationAngle ();
    figure.willChange ();
    figure.rotate (getRotationAngle ());
    figure.changed ();
    setRotationAngle (backupAngle);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="157" endline="159">
protected void setRotationAngle (double newRotationAngle) {
    myRotationAngle = newRotationAngle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleRotationHandle.java" startline="161" endline="163">
public double getRotationAngle () {
    return myRotationAngle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGStorageFormat.java" startline="45" endline="47">
protected String createFileExtension () {
    return "svg";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGStorageFormat.java" startline="55" endline="57">
public String createFileDescription () {
    return "Scalable Vector Graphics (svg)";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGStorageFormat.java" startline="68" endline="90">
public String store (String fileName, Drawing saveDrawing) throws IOException {
    DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation ();
    Document document = domImpl.createDocument (null, "svg", null);
    SVGGraphics2D svgGenerator = new SVGGraphics2D (document);
    saveDrawing.draw (svgGenerator);
    fileName = adjustFileName (fileName);
    FileOutputStream fos = new FileOutputStream (fileName);
    Writer out = new OutputStreamWriter (fos, "UTF-8");
    svgGenerator.stream (out, true);
    return fileName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGStorageFormat.java" startline="95" endline="97">
public Drawing restore (String fileName) throws IOException {
    throw new IOException ("Not implemented");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AttributeFigureContentProducer.java" startline="33" endline="33">
public AttributeFigureContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AttributeFigureContentProducer.java" startline="44" endline="53">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    Object attrValue = super.getContent (context, ctxAttrName, ctxAttrValue);
    if (attrValue != null) {
        return attrValue;
    }
    return ((AttributeContentProducerContext) context).getAttribute (ctxAttrName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AttributeFigureContentProducer.java" startline="61" endline="63">
public void write (StorableOutput dw) {
    super.write (dw);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AttributeFigureContentProducer.java" startline="72" endline="75">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TriangleFigureGeometricAdapter.java" startline="29" endline="31">
public TriangleFigureGeometricAdapter () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TriangleFigureGeometricAdapter.java" startline="40" endline="42">
public TriangleFigureGeometricAdapter (Point origin, Point corner) {
    super (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TriangleFigureGeometricAdapter.java" startline="50" endline="52">
public Shape getShape () {
    return getPolygon ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLContentProducer.java" startline="52" endline="52">
public HTMLContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLContentProducer.java" startline="63" endline="71">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    HTMLContentProducerContext htmlContext = (HTMLContentProducerContext) context;
    if (ctxAttrName.compareTo (ContentProducer.ENTITY_FONT_SIZE) == 0) {
        return Integer.toString (getHTMLFontSizeEquivalent (htmlContext.getFont ().getSize ()));
    }
    return super.getContent (context, ctxAttrName, ctxAttrValue);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLContentProducer.java" startline="80" endline="89">
public int getHTMLFontSizeEquivalent (int pointSize) {
    for (int i = 0;
    i < htmlFontSizeEquivalences.length; i ++) {
        if (pointSize >= htmlFontSizeEquivalences [i] [1] && pointSize <= htmlFontSizeEquivalences [i] [2]) {
            return htmlFontSizeEquivalences [i] [0];
        }
    }
    return 3;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="43" endline="43">
public ETSLADisposalStrategy () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="51" endline="54">
public ETSLADisposalStrategy (long periodicity) {
    gcPeriodicity = periodicity;
    initDisposalThread ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="63" endline="67">
public ETSLADisposalStrategy (DisposableResourceManager manager, int periodicity) {
    this.manager = manager;
    gcPeriodicity = periodicity;
    initDisposalThread ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="75" endline="81">
public synchronized void setManager (DisposableResourceManager manager) {
    if (manager == null) {
        stopDisposing (Long.MAX_VALUE);
    }
    this.manager = manager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="89" endline="91">
public DisposableResourceManager getManager () {
    return manager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="100" endline="113">
public void startDisposing () throws ResourceManagerNotSetException {
    if (manager == null) {
        throw new ResourceManagerNotSetException ();
    }
    if (disposingActive) {
        return;
    }
    disposingActive = true;
    disposalThread.start ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="124" endline="140">
public void stopDisposing (long millis) {
    if (! disposingActive) {
        return;
    }
    try {
        disposalThread.interruptDisposalPending = true;
        disposalThread.join (millis);
    } catch (InterruptedException ex) {
    } finally {
        disposingActive = false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="144" endline="150">
protected void initDisposalThread () {
    if (disposalThread != null) {
        return;
    }
    disposalThread = new DisposalThread (this, gcPeriodicity);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="157" endline="172">
protected synchronized void dispose () {
    synchronized (manager) {
        long currentTime = System.currentTimeMillis ();
        Iterator resourceIter = manager.getResources ();
        DisposableResourceHolder resource;
        while (resourceIter.hasNext ()) {
            resource = (DisposableResourceHolder) resourceIter.next ();
            synchronized (resource) {
                if (! resource.isLocked () && (resource.getLastTimeAccessed () + resource.getDisposableDelay ()) < currentTime) {
                    resource.dispose ();
                }
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="180" endline="182">
public long getPeriodicity () {
    return gcPeriodicity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="190" endline="195">
public void setPeriodicity (int newPeriodicity) {
    gcPeriodicity = newPeriodicity;
    if (disposalThread != null) {
        disposalThread.setPeriodicity (newPeriodicity);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="221" endline="224">
DisposalThread (ETSLADisposalStrategy strategy, long periodicity) {
    this.strategy = strategy;
    this.periodicity = periodicity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="228" endline="241">
public void run () {
    interruptDisposalPending = false;
    while (! interruptDisposalPending) {
        try {
            sleep (periodicity);
        } catch (Exception ex) {
            break;
        }
        strategy.dispose ();
    }
    interruptDisposalPending = false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="249" endline="251">
public long getPeriodicity () {
    return periodicity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="259" endline="261">
public void setPeriodicity (long newPeriodicity) {
    periodicity = newPeriodicity;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ETSLADisposalStrategy.java" startline="265" endline="267">
public void interruptDisposal () {
    interruptDisposalPending = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DiamondFigureGeometricAdapter.java" startline="31" endline="33">
public DiamondFigureGeometricAdapter () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DiamondFigureGeometricAdapter.java" startline="42" endline="44">
public DiamondFigureGeometricAdapter (Point origin, Point corner) {
    super (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DiamondFigureGeometricAdapter.java" startline="52" endline="54">
public Shape getShape () {
    return getPolygon ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="43" endline="43">
public StandardDisposableResourceHolder () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="51" endline="54">
public StandardDisposableResourceHolder (Object resource) {
    this.resource = resource;
    resetDelay ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="62" endline="66">
public Object clone () {
    StandardDisposableResourceHolder clone = new StandardDisposableResourceHolder ();
    clone.setDisposableDelay (this.getDisposableDelay ());
    return clone;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="75" endline="82">
public Object getResource () throws NullPointerException {
    if (resource != null) {
        resetDelay ();
        return resource;
    }
    throw new NullPointerException ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="90" endline="93">
public void setResource (Object resource) {
    this.resource = resource;
    resetDelay ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="101" endline="103">
public void setDisposableDelay (long millis) {
    disposeDelay = millis;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="111" endline="113">
public long getDisposableDelay () {
    return disposeDelay;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="117" endline="119">
public void dispose () {
    resource = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="127" endline="129">
public boolean isAvailable () {
    return (resource != null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="137" endline="139">
public void lock () {
    isLocked = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="146" endline="149">
public void unlock () {
    resetDelay ();
    isLocked = false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="157" endline="159">
public boolean isLocked () {
    return isLocked;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="167" endline="169">
public long getLastTimeAccessed () {
    return lastTimeAccessed;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceHolder.java" startline="173" endline="175">
public void resetDelay () {
    lastTimeAccessed = System.currentTimeMillis ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaTool.java" startline="38" endline="40">
public HTMLTextAreaTool (DrawingEditor newDrawingEditor, Figure prototype) {
    super (newDrawingEditor, prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaTool.java" startline="50" endline="52">
protected Font getFont (TextHolder figure) {
    return new Font ("Helvetica", Font.PLAIN, 12);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="35" endline="35">
public HTMLLayouter () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="44" endline="47">
public HTMLLayouter (Layoutable newLayoutable) {
    this ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="57" endline="62">
public Rectangle calculateLayout (Point origin, Point corner) {
    throw new UnsupportedOperationException ("Method calculateLayout() not yet implemented.");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="72" endline="77">
public Rectangle layout (Point origin, Point corner) {
    throw new UnsupportedOperationException ("Method layout() not yet implemented.");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="85" endline="90">
public void setInsets (Insets newInsets) {
    throw new UnsupportedOperationException ("Method setInsets() not yet implemented.");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="98" endline="103">
public Insets getInsets () {
    throw new UnsupportedOperationException ("Method getInsets() not yet implemented.");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="111" endline="116">
public void write (StorableOutput dw) {
    throw new UnsupportedOperationException ("Method write() not yet implemented.");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="125" endline="131">
public void read (StorableInput dr) throws IOException {
    throw new UnsupportedOperationException ("Method read() not yet implemented.");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLLayouter.java" startline="140" endline="142">
public Layouter create (Layoutable newLayoutable) {
    return new HTMLLayouter (newLayoutable);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/PolygonFigureGeometricAdapter.java" startline="34" endline="36">
public PolygonFigureGeometricAdapter () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/PolygonFigureGeometricAdapter.java" startline="45" endline="47">
public PolygonFigureGeometricAdapter (int x, int y) {
    super (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/PolygonFigureGeometricAdapter.java" startline="55" endline="57">
public PolygonFigureGeometricAdapter (Polygon p) {
    super (p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/PolygonFigureGeometricAdapter.java" startline="65" endline="67">
public Shape getShape () {
    return getInternalPolygon ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DisposableResourceManagerFactory.java" startline="40" endline="42">
public static DisposableResourceManager getManager () {
    return currentManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DisposableResourceManagerFactory.java" startline="52" endline="54">
public static void setStrategy (ResourceDisposabilityStrategy strategy) {
    currentStrategy = strategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DisposableResourceManagerFactory.java" startline="64" endline="74">
public static DisposableResourceHolder createStandardHolder (Object resource) {
    initManager ();
    DisposableResourceHolder holder = (DisposableResourceHolder) holderPrototype.clone ();
    holder.setResource (resource);
    getManager ().registerResource (holder);
    return holder;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/DisposableResourceManagerFactory.java" startline="78" endline="101">
protected static void initManager () {
    if (currentManager == null) {
        if (holderPrototype == null) {
            holderPrototype = new StandardDisposableResourceHolder ();
        }
        if (currentStrategy == null) {
            currentStrategy = new ETSLADisposalStrategy (DEFAULT_DISPOSAL_PERIODICITY);
        }
        if (currentManager == null) {
            currentManager = new StandardDisposableResourceManager (currentStrategy);
        }
        try {
            currentManager.startDisposing ();
        } catch (ResourceManagerNotSetException ex) {
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="61" endline="63">
public ContentProducerRegistry () {
    fParent = fDefaultRegistry;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="71" endline="73">
public ContentProducerRegistry (ContentProducerRegistry parent) {
    fParent = parent;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="84" endline="86">
public void setAutonomous () {
    fParent = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="94" endline="96">
public boolean isAutonomous () {
    return (fParent == null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="105" endline="107">
public void setParent (ContentProducerRegistry newParent) {
    fParent = newParent;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="115" endline="117">
public ContentProducerRegistry getParent () {
    return fParent;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="127" endline="129">
public static ContentProducer registerDefaultContentProducer (Class targetClass, ContentProducer producer) {
    return fDefaultRegistry.registerContentProducer (targetClass, producer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="140" endline="142">
public static void unregisterDefaultContentProducer (Class targetClass, ContentProducer producer) {
    fDefaultRegistry.unregisterContentProducer (targetClass, producer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="151" endline="153">
public static ContentProducer getDefaultContentProducer (Class targetClass) {
    return fDefaultRegistry.getContentProducer (targetClass);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="163" endline="165">
public static ContentProducer getExactDefaultContentProducer (Class targetClass) {
    return fDefaultRegistry.getExactContentProducer (targetClass);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="175" endline="179">
public ContentProducer registerContentProducer (Class targetClass, ContentProducer producer) {
    ContentProducer previousProducer = getContentProducer (targetClass);
    fContentProducers.put (targetClass, producer);
    return previousProducer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="188" endline="195">
public void unregisterContentProducer (Class targetClass, ContentProducer producer) {
    ContentProducer currentProducer = getContentProducer (targetClass);
    if (currentProducer == producer) {
        fContentProducers.remove (targetClass);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="206" endline="217">
public ContentProducer getContentProducer (Class targetClass) {
    ContentProducer producer = getExactContentProducer (targetClass);
    if (producer != null) {
        return producer;
    }
    return getSuperClassContentProducer (targetClass, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="226" endline="241">
public ContentProducer getExactContentProducer (Class targetClass) {
    ContentProducer producer = (ContentProducer) fContentProducers.get (targetClass);
    if (producer != null) {
        return producer;
    }
    if (! this.isAutonomous ()) {
        return getParent ().getExactContentProducer (targetClass);
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="250" endline="279">
protected ContentProducer getSuperClassContentProducer (Class targetClass, Class closestClass) {
    Map.Entry entry;
    Class entryClass;
    ContentProducer closestProducer = null;
    Iterator iter = fContentProducers.entrySet ().iterator ();
    while (iter.hasNext ()) {
        entry = (Map.Entry) iter.next ();
        entryClass = (Class) entry.getKey ();
        if (entryClass.isAssignableFrom (targetClass)) {
            if (closestClass != null && closestClass.isAssignableFrom (entryClass)) {
                closestClass = entryClass;
                closestProducer = (ContentProducer) entry.getValue ();
            }
        }
    }
    if (! this.isAutonomous ()) {
        ContentProducer parentProducer = getParent ().getSuperClassContentProducer (targetClass, closestClass);
        if (parentProducer != null) {
            closestProducer = parentProducer;
        }
    }
    return closestProducer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="287" endline="296">
public void write (StorableOutput dw) {
    dw.writeInt (fContentProducers.size ());
    Map.Entry producerEntry;
    Iterator iter = fContentProducers.entrySet ().iterator ();
    while (iter.hasNext ()) {
        producerEntry = (Map.Entry) iter.next ();
        dw.writeString (((Class) producerEntry.getKey ()).getName ());
        dw.writeStorable ((Storable) producerEntry.getKey ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ContentProducerRegistry.java" startline="305" endline="324">
public void read (StorableInput dr) throws IOException {
    int prodCount = dr.readInt ();
    String prodClass;
    ContentProducer producer;
    for (int cnt = 0;
    cnt < prodCount; cnt ++) {
        prodClass = dr.readString ();
        producer = (ContentProducer) dr.readStorable ();
        try {
            registerContentProducer (Class.forName (prodClass), producer);
        } catch (ClassNotFoundException ex) {
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/FigureDataContentProducer.java" startline="35" endline="35">
public FigureDataContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/FigureDataContentProducer.java" startline="46" endline="64">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    if (ctxAttrName.compareTo (ContentProducer.ENTITY_FIGURE_WIDTH) == 0) {
        return Integer.toString (((FigureContentProducerContext) context).displayBox ().width);
    }
    if (ctxAttrName.compareTo (ContentProducer.ENTITY_FIGURE_HEIGHT) == 0) {
        return Integer.toString (((FigureContentProducerContext) context).displayBox ().height);
    }
    if (ctxAttrName.compareTo (ContentProducer.ENTITY_FIGURE_POSX) == 0) {
        return Integer.toString (((FigureContentProducerContext) context).displayBox ().x);
    }
    if (ctxAttrName.compareTo (ContentProducer.ENTITY_FIGURE_POSY) == 0) {
        return Integer.toString (((FigureContentProducerContext) context).displayBox ().y);
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/FigureDataContentProducer.java" startline="72" endline="74">
public void write (StorableOutput dw) {
    super.write (dw);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/FigureDataContentProducer.java" startline="83" endline="86">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/EllipseFigureGeometricAdapter.java" startline="41" endline="43">
public EllipseFigureGeometricAdapter () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/EllipseFigureGeometricAdapter.java" startline="52" endline="54">
public EllipseFigureGeometricAdapter (Point origin, Point corner) {
    super (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/EllipseFigureGeometricAdapter.java" startline="62" endline="66">
public Shape getShape () {
    Rectangle rect = displayBox ();
    Ellipse2D.Float ellipse = new Ellipse2D.Float (rect.x, rect.y, rect.width, rect.height);
    return ellipse;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ResourceContentProducer.java" startline="41" endline="41">
public ResourceContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ResourceContentProducer.java" startline="49" endline="51">
public ResourceContentProducer (String resourceName) {
    fResourceName = resourceName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ResourceContentProducer.java" startline="62" endline="79">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    try {
        String resourceName = (fResourceName != null) ? fResourceName : (String) ctxAttrValue;
        InputStream reader = this.getClass ().getResourceAsStream (resourceName);
        int available = reader.available ();
        byte contents [] = new byte [available];
        reader.read (contents, 0, available);
        reader.close ();
        return new String (contents);
    } catch (Exception ex) {
        ex.printStackTrace ();
        return ex.toString ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ResourceContentProducer.java" startline="87" endline="90">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeString (fResourceName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ResourceContentProducer.java" startline="99" endline="103">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fResourceName = (String) dr.readString ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="40" endline="44">
public StandardDisposableResourceManager (ResourceDisposabilityStrategy strategy) {
    resources = new WeakHashMap ();
    this.strategy = strategy;
    strategy.setManager (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="52" endline="54">
public synchronized void registerResource (DisposableResourceHolder resource) {
    resources.put (resource, resource);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="63" endline="65">
public synchronized void unregisterResource (DisposableResourceHolder resource) {
    resources.remove (resource);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="73" endline="75">
public Iterator getResources () {
    return resources.values ().iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="84" endline="86">
public synchronized boolean managesResource (DisposableResourceHolder resource) {
    return resources.containsValue (resource);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="94" endline="96">
public ResourceDisposabilityStrategy getStrategy () {
    return strategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="104" endline="106">
public void setStrategy (ResourceDisposabilityStrategy newStrategy) {
    strategy = newStrategy;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="114" endline="117">
public void startDisposing () throws ResourceManagerNotSetException {
    strategy.startDisposing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/StandardDisposableResourceManager.java" startline="128" endline="130">
public void stopDisposing (long millis) {
    strategy.stopDisposing (millis);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLColorContentProducer.java" startline="34" endline="34">
public HTMLColorContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLColorContentProducer.java" startline="45" endline="50">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    Color color = (getColor () != null) ? getColor () : (Color) ctxAttrValue;
    return getHTMLColorCode (color);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLColorContentProducer.java" startline="52" endline="55">
public static String getHTMLColorCode (Color color) {
    String colorCode = Integer.toHexString (color.getRGB ());
    return "#" + colorCode.substring (colorCode.length () - 6);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AbstractContentProducer.java" startline="36" endline="36">
public AbstractContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AbstractContentProducer.java" startline="44" endline="44">
public void write (StorableOutput dw) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/AbstractContentProducer.java" startline="53" endline="54">
public void read (StorableInput dr) throws IOException {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="213" endline="215">
public HTMLTextAreaFigure () {
    initialize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="224" endline="228">
public Object clone () {
    Object cloneObject = super.clone ();
    ((HTMLTextAreaFigure) cloneObject).initialize ();
    return cloneObject;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="238" endline="241">
public void basicDisplayBox (Point origin, Point corner) {
    super.basicDisplayBox (origin, corner);
    getFrameFigure ().displayBox (displayBox ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="249" endline="254">
public HandleEnumeration handles () {
    return getFrameFigure ().handles ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="264" endline="266">
public boolean containsPoint (int x, int y) {
    return getFrameFigure ().containsPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="275" endline="278">
public void moveBy (int dx, int dy) {
    super.moveBy (dx, dy);
    getFrameFigure ().moveBy (dx, dy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="282" endline="296">
protected void initialize () {
    fImageHolder = DisposableResourceManagerFactory.createStandardHolder (null);
    setFrameFigure (new RectangleFigure ());
    setIntrinsicContentProducer (new HTMLContentProducer ());
    fContentProducers = new ContentProducerRegistry (fDefaultContentProducers);
    markSizeDirty ();
    markImageDirty ();
    markTextDirty ();
    markFontDirty ();
    setAttribute (Figure.POPUP_MENU, createPopupMenu ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="302" endline="305">
protected void markSizeDirty () {
    markImageDirty ();
    super.markSizeDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="311" endline="314">
protected void markTextDirty () {
    markImageDirty ();
    super.markTextDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="320" endline="323">
protected void markFontDirty () {
    markImageDirty ();
    super.markFontDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="337" endline="348">
public void draw (Graphics g) {
    Color fill = getFillColor ();
    g.setColor (fill);
    drawBackground (g);
    drawText (g, displayBox ());
    Color frame = getFrameColor ();
    g.setColor (frame);
    drawFrame (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="357" endline="359">
public void drawFrame (Graphics g) {
    ((Graphics2D) g).draw (getClippingShape ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="368" endline="370">
public void drawBackground (Graphics g) {
    ((Graphics2D) g).fill (getClippingShape ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="381" endline="423">
protected float drawText (Graphics g, Rectangle displayBox) {
    Graphics2D g2 = null;
    Shape savedClip = null;
    if (g != null) {
        g2 = (Graphics2D) g;
        savedClip = g2.getClip ();
    }
    Rectangle drawingBox = makeDrawingBox (displayBox);
    if (drawingBox.isEmpty ()) {
        return drawingBox.height;
    }
    if (g != null) {
        g2.clip (getClippingShape ());
    }
    if (usesDirectDraw ()) {
        drawTextDirect (g2, drawingBox);
    } else {
        fImageHolder.lock ();
        if (isImageDirty ()) {
            generateImage (drawingBox);
            setSizeDirty (false);
        }
        if (g2 != null) {
            g2.drawImage (getImage (), drawingBox.x, drawingBox.y, null);
        }
        fImageHolder.unlock ();
    }
    if (g != null) {
        g2.setClip (savedClip);
    }
    drawFrame (g);
    return displayBox.height;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="431" endline="440">
protected void generateImage (Rectangle drawingBox) {
    createImage (drawingBox.width, drawingBox.height);
    Graphics2D g2 = (Graphics2D) getImage ().getGraphics ();
    Rectangle finalBox = new Rectangle (drawingBox);
    finalBox.setLocation (0, 0);
    renderText (g2, finalBox);
    g2.dispose ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="449" endline="472">
protected void drawTextDirect (Graphics2D g2, Rectangle drawingBox) {
    Shape savedClipArea = null;
    Color savedFontColor = null;
    Font savedFont = null;
    Rectangle2D clipRect = null;
    RenderingHints savedRenderingHints = null;
    if (g2 != null) {
        savedRenderingHints = g2.getRenderingHints ();
        savedClipArea = g2.getClip ();
        savedFont = g2.getFont ();
        savedFontColor = g2.getColor ();
        g2.clip (drawingBox);
    }
    float finalHeight = renderText (g2, drawingBox);
    if (g2 != null) {
        g2.setClip (savedClipArea);
        g2.setColor (savedFontColor);
        g2.setRenderingHints (savedRenderingHints);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="486" endline="536">
protected float renderText (Graphics2D g2, Rectangle drawingBox) {
    g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setRenderingHint (RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
    g2.setBackground (getFillColor ());
    g2.setColor (getFillColor ());
    g2.clearRect (drawingBox.x, drawingBox.y, drawingBox.width, drawingBox.height);
    g2.fillRect (drawingBox.x, drawingBox.y, drawingBox.width, drawingBox.height);
    String text;
    if (isRawHTML ()) {
        text = getText ();
    } else {
        text = getHTMLText (getText (), getFont (), (String) getContentProducer (Color.class).getContent (this, FigureAttributeConstant.TEXT_COLOR_STR, getTextColor ()), (String) getContentProducer (Color.class).getContent (this, FigureAttributeConstant.FILL_COLOR_STR, getFillColor ()), drawingBox);
    }
    text = substituteEntityKeywords (text);
    JLabel displayDelegate = getDisplayDelegate ();
    displayDelegate.setText (text);
    displayDelegate.setBackground (getFillColor ());
    displayDelegate.setLocation (0, 0);
    displayDelegate.setSize (drawingBox.width, drawingBox.height);
    displayDelegate.setHorizontalAlignment (((Integer) getAttribute ("XAlignment")).intValue ());
    displayDelegate.setVerticalAlignment (((Integer) getAttribute ("YAlignment")).intValue ());
    SwingUtilities.paintComponent (g2, displayDelegate, getContainerPanel (displayDelegate, drawingBox), drawingBox.x, drawingBox.y, drawingBox.width, drawingBox.height);
    return drawingBox.height;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="545" endline="563">
protected Rectangle makeDrawingBox (Rectangle displayBox) {
    float leftMargin = ((Float) getAttribute ("LeftMargin")).floatValue ();
    float rightMargin = ((Float) getAttribute ("RightMargin")).floatValue ();
    float topMargin = ((Float) getAttribute ("TopMargin")).floatValue ();
    float bottomMargin = ((Float) getAttribute ("BottomMargin")).floatValue ();
    Rectangle drawingBox = new Rectangle (displayBox);
    drawingBox.grow (- 1, - 1);
    drawingBox.x += leftMargin;
    drawingBox.width -= (leftMargin + rightMargin);
    drawingBox.y += topMargin;
    drawingBox.height -= topMargin + bottomMargin;
    return drawingBox;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="571" endline="577">
protected JLabel getDisplayDelegate () {
    if (fDisplayDelegate == null) {
        fDisplayDelegate = new JLabel ();
        fDisplayDelegate.setBorder (null);
    }
    return fDisplayDelegate;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="587" endline="598">
protected void createImage (int width, int height) {
    fImageHolder.lock ();
    if (! fImageHolder.isAvailable () || ((BufferedImage) fImageHolder.getResource ()).getWidth () != width || ((BufferedImage) fImageHolder.getResource ()).getHeight () != height) {
        fImageHolder.setResource (new BufferedImage (width, height, BufferedImage.TYPE_INT_RGB));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="608" endline="611">
protected JPanel getContainerPanel (Component drawingDelegate, Rectangle displayBox) {
    JPanel panel = new JPanel ();
    return panel;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="627" endline="679">
protected String getHTMLText (String text, Font font, String textColor, String backColor, Rectangle displayBox) {
    StringBuffer htmlText = new StringBuffer ();
    htmlText.append ("<html>");
    htmlText.append ("<table border='0' width='" + displayBox.width + "' height='" + displayBox.height + "' cellpadding='0' cellspacing='0'" + "bgcolor='&FillColor;'>");
    htmlText.append ("<tr><td width='100%'>");
    htmlText.append ("<font face='&FontName;' color='&TextColor;' size='&FontSize;'>");
    if (((Integer) getAttribute ("XAlignment")).intValue () == SwingConstants.CENTER) {
        htmlText.append ("<center>");
    }
    if (font.isItalic ()) {
        htmlText.append ("<i>");
    }
    if (font.isBold ()) {
        htmlText.append ("<b>");
    }
    htmlText.append (text);
    if (font.isBold ()) {
        htmlText.append ("</b>");
    }
    if (font.isItalic ()) {
        htmlText.append ("</i>");
    }
    if (((Integer) getAttribute ("XAlignment")).intValue () == SwingConstants.CENTER) {
        htmlText.append ("</center>");
    }
    htmlText.append ("</font>");
    htmlText.append ("</td></tr></table>");
    htmlText.append ("</html>");
    return htmlText.toString ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="694" endline="749">
protected String substituteEntityKeywords (String template) {
    int startPos;
    int chunkEnd;
    int endPos;
    StringBuffer finalText = new StringBuffer ();
    startPos = 0;
    chunkEnd = startPos;
    try {
        while ((startPos = template.indexOf (START_ENTITY_CHAR, startPos)) != - 1) {
            if (startPos != 0 && template.charAt (startPos - 1) == ESCAPE_CHAR) {
                startPos ++;
                continue;
            }
            endPos = startPos + 1;
            while ((endPos = template.indexOf (END_ENTITY_CHAR, endPos)) != - 1) {
                if (endPos == 0 || template.charAt (endPos - 1) != ESCAPE_CHAR) {
                    break;
                }
                throw new InvalidAttributeMarker ();
            }
            String attrName = template.substring (startPos + 1, endPos);
            String attrValue = getEntityHTMLRepresentation (attrName);
            if (attrValue != null) {
                finalText.append (template.substring (chunkEnd, startPos));
                finalText.append (substituteEntityKeywords (attrValue));
                startPos = endPos + 1;
                chunkEnd = startPos;
            } else {
                startPos ++;
            }
        }
    } catch (InvalidAttributeMarker ex) {
    }
    finalText.append (template.substring (chunkEnd));
    return finalText.toString ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="758" endline="792">
protected String getEntityHTMLRepresentation (String attrName) {
    Object attrValue = null;
    attrValue = getIntrinsicContentProducer ().getContent (this, attrName, attrValue);
    if (attrValue == null) {
        return null;
    }
    while (attrValue != null && ! (attrValue instanceof String)) {
        if (attrValue instanceof ContentProducer) {
            attrValue = ((ContentProducer) attrValue).getContent (this, attrName, attrValue);
            continue;
        }
        ContentProducer defaultProducer = getContentProducer (attrValue.getClass ());
        if (defaultProducer != null) {
            attrValue = defaultProducer.getContent (this, attrName, attrValue);
            continue;
        }
        attrValue = attrValue.toString ();
    }
    return (String) attrValue;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="800" endline="805">
protected BufferedImage getImage () {
    if (fImageHolder.isAvailable ()) {
        return (BufferedImage) fImageHolder.getResource ();
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="813" endline="815">
protected void setImage (BufferedImage newImage) {
    fImageHolder.setResource (newImage);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="823" endline="828">
protected JPopupMenu createPopupMenu () {
    JPopupMenu popupMenu = new JPopupMenu ();
    addPopupMenuItems (popupMenu);
    popupMenu.setLightWeightPopupEnabled (true);
    return popupMenu;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="836" endline="894">
protected void addPopupMenuItems (JPopupMenu popupMenu) {
    ButtonGroup drawingPopupGroup;
    JRadioButtonMenuItem rbOption;
    drawingPopupGroup = new ButtonGroup ();
    rbOption = new JRadioButtonMenuItem (new AbstractAction ("Direct drawing") {
        public void actionPerformed (ActionEvent event) {
            setUseDirectDraw (true);
        }}

    );
    drawingPopupGroup.add (rbOption);
    if (usesDirectDraw ()) {
        drawingPopupGroup.setSelected (rbOption.getModel (), true);
    }
    popupMenu.add (rbOption);
    rbOption = new JRadioButtonMenuItem (new AbstractAction ("Buffered drawing") {
        public void actionPerformed (ActionEvent event) {
            setUseDirectDraw (false);
        }}

    );
    drawingPopupGroup.add (rbOption);
    if (usesBufferedDraw ()) {
        drawingPopupGroup.setSelected (rbOption.getModel (), true);
    }
    popupMenu.add (rbOption);
    popupMenu.addSeparator ();
    drawingPopupGroup = new ButtonGroup ();
    rbOption = new JRadioButtonMenuItem (new AbstractAction ("Normal HTML") {
        public void actionPerformed (ActionEvent event) {
            setRawHTML (false);
        }}

    );
    drawingPopupGroup.add (rbOption);
    drawingPopupGroup.setSelected (rbOption.getModel (), true);
    popupMenu.add (rbOption);
    rbOption = new JRadioButtonMenuItem (new AbstractAction ("Raw HTML") {
        public void actionPerformed (ActionEvent event) {
            setRawHTML (true);
        }}

    );
    drawingPopupGroup.add (rbOption);
    popupMenu.add (rbOption);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="845" endline="847">
public void actionPerformed (ActionEvent event) {
    setUseDirectDraw (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="859" endline="861">
public void actionPerformed (ActionEvent event) {
    setUseDirectDraw (false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="875" endline="877">
public void actionPerformed (ActionEvent event) {
    setRawHTML (false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="887" endline="889">
public void actionPerformed (ActionEvent event) {
    setRawHTML (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="902" endline="904">
public boolean usesDirectDraw () {
    return fUseDirectDraw;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="912" endline="916">
public void setUseDirectDraw (boolean newUseDirectDraw) {
    fUseDirectDraw = newUseDirectDraw;
    setAttribute (Figure.POPUP_MENU, createPopupMenu ());
    markSizeDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="924" endline="926">
public void setUseBufferedDraw (boolean newUseBufferedDraw) {
    setUseDirectDraw (! newUseBufferedDraw);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="934" endline="936">
public boolean usesBufferedDraw () {
    return ! usesDirectDraw ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="942" endline="944">
protected void markImageDirty () {
    fImageHolder.dispose ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="952" endline="954">
protected boolean isImageDirty () {
    return ! fImageHolder.isAvailable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="963" endline="976">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setFrameFigure ((Figure) dr.readStorable ());
    setUseDirectDraw (dr.readBoolean ());
    setRawHTML (dr.readBoolean ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="984" endline="992">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getFrameFigure ());
    dw.writeBoolean (usesDirectDraw ());
    dw.writeBoolean (isRawHTML ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1003" endline="1006">
public void setAttribute (String name, Object value) {
    super.setAttribute (name, value);
    markImageDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1016" endline="1018">
public boolean isRawHTML () {
    return fRawHTML;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1026" endline="1029">
public void setRawHTML (boolean newRawHTML) {
    fRawHTML = newRawHTML;
    setAttribute (Figure.POPUP_MENU, createPopupMenu ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1038" endline="1040">
protected ContentProducer getIntrinsicContentProducer () {
    return fIntrinsicContentProducer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1048" endline="1050">
public void setIntrinsicContentProducer (ContentProducer newIntrinsicContentProducer) {
    fIntrinsicContentProducer = newIntrinsicContentProducer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1060" endline="1062">
public ContentProducer registerContentProducer (Class targetClass, ContentProducer producer) {
    return fContentProducers.registerContentProducer (targetClass, producer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1071" endline="1073">
public void unregisterContentProducer (Class targetClass, ContentProducer producer) {
    fContentProducers.unregisterContentProducer (targetClass, producer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1082" endline="1084">
protected ContentProducer getContentProducer (Class targetClass) {
    return fContentProducers.getContentProducer (targetClass);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1092" endline="1112">
public Polygon getPolygon () {
    Polygon polygon = new Polygon ();
    AffineTransform at = AffineTransform.getScaleInstance (1, 1);
    FlatteningPathIterator pIter = new FlatteningPathIterator (getClippingShape ().getPathIterator (at), 1);
    double [] coords = new double [6];
    int pointType;
    while (! pIter.isDone ()) {
        pointType = pIter.currentSegment (coords);
        polygon.addPoint ((int) coords [0], (int) coords [1]);
        pIter.next ();
    }
    return polygon;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1120" endline="1122">
protected Figure getFrameFigure () {
    return fFrameFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1130" endline="1136">
public void setFrameFigure (Figure newFrameFigure) {
    if (fFrameFigure != null) {
        fFrameFigure.removeFigureChangeListener (this);
    }
    fFrameFigure = newFrameFigure;
    fFrameFigure.addFigureChangeListener (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1144" endline="1150">
protected Shape getClippingShape () {
    Figure frame = getFrameFigure ();
    if (frame instanceof GeometricFigure) {
        return ((GeometricFigure) frame).getShape ();
    }
    return frame.displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1158" endline="1158">
public void figureInvalidated (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1168" endline="1172">
public void figureChanged (FigureChangeEvent e) {
    willChange ();
    super.basicDisplayBox (e.getFigure ().displayBox ().getLocation (), Geom.corner (e.getFigure ().displayBox ()));
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1181" endline="1181">
public void figureRemoved (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1190" endline="1190">
public void figureRequestRemove (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1199" endline="1199">
public void figureRequestUpdate (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/HTMLTextAreaFigure.java" startline="1219" endline="1221">
public Figure getRepresentingFigure () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/RoundRectangleGeometricAdapter.java" startline="31" endline="33">
public RoundRectangleGeometricAdapter () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/RoundRectangleGeometricAdapter.java" startline="42" endline="44">
public RoundRectangleGeometricAdapter (Point origin, Point corner) {
    super (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/RoundRectangleGeometricAdapter.java" startline="52" endline="60">
public Shape getShape () {
    Point arc = getArc ();
    Rectangle dspBox = displayBox ();
    RoundRectangle2D.Float roundRectangle = new RoundRectangle2D.Float (dspBox.x, dspBox.y, dspBox.width, dspBox.height, arc.x, arc.y);
    return roundRectangle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/URLContentProducer.java" startline="45" endline="45">
public URLContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/URLContentProducer.java" startline="53" endline="55">
public URLContentProducer (URL url) {
    fURL = url;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/URLContentProducer.java" startline="66" endline="83">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    try {
        URL url = (fURL != null) ? new URL (fURL.toExternalForm ()) : new URL (((URL) ctxAttrValue).toExternalForm ());
        InputStream reader = url.openStream ();
        int available = reader.available ();
        byte contents [] = new byte [available];
        reader.read (contents, 0, available);
        reader.close ();
        return new String (contents);
    } catch (Exception ex) {
        ex.printStackTrace ();
        return ex.toString ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/URLContentProducer.java" startline="91" endline="97">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeBoolean ((fURL != null));
    if (fURL != null) {
        dw.writeString (fURL.toExternalForm ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/URLContentProducer.java" startline="106" endline="113">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    boolean hasURL = dr.readBoolean ();
    if (hasURL) {
        fURL = new URL (dr.readString ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TextHolderContentProducer.java" startline="43" endline="43">
public TextHolderContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TextHolderContentProducer.java" startline="51" endline="53">
public TextHolderContentProducer (TextHolder figure) {
    fFigure = figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TextHolderContentProducer.java" startline="64" endline="70">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    TextHolder figure = (fFigure != null) ? fFigure : (TextHolder) ctxAttrValue;
    return figure.getText ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TextHolderContentProducer.java" startline="78" endline="81">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable ((Figure) fFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/TextHolderContentProducer.java" startline="90" endline="94">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fFigure = (TextHolder) dr.readStorable ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="39" endline="39">
public ColorContentProducer () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="47" endline="49">
public ColorContentProducer (Color color) {
    fColor = color;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="60" endline="66">
public Object getContent (ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
    Color color = (fColor != null) ? fColor : (Color) ctxAttrValue;
    String colorCode = Integer.toHexString (color.getRGB ());
    return "0x" + colorCode.substring (colorCode.length () - 6);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="74" endline="76">
public void setColor (Color color) {
    fColor = color;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="84" endline="86">
public Color getColor () {
    return fColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="94" endline="101">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeBoolean ((fColor != null));
    if (fColor != null) {
        dw.writeInt (fColor.getRGB ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ColorContentProducer.java" startline="110" endline="121">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    boolean hasColor = dr.readBoolean ();
    if (hasColor) {
        fColor = new Color (dr.readInt ());
    } else {
        fColor = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/html/ResourceManagerNotSetException.java" startline="23" endline="23">
public ResourceManagerNotSetException () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ChopPolygonConnector.java" startline="32" endline="33">
public ChopPolygonConnector () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ChopPolygonConnector.java" startline="35" endline="37">
public ChopPolygonConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ChopPolygonConnector.java" startline="39" endline="41">
protected Point chop (Figure target, Point from) {
    return ((PolygonFigure) target).chop (from);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="35" endline="65">
public WindowMenu (String newText, MDIDesktopPane newDesktop, DrawingEditor newEditor) {
    super (newText);
    this.desktop = newDesktop;
    cascadeCommand = new AbstractCommand ("Cascade", newEditor) {
        public void execute () {
            WindowMenu.this.desktop.cascadeFrames ();
        } public boolean isExecutable () {
            return super.isExecutable () && (WindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    ;
    tileCommand = new AbstractCommand ("Tile", newEditor) {
        public void execute () {
            WindowMenu.this.desktop.tileFrames ();
        } public boolean isExecutable () {
            return super.isExecutable () && (WindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    ;
    addMenuListener (new MenuListener () {
        public void menuCanceled (MenuEvent e) {
        } public void menuDeselected (MenuEvent e) {
            removeAll ();
        } public void menuSelected (MenuEvent e) {
            buildChildMenus ();
        }}

    );
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="39" endline="41">
public void execute () {
    WindowMenu.this.desktop.cascadeFrames ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="42" endline="44">
public boolean isExecutable () {
    return super.isExecutable () && (WindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="47" endline="49">
public void execute () {
    WindowMenu.this.desktop.tileFrames ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="50" endline="52">
public boolean isExecutable () {
    return super.isExecutable () && (WindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="55" endline="55">
public void menuCanceled (MenuEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="57" endline="59">
public void menuDeselected (MenuEvent e) {
    removeAll ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="61" endline="63">
public void menuSelected (MenuEvent e) {
    buildChildMenus ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="68" endline="98">
private void buildChildMenus () {
    ChildMenuItem menu;
    JInternalFrame [] array = desktop.getAllFrames ();
    add (new CommandMenuItem (cascadeCommand));
    add (new CommandMenuItem (tileCommand));
    if (array.length > 0) {
        addSeparator ();
    }
    for (int i = 0;
    i < array.length; i ++) {
        menu = new ChildMenuItem (array [i]);
        menu.setState (i == 0);
        menu.addActionListener (new ActionListener () {
            public void actionPerformed (ActionEvent ae) {
                JInternalFrame frame = ((ChildMenuItem) ae.getSource ()).getFrame ();
                frame.moveToFront ();
                try {
                    frame.setSelected (true);
                } catch (PropertyVetoException e) {
                    e.printStackTrace ();
                }
            }}

        );
        menu.setIcon (array [i].getFrameIcon ());
        add (menu);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="84" endline="93">
public void actionPerformed (ActionEvent ae) {
    JInternalFrame frame = ((ChildMenuItem) ae.getSource ()).getFrame ();
    frame.moveToFront ();
    try {
        frame.setSelected (true);
    } catch (PropertyVetoException e) {
        e.printStackTrace ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="105" endline="108">
public ChildMenuItem (JInternalFrame frame) {
    super (frame.getTitle ());
    this.frame = frame;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/WindowMenu.java" startline="110" endline="112">
public JInternalFrame getFrame () {
    return frame;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGDrawApp.java" startline="16" endline="19">
public static void main (String [] args) {
    SVGDrawApp window = new SVGDrawApp ();
    window.open ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGDrawApp.java" startline="21" endline="23">
public SVGDrawApp () {
    super ("JHotDraw");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGDrawApp.java" startline="31" endline="33">
protected DrawApplication createApplication () {
    return new SVGDrawApp ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SVGDrawApp.java" startline="42" endline="48">
public StorageFormatManager createStorageFormatManager () {
    StorageFormatManager storageFormatManager = new StorageFormatManager ();
    SVGStorageFormat format = new SVGStorageFormat ();
    storageFormatManager.addStorageFormat (format);
    storageFormatManager.setDefaultStorageFormat (format);
    return storageFormatManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="38" endline="40">
public CustomSelectionTool (DrawingEditor editor) {
    super (editor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="50" endline="60">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    if (e.isPopupTrigger ()) {
        handlePopupMenu (e, x, y);
    } else {
        super.mouseDown (e, x, y);
        handleMouseDown (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="70" endline="74">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (! e.isPopupTrigger ()) {
        super.mouseDrag (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="86" endline="100">
public void mouseUp (MouseEvent e, int x, int y) {
    if (e.isPopupTrigger ()) {
        handlePopupMenu (e, x, y);
        super.mouseUp (e, x, y);
    } else if (e.getClickCount () == 2) {
        super.mouseUp (e, x, y);
        handleMouseDoubleClick (e, x, y);
    } else {
        super.mouseUp (e, x, y);
        handleMouseUp (e, x, y);
        handleMouseClick (e, x, y);
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="106" endline="107">
protected void handleMouseDown (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="113" endline="114">
protected void handleMouseUp (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="120" endline="121">
protected void handleMouseClick (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="127" endline="128">
protected void handleMouseDoubleClick (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="134" endline="145">
protected void handlePopupMenu (MouseEvent e, int x, int y) {
    Figure figure = drawing ().findFigure (e.getX (), e.getY ());
    if (figure != null) {
        Object attribute = figure.getAttribute (Figure.POPUP_MENU);
        if (attribute == null) {
            figure = drawing ().findFigureInside (e.getX (), e.getY ());
        }
        if (figure != null) {
            showPopupMenu (figure, e.getX (), e.getY (), e.getComponent ());
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="157" endline="171">
protected void showPopupMenu (Figure figure, int x, int y, Component comp) {
    Object attribute = figure.getAttribute (Figure.POPUP_MENU);
    if ((attribute != null) && (attribute instanceof JPopupMenu)) {
        JPopupMenu popup = (JPopupMenu) attribute;
        if (popup instanceof PopupMenuFigureSelection) {
            ((PopupMenuFigureSelection) popup).setSelectedFigure (figure);
        }
        Point newLocation = new Point (x, y);
        adjustOffsets (comp.getParent (), newLocation);
        popup.setLocation (newLocation);
        popup.setInvoker (comp);
        popup.setVisible (true);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomSelectionTool.java" startline="179" endline="185">
private void adjustOffsets (Component comp, Point offsetPoint) {
    if (comp != null) {
        Point compLocation = comp.getLocation ();
        offsetPoint.translate (compLocation.x, compLocation.y);
        adjustOffsets (comp.getParent (), offsetPoint);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="107" endline="116">
public TextAreaFigure () {
    fParagraphs = CollectionsFactory.current ().createList ();
    fDisplayBox = new Rectangle (0, 0, 30, 15);
    fFont = createFont ();
    fText = new String ("");
    fSizeIsDirty = true;
    fTextIsDirty = true;
    fFontIsDirty = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="124" endline="126">
public String getText () {
    return fText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="134" endline="140">
public void setText (String newText) {
    if (! newText.equals (fText)) {
        markTextDirty ();
        fText = newText;
        changed ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="147" endline="149">
public Rectangle textDisplayBox () {
    return displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="156" endline="161">
public Font createFont () {
    return new Font ((String) getAttribute ("FontName"), ((Integer) getAttribute ("FontStyle")).intValue (), ((Integer) getAttribute ("FontSize")).intValue ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="163" endline="166">
public boolean isReadOnly () {
    return fIsReadOnly;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="168" endline="171">
public void setReadOnly (boolean newReadOnly) {
    fIsReadOnly = newReadOnly;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="178" endline="180">
public boolean acceptsTyping () {
    return ! isReadOnly ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="186" endline="188">
protected void markTextDirty () {
    setTextDirty (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="196" endline="198">
protected void setTextDirty (boolean newTextDirty) {
    fTextIsDirty = newTextDirty;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="206" endline="208">
public boolean isTextDirty () {
    return fTextIsDirty;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="214" endline="216">
protected void markSizeDirty () {
    setSizeDirty (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="224" endline="226">
public void setSizeDirty (boolean newSizeIsDirty) {
    fSizeIsDirty = newSizeIsDirty;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="234" endline="236">
public boolean isSizeDirty () {
    return fSizeIsDirty;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="243" endline="245">
public Font getFont () {
    return fFont;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="252" endline="260">
public void setFont (Font newFont) {
    willChange ();
    fFont = newFont;
    markSizeDirty ();
    markFontDirty ();
    attributesMap = new Hashtable (1);
    attributesMap.put (TextAttribute.FONT, newFont);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="270" endline="272">
public int overlayColumns () {
    return 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="281" endline="288">
public void basicDisplayBox (Point origin, Point corner) {
    Dimension prevSize = fDisplayBox.getSize ();
    fDisplayBox = new Rectangle (origin);
    fDisplayBox.add (corner);
    if (! fDisplayBox.getSize ().equals (prevSize)) {
        markSizeDirty ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="295" endline="299">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="306" endline="312">
public Rectangle displayBox () {
    return new Rectangle (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="321" endline="328">
public void moveBy (int x, int y) {
    willChange ();
    basicMoveBy (x, y);
    if (fLocator != null) {
        fLocator.moveBy (x, y);
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="336" endline="338">
protected void basicMoveBy (int x, int y) {
    fDisplayBox.translate (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="346" endline="349">
public void drawBackground (Graphics g) {
    Rectangle r = displayBox ();
    g.fillRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="357" endline="360">
public void draw (Graphics g) {
    super.draw (g);
    drawText (g, displayBox ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="367" endline="371">
public void drawFrame (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor ((Color) getAttribute ("FrameColor"));
    g.drawRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="382" endline="575">
protected float drawText (Graphics g, Rectangle displayBox) {
    Graphics2D g2 = null;
    Shape savedClipArea = null;
    Color savedFontColor = null;
    Rectangle2D clipRect = null;
    RenderingHints savedRenderingHints = null;
    if (g != null) {
        g2 = (Graphics2D) g;
        savedRenderingHints = g2.getRenderingHints ();
        g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint (RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        Font savedFont = g2.getFont ();
        savedFontColor = g2.getColor ();
        savedClipArea = g2.getClip ();
        if (savedClipArea != null) {
            clipRect = displayBox.createIntersection ((Rectangle2D) savedClipArea);
        } else {
            clipRect = displayBox;
        }
        g2.setClip (clipRect);
        Color textColor = getTextColor ();
        if (! ColorMap.isTransparent (textColor)) {
            g2.setColor (textColor);
        }
        g2.setFont (getFont ());
    }
    FontRenderContext fontRenderCtx = new FontRenderContext (null, false, false);
    prepareText ();
    float leftMargin = displayBox.x + ((Float) getAttribute ("LeftMargin")).floatValue ();
    float rightMargin = displayBox.x + displayBox.width - ((Float) getAttribute ("RightMargin")).floatValue ();
    float topMargin = displayBox.y + ((Float) getAttribute ("TopMargin")).floatValue ();
    float [] tabStops = new float [40];
    float tabSize = ((Float) getAttribute ("TabSize")).floatValue () * getFontWidth ();
    float tabPos = tabSize;
    for (int tabCnt = 0;
    tabCnt < 40; tabCnt ++) {
        tabStops [tabCnt] = tabPos + leftMargin;
        tabPos += tabSize;
    }
    float verticalPos = topMargin;
    Iterator paragraphs = fParagraphs.iterator ();
    while (paragraphs.hasNext ()) {
        String paragraphText = (String) paragraphs.next ();
        AttributedString attrText = new AttributedString (paragraphText);
        AttributedCharacterIterator paragraphIter = attrText.getIterator ();
        int [] tabLocations = new int [paragraphText.length ()];
        int tabCount = 0;
        for (char c = paragraphIter.first ();
        c != paragraphIter.DONE; c = paragraphIter.next ()) {
            if (c == '\t') {
                tabLocations [tabCount ++] = paragraphIter.getIndex ();
            }
        }
        tabLocations [tabCount] = paragraphIter.getEndIndex () - 1;
        paragraphText = paragraphText.replace ('\t', ' ');
        attrText = new AttributedString (paragraphText, attributesMap);
        paragraphIter = attrText.getIterator ();
        LineBreakMeasurer measurer = new LineBreakMeasurer (paragraphIter, fontRenderCtx);
        int currentTab = 0;
        while (measurer.getPosition () < paragraphIter.getEndIndex ()) {
            boolean lineContainsText = false;
            boolean lineComplete = false;
            float maxAscent = 0;
            float maxDescent = 0;
            float horizontalPos = leftMargin;
            List layouts = CollectionsFactory.current ().createList (1);
            List penPositions = CollectionsFactory.current ().createList (1);
            while (! lineComplete) {
                float wrappingWidth = rightMargin - horizontalPos;
                wrappingWidth = Math.max (1, wrappingWidth);
                TextLayout layout = measurer.nextLayout (wrappingWidth, tabLocations [currentTab] + 1, lineContainsText);
                if (layout != null) {
                    layouts.add (layout);
                    penPositions.add (new Float (horizontalPos));
                    horizontalPos += layout.getAdvance ();
                    maxAscent = Math.max (maxAscent, layout.getAscent ());
                    maxDescent = Math.max (maxDescent, layout.getDescent () + layout.getLeading ());
                } else {
                    lineComplete = true;
                }
                lineContainsText = true;
                if (measurer.getPosition () == tabLocations [currentTab] + 1) {
                    currentTab ++;
                }
                if (measurer.getPosition () == paragraphIter.getEndIndex ()) {
                    lineComplete = true;
                } else if (horizontalPos >= tabStops [tabStops.length - 1]) {
                    lineComplete = true;
                }

                if (! lineComplete) {
                    int j;
                    for (j = 0; horizontalPos >= tabStops [j]; j ++) {
                    }
                    horizontalPos = tabStops [j];
                }
            }
            verticalPos += maxAscent;
            Iterator layoutEnum = layouts.iterator ();
            Iterator positionEnum = penPositions.iterator ();
            while (layoutEnum.hasNext ()) {
                TextLayout nextLayout = (TextLayout) layoutEnum.next ();
                Float nextPosition = (Float) positionEnum.next ();
                if (g2 != null) {
                    nextLayout.draw (g2, nextPosition.floatValue (), verticalPos);
                }
            }
            verticalPos += maxDescent;
        }
    }
    if (g2 != null && verticalPos > clipRect.getMaxY () && clipRect.getMaxY () == displayBox.getMaxY ()) {
        Stroke savedStroke = g2.getStroke ();
        float [] dash = new float [2];
        dash [0] = 2f;
        dash [1] = 4f;
        g2.setStroke (new BasicStroke (1f, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER, 1f, dash, 0f));
        g2.setColor (Color.red);
        g2.drawLine ((int) clipRect.getMinX () + 1, (int) clipRect.getMaxY () - 1, (int) clipRect.getMaxX () - 1, (int) clipRect.getMaxY () - 1);
        g2.setStroke (savedStroke);
    }
    if (g2 != null) {
        if (savedClipArea != null) {
            g2.setClip (savedClipArea);
        }
        g2.setColor (savedFontColor);
        g2.setRenderingHints (savedRenderingHints);
    }
    return verticalPos;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="582" endline="598">
protected void prepareText () {
    if (! isTextDirty ()) {
        return;
    }
    fParagraphs = CollectionsFactory.current ().createList ();
    String paragraphText;
    Point pos = new Point (- 1, - 1);
    while ((paragraphText = getNextParagraph (fText, pos)) != null) {
        if (paragraphText.length () == 0) {
            paragraphText = " ";
        }
        fParagraphs.add (paragraphText);
    }
    setTextDirty (false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="610" endline="630">
protected String getNextParagraph (String text, Point pos) {
    int start = pos.y + 1;
    if (start >= text.length ()) {
        return null;
    }
    pos.x = start;
    int end = text.indexOf ('\n', start);
    if (end == - 1) {
        end = text.length ();
    }
    pos.y = end;
    if (text.charAt (end - 1) == '\r') {
        return text.substring (start, end - 1);
    } else {
        return text.substring (start, end);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="639" endline="641">
public Object getAttribute (String name) {
    return super.getAttribute (name);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="652" endline="684">
public void setAttribute (String name, Object value) {
    Font font = getFont ();
    if (name.equals ("FontSize")) {
        Integer s = (Integer) value;
        setFont (new Font (font.getName (), font.getStyle (), s.intValue ()));
        super.setAttribute (name, value);
    } else if (name.equals ("FontStyle")) {
        Integer s = (Integer) value;
        int style = font.getStyle ();
        if (s.intValue () == Font.PLAIN) {
            style = font.PLAIN;
        } else {
            style = style ^ s.intValue ();
        }
        setFont (new Font (font.getName (), style, font.getSize ()));
        super.setAttribute (name, new Integer (style));
    } else if (name.equals ("FontName")) {
        String n = (String) value;
        setFont (new Font (n, font.getStyle (), font.getSize ()));
        super.setAttribute (name, value);
    } else {
        super.setAttribute (name, value);
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="691" endline="701">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fDisplayBox.x);
    dw.writeInt (fDisplayBox.y);
    dw.writeInt (fDisplayBox.width);
    dw.writeInt (fDisplayBox.height);
    dw.writeString (fText);
    dw.writeBoolean (fIsReadOnly);
    dw.writeStorable (fObservedFigure);
    dw.writeStorable (fLocator);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="709" endline="730">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    markSizeDirty ();
    markTextDirty ();
    markFontDirty ();
    fDisplayBox.x = dr.readInt ();
    fDisplayBox.y = dr.readInt ();
    fDisplayBox.width = dr.readInt ();
    fDisplayBox.height = dr.readInt ();
    fText = dr.readString ();
    fIsReadOnly = dr.readBoolean ();
    fObservedFigure = (Figure) dr.readStorable ();
    if (fObservedFigure != null) {
        fObservedFigure.addFigureChangeListener (this);
    }
    fLocator = (OffsetLocator) dr.readStorable ();
    setFont (createFont ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="739" endline="750">
protected void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    if (fObservedFigure != null) {
        fObservedFigure.addFigureChangeListener (this);
    }
    markSizeDirty ();
    markTextDirty ();
    markFontDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="757" endline="766">
public void connect (Figure figure) {
    if (fObservedFigure != null) {
        fObservedFigure.removeFigureChangeListener (this);
    }
    fObservedFigure = figure;
    fLocator = new OffsetLocator (figure.connectedTextLocator (this));
    fObservedFigure.addFigureChangeListener (this);
    updateLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="773" endline="778">
public void disconnect (Figure disconnectFigure) {
    if (disconnectFigure != null) {
        disconnectFigure.removeFigureChangeListener (this);
    }
    fLocator = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="786" endline="787">
public void figureInvalidated (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="794" endline="796">
public void figureChanged (FigureChangeEvent e) {
    updateLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="802" endline="814">
protected void updateLocation () {
    if (fLocator != null) {
        Point p = fLocator.locate (fObservedFigure);
        p.x -= size ().width / 2 + fDisplayBox.x;
        p.y -= size ().height / 2 + fDisplayBox.y;
        if (p.x != 0 || p.y != 0) {
            willChange ();
            basicMoveBy (p.x, p.y);
            changed ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="821" endline="825">
public void figureRemoved (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRemoved (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="832" endline="836">
public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="841" endline="843">
public void figureRequestUpdate (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="851" endline="854">
protected float getFontWidth () {
    updateFontInfo ();
    return fFontWidth;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="857" endline="865">
protected void updateFontInfo () {
    if (! isFontDirty ()) {
        return;
    }
    FontMetrics metrics = Toolkit.getDefaultToolkit ().getFontMetrics (getFont ());
    fFontWidth = metrics.charWidth ('W');
    setFontDirty (false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="874" endline="876">
public Color getTextColor () {
    return (Color) getAttribute ("TextColor");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="883" endline="885">
public boolean isEmpty () {
    return (fText.length () == 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="890" endline="892">
protected void markFontDirty () {
    setFontDirty (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="899" endline="901">
public boolean isFontDirty () {
    return fFontIsDirty;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="908" endline="910">
public void setFontDirty (boolean newFontIsDirty) {
    fFontIsDirty = newFontIsDirty;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TextAreaFigure.java" startline="920" endline="922">
public Figure getRepresentingFigure () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="31" endline="37">
public SplitPaneDesktop () {
    setDesktopEventService (createDesktopEventService ());
    setAlignmentX (JSplitPane.LEFT_ALIGNMENT);
    setOneTouchExpandable (true);
    addPropertyChangeListener (createPropertyChangeListener ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="39" endline="50">
protected PropertyChangeListener createPropertyChangeListener () {
    return new PropertyChangeListener () {
        public void propertyChange (PropertyChangeEvent evt) {
            if (getRightComponent () != null) {
                getRightComponent ().repaint ();
            }
            if (getLeftComponent () != null) {
                getLeftComponent ().repaint ();
            }
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="41" endline="48">
public void propertyChange (PropertyChangeEvent evt) {
    if (getRightComponent () != null) {
        getRightComponent ().repaint ();
    }
    if (getLeftComponent () != null) {
        getLeftComponent ().repaint ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="52" endline="66">
protected Component createContents (DrawingView dv, int location) {
    setRightComponent (createRightComponent (dv));
    setLeftComponent (createLeftComponent (dv));
    switch (location) {
        case Desktop.PRIMARY :
            {
                return getLeftComponent ();
            } case Desktop.SECONDARY :
            {
                return getRightComponent ();
            } default :
            {
                return null;
            }}
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="68" endline="74">
protected Component createRightComponent (DrawingView dv) {
    JScrollPane sp = new JScrollPane ((Component) dv);
    sp.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    sp.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    sp.setAlignmentX (LEFT_ALIGNMENT);
    return sp;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="76" endline="78">
protected Component createLeftComponent (DrawingView dv) {
    return new JScrollPane (new JList ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="80" endline="82">
public DrawingView getActiveDrawingView () {
    return getDesktopEventService ().getActiveDrawingView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="84" endline="99">
public void addToDesktop (DrawingView dv, int location) {
    createContents (dv, Desktop.PRIMARY);
    setDividerLocation (getInitDividerLocation ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="101" endline="103">
protected int getInitDividerLocation () {
    return 150;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="105" endline="113">
public void removeFromDesktop (DrawingView dv, int location) {
    Component [] comps = getContainer ().getComponents ();
    for (int x = 0;
    x < comps.length; x ++) {
        if (dv == Helper.getDrawingView (comps [x])) {
            getContainer ().remove (comps [x]);
            break;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="115" endline="117">
public void removeAllFromDesktop (int location) {
    getContainer ().removeAll ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="119" endline="121">
public DrawingView [] getAllFromDesktop (int location) {
    return getDesktopEventService ().getDrawingViews (getComponents ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="123" endline="125">
public void addDesktopListener (DesktopListener dpl) {
    getDesktopEventService ().addDesktopListener (dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="127" endline="129">
public void removeDesktopListener (DesktopListener dpl) {
    getDesktopEventService ().removeDesktopListener (dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="131" endline="133">
private Container getContainer () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="135" endline="137">
protected DesktopEventService getDesktopEventService () {
    return myDesktopEventService;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="139" endline="141">
private void setDesktopEventService (DesktopEventService newDesktopEventService) {
    myDesktopEventService = newDesktopEventService;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="143" endline="145">
protected DesktopEventService createDesktopEventService () {
    return new DesktopEventService (this, getContainer ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDesktop.java" startline="147" endline="150">
public void updateTitle (String newDrawingTitle) {
    setName (newDrawingTitle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFiguresTransferable.java" startline="25" endline="28">
public DNDFiguresTransferable (Object o) {
    this.o = o;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFiguresTransferable.java" startline="29" endline="31">
public DataFlavor [] getTransferDataFlavors () {
    return new DataFlavor [] {DNDFiguresFlavor};
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFiguresTransferable.java" startline="33" endline="35">
public boolean isDataFlavorSupported (DataFlavor flavor) {
    return flavor.equals (DNDFiguresFlavor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFiguresTransferable.java" startline="37" endline="42">
public Object getTransferData (DataFlavor flavor) throws UnsupportedFlavorException, IOException {
    if (isDataFlavorSupported (flavor) == false) {
        throw new UnsupportedFlavorException (flavor);
    }
    return o;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="34" endline="91">
protected static Object ProcessReceivedData (DataFlavor flavor, Transferable transferable) {
    if (transferable == null) {
        return null;
    }
    try {
        if (flavor.equals (DataFlavor.stringFlavor)) {
            String str = (String) transferable.getTransferData (DataFlavor.stringFlavor);
            return str;
        } else if (flavor.equals (DataFlavor.javaFileListFlavor)) {
            java.util.List aList = (java.util.List) transferable.getTransferData (DataFlavor.javaFileListFlavor);
            File fList [] = new File [aList.size ()];
            aList.toArray (fList);
            return fList;
        } else if (flavor.equals (ASCIIFlavor)) {
            String txt = null;
            InputStream is = (InputStream) transferable.getTransferData (ASCIIFlavor);
            int length = is.available ();
            byte [] bytes = new byte [length];
            int n = is.read (bytes);
            if (n > 0) {
                txt = new String (bytes, 0, n);
            }
            return txt;
        } else if (flavor.equals (DNDFiguresTransferable.DNDFiguresFlavor)) {
            DNDFigures ff = (DNDFigures) transferable.getTransferData (DNDFiguresTransferable.DNDFiguresFlavor);
            return ff;
        } else {
            return null;
        }

    } catch (java.io.IOException ioe) {
        System.err.println (ioe);
        return null;
    } catch (UnsupportedFlavorException ufe) {
        System.err.println (ufe);
        return null;
    } catch (ClassCastException cce) {
        System.err.println (cce);
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="93" endline="101">
public boolean setDropTargetActive (boolean state) {
    if (state == true) {
        return createDropTarget ();
    } else {
        destroyDropTarget ();
        return false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="103" endline="111">
public boolean setDragSourceActive (boolean state) {
    if (state == true) {
        return createDragGestureRecognizer ();
    } else {
        destroyDragGestreRecognizer ();
        return false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="113" endline="128">
protected boolean createDropTarget () {
    if (Component.class.isInstance (view ())) {
        try {
            dt = new DropTarget ((Component) view (), DnDConstants.ACTION_COPY_OR_MOVE, this);
            System.out.println ("" + view () + " Initialized to DND.");
            return true;
        } catch (java.lang.NullPointerException npe) {
            System.err.println ("View Failed to initialize to DND.");
            System.err.println ("Container likely did not have peer before the DropTarget was added");
            System.err.println (npe);
            npe.printStackTrace ();
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="129" endline="135">
protected void destroyDropTarget () {
    if (dt != null) {
        dt.setComponent (null);
        dt.removeDropTargetListener (this);
        dt = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="141" endline="153">
protected boolean createDragGestureRecognizer () {
    if (Component.class.isInstance (view ())) {
        Component c = (Component) view ();
        dgr = DragSource.getDefaultDragSource ().createDefaultDragGestureRecognizer (c, DnDConstants.ACTION_COPY_OR_MOVE, this);
        return true;
    } else return false;

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="158" endline="165">
protected void destroyDragGestreRecognizer () {
    System.out.println ("Destroying DGR");
    if (dgr != null) {
        dgr.removeDragGestureListener (this);
        dgr.setComponent (null);
        dgr = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="173" endline="243">
public void dragGestureRecognized (DragGestureEvent dge) {
    Component c = dge.getComponent ();
    if (DrawingView.class.isInstance (c)) {
        boolean found = false;
        DrawingView dv = (DrawingView) c;
        FigureEnumeration selectedElements = dv.selection ();
        if (selectedElements.hasNextFigure () == false) {
            return;
        }
        Point p = dge.getDragOrigin ();
        while (selectedElements.hasNextFigure ()) {
            Figure f = selectedElements.nextFigure ();
            if (f.containsPoint (p.x, p.y)) {
                found = true;
                break;
            }
        }
        if (found == true) {
            DNDFigures dndff = new DNDFigures (dv.selection (), p);
            DNDFiguresTransferable trans = new DNDFiguresTransferable (dndff);
            if (JComponent.class.isInstance (c)) {
                ((JComponent) c).setAutoscrolls (false);
            }
            dge.getDragSource ().startDrag (dge, null, trans, this);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="252" endline="261">
public void dragEnter (DropTargetDragEvent dtde) {
    supportDropTargetDragEvent (dtde);
    if (fLastX == 0) {
        fLastX = dtde.getLocation ().x;
    }
    if (fLastY == 0) {
        fLastY = dtde.getLocation ().y;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="266" endline="268">
public void dragExit (DropTargetEvent dte) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="273" endline="289">
public void dragOver (DropTargetDragEvent dtde) {
    if (supportDropTargetDragEvent (dtde) == true) {
        int x = dtde.getLocation ().x;
        int y = dtde.getLocation ().y;
        if ((Math.abs (x - fLastX) > 0) || (Math.abs (y - fLastY) > 0)) {
            fLastX = x;
            fLastY = y;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="294" endline="386">
public void drop (DropTargetDropEvent dtde) {
    System.out.println ("DropTargetDropEvent-drop");
    if (dtde.isDataFlavorSupported (DNDFiguresTransferable.DNDFiguresFlavor) == true) {
        System.out.println ("DNDFiguresFlavor");
        if ((dtde.getDropAction () & DnDConstants.ACTION_COPY_OR_MOVE) != 0) {
            System.out.println ("copy or move");
            if (dtde.isLocalTransfer () == false) {
                System.err.println ("Intra-JVM Transfers not implemented for figures yet.");
                return;
            }
            dtde.acceptDrop (dtde.getDropAction ());
            try {
                DNDFigures ff = (DNDFigures) ProcessReceivedData (DNDFiguresTransferable.DNDFiguresFlavor, dtde.getTransferable ());
                FigureEnumeration fe = ff.getFigures ();
                Point theO = ff.getOrigin ();
                view ().clearSelection ();
                Point newP = dtde.getLocation ();
                int dx = newP.x - theO.x;
                int dy = newP.y - theO.y;
                while (fe.hasNextFigure ()) {
                    Figure f = fe.nextFigure ();
                    f.moveBy (dx, dy);
                    view ().add (f);
                    if (dtde.getDropAction () == DnDConstants.ACTION_MOVE) view ().addToSelection (f);

                    System.out.println ("added to view");
                }
                view ().checkDamage ();
                dtde.getDropTargetContext ().dropComplete (true);
            } catch (NullPointerException npe) {
                npe.printStackTrace ();
                dtde.getDropTargetContext ().dropComplete (false);
            }
        } else {
            dtde.rejectDrop ();
        }
    } else if (dtde.isDataFlavorSupported (DataFlavor.stringFlavor)) {
        dtde.acceptDrop (dtde.getDropAction ());
        Object o = ProcessReceivedData (DataFlavor.stringFlavor, dtde.getTransferable ());
        if (o != null) {
            dtde.getDropTargetContext ().dropComplete (true);
        } else {
            dtde.getDropTargetContext ().dropComplete (false);
        }
    } else if (dtde.isDataFlavorSupported (ASCIIFlavor) == true) {
        dtde.acceptDrop (DnDConstants.ACTION_COPY);
        Object o = ProcessReceivedData (ASCIIFlavor, dtde.getTransferable ());
        if (o != null) {
            dtde.getDropTargetContext ().dropComplete (true);
        } else {
            dtde.getDropTargetContext ().dropComplete (false);
        }
    } else if (dtde.isDataFlavorSupported (DataFlavor.javaFileListFlavor)) {
        dtde.acceptDrop (DnDConstants.ACTION_COPY);
        java.io.File [] fList = (java.io.File []) ProcessReceivedData (DataFlavor.javaFileListFlavor, dtde.getTransferable ());
        if (fList != null) {
            for (int x = 0;
            x < fList.length; x ++) {
                System.out.println (fList [x].getAbsolutePath ());
            }
            dtde.getDropTargetContext ().dropComplete (true);
        } else {
            dtde.getDropTargetContext ().dropComplete (false);
        }
    }

    fLastX = 0;
    fLastY = 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="391" endline="394">
public void dropActionChanged (DropTargetDragEvent dtde) {
    supportDropTargetDragEvent (dtde);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="402" endline="433">
protected boolean supportDropTargetDragEvent (DropTargetDragEvent dtde) {
    if (dtde.isDataFlavorSupported (DNDFiguresTransferable.DNDFiguresFlavor) == true) {
        if (dtde.getDropAction () == DnDConstants.ACTION_COPY) {
            dtde.acceptDrag (DnDConstants.ACTION_COPY);
            return true;
        } else if (dtde.getDropAction () == DnDConstants.ACTION_MOVE) {
            dtde.acceptDrag (DnDConstants.ACTION_MOVE);
            return true;
        } else {
            dtde.rejectDrag ();
            return false;
        }

    } else if (dtde.isDataFlavorSupported (ASCIIFlavor) == true) {
        dtde.acceptDrag (dtde.getDropAction ());
        return true;
    } else if (dtde.isDataFlavorSupported (DataFlavor.stringFlavor) == true) {
        dtde.acceptDrag (dtde.getDropAction ());
        return true;
    } else if (dtde.isDataFlavorSupported (DataFlavor.javaFileListFlavor) == true) {
        dtde.acceptDrag (dtde.getDropAction ());
        return true;
    } else {
        dtde.rejectDrag ();
        return false;
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="442" endline="477">
public void dragDropEnd (DragSourceDropEvent dsde) {
    DrawingView view = (DrawingView) dsde.getDragSourceContext ().getComponent ();
    System.out.println ("DragSourceDropEvent-dragDropEnd");
    if (dsde.getDropSuccess () == true) {
        if (dsde.getDropAction () == DnDConstants.ACTION_MOVE) {
            DNDFigures df = (DNDFigures) ProcessReceivedData (DNDFiguresTransferable.DNDFiguresFlavor, dsde.getDragSourceContext ().getTransferable ());
            FigureEnumeration fe = df.getFigures ();
            if (fe != null) {
                while (fe.hasNextFigure ()) {
                    Figure f = fe.nextFigure ();
                    view.remove (f);
                    System.out.println ("removing " + f);
                }
                view.clearSelection ();
                view.checkDamage ();
            }
        } else if (dsde.getDropAction () == DnDConstants.ACTION_COPY) {
        }

    }
    if (autoscrollState != null) {
        Component c = dsde.getDragSourceContext ().getComponent ();
        if (JComponent.class.isInstance (c)) {
            JComponent jc = (JComponent) c;
            jc.setAutoscrolls (autoscrollState.booleanValue ());
            autoscrollState = null;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="481" endline="493">
public void dragEnter (DragSourceDragEvent dsde) {
    if (autoscrollState == null) {
        Component c = dsde.getDragSourceContext ().getComponent ();
        if (JComponent.class.isInstance (c)) {
            JComponent jc = (JComponent) c;
            autoscrollState = new Boolean (jc.getAutoscrolls ());
            jc.setAutoscrolls (false);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="497" endline="498">
public void dragExit (DragSourceEvent dse) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="502" endline="504">
public void dragOver (DragSourceDragEvent dsde) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDHelper.java" startline="508" endline="509">
public void dropActionChanged (DragSourceDragEvent dsde) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFigures.java" startline="29" endline="36">
public DNDFigures (FigureEnumeration fe, Point origin) {
    this.figures = CollectionsFactory.current ().createList ();
    while (fe.hasNextFigure ()) {
        figures.add (fe.nextFigure ());
    }
    this.origin = origin;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFigures.java" startline="38" endline="40">
public FigureEnumeration getFigures () {
    return new FigureEnumerator (figures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DNDFigures.java" startline="42" endline="44">
public Point getOrigin () {
    return origin;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="61" endline="64">
public DragNDropTool (DrawingEditor editor) {
    super (editor);
    comps = CollectionsFactory.current ().createList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="69" endline="77">
public void viewCreated (DrawingView view) {
    super.viewCreated (view);
    if (DNDInterface.class.isInstance (view)) {
        DNDInterface dndi = (DNDInterface) view;
        dndi.setDropTargetActive (true);
        dndi.setDragSourceActive (false);
        comps.add (dndi);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="82" endline="90">
public void viewDestroying (DrawingView view) {
    if (DNDInterface.class.isInstance (view)) {
        DNDInterface dndi = (DNDInterface) view;
        dndi.setDropTargetActive (false);
        dndi.setDragSourceActive (false);
        comps.remove (dndi);
    }
    super.viewDestroying (view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="96" endline="101">
public void activate () {
    super.activate ();
    System.out.println ("DNDTool Activation");
    setDragSourceActive (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="103" endline="107">
public void deactivate () {
    System.out.println ("DNDTool deactivation.");
    setDragSourceActive (false);
    super.deactivate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="109" endline="115">
private void setDragSourceActive (boolean newState) {
    Iterator it = comps.iterator ();
    while (it.hasNext ()) {
        DNDInterface dndi = (DNDInterface) it.next ();
        dndi.setDragSourceActive (newState);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="121" endline="167">
public static void setCursor (int x, int y, DrawingView view) {
    if (view == null) {
        return;
    }
    Handle handle = view.findHandle (x, y);
    Figure figure = view.drawing ().findFigure (x, y);
    if (handle != null) {
        if (LocatorHandle.class.isInstance (handle)) {
            LocatorHandle lh = (LocatorHandle) handle;
            Locator loc = lh.getLocator ();
            if (RelativeLocator.class.isInstance (loc)) {
                RelativeLocator rl = (RelativeLocator) loc;
                if (rl.equals (RelativeLocator.north ())) {
                    view.setCursor (new Cursor (Cursor.N_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.northEast ())) {
                    view.setCursor (new Cursor (Cursor.NE_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.east ())) {
                    view.setCursor (new Cursor (Cursor.E_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.southEast ())) {
                    view.setCursor (new Cursor (Cursor.SE_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.south ())) {
                    view.setCursor (new Cursor (Cursor.S_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.southWest ())) {
                    view.setCursor (new Cursor (Cursor.SW_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.west ())) {
                    view.setCursor (new Cursor (Cursor.W_RESIZE_CURSOR));
                } else if (rl.equals (RelativeLocator.northWest ())) {
                    view.setCursor (new Cursor (Cursor.NW_RESIZE_CURSOR));
                }

            }
        }
    } else if (figure != null) {
        view.setCursor (new Cursor (Cursor.MOVE_CURSOR));
    } else {
        view.setCursor (Cursor.getDefaultCursor ());
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="175" endline="179">
public void mouseMove (MouseEvent evt, int x, int y) {
    if (evt.getSource () == getActiveView ()) {
        setCursor (evt.getX (), evt.getY (), getActiveView ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="186" endline="192">
public void mouseUp (MouseEvent e, int x, int y) {
    if (fChild != null) {
        fChild.mouseUp (e, x, y);
    }
    fChild = null;
    view ().unfreezeView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="198" endline="237">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    if (fChild != null) {
        return;
    }
    view ().freezeView ();
    Handle handle = view ().findHandle (e.getX (), e.getY ());
    if (handle != null) {
        fChild = createHandleTracker (handle);
    } else {
        Figure figure = drawing ().findFigure (e.getX (), e.getY ());
        if (figure != null) {
            fChild = null;
            if (e.isShiftDown ()) {
                view ().toggleSelection (figure);
            } else if (! view ().isFigureSelected (figure)) {
                view ().clearSelection ();
                view ().addToSelection (figure);
            }

        } else {
            if (! e.isShiftDown ()) {
                view ().clearSelection ();
            }
            fChild = createAreaTracker ();
        }
    }
    if (fChild != null) {
        fChild.mouseDown (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="244" endline="248">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (fChild != null) {
        fChild.mouseDrag (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="254" endline="256">
protected Tool createAreaTracker () {
    return new SelectAreaTracker (editor ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="261" endline="263">
protected Tool createDragTracker (DrawingEditor editor, Figure f) {
    return new DragTracker (editor, f);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/dnd/DragNDropTool.java" startline="268" endline="270">
protected Tool createHandleTracker (Handle handle) {
    return new HandleTracker (editor (), handle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="48" endline="54">
public MDIDesktopPane (DrawApplication newDrawApplication) {
    setDrawApplication (newDrawApplication);
    manager = new MDIDesktopManager (this);
    setDesktopManager (manager);
    setDragMode (JDesktopPane.OUTLINE_DRAG_MODE);
    setAlignmentX (JComponent.LEFT_ALIGNMENT);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="62" endline="65">
public void internalFrameOpened (InternalFrameEvent e) {
    DrawingView dv = Helper.getDrawingView (e.getInternalFrame ());
    fireDrawingViewAddedEvent (dv);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="81" endline="88">
public void internalFrameClosed (InternalFrameEvent e) {
    DrawingView dv = Helper.getDrawingView (e.getInternalFrame ());
    if (getComponentCount () == 0) {
        setActiveDrawingView (null);
        fireDrawingViewSelectedEvent (selectedView);
    }
    fireDrawingViewRemovedEvent (dv);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="111" endline="115">
public void internalFrameActivated (InternalFrameEvent e) {
    DrawingView dv = Helper.getDrawingView (e.getInternalFrame ());
    setActiveDrawingView (dv);
    fireDrawingViewSelectedEvent (selectedView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="122" endline="135">
private void fireDrawingViewAddedEvent (final DrawingView dv) {
    final Object [] listeners = listenerList.getListenerList ();
    DesktopListener dpl;
    DesktopEvent dpe = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == DesktopListener.class) {
            if (dpe == null) {
                dpe = new DesktopEvent (MDIDesktopPane.this, dv);
            }
            dpl = (DesktopListener) listeners [i + 1];
            dpl.drawingViewAdded (dpe);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="137" endline="150">
private void fireDrawingViewRemovedEvent (final DrawingView dv) {
    final Object [] listeners = listenerList.getListenerList ();
    DesktopListener dpl;
    DesktopEvent dpe = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == DesktopListener.class) {
            if (dpe == null) {
                dpe = new DesktopEvent (MDIDesktopPane.this, dv);
            }
            dpl = (DesktopListener) listeners [i + 1];
            dpl.drawingViewRemoved (dpe);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="152" endline="165">
private void fireDrawingViewSelectedEvent (final DrawingView dv) {
    final Object [] listeners = listenerList.getListenerList ();
    DesktopListener dpl;
    DesktopEvent dpe = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == DesktopListener.class) {
            if (dpe == null) {
                dpe = new DesktopEvent (MDIDesktopPane.this, dv);
            }
            dpl = (DesktopListener) listeners [i + 1];
            dpl.drawingViewSelected (dpe);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="173" endline="191">
protected Component createContents (DrawingView dv) {
    JScrollPane sp = new JScrollPane ((Component) dv);
    sp.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    sp.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    sp.setAlignmentX (LEFT_ALIGNMENT);
    String applicationTitle;
    if (dv.drawing ().getTitle () == null) {
        applicationTitle = getDrawApplication ().getApplicationName () + " - " + getDrawApplication ().getDefaultDrawingTitle ();
    } else {
        applicationTitle = getDrawApplication ().getApplicationName () + " - " + dv.drawing ().getTitle ();
    }
    JInternalFrame internalFrame = new JInternalFrame (applicationTitle, true, true, true, true);
    internalFrame.setName (applicationTitle);
    internalFrame.getContentPane ().add (sp);
    internalFrame.setSize (200, 200);
    return internalFrame;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="193" endline="195">
public DrawingView getActiveDrawingView () {
    return selectedView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="197" endline="199">
protected void setActiveDrawingView (DrawingView newSelectedView) {
    selectedView = newSelectedView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="201" endline="203">
public void updateTitle (String newDrawingTitle) {
    getSelectedFrame ().setTitle (newDrawingTitle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="218" endline="257">
public void addToDesktop (DrawingView dv, int location) {
    JInternalFrame frame = (JInternalFrame) createContents (dv);
    JInternalFrame [] array = getAllFrames ();
    Point p = null;
    int w;
    int h;
    frame.addInternalFrameListener (internalFrameListener);
    Component retval = super.add (frame);
    checkDesktopSize ();
    if (array.length > 0) {
        p = array [0].getLocation ();
        p.x = p.x + FRAME_OFFSET;
        p.y = p.y + FRAME_OFFSET;
    } else {
        p = new Point (0, 0);
    }
    frame.setLocation (p.x, p.y);
    if (frame.isResizable ()) {
        w = getWidth () - (getWidth () / 3);
        h = getHeight () - (getHeight () / 3);
        if (w < frame.getMinimumSize ().getWidth ()) {
            w = (int) frame.getMinimumSize ().getWidth ();
        }
        if (h < frame.getMinimumSize ().getHeight ()) {
            h = (int) frame.getMinimumSize ().getHeight ();
        }
        frame.setSize (w, h);
    }
    moveToFront (frame);
    frame.setVisible (true);
    try {
        frame.setSelected (true);
    } catch (PropertyVetoException e) {
        frame.toBack ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="259" endline="268">
public void removeFromDesktop (DrawingView dv, int location) {
    Component [] comps = getComponents ();
    for (int x = 0;
    x < comps.length; x ++) {
        if (dv == Helper.getDrawingView (comps [x])) {
            ((JInternalFrame) comps [x]).dispose ();
            break;
        }
    }
    checkDesktopSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="270" endline="275">
public void removeAllFromDesktop (int location) {
    JInternalFrame [] jifs = getAllFrames ();
    for (int x = 0;
    x < jifs.length; x ++) {
        jifs [x].dispose ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="277" endline="289">
public DrawingView [] getAllFromDesktop (int location) {
    Component [] comps = getComponents ();
    java.util.ArrayList al = new java.util.ArrayList ();
    for (int x = 0;
    x < comps.length; x ++) {
        DrawingView dv = Helper.getDrawingView (comps [x]);
        if (dv != null) {
            al.add (dv);
        }
    }
    DrawingView [] dvs = new DrawingView [al.size ()];
    al.toArray (dvs);
    return dvs;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="308" endline="310">
public void addDesktopListener (DesktopListener dpl) {
    listenerList.add (DesktopListener.class, dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="312" endline="314">
public void removeDesktopListener (DesktopListener dpl) {
    listenerList.remove (DesktopListener.class, dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="319" endline="347">
public void cascadeFrames () {
    int x = 0;
    int y = 0;
    JInternalFrame [] allFrames = getAllFrames ();
    if (allFrames.length == 0) {
        return;
    }
    manager.setNormalSize ();
    int frameHeight = (getBounds ().height - 5) - allFrames.length * FRAME_OFFSET;
    int frameWidth = (getBounds ().width - 5) - allFrames.length * FRAME_OFFSET;
    for (int i = allFrames.length - 1;
    i >= 0; i --) {
        try {
            allFrames [i].setMaximum (false);
        } catch (PropertyVetoException e) {
            e.printStackTrace ();
        }
        allFrames [i].setBounds (x, y, frameWidth, frameHeight);
        x = x + FRAME_OFFSET;
        y = y + FRAME_OFFSET;
    }
    checkDesktopSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="355" endline="357">
public void tileFrames () {
    tileFramesHorizontally ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="359" endline="384">
public void tileFramesHorizontally () {
    Component [] allFrames = getAllFrames ();
    if (allFrames.length == 0) {
        return;
    }
    manager.setNormalSize ();
    int frameHeight = getBounds ().height / allFrames.length;
    int y = 0;
    for (int i = 0;
    i < allFrames.length; i ++) {
        try {
            ((JInternalFrame) allFrames [i]).setMaximum (false);
        } catch (PropertyVetoException e) {
            e.printStackTrace ();
        }
        allFrames [i].setBounds (0, y, getBounds ().width, frameHeight);
        y = y + frameHeight;
    }
    checkDesktopSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="386" endline="410">
public void tileFramesVertically () {
    Component [] allFrames = getAllFrames ();
    if (allFrames.length == 0) {
        return;
    }
    manager.setNormalSize ();
    int frameWidth = getBounds ().width / allFrames.length;
    int x = 0;
    for (int i = 0;
    i < allFrames.length; i ++) {
        try {
            ((JInternalFrame) allFrames [i]).setMaximum (false);
        } catch (PropertyVetoException e) {
            e.printStackTrace ();
        }
        allFrames [i].setBounds (x, 0, frameWidth, getBounds ().height);
        x = x + frameWidth;
    }
    checkDesktopSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="417" endline="470">
public void arrangeFramesVertically () {
    Component [] allFrames = getAllFrames ();
    if (allFrames.length == 0) {
        return;
    }
    manager.setNormalSize ();
    int vertFrames = (int) Math.floor (Math.sqrt (allFrames.length));
    int horFrames = (int) Math.ceil (Math.sqrt (allFrames.length));
    int frameWidth = getBounds ().width / horFrames;
    int frameHeight = getBounds ().height / vertFrames;
    int x = 0;
    int y = 0;
    int frameIdx = 0;
    for (int horCnt = 0;
    horCnt < horFrames - 1; horCnt ++) {
        y = 0;
        for (int vertCnt = 0;
        vertCnt < vertFrames; vertCnt ++) {
            try {
                ((JInternalFrame) allFrames [frameIdx]).setMaximum (false);
            } catch (PropertyVetoException e) {
                e.printStackTrace ();
            }
            allFrames [frameIdx].setBounds (x, y, frameWidth, frameHeight);
            frameIdx ++;
            y = y + frameHeight;
        }
        x = x + frameWidth;
    }
    frameHeight = getBounds ().height / (allFrames.length - frameIdx);
    y = 0;
    for (; frameIdx < allFrames.length; frameIdx ++) {
        try {
            ((JInternalFrame) allFrames [frameIdx]).setMaximum (false);
        } catch (PropertyVetoException e) {
            e.printStackTrace ();
        }
        allFrames [frameIdx].setBounds (x, y, frameWidth, frameHeight);
        y = y + frameHeight;
    }
    checkDesktopSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="477" endline="529">
public void arrangeFramesHorizontally () {
    Component [] allFrames = getAllFrames ();
    if (allFrames.length == 0) {
        return;
    }
    manager.setNormalSize ();
    int vertFrames = (int) Math.ceil (Math.sqrt (allFrames.length));
    int horFrames = (int) Math.floor (Math.sqrt (allFrames.length));
    int frameWidth = getBounds ().width / horFrames;
    int frameHeight = getBounds ().height / vertFrames;
    int x = 0;
    int y = 0;
    int frameIdx = 0;
    for (int vertCnt = 0;
    vertCnt < vertFrames - 1; vertCnt ++) {
        x = 0;
        for (int horCnt = 0;
        horCnt < horFrames; horCnt ++) {
            try {
                ((JInternalFrame) allFrames [frameIdx]).setMaximum (false);
            } catch (PropertyVetoException e) {
                e.printStackTrace ();
            }
            allFrames [frameIdx].setBounds (x, y, frameWidth, frameHeight);
            frameIdx ++;
            x = x + frameWidth;
        }
        y = y + frameHeight;
    }
    frameWidth = getBounds ().width / (allFrames.length - frameIdx);
    x = 0;
    for (; frameIdx < allFrames.length; frameIdx ++) {
        try {
            ((JInternalFrame) allFrames [frameIdx]).setMaximum (false);
        } catch (PropertyVetoException e) {
            e.printStackTrace ();
        }
        allFrames [frameIdx].setBounds (x, y, frameWidth, frameHeight);
        x = x + frameWidth;
    }
    checkDesktopSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="535" endline="540">
public void setAllSize (Dimension d) {
    setMinimumSize (d);
    setMaximumSize (d);
    setPreferredSize (d);
    setBounds (0, 0, d.width, d.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="546" endline="548">
public void setAllSize (int width, int height) {
    setAllSize (new Dimension (width, height));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="550" endline="552">
private void checkDesktopSize () {
    if (getParent () != null && isVisible ()) manager.resizeDesktop ();

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="554" endline="556">
private void setDrawApplication (DrawApplication newDrawApplication) {
    myDrawApplication = newDrawApplication;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="558" endline="560">
protected DrawApplication getDrawApplication () {
    return myDrawApplication;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="570" endline="572">
public MDIDesktopManager (MDIDesktopPane newDesktop) {
    this.desktop = newDesktop;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="574" endline="577">
public void endResizingFrame (JComponent f) {
    super.endResizingFrame (f);
    resizeDesktop ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="579" endline="582">
public void endDraggingFrame (JComponent f) {
    super.endDraggingFrame (f);
    resizeDesktop ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="584" endline="600">
public void setNormalSize () {
    JScrollPane scrollPane = getScrollPane ();
    Insets scrollInsets = getScrollPaneInsets ();
    if (scrollPane != null) {
        Dimension d = scrollPane.getVisibleRect ().getSize ();
        if (scrollPane.getBorder () != null) {
            d.setSize (d.getWidth () - scrollInsets.left - scrollInsets.right, d.getHeight () - scrollInsets.top - scrollInsets.bottom);
        }
        d.setSize (d.getWidth () - 20, d.getHeight () - 20);
        desktop.setAllSize (d);
        scrollPane.invalidate ();
        scrollPane.validate ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="602" endline="610">
private Insets getScrollPaneInsets () {
    JScrollPane scrollPane = getScrollPane ();
    if ((scrollPane == null) || (getScrollPane ().getBorder () == null)) {
        return new Insets (0, 0, 0, 0);
    } else {
        return getScrollPane ().getBorder ().getBorderInsets (scrollPane);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="612" endline="619">
public JScrollPane getScrollPane () {
    if (desktop.getParent () instanceof JViewport) {
        JViewport viewPort = (JViewport) desktop.getParent ();
        if (viewPort.getParent () instanceof JScrollPane) return (JScrollPane) viewPort.getParent ();

    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MDIDesktopPane.java" startline="621" endline="653">
protected void resizeDesktop () {
    int x = 0;
    int y = 0;
    JScrollPane scrollPane = getScrollPane ();
    Insets scrollInsets = getScrollPaneInsets ();
    if (scrollPane != null) {
        JInternalFrame allFrames [] = desktop.getAllFrames ();
        for (int i = 0;
        i < allFrames.length; i ++) {
            if (allFrames [i].getX () + allFrames [i].getWidth () > x) {
                x = allFrames [i].getX () + allFrames [i].getWidth ();
            }
            if (allFrames [i].getY () + allFrames [i].getHeight () > y) {
                y = allFrames [i].getY () + allFrames [i].getHeight ();
            }
        }
        Dimension d = scrollPane.getVisibleRect ().getSize ();
        if (scrollPane.getBorder () != null) {
            d.setSize (d.getWidth () - scrollInsets.left - scrollInsets.right, d.getHeight () - scrollInsets.top - scrollInsets.bottom);
        }
        if (x <= d.getWidth ()) {
            x = ((int) d.getWidth ()) - 20;
        }
        if (y <= d.getHeight ()) {
            y = ((int) d.getHeight ()) - 20;
        }
        desktop.setAllSize (x, y);
        scrollPane.invalidate ();
        scrollPane.validate ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomToolBar.java" startline="56" endline="62">
public CustomToolBar () {
    super ();
    standardTools = CollectionsFactory.current ().createList ();
    editTools = CollectionsFactory.current ().createList ();
    currentTools = standardTools;
    needsUpdate = false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomToolBar.java" startline="67" endline="74">
public void switchToolBar () {
    if (currentTools == standardTools) {
        switchToEditTools ();
    } else {
        switchToStandardTools ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomToolBar.java" startline="79" endline="84">
public void switchToEditTools () {
    if (currentTools != editTools) {
        currentTools = editTools;
        needsUpdate = true;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomToolBar.java" startline="89" endline="94">
public void switchToStandardTools () {
    if (currentTools != standardTools) {
        currentTools = standardTools;
        needsUpdate = true;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomToolBar.java" startline="99" endline="115">
public void activateTools () {
    if (! needsUpdate) {
        return;
    } else {
        removeAll ();
        JComponent currentTool = null;
        Iterator iter = currentTools.iterator ();
        while (iter.hasNext ()) {
            currentTool = (JComponent) iter.next ();
            super.add (currentTool);
        }
        validate ();
        needsUpdate = false;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CustomToolBar.java" startline="120" endline="129">
public Component add (Component newTool) {
    if (currentTools == editTools) {
        editTools.add (newTool);
    } else {
        standardTools.add (newTool);
    }
    needsUpdate = true;
    return super.add (newTool);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomTool.java" startline="29" endline="31">
public ZoomTool (DrawingEditor editor) {
    super (editor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomTool.java" startline="33" endline="61">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    if ((e.getModifiers () & InputEvent.BUTTON1_MASK) != 0) {
        if (child != null) {
            return;
        }
        view ().freezeView ();
        child = new ZoomAreaTracker (editor ());
        child.mouseDown (e, x, y);
    } else if ((e.getModifiers () & InputEvent.BUTTON2_MASK) != 0) {
        ((ZoomDrawingView) view ()).deZoom (x, y);
    } else if ((e.getModifiers () & InputEvent.BUTTON3_MASK) != 0) {
        if ((e.getModifiers () & InputEvent.SHIFT_MASK) != 0) {
            ((ZoomDrawingView) view ()).zoomIn (x, y);
        } else if ((e.getModifiers () & InputEvent.CTRL_MASK) != 0) {
            ((ZoomDrawingView) view ()).deZoom (x, y);
        } else {
            ((ZoomDrawingView) view ()).zoomOut (x, y);
        }

    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomTool.java" startline="63" endline="67">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (child != null) {
        child.mouseDrag (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomTool.java" startline="69" endline="75">
public void mouseUp (MouseEvent e, int x, int y) {
    if (child != null) {
        view ().unfreezeView ();
        child.mouseUp (e, x, y);
    }
    child = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomCommand.java" startline="38" endline="41">
public ZoomCommand (String name, float scale, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor, true);
    this.scale = scale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomCommand.java" startline="45" endline="48">
public void execute () {
    super.execute ();
    zoomView ().zoom (scale);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomCommand.java" startline="56" endline="62">
public ZoomDrawingView zoomView () {
    Object view = super.view ();
    if (view instanceof ZoomDrawingView) {
        return (ZoomDrawingView) view;
    }
    throw new JHotDrawRuntimeException ("execute should NOT be getting called when view not instanceof ZoomDrawingView");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomCommand.java" startline="70" endline="72">
public float getScale () {
    return scale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomCommand.java" startline="80" endline="82">
public void setScale (float newScale) {
    scale = newScale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomCommand.java" startline="90" endline="92">
protected boolean isExecutableWithView () {
    return (view () instanceof ZoomDrawingView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="48" endline="50">
public ZoomDrawingView (DrawingEditor editor) {
    this (editor, MINIMUM_WIDTH, MINIMUM_HEIGHT);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="52" endline="54">
public ZoomDrawingView (DrawingEditor editor, int width, int height) {
    super (editor, width, height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="60" endline="62">
public final double getScale () {
    return scale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="68" endline="76">
private void setScale (double scale) {
    Dimension oldSize = getUserSize ();
    this.scale = scale;
    setUserSize (oldSize.width, oldSize.height);
    centralize (drawing ());
    forceRedraw ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="78" endline="82">
private void forceRedraw () {
    drawingInvalidated (new DrawingChangeEvent (drawing (), new Rectangle (getSize ())));
    repairDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="88" endline="91">
public void setUserSize (int width, int height) {
    setSize ((int) (width * getScale ()), (int) (height * getScale ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="97" endline="99">
public void setUserSize (Dimension d) {
    setUserSize (d.width, d.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="104" endline="106">
public Dimension getSize () {
    return super.getSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="108" endline="110">
public Dimension getViewportSize () {
    return getParent ().getSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="112" endline="114">
protected boolean hasZoomSupport () {
    return getParent () instanceof JViewport;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="119" endline="122">
public void setOriginPosition (Point newOrigin) {
    setViewPosition (newOrigin);
    forceRedraw ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="124" endline="126">
protected void setViewPosition (Point newPosition) {
    ((JViewport) getParent ()).setViewPosition (newPosition);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="132" endline="136">
public Dimension getUserSize () {
    Dimension screenSize = getSize ();
    return new Dimension ((int) (screenSize.width / getScale ()), (int) (screenSize.height / getScale ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="144" endline="166">
public void zoom (int x, int y, int width, int height) {
    if (hasZoomSupport ()) {
        Dimension viewportSize = getViewportSize ();
        double xScale = (double) viewportSize.width / (double) width;
        double yScale = (double) viewportSize.height / (double) height;
        double newScale = Math.min (xScale, yScale);
        Dimension userSize = getUserSize ();
        this.scale = newScale;
        setUserSize (userSize);
        revalidate ();
        setViewPosition (new Point ((int) (x * getScale ()), (int) (y * getScale ())));
        forceRedraw ();
    } else {
        throw new RuntimeException ("zooming only works if this view is contained in a ScrollPane");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="171" endline="195">
public void zoom (float scale) {
    if (hasZoomSupport ()) {
        JViewport viewport = (JViewport) getParent ();
        Dimension viewportSize = viewport.getSize ();
        Dimension userSize = getUserSize ();
        this.scale = scale;
        Point viewOrg = viewport.getViewPosition ();
        viewOrg.x = viewOrg.x + (viewportSize.width / 2);
        viewOrg.y = viewOrg.y + (viewportSize.height / 2);
        int xScreen = (int) (viewOrg.x * scale);
        int yScreen = (int) (viewOrg.y * scale);
        int xOrigin = xScreen - viewportSize.width / 2;
        int yOrigin = yScreen - viewportSize.height / 2;
        if (xOrigin < 0) xOrigin = 0;

        if (yOrigin < 0) yOrigin = 0;

        setUserSize (userSize);
        revalidate ();
        viewport.setViewPosition (new Point (xOrigin, yOrigin));
        forceRedraw ();
    } else {
        throw new RuntimeException ("zooming only works if this view is contained in a ScrollPane");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="201" endline="223">
public void zoomOut (int x, int y) {
    if (hasZoomSupport ()) {
        Dimension viewportSize = getViewportSize ();
        Dimension userSize = getUserSize ();
        this.scale = getScale () / getZoomSpeed ();
        int xScreen = (int) (x * getScale ());
        int yScreen = (int) (y * getScale ());
        int xOrigin = xScreen - viewportSize.width / 2;
        int yOrigin = yScreen - viewportSize.height / 2;
        if (xOrigin < 0) xOrigin = 0;

        if (yOrigin < 0) yOrigin = 0;

        setUserSize (userSize);
        revalidate ();
        setViewPosition (new Point (xOrigin, yOrigin));
        forceRedraw ();
    } else {
        throw new RuntimeException ("zooming only works if this view is contained in a ScrollPane");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="230" endline="251">
public void zoomIn (int x, int y) {
    if (hasZoomSupport ()) {
        JViewport viewport = (JViewport) getParent ();
        Dimension viewportSize = viewport.getSize ();
        Dimension userSize = getUserSize ();
        this.scale = getScale () * getZoomSpeed ();
        int xScreen = (int) (x * getScale ());
        int yScreen = (int) (y * getScale ());
        int xOrigin = xScreen - viewportSize.width / 2;
        int yOrigin = yScreen - viewportSize.height / 2;
        if (xOrigin < 0) xOrigin = 0;

        if (yOrigin < 0) yOrigin = 0;

        setUserSize (userSize);
        revalidate ();
        viewport.setViewPosition (new Point (xOrigin, yOrigin));
        forceRedraw ();
    } else {
        throw new RuntimeException ("zooming only works if this view is contained in a ScrollPane");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="257" endline="276">
public void deZoom (int x, int y) {
    if (hasZoomSupport ()) {
        Dimension viewportSize = getViewportSize ();
        Dimension userSize = getUserSize ();
        int xOrigin = x - viewportSize.width / 2;
        int yOrigin = y - viewportSize.height / 2;
        if (xOrigin < 0) xOrigin = 0;

        if (yOrigin < 0) yOrigin = 0;

        this.scale = 1.0;
        setUserSize (userSize);
        revalidate ();
        setViewPosition (new Point ((int) (xOrigin), (int) (yOrigin)));
        forceRedraw ();
    } else {
        throw new RuntimeException ("zooming only works if this view is contained in a ScrollPane");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="278" endline="280">
public void paint (Graphics g) {
    super.paint (transformGraphics (g, getScale ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="282" endline="284">
public Graphics getGraphics () {
    return transformGraphics (super.getGraphics (), getScale ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="286" endline="295">
private final Graphics transformGraphics (Graphics g, double scale) {
    if (scale != 1.0) {
        Graphics2D g2 = (Graphics2D) g;
        g2.transform (AffineTransform.getScaleInstance (scale, scale));
    }
    return g;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="300" endline="308">
protected Point constrainPoint (Point p) {
    Dimension size = getSize ();
    p.x = Geom.range (1, (int) (size.width / getScale ()), p.x);
    p.y = Geom.range (1, (int) (size.height / getScale ()), p.y);
    if (getConstrainer () != null) {
        return getConstrainer ().constrainPoint (p);
    }
    return p;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="310" endline="315">
public void drawBackground (Graphics g) {
    g.setColor (getBackground ());
    g.fillRect (0, 0, (int) (getBounds ().width / getScale ()), (int) (getBounds ().height / getScale ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="317" endline="328">
private void centralize (Drawing d, Dimension bounds) {
    Point boundsCenter = new Point (bounds.width / 2, bounds.height / 2);
    Rectangle r = ((StandardDrawing) d).displayBox ();
    Point drawingCenter = new Point (r.x + r.width / 2, r.y + r.height / 2);
    int diffX = boundsCenter.x - drawingCenter.x;
    int diffY = boundsCenter.y - drawingCenter.y;
    if (diffX != 0 || diffY != 0) {
        for (FigureEnumeration fe = d.figures ();
        fe.hasNextFigure ();) {
            fe.nextFigure ().moveBy (diffX, diffY);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="330" endline="332">
private void centralize (Drawing d) {
    centralize (d, getUserSize ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="334" endline="358">
public void setDrawing (Drawing d) {
    super.setDrawing (d);
    Rectangle r = ((StandardDrawing) d).displayBox ();
    Dimension drawingSize = new Dimension (r.width, r.height);
    Dimension viewportSize = new Dimension (r.width, r.height);
    if (getParent () != null) {
        viewportSize = getViewportSize ();
    }
    super.setPreferredSize (viewportSize);
    super.setSize (viewportSize);
    revalidate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="360" endline="362">
public Dimension getMinimumSize () {
    return super.getSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="364" endline="366">
public Dimension getPreferredSize () {
    return getMinimumSize ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="371" endline="380">
public void repairDamage () {
    Rectangle damagedArea = getDamage ();
    if (damagedArea != null) {
        repaint ((int) (damagedArea.x * getScale ()), (int) (damagedArea.y * getScale ()), (int) (damagedArea.width * getScale ()), (int) (damagedArea.height * getScale ()));
        setDamage (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="385" endline="396">
public void drawingInvalidated (DrawingChangeEvent e) {
    Rectangle r = e.getInvalidatedRectangle ();
    if (getDamage () == null) {
        setDamage (r);
    } else {
        Rectangle damagedArea = getDamage ();
        damagedArea.add (r);
        setDamage (damagedArea);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="402" endline="411">
private MouseEvent createScaledEvent (MouseEvent e) {
    return new MouseEvent (e.getComponent (), e.getID (), e.getWhen (), e.getModifiers (), (int) (e.getX () / getScale ()), (int) (e.getY () / getScale ()), e.getClickCount (), e.isPopupTrigger ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="414" endline="423">
protected MouseListener createMouseListener () {
    return new StandardDrawingView.DrawingViewMouseListener () {
        public void mousePressed (MouseEvent e) {
            super.mousePressed (createScaledEvent (e));
        } public void mouseReleased (MouseEvent e) {
            super.mouseReleased (createScaledEvent (e));
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="416" endline="418">
public void mousePressed (MouseEvent e) {
    super.mousePressed (createScaledEvent (e));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="419" endline="421">
public void mouseReleased (MouseEvent e) {
    super.mouseReleased (createScaledEvent (e));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="425" endline="434">
protected MouseMotionListener createMouseMotionListener () {
    return new StandardDrawingView.DrawingViewMouseMotionListener () {
        public void mouseDragged (MouseEvent e) {
            super.mouseDragged (createScaledEvent (e));
        } public void mouseMoved (MouseEvent e) {
            super.mouseMoved (createScaledEvent (e));
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="427" endline="429">
public void mouseDragged (MouseEvent e) {
    super.mouseDragged (createScaledEvent (e));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="430" endline="432">
public void mouseMoved (MouseEvent e) {
    super.mouseMoved (createScaledEvent (e));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="436" endline="457">
protected KeyListener createKeyListener () {
    return new StandardDrawingView.DrawingViewKeyListener () {
        public void keyPressed (KeyEvent e) {
            super.keyPressed (e);
            if (e.getKeyChar () == ' ') {
                forceRedraw ();
            } else if (e.getKeyChar () == 'o') {
                setScale (getScale () / getZoomSpeed ());
            } else if (e.getKeyChar () == 'i') {
                setScale (getScale () * getZoomSpeed ());
            } else if (e.getKeyChar () == 'c') {
                centralize (drawing ());
            } else {
                super.keyPressed (e);
            }

        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="438" endline="455">
public void keyPressed (KeyEvent e) {
    super.keyPressed (e);
    if (e.getKeyChar () == ' ') {
        forceRedraw ();
    } else if (e.getKeyChar () == 'o') {
        setScale (getScale () / getZoomSpeed ());
    } else if (e.getKeyChar () == 'i') {
        setScale (getScale () * getZoomSpeed ());
    } else if (e.getKeyChar () == 'c') {
        centralize (drawing ());
    } else {
        super.keyPressed (e);
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="462" endline="465">
public double getZoomSpeed () {
    return zoomSpeed;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomDrawingView.java" startline="470" endline="475">
public void setZoomSpeed (double newZoomSpeed) {
    zoomSpeed = Math.max (1.1, newZoomSpeed);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="51" endline="53">
public ScalingGraphics (Graphics realGraphics) {
    real = realGraphics;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="62" endline="64">
public void setScale (double scale) {
    this.scale = scale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="70" endline="72">
public double getScale () {
    return scale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="78" endline="83">
private static Font scaledFont (Font f, double scale) {
    int size = f.getSize ();
    int scaledSize = (int) (size * scale);
    return new Font (f.getFamily (), f.getStyle (), scaledSize);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="88" endline="97">
private static Shape scaledShape (Shape s, double scale) {
    if (s instanceof Rectangle) {
        Rectangle r = (Rectangle) s;
        return new Rectangle ((int) (r.x * scale), (int) (r.y * scale), (int) (r.width * scale), (int) (r.height * scale));
    } else {
        throw new RuntimeException ("Cannot scale shape: " + s.getClass ().getName ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="101" endline="106">
public Graphics create () {
    Graphics realCopy = real.create ();
    ScalingGraphics result = new ScalingGraphics (realCopy);
    result.setScale (getScale ());
    return result;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="108" endline="110">
public void translate (int x, int y) {
    real.translate ((int) (x * scale), (int) (y * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="112" endline="114">
public Color getColor () {
    return real.getColor ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="116" endline="118">
public void setColor (Color c) {
    real.setColor (c);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="120" endline="122">
public void setPaintMode () {
    real.setPaintMode ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="124" endline="126">
public void setXORMode (Color c1) {
    real.setXORMode (c1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="128" endline="133">
public Font getFont () {
    if (userFont == null) userFont = real.getFont ();

    return userFont;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="135" endline="138">
public void setFont (Font font) {
    userFont = font;
    real.setFont (scaledFont (font, scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="140" endline="142">
public FontMetrics getFontMetrics () {
    return new ScalingFontMetrics (userFont, real.getFontMetrics ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="144" endline="149">
public FontMetrics getFontMetrics (Font f) {
    return new ScalingFontMetrics (f, real.getFontMetrics (scaledFont (f, scale)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="151" endline="153">
public Rectangle getClipBounds () {
    return userClip;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="155" endline="162">
public void clipRect (int x, int y, int width, int height) {
    if (userClip == null) userClip = new Rectangle (x, y, width, height);
    else userClip = userClip.intersection (new Rectangle (x, y, width, height));

    real.clipRect ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="164" endline="168">
public void setClip (int x, int y, int width, int height) {
    userClip = new Rectangle (x, y, width, height);
    real.setClip ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="170" endline="172">
public Shape getClip () {
    return userClip;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="174" endline="181">
public void setClip (Shape clip) {
    userClip = (Rectangle) clip;
    if (clip != null) real.setClip (scaledShape (clip, scale));
    else real.setClip (null);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="183" endline="188">
public void copyArea (int x, int y, int width, int height, int dx, int dy) {
    real.copyArea ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), (int) (dx * scale), (int) (dy * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="190" endline="193">
public void drawLine (int x1, int y1, int x2, int y2) {
    real.drawLine ((int) (x1 * scale), (int) (y1 * scale), (int) (x2 * scale), (int) (y2 * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="195" endline="198">
public void fillRect (int x, int y, int width, int height) {
    real.fillRect ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="200" endline="203">
public void clearRect (int x, int y, int width, int height) {
    real.clearRect ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="205" endline="210">
public void drawRoundRect (int x, int y, int width, int height, int arcWidth, int arcHeight) {
    real.drawRoundRect ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), (int) (arcWidth * scale), (int) (arcHeight * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="212" endline="217">
public void fillRoundRect (int x, int y, int width, int height, int arcWidth, int arcHeight) {
    real.fillRoundRect ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), (int) (arcWidth * scale), (int) (arcHeight * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="219" endline="222">
public void drawOval (int x, int y, int width, int height) {
    real.drawOval ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="224" endline="227">
public void fillOval (int x, int y, int width, int height) {
    real.fillOval ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="229" endline="234">
public void drawArc (int x, int y, int width, int height, int startAngle, int arcAngle) {
    real.drawArc ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), startAngle, arcAngle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="236" endline="241">
public void fillArc (int x, int y, int width, int height, int startAngle, int arcAngle) {
    real.fillArc ((int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), startAngle, arcAngle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="243" endline="252">
public void drawPolyline (int xPoints [], int yPoints [], int nPoints) {
    int [] realXPoints = new int [nPoints];
    int [] realYPoints = new int [nPoints];
    for (int i = 0;
    i < nPoints; i ++) {
        realXPoints [i] = (int) (xPoints [i] * scale);
        realYPoints [i] = (int) (yPoints [i] * scale);
    }
    real.drawPolyline (realXPoints, realYPoints, nPoints);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="254" endline="263">
public void drawPolygon (int xPoints [], int yPoints [], int nPoints) {
    int [] realXPoints = new int [nPoints];
    int [] realYPoints = new int [nPoints];
    for (int i = 0;
    i < nPoints; i ++) {
        realXPoints [i] = (int) (xPoints [i] * scale);
        realYPoints [i] = (int) (yPoints [i] * scale);
    }
    real.drawPolygon (realXPoints, realYPoints, nPoints);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="265" endline="274">
public void fillPolygon (int xPoints [], int yPoints [], int nPoints) {
    int [] realXPoints = new int [nPoints];
    int [] realYPoints = new int [nPoints];
    for (int i = 0;
    i < nPoints; i ++) {
        realXPoints [i] = (int) (xPoints [i] * scale);
        realYPoints [i] = (int) (yPoints [i] * scale);
    }
    real.fillPolygon (realXPoints, realYPoints, nPoints);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="276" endline="278">
public void drawString (String str, int x, int y) {
    real.drawString (str, (int) (x * scale), (int) (y * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="281" endline="284">
public void drawString (java.text.AttributedCharacterIterator iterator, int x, int y) {
    real.drawString (iterator, (int) (x * scale), (int) (y * scale));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="286" endline="297">
public boolean drawImage (Image img, int x, int y, ImageObserver observer) {
    if (img instanceof DoubleBufferImage) return real.drawImage (((DoubleBufferImage) img).getRealImage (), x, y, observer);
    else return real.drawImage (img, (int) (x * scale), (int) (y * scale), (int) (img.getWidth (observer) * scale), (int) (img.getHeight (observer) * scale), observer);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="299" endline="309">
public boolean drawImage (Image img, int x, int y, int width, int height, ImageObserver observer) {
    if (img instanceof DoubleBufferImage) return real.drawImage (((DoubleBufferImage) img).getRealImage (), x, y, width, height, observer);
    else return real.drawImage (img, (int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), observer);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="311" endline="322">
public boolean drawImage (Image img, int x, int y, Color bgcolor, ImageObserver observer) {
    if (img instanceof DoubleBufferImage) return real.drawImage (((DoubleBufferImage) img).getRealImage (), x, y, bgcolor, observer);
    else return real.drawImage (img, (int) (x * scale), (int) (y * scale), (int) (img.getWidth (observer) * scale), (int) (img.getHeight (observer) * scale), bgcolor, observer);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="324" endline="335">
public boolean drawImage (Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer) {
    if (img instanceof DoubleBufferImage) return real.drawImage (((DoubleBufferImage) img).getRealImage (), x, y, width, height, bgcolor, observer);
    else return real.drawImage (img, (int) (x * scale), (int) (y * scale), (int) (width * scale), (int) (height * scale), bgcolor, observer);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="337" endline="351">
public boolean drawImage (Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer) {
    if (img instanceof DoubleBufferImage) return real.drawImage (((DoubleBufferImage) img).getRealImage (), dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);
    else return real.drawImage (img, (int) (dx1 * scale), (int) (dy1 * scale), (int) (dx2 * scale), (int) (dy2 * scale), (int) (sx1 * scale), (int) (sy1 * scale), (int) (sx2 * scale), (int) (sy2 * scale), observer);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="353" endline="368">
public boolean drawImage (Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer) {
    if (img instanceof DoubleBufferImage) return real.drawImage (((DoubleBufferImage) img).getRealImage (), dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);
    else return real.drawImage (img, (int) (dx1 * scale), (int) (dy1 * scale), (int) (dx2 * scale), (int) (dy2 * scale), (int) (sx1 * scale), (int) (sy1 * scale), (int) (sx2 * scale), (int) (sy2 * scale), bgcolor, observer);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="370" endline="372">
public void dispose () {
    real.dispose ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="395" endline="399">
public ScalingFontMetrics (Font userFont, FontMetrics real) {
    super (null);
    this.userFont = userFont;
    this.real = real;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="404" endline="406">
public Font getFont () {
    return userFont;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="408" endline="410">
public int getAscent () {
    return (int) (real.getAscent () / ScalingGraphics.this.getScale ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="412" endline="414">
public int getLeading () {
    return (int) (real.getLeading () / ScalingGraphics.this.getScale ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="416" endline="418">
public int getMaxAdvance () {
    return (int) (real.getMaxAdvance () / ScalingGraphics.this.getScale ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="420" endline="422">
public int charWidth (char ch) {
    return (int) (real.charWidth (ch) / ScalingGraphics.this.getScale ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ScalingGraphics.java" startline="424" endline="427">
public int charsWidth (char [] data, int off, int len) {
    return (int) (real.charsWidth (data, off, len) / ScalingGraphics.this.getScale ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomUpdateStrategy.java" startline="39" endline="73">
public void draw (Graphics g, DrawingView view) {
    Dimension d = view.getSize ();
    if ((fOffscreen == null) || (d.width != fImagewidth) || (d.height != fImageheight)) {
        fOffscreen = view.createImage (d.width, d.height);
        fImagewidth = d.width;
        fImageheight = d.height;
    }
    Graphics g2 = fOffscreen.getGraphics ();
    Rectangle r = g.getClipBounds ();
    if (g2 instanceof ScalingGraphics) {
        ScalingGraphics s2 = (ScalingGraphics) g2;
        if (r != null) {
            r = new Rectangle ((int) ((r.x - 2) / s2.getScale ()), (int) ((r.y - 2) / s2.getScale ()), (int) ((r.width + 4) / s2.getScale ()), (int) ((r.height + 4) / s2.getScale ()));
            g.setClip (r);
        }
    }
    g2.setClip (r);
    view.drawAll (g2);
    g.drawImage (fOffscreen, 0, 0, view);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="33" endline="35">
protected AreaTracker (DrawingEditor editor) {
    super (editor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="37" endline="39">
public Rectangle getArea () {
    return new Rectangle (area.x, area.y, area.width, area.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="41" endline="46">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, e.getX (), e.getY ());
    rubberBand (getAnchorX (), getAnchorY (), getAnchorX (), getAnchorY ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="48" endline="52">
public void mouseDrag (MouseEvent e, int x, int y) {
    super.mouseDrag (e, x, y);
    eraseRubberBand ();
    rubberBand (getAnchorX (), getAnchorY (), x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="54" endline="57">
public void mouseUp (MouseEvent e, int x, int y) {
    super.mouseUp (e, x, y);
    eraseRubberBand ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="59" endline="63">
private void rubberBand (int x1, int y1, int x2, int y2) {
    area = new Rectangle (new Point (x1, y1));
    area.add (new Point (x2, y2));
    drawXORRect (area);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="65" endline="67">
private void eraseRubberBand () {
    drawXORRect (area);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/AreaTracker.java" startline="69" endline="74">
private void drawXORRect (Rectangle r) {
    Graphics g = view ().getGraphics ();
    g.setXORMode (view ().getBackground ());
    g.setColor (Color.black);
    g.drawRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/MiniMapZoomableView.java" startline="29" endline="31">
public MiniMapZoomableView (DrawingView newMappedDrawingView, JScrollPane subject) {
    super (newMappedDrawingView, subject);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/MiniMapZoomableView.java" startline="34" endline="46">
public AffineTransform getInverseSubjectTransform () {
    double subjectsScale = ((ZoomDrawingView) getMappedComponent ()).getScale ();
    AffineTransform at = null;
    try {
        at = AffineTransform.getScaleInstance (subjectsScale, subjectsScale).createInverse ();
    } catch (NoninvertibleTransformException nte) {
    }
    return at;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomAreaTracker.java" startline="25" endline="27">
public ZoomAreaTracker (DrawingEditor editor) {
    super (editor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/ZoomAreaTracker.java" startline="29" endline="35">
public void mouseUp (MouseEvent e, int x, int y) {
    Rectangle zoomArea = getArea ();
    super.mouseUp (e, x, y);
    if (zoomArea.width > 4 && zoomArea.height > 4) ((ZoomDrawingView) view ()).zoom (zoomArea.x, zoomArea.y, zoomArea.width, zoomArea.height);

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="35" endline="38">
public DoubleBufferImage (Image real, double scale) {
    this.real = real;
    this.scale = scale;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="40" endline="42">
public Image getRealImage () {
    return real;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="44" endline="46">
public void flush () {
    real.flush ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="48" endline="55">
public Graphics getGraphics () {
    ScalingGraphics result = new ScalingGraphics (real.getGraphics ());
    result.setScale (scale);
    return result;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="57" endline="59">
public int getHeight (ImageObserver observer) {
    return real.getHeight (observer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="61" endline="63">
public Object getProperty (String name, ImageObserver observer) {
    return real.getProperty (name, observer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="65" endline="67">
public Image getScaledInstance (int width, int height, int hints) {
    return real.getScaledInstance (width, height, hints);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="69" endline="71">
public ImageProducer getSource () {
    return real.getSource ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/zoom/DoubleBufferImage.java" startline="73" endline="75">
public int getWidth (ImageObserver observer) {
    return real.getWidth (observer);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/Helper.java" startline="23" endline="38">
static public DrawingView getDrawingView (Container container) {
    DrawingView oldDrawingView = null;
    Component [] components = container.getComponents ();
    for (int i = 0;
    i < components.length; i ++) {
        if (components [i] instanceof DrawingView) {
            return (DrawingView) components [i];
        } else if (components [i] instanceof Container) {
            oldDrawingView = getDrawingView ((Container) components [i]);
            if (oldDrawingView != null) {
                return oldDrawingView;
            }
        }

    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/Helper.java" startline="40" endline="50">
static public DrawingView getDrawingView (Component component) {
    if (Container.class.isInstance (component)) {
        return getDrawingView ((Container) component);
    } else if (DrawingView.class.isInstance (component)) {
        return (DrawingView) component;
    } else {
        return null;
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="38" endline="40">
public PolygonTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="42" endline="45">
public void activate () {
    super.activate ();
    fPolygon = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="47" endline="59">
public void deactivate () {
    if (fPolygon != null) {
        fPolygon.smoothPoints ();
        if (fPolygon.pointCount () < 3 || fPolygon.size ().width < 4 || fPolygon.size ().height < 4) {
            getActiveView ().drawing ().remove (fPolygon);
            setUndoActivity (null);
        }
    }
    fPolygon = null;
    super.deactivate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="61" endline="73">
private void addPoint (int x, int y) {
    if (fPolygon == null) {
        fPolygon = new PolygonFigure (x, y);
        setAddedFigure (view ().add (fPolygon));
        fPolygon.addPoint (x, y);
    } else if (fLastX != x || fLastY != y) {
        fPolygon.addPoint (x, y);
    }

    fLastX = x;
    fLastY = y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="75" endline="102">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    x = e.getX ();
    y = e.getY ();
    if (e.getClickCount () >= 2) {
        if (fPolygon != null) {
            fPolygon.smoothPoints ();
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
            editor ().toolDone ();
        }
        fPolygon = null;
    } else {
        addPoint (e.getX (), e.getY ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="104" endline="113">
public void mouseMove (MouseEvent e, int x, int y) {
    if (e.getSource () == getActiveView ()) {
        if (fPolygon != null) {
            if (fPolygon.pointCount () > 1) {
                fPolygon.setPointAt (new Point (x, y), fPolygon.pointCount () - 1);
                getActiveView ().checkDamage ();
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="115" endline="120">
public void mouseDrag (MouseEvent e, int x, int y) {
    x = e.getX ();
    y = e.getY ();
    addPoint (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="122" endline="123">
public void mouseUp (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="129" endline="131">
protected Figure getAddedFigure () {
    return myAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="133" endline="135">
private void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonTool.java" startline="140" endline="142">
protected Undoable createUndoActivity () {
    return new PasteCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="26" endline="28">
public DiamondFigure () {
    super (new Point (0, 0), new Point (0, 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="30" endline="32">
public DiamondFigure (Point origin, Point corner) {
    super (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="37" endline="45">
protected Polygon getPolygon () {
    Rectangle r = displayBox ();
    Polygon p = new Polygon ();
    p.addPoint (r.x, r.y + r.height / 2);
    p.addPoint (r.x + r.width / 2, r.y);
    p.addPoint (r.x + r.width, r.y + r.height / 2);
    p.addPoint (r.x + r.width / 2, r.y + r.height);
    return p;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="47" endline="53">
public void draw (Graphics g) {
    Polygon p = getPolygon ();
    g.setColor (getFillColor ());
    g.fillPolygon (p);
    g.setColor (getFrameColor ());
    g.drawPolygon (p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="55" endline="58">
public Insets connectionInsets () {
    Rectangle r = displayBox ();
    return new Insets (r.height / 2, r.width / 2, r.height / 2, r.width / 2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="60" endline="62">
public boolean containsPoint (int x, int y) {
    return getPolygon ().contains (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="64" endline="66">
public Point chop (Point p) {
    return PolygonFigure.chop (getPolygon (), p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DiamondFigure.java" startline="68" endline="70">
public Connector connectorAt (int x, int y) {
    return new ChopDiamondConnector (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="27" endline="32">
public JScrollPaneDesktop () {
    setDesktopEventService (createDesktopEventService ());
    setAlignmentX (LEFT_ALIGNMENT);
    setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="34" endline="36">
protected Component createContents (DrawingView dv) {
    return (Component) dv;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="38" endline="40">
public DrawingView getActiveDrawingView () {
    return getDesktopEventService ().getActiveDrawingView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="42" endline="44">
public void addToDesktop (DrawingView dv, int location) {
    getContainer ().add (createContents (dv));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="46" endline="48">
public void removeFromDesktop (DrawingView dv, int location) {
    getDesktopEventService ().removeComponent (dv);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="50" endline="52">
public void removeAllFromDesktop (int location) {
    getDesktopEventService ().removeAllComponents ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="54" endline="57">
public DrawingView [] getAllFromDesktop (int location) {
    return getDesktopEventService ().getDrawingViews (getComponents ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="59" endline="61">
public void addDesktopListener (DesktopListener dpl) {
    getDesktopEventService ().addDesktopListener (dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="63" endline="65">
public void removeDesktopListener (DesktopListener dpl) {
    getDesktopEventService ().removeDesktopListener (dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="67" endline="69">
private Container getContainer () {
    return getViewport ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="71" endline="73">
protected DesktopEventService getDesktopEventService () {
    return myDesktopEventService;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="75" endline="77">
private void setDesktopEventService (DesktopEventService newDesktopEventService) {
    myDesktopEventService = newDesktopEventService;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="79" endline="81">
protected DesktopEventService createDesktopEventService () {
    return new DesktopEventService (this, getContainer ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JScrollPaneDesktop.java" startline="83" endline="86">
public void updateTitle (String newDrawingTitle) {
    setName (newDrawingTitle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="42" endline="44">
public TriangleFigure () {
    super (new Point (0, 0), new Point (0, 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="46" endline="48">
public TriangleFigure (Point origin, Point corner) {
    super (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="50" endline="54">
public HandleEnumeration handles () {
    List h = super.handles ().toList ();
    h.add (new TriangleRotationHandle (this));
    return new HandleEnumerator (h);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="56" endline="69">
public void rotate (double angle) {
    willChange ();
    double dist = Double.MAX_VALUE;
    int best = 0;
    for (int i = 0;
    i < rotations.length; ++ i) {
        double d = Math.abs (angle - rotations [i]);
        if (d < dist) {
            dist = d;
            best = i;
        }
    }
    fRotation = best;
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="72" endline="118">
public Polygon getPolygon () {
    Rectangle r = displayBox ();
    Polygon p = new Polygon ();
    switch (fRotation) {
        case 0 :
            p.addPoint (r.x + r.width / 2, r.y);
            p.addPoint (r.x + r.width, r.y + r.height);
            p.addPoint (r.x, r.y + r.height);
            break;
        case 1 :
            p.addPoint (r.x + r.width, r.y);
            p.addPoint (r.x + r.width, r.y + r.height);
            p.addPoint (r.x, r.y);
            break;
        case 2 :
            p.addPoint (r.x + r.width, r.y + r.height / 2);
            p.addPoint (r.x, r.y + r.height);
            p.addPoint (r.x, r.y);
            break;
        case 3 :
            p.addPoint (r.x + r.width, r.y + r.height);
            p.addPoint (r.x, r.y + r.height);
            p.addPoint (r.x + r.width, r.y);
            break;
        case 4 :
            p.addPoint (r.x + r.width / 2, r.y + r.height);
            p.addPoint (r.x, r.y);
            p.addPoint (r.x + r.width, r.y);
            break;
        case 5 :
            p.addPoint (r.x, r.y + r.height);
            p.addPoint (r.x, r.y);
            p.addPoint (r.x + r.width, r.y + r.height);
            break;
        case 6 :
            p.addPoint (r.x, r.y + r.height / 2);
            p.addPoint (r.x + r.width, r.y);
            p.addPoint (r.x + r.width, r.y + r.height);
            break;
        case 7 :
            p.addPoint (r.x, r.y);
            p.addPoint (r.x + r.width, r.y);
            p.addPoint (r.x, r.y + r.height);
            break;
    }
    return p;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="121" endline="127">
public void draw (Graphics g) {
    Polygon p = getPolygon ();
    g.setColor (getFillColor ());
    g.fillPolygon (p);
    g.setColor (getFrameColor ());
    g.drawPolygon (p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="129" endline="151">
public Insets connectionInsets () {
    Rectangle r = displayBox ();
    switch (fRotation) {
        case 0 :
            return new Insets (r.height, r.width / 2, 0, r.width / 2);
        case 1 :
            return new Insets (0, r.width, r.height, 0);
        case 2 :
            return new Insets (r.height / 2, 0, r.height / 2, r.width);
        case 3 :
            return new Insets (r.height, r.width, 0, 0);
        case 4 :
            return new Insets (0, r.width / 2, r.height, r.width / 2);
        case 5 :
            return new Insets (r.height, 0, 0, r.width);
        case 6 :
            return new Insets (r.height / 2, r.width, r.height / 2, 0);
        case 7 :
            return new Insets (0, 0, r.height, r.width);
        default :
            return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="153" endline="155">
public boolean containsPoint (int x, int y) {
    return getPolygon ().contains (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="157" endline="159">
public Point center () {
    return PolygonFigure.center (getPolygon ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="161" endline="163">
public Point chop (Point p) {
    return PolygonFigure.chop (getPolygon (), p);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="165" endline="169">
public Object clone () {
    TriangleFigure figure = (TriangleFigure) super.clone ();
    figure.fRotation = fRotation;
    return figure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="171" endline="173">
public double getRotationAngle () {
    return rotations [fRotation];
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="177" endline="180">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fRotation);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/TriangleFigure.java" startline="182" endline="185">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fRotation = dr.readInt ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="42" endline="51">
public MiniMapView (DrawingView newMappedDrawingView, JScrollPane subject) {
    m_subjectListener = new SubjectListener ();
    setSubject (subject);
    setMappedDrawingView (newMappedDrawingView);
    myDrawingChangeListener = new MappedDrawingChangeListener ();
    getMappedDrawingView ().drawing ().addDrawingChangeListener (myDrawingChangeListener);
    MouseListener ml = new MouseListener ();
    addMouseListener (new MouseListener ());
    addMouseMotionListener (ml);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="53" endline="55">
protected void setMappedDrawingView (DrawingView newMappedDrawingView) {
    myMappedDrawingView = newMappedDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="57" endline="59">
public DrawingView getMappedDrawingView () {
    return myMappedDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="62" endline="73">
protected void setSubject (JScrollPane subject) {
    if (m_subject != null) {
        m_subject.getViewport ().removeChangeListener (m_subjectListener);
    }
    m_subject = subject;
    if (m_subject != null) {
        m_subject.getViewport ().addChangeListener (m_subjectListener);
    }
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="75" endline="77">
public JScrollPane getSubject () {
    return m_subject;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="79" endline="81">
public Color getViewBowColor () {
    return m_viewBoxColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="83" endline="86">
public void setViewBoxColor (Color c) {
    m_viewBoxColor = c;
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="91" endline="93">
protected Component getMappedComponent () {
    return (Component) getMappedDrawingView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="96" endline="108">
public void paint (Graphics g) {
    Graphics2D g2d = (Graphics2D) g;
    Component mappedComponent = getMappedComponent ();
    AffineTransform at = getViewToMiniMapTransform (mappedComponent);
    g2d.transform (at);
    getMappedDrawingView ().drawAll (g2d);
    drawViewRectangle (g2d, getViewRectangle ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="111" endline="118">
protected void drawViewRectangle (Graphics2D g2d, Rectangle viewPortRectangle) {
    AffineTransform at = new AffineTransform ();
    at.setToIdentity ();
    g2d.setTransform (at);
    g2d.setColor (m_viewBoxColor);
    g2d.draw (viewPortRectangle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="120" endline="127">
protected AffineTransform getViewToMiniMapTransform (Component mappedComponent) {
    double scaleX = ((double) getWidth ()) / ((double) mappedComponent.getWidth ());
    double scaleY = ((double) getHeight ()) / ((double) mappedComponent.getHeight ());
    AffineTransform at = getInverseSubjectTransform ();
    at.concatenate (AffineTransform.getScaleInstance (scaleX, scaleY));
    return at;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="132" endline="136">
protected AffineTransform getInverseSubjectTransform () {
    AffineTransform at = new AffineTransform ();
    at.setToIdentity ();
    return at;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="141" endline="151">
protected Rectangle getViewRectangle () {
    Rectangle visiblePortion = m_subject.getViewportBorderBounds ();
    Point upperLeftViewPos = m_subject.getViewport ().getViewPosition ();
    double [] srcRecCorners = new double [4];
    double [] dstRecCorners = new double [4];
    srcRecCorners [0] = upperLeftViewPos.x + visiblePortion.getX ();
    srcRecCorners [1] = upperLeftViewPos.y + visiblePortion.getY ();
    srcRecCorners [2] = upperLeftViewPos.x + visiblePortion.getX () + visiblePortion.getWidth ();
    srcRecCorners [3] = upperLeftViewPos.y + visiblePortion.getY () + visiblePortion.getHeight ();
    getViewToMiniMapTransform (getMappedComponent ()).transform (srcRecCorners, 0, dstRecCorners, 0, srcRecCorners.length / 2);
    return new Rectangle ((int) dstRecCorners [0], (int) dstRecCorners [1], (int) (dstRecCorners [2] - dstRecCorners [0]), (int) (dstRecCorners [3] - dstRecCorners [1]));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="158" endline="182">
protected void scrollSubjectTo (int upperLeftX, int upperLeftY) {
    AffineTransform at = null;
    try {
        at = getViewToMiniMapTransform (getMappedComponent ()).createInverse ();
    } catch (NoninvertibleTransformException nite) {
        nite.printStackTrace ();
        return;
    }
    double [] srcPoints = new double [2];
    double [] destPoints = new double [2];
    srcPoints [0] = upperLeftX;
    srcPoints [1] = upperLeftY;
    at.transform (srcPoints, 0, destPoints, 0, 1);
    if (destPoints [0] < 0) {
        destPoints [0] = 0;
    }
    if (destPoints [1] < 0) {
        destPoints [1] = 0;
    }
    m_subject.getViewport ().setViewPosition (new Point ((int) destPoints [0], (int) destPoints [1]));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="184" endline="190">
protected int [] getUpperLeftPointsFromCenter (int centerX, int centerY) {
    int [] upperLeft = new int [2];
    Rectangle oldRectangle = getViewRectangle ();
    upperLeft [0] = centerX - oldRectangle.width / 2;
    upperLeft [1] = centerY - oldRectangle.height / 2;
    return upperLeft;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="194" endline="197">
public void mousePressed (MouseEvent e) {
    int [] rectangleUpperLeft = getUpperLeftPointsFromCenter (e.getX (), e.getY ());
    scrollSubjectTo (rectangleUpperLeft [0], rectangleUpperLeft [1]);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="199" endline="202">
public void mouseDragged (MouseEvent e) {
    int [] rectangleUpperLeft = getUpperLeftPointsFromCenter (e.getX (), e.getY ());
    scrollSubjectTo (rectangleUpperLeft [0], rectangleUpperLeft [1]);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="204" endline="206">
public void mouseMoved (MouseEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="210" endline="212">
public void stateChanged (ChangeEvent e) {
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="219" endline="221">
public void drawingInvalidated (DrawingChangeEvent e) {
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="226" endline="228">
public void drawingRequestUpdate (DrawingChangeEvent e) {
    repaint ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/MiniMapView.java" startline="233" endline="234">
public void drawingTitleChanged (DrawingChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ClippingUpdateStrategy.java" startline="19" endline="21">
public ClippingUpdateStrategy () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ClippingUpdateStrategy.java" startline="26" endline="66">
public void draw (Graphics g, DrawingView view) {
    Rectangle viewClipRectangle = g.getClipBounds ();
    if (viewClipRectangle == null) {
        view.drawAll (g);
        return;
    }
    FigureEnumeration fe = view.drawing ().figures ();
    Vector v = new Vector (1000);
    while (fe.hasNextFigure ()) {
        Figure fig = fe.nextFigure ();
        Rectangle r = fig.displayBox ();
        if (r.width <= 0) {
            r.width = 1;
        }
        if (r.height <= 0) {
            r.height = 1;
        }
        if (r.intersects (viewClipRectangle)) {
            v.add (fig);
        }
    }
    FigureEnumeration clippedFE = new FigureEnumerator (v);
    view.draw (g, clippedFE);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDrawApplication.java" startline="28" endline="30">
public SplitPaneDrawApplication () {
    this ("JHotDraw");
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDrawApplication.java" startline="35" endline="37">
public SplitPaneDrawApplication (String title) {
    super (title);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitPaneDrawApplication.java" startline="39" endline="41">
protected Desktop createDesktop () {
    return new SplitPaneDesktop ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="36" endline="40">
public DesktopEventService (Desktop newDesktop, Container newContainer) {
    setDesktop (newDesktop);
    setContainer (newContainer);
    getContainer ().addContainerListener (createComponentListener ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="42" endline="44">
private void setDesktop (Desktop newDesktop) {
    myDesktop = newDesktop;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="46" endline="48">
protected Desktop getDesktop () {
    return myDesktop;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="50" endline="52">
private void setContainer (Container newContainer) {
    myContainer = newContainer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="54" endline="56">
protected Container getContainer () {
    return myContainer;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="58" endline="60">
public void addComponent (Component newComponent) {
    getContainer ().add (newComponent);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="62" endline="70">
public void removeComponent (DrawingView dv) {
    Component [] comps = getContainer ().getComponents ();
    for (int x = 0;
    x < comps.length; x ++) {
        if (dv == Helper.getDrawingView (comps [x])) {
            getContainer ().remove (comps [x]);
            break;
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="72" endline="74">
public void removeAllComponents () {
    getContainer ().removeAll ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="76" endline="78">
public void addDesktopListener (DesktopListener dpl) {
    listenerList.add (DesktopListener.class, dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="80" endline="82">
public void removeDesktopListener (DesktopListener dpl) {
    listenerList.remove (DesktopListener.class, dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="84" endline="94">
protected void fireDrawingViewAddedEvent (final DrawingView dv) {
    final Object [] listeners = listenerList.getListenerList ();
    DesktopListener dpl;
    DesktopEvent dpe = createDesktopEvent (getActiveDrawingView (), dv);
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == DesktopListener.class) {
            dpl = (DesktopListener) listeners [i + 1];
            dpl.drawingViewAdded (dpe);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="96" endline="106">
protected void fireDrawingViewRemovedEvent (final DrawingView dv) {
    final Object [] listeners = listenerList.getListenerList ();
    DesktopListener dpl;
    DesktopEvent dpe = createDesktopEvent (getActiveDrawingView (), dv);
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == DesktopListener.class) {
            dpl = (DesktopListener) listeners [i + 1];
            dpl.drawingViewRemoved (dpe);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="111" endline="121">
protected void fireDrawingViewSelectedEvent (final DrawingView oldView, final DrawingView newView) {
    final Object [] listeners = listenerList.getListenerList ();
    DesktopListener dpl;
    DesktopEvent dpe = createDesktopEvent (oldView, newView);
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == DesktopListener.class) {
            dpl = (DesktopListener) listeners [i + 1];
            dpl.drawingViewSelected (dpe);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="126" endline="128">
protected DesktopEvent createDesktopEvent (DrawingView oldView, DrawingView newView) {
    return new DesktopEvent (getDesktop (), newView, oldView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="130" endline="141">
public DrawingView [] getDrawingViews (Component [] comps) {
    List al = CollectionsFactory.current ().createList ();
    for (int x = 0;
    x < comps.length; x ++) {
        DrawingView dv = Helper.getDrawingView (comps [x]);
        if (dv != null) {
            al.add (dv);
        }
    }
    DrawingView [] dvs = new DrawingView [al.size ()];
    al.toArray (dvs);
    return dvs;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="143" endline="145">
public DrawingView getActiveDrawingView () {
    return mySelectedView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="147" endline="149">
protected void setActiveDrawingView (DrawingView newActiveDrawingView) {
    mySelectedView = newActiveDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="151" endline="184">
protected ContainerListener createComponentListener () {
    return new ContainerAdapter () {
        public void componentAdded (ContainerEvent e) {
            DrawingView dv = Helper.getDrawingView ((java.awt.Container) e.getChild ());
            DrawingView oldView = getActiveDrawingView ();
            if (dv != null) {
                fireDrawingViewAddedEvent (dv);
                setActiveDrawingView (dv);
                fireDrawingViewSelectedEvent (oldView, getActiveDrawingView ());
            }
        } public void componentRemoved (ContainerEvent e) {
            DrawingView dv = Helper.getDrawingView ((java.awt.Container) e.getChild ());
            if (dv != null) {
                DrawingView oldView = getActiveDrawingView ();
                setActiveDrawingView (NullDrawingView.getManagedDrawingView (oldView.editor ()));
                fireDrawingViewSelectedEvent (oldView, getActiveDrawingView ());
                fireDrawingViewRemovedEvent (dv);
            }
        }}

    ;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="158" endline="166">
public void componentAdded (ContainerEvent e) {
    DrawingView dv = Helper.getDrawingView ((java.awt.Container) e.getChild ());
    DrawingView oldView = getActiveDrawingView ();
    if (dv != null) {
        fireDrawingViewAddedEvent (dv);
        setActiveDrawingView (dv);
        fireDrawingViewSelectedEvent (oldView, getActiveDrawingView ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEventService.java" startline="174" endline="182">
public void componentRemoved (ContainerEvent e) {
    DrawingView dv = Helper.getDrawingView ((java.awt.Container) e.getChild ());
    if (dv != null) {
        DrawingView oldView = getActiveDrawingView ();
        setActiveDrawingView (NullDrawingView.getManagedDrawingView (oldView.editor ()));
        fireDrawingViewSelectedEvent (oldView, getActiveDrawingView ());
        fireDrawingViewRemovedEvent (dv);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="38" endline="42">
public PolygonHandle (PolygonFigure owner, Locator l, int index) {
    super (owner);
    fLocator = l;
    fIndex = index;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="44" endline="48">
public void invokeStart (int x, int y, DrawingView view) {
    setUndoActivity (createUndoActivity (view, fIndex));
    getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (owner ()));
    ((PolygonHandle.UndoActivity) getUndoActivity ()).setOldPoint (new Point (x, y));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="50" endline="53">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    int index = ((PolyLineHandle.UndoActivity) getUndoActivity ()).getPointIndex ();
    myOwner ().setPointAt (new Point (x, y), index);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="55" endline="60">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    myOwner ().smoothPoints ();
    if ((x == anchorX) && (y == anchorY)) {
        setUndoActivity (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="62" endline="64">
public Point locate () {
    return fLocator.locate (owner ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="66" endline="68">
private PolygonFigure myOwner () {
    return (PolygonFigure) owner ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="73" endline="75">
protected Undoable createUndoActivity (DrawingView newView, int newPointIndex) {
    return new PolygonHandle.UndoActivity (newView, newPointIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="79" endline="81">
public UndoActivity (DrawingView newView, int newPointIndex) {
    super (newView, newPointIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/PolygonHandle.java" startline="83" endline="96">
protected boolean movePointToOldLocation () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    PolygonFigure figure = (PolygonFigure) fe.nextFigure ();
    Point backupPoint = figure.pointAt (getPointIndex ());
    figure.setPointAt (getOldPoint (), getPointIndex ());
    figure.smoothPoints ();
    setOldPoint (backupPoint);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="27" endline="29">
public SplitConnectionTool (DrawingEditor newDrawingEditor, ConnectionFigure newPrototype) {
    super (newDrawingEditor, newPrototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="31" endline="74">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    int ex = e.getX ();
    int ey = e.getY ();
    if (getTargetFigure () == null) {
        setTargetFigure (findConnectableFigure (ex, ey, drawing ()));
    } else {
        if (getAddedFigure () == null) {
            setConnection (createConnection ());
            setStartConnector (findConnector (ex, ey, getTargetFigure ()));
            getConnection ().connectStart (getStartConnector ());
            getConnection ().startPoint (ex, ey);
            setAddedFigure (view ().add (getConnection ()));
        }
        Figure c = findTarget (ex, ey, drawing ());
        if (c != null) {
            setEndConnector (findConnector (ex, ex, c));
            getConnection ().connectEnd (getEndConnector ());
            getConnection ().endPoint (ex, ey);
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
            getConnection ().updateConnection ();
            init ();
            editor ().toolDone ();
        } else {
            if (getEndConnector () == null) {
                Figure tempEndFigure = new NullFigure ();
                tempEndFigure.basicDisplayBox (new Point (ex, ey), new Point (ex, ey));
                setEndConnector (new NullConnector (tempEndFigure));
                getConnection ().connectEnd (getEndConnector ());
                getConnection ().endPoint (ex, ey);
                getConnection ().updateConnection ();
            } else {
                ((PolyLineFigure) getConnection ()).addPoint (ex, ey);
            }
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="76" endline="82">
public void mouseUp (MouseEvent e, int x, int y) {
    if (e.getClickCount () == 2) {
        init ();
        editor ().toolDone ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="84" endline="86">
public void mouseMove (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="88" endline="90">
public void mouseDrag (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="92" endline="98">
public void deactivate () {
    if (getConnection () != null) {
        view ().remove (getConnection ());
    }
    super.deactivate ();
    init ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/SplitConnectionTool.java" startline="100" endline="106">
protected void init () {
    setConnection (null);
    setStartConnector (null);
    setEndConnector (null);
    setAddedFigure (null);
    setTargetFigure (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="28" endline="33">
public JPanelDesktop (DrawApplication newDrawApplication) {
    setDrawApplication (newDrawApplication);
    setDesktopEventService (createDesktopEventService ());
    setAlignmentX (LEFT_ALIGNMENT);
    setLayout (new BorderLayout ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="35" endline="51">
protected Component createContents (DrawingView dv) {
    JScrollPane sp = new JScrollPane ((Component) dv);
    sp.setVerticalScrollBarPolicy (JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    sp.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    sp.setAlignmentX (LEFT_ALIGNMENT);
    String applicationTitle;
    if (dv.drawing ().getTitle () == null) {
        applicationTitle = getDrawApplication ().getApplicationName () + " - " + getDrawApplication ().getDefaultDrawingTitle ();
    } else {
        applicationTitle = getDrawApplication ().getApplicationName () + " - " + dv.drawing ().getTitle ();
    }
    sp.setName (applicationTitle);
    return sp;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="53" endline="55">
public DrawingView getActiveDrawingView () {
    return getDesktopEventService ().getActiveDrawingView ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="57" endline="60">
public void addToDesktop (DrawingView dv, int location) {
    getDesktopEventService ().addComponent (createContents (dv));
    getContainer ().validate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="62" endline="65">
public void removeFromDesktop (DrawingView dv, int location) {
    getDesktopEventService ().removeComponent (dv);
    getContainer ().validate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="67" endline="70">
public void removeAllFromDesktop (int location) {
    getDesktopEventService ().removeAllComponents ();
    getContainer ().validate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="72" endline="74">
public DrawingView [] getAllFromDesktop (int location) {
    return getDesktopEventService ().getDrawingViews (getComponents ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="76" endline="78">
public void addDesktopListener (DesktopListener dpl) {
    getDesktopEventService ().addDesktopListener (dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="80" endline="82">
public void removeDesktopListener (DesktopListener dpl) {
    getDesktopEventService ().removeDesktopListener (dpl);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="84" endline="86">
private Container getContainer () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="88" endline="90">
protected DesktopEventService getDesktopEventService () {
    return myDesktopEventService;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="92" endline="94">
private void setDesktopEventService (DesktopEventService newDesktopEventService) {
    myDesktopEventService = newDesktopEventService;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="96" endline="98">
protected DesktopEventService createDesktopEventService () {
    return new DesktopEventService (this, getContainer ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="100" endline="102">
private void setDrawApplication (DrawApplication newDrawApplication) {
    myDrawApplication = newDrawApplication;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="104" endline="106">
protected DrawApplication getDrawApplication () {
    return myDrawApplication;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/JPanelDesktop.java" startline="108" endline="111">
public void updateTitle (String newDrawingTitle) {
    setName (newDrawingTitle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEvent.java" startline="30" endline="32">
public DesktopEvent (Desktop source, DrawingView newDrawingView) {
    this (source, newDrawingView, null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEvent.java" startline="34" endline="38">
public DesktopEvent (Desktop source, DrawingView newDrawingView, DrawingView newPreviousDV) {
    super (source);
    setDrawingView (newDrawingView);
    setPreviousDrawingView (newPreviousDV);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEvent.java" startline="40" endline="42">
private void setDrawingView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEvent.java" startline="44" endline="46">
public DrawingView getDrawingView () {
    return myDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEvent.java" startline="48" endline="50">
private void setPreviousDrawingView (DrawingView newPreviousDrawingView) {
    myPreviousDrawingView = newPreviousDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/DesktopEvent.java" startline="52" endline="54">
public DrawingView getPreviousDrawingView () {
    return myPreviousDrawingView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ChopDiamondConnector.java" startline="36" endline="38">
public ChopDiamondConnector () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ChopDiamondConnector.java" startline="40" endline="42">
public ChopDiamondConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ChopDiamondConnector.java" startline="47" endline="92">
protected Point chop (Figure target, Point from) {
    Rectangle r = target.displayBox ();
    Point c1 = new Point (r.x + r.width / 2, r.y + (r.height / 2));
    Point p2 = new Point (r.x + r.width / 2, r.y + r.height);
    Point p4 = new Point (r.x + r.width / 2, r.y);
    if (r.contains (from)) {
        if (from.y > r.y && from.y < (r.y + r.height / 2)) {
            return p2;
        } else {
            return p4;
        }
    }
    double ang = Geom.pointToAngle (r, from);
    Point p1 = new Point (r.x + r.width, r.y + (r.height / 2));
    Point p3 = new Point (r.x, r.y + (r.height / 2));
    Point rp = null;
    if (ang > 0 && ang < 1.57) {
        rp = Geom.intersect (p1.x, p1.y, p2.x, p2.y, c1.x, c1.y, from.x, from.y);
    } else if (ang > 1.575 && ang < 3.14) {
        rp = Geom.intersect (p2.x, p2.y, p3.x, p3.y, c1.x, c1.y, from.x, from.y);
    } else if (ang > - 3.14 && ang < - 1.575) {
        rp = Geom.intersect (p3.x, p3.y, p4.x, p4.y, c1.x, c1.y, from.x, from.y);
    } else if (ang > - 1.57 && ang < 0) {
        rp = Geom.intersect (p4.x, p4.y, p1.x, p1.y, c1.x, c1.y, from.x, from.y);
    }

    if (rp == null) {
        rp = Geom.angleToPoint (r, ang);
    }
    return rp;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="36" endline="38">
private ComponentFigure () {
    bounds = new Rectangle ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="43" endline="46">
public ComponentFigure (Component newComponent) {
    this ();
    setComponent (newComponent);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="60" endline="63">
public void basicDisplayBox (Point origin, Point corner) {
    bounds = new Rectangle (origin);
    bounds.add (corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="71" endline="73">
protected void basicMoveBy (int dx, int dy) {
    bounds.translate (dx, dy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="79" endline="81">
public Rectangle displayBox () {
    return new Rectangle (bounds);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="91" endline="95">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="101" endline="103">
public Component getComponent () {
    return this.component;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="110" endline="112">
protected void setComponent (Component newComponent) {
    this.component = newComponent;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/ComponentFigure.java" startline="118" endline="124">
public void draw (Graphics g) {
    getComponent ().setBounds (displayBox ());
    Graphics componentG = g.create (bounds.x, bounds.y, bounds.width, bounds.height);
    getComponent ().paint (componentG);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CompositeFigureCreationTool.java" startline="30" endline="32">
public CompositeFigureCreationTool (DrawingEditor newDrawingEditor, Figure prototype) {
    super (newDrawingEditor, prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CompositeFigureCreationTool.java" startline="34" endline="52">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    Figure figure = drawing ().findFigure (e.getX (), e.getY ());
    if (figure != null) {
        figure = figure.getDecoratedFigure ();
        if (figure instanceof CompositeFigure) {
            setContainerFigure ((CompositeFigure) figure);
            setCreatedFigure (createFigure ());
            setAddedFigure ((getContainerFigure ().add (getCreatedFigure ())));
            getAddedFigure ().displayBox (new Point (x, y), new Point (x, y));
        } else {
            toolDone ();
        }
    } else {
        toolDone ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CompositeFigureCreationTool.java" startline="54" endline="63">
public void mouseMove (MouseEvent e, int x, int y) {
    if ((getContainerFigure () != null) && ! getContainerFigure ().containsPoint (e.getX (), e.getY ())) {
        toolDone ();
    } else {
        super.mouseMove (e, x, y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CompositeFigureCreationTool.java" startline="65" endline="67">
protected void setContainerFigure (CompositeFigure newContainerFigure) {
    myContainerFigure = newContainerFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CompositeFigureCreationTool.java" startline="69" endline="71">
public CompositeFigure getContainerFigure () {
    return myContainerFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CompositeFigureCreationTool.java" startline="73" endline="78">
protected void toolDone () {
    setCreatedFigure (null);
    setAddedFigure (null);
    setContainerFigure (null);
    editor ().toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="46" endline="124">
public CTXWindowMenu (String newText, MDIDesktopPane newDesktop, DrawingEditor newEditor) {
    super (newText);
    this.desktop = newDesktop;
    cascadeCommand = new CommandMenuItem (new AbstractCommand ("Cascade", newEditor) {
        public void execute () {
            CTXWindowMenu.this.desktop.cascadeFrames ();
        } public boolean isExecutable () {
            return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    );
    tileHCommand = new CommandMenuItem (new AbstractCommand ("Tile Horizontally", newEditor) {
        public void execute () {
            CTXWindowMenu.this.desktop.tileFramesHorizontally ();
        } public boolean isExecutable () {
            return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    );
    tileVCommand = new CommandMenuItem (new AbstractCommand ("Tile Vertically", newEditor) {
        public void execute () {
            CTXWindowMenu.this.desktop.tileFramesVertically ();
        } public boolean isExecutable () {
            return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    );
    arrangeHCommand = new CommandMenuItem (new AbstractCommand ("Arrange Horizontally", newEditor) {
        public void execute () {
            CTXWindowMenu.this.desktop.arrangeFramesHorizontally ();
        } public boolean isExecutable () {
            return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    );
    arrangeVCommand = new CommandMenuItem (new AbstractCommand ("Arrange Vertically", newEditor) {
        public void execute () {
            CTXWindowMenu.this.desktop.arrangeFramesVertically ();
        } public boolean isExecutable () {
            return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
        }}

    );
    addMenuListener (new MenuListener () {
        public void menuCanceled (MenuEvent e) {
        } public void menuDeselected (MenuEvent e) {
            removeWindowsList ();
        } public void menuSelected (MenuEvent e) {
            buildChildMenus ();
        }}

    );
    add (cascadeCommand);
    add (tileHCommand);
    add (tileVCommand);
    add (arrangeHCommand);
    add (arrangeVCommand);
    staticItems = 5;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="52" endline="54">
public void execute () {
    CTXWindowMenu.this.desktop.cascadeFrames ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="56" endline="58">
public boolean isExecutable () {
    return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="63" endline="65">
public void execute () {
    CTXWindowMenu.this.desktop.tileFramesHorizontally ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="67" endline="69">
public boolean isExecutable () {
    return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="74" endline="76">
public void execute () {
    CTXWindowMenu.this.desktop.tileFramesVertically ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="78" endline="80">
public boolean isExecutable () {
    return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="85" endline="87">
public void execute () {
    CTXWindowMenu.this.desktop.arrangeFramesHorizontally ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="89" endline="91">
public boolean isExecutable () {
    return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="96" endline="98">
public void execute () {
    CTXWindowMenu.this.desktop.arrangeFramesVertically ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="100" endline="102">
public boolean isExecutable () {
    return super.isExecutable () && (CTXWindowMenu.this.desktop.getAllFrames ().length > 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="107" endline="107">
public void menuCanceled (MenuEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="109" endline="111">
public void menuDeselected (MenuEvent e) {
    removeWindowsList ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="113" endline="115">
public void menuSelected (MenuEvent e) {
    buildChildMenus ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="127" endline="132">
protected void removeWindowsList () {
    while (this.getItemCount () > staticItems) {
        remove (staticItems);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="138" endline="173">
private void buildChildMenus () {
    JInternalFrame [] array = desktop.getAllFrames ();
    cascadeCommand.setEnabled (array.length > 0);
    tileHCommand.setEnabled (array.length > 0);
    tileVCommand.setEnabled (array.length > 0);
    arrangeHCommand.setEnabled (array.length > 0);
    arrangeVCommand.setEnabled (array.length > 0);
    if (array.length == 0) {
        return;
    }
    addSeparator ();
    for (int i = 0;
    i < array.length; i ++) {
        ChildMenuItem menu = new ChildMenuItem (array [i]);
        menu.setState (i == 0);
        menu.addActionListener (new ActionListener () {
            public void actionPerformed (ActionEvent ae) {
                JInternalFrame frame = ((ChildMenuItem) ae.getSource ()).getFrame ();
                frame.moveToFront ();
                try {
                    frame.setSelected (true);
                } catch (PropertyVetoException e) {
                    e.printStackTrace ();
                }
            }}

        );
        menu.setIcon (array [i].getFrameIcon ());
        add (menu);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="159" endline="168">
public void actionPerformed (ActionEvent ae) {
    JInternalFrame frame = ((ChildMenuItem) ae.getSource ()).getFrame ();
    frame.moveToFront ();
    try {
        frame.setSelected (true);
    } catch (PropertyVetoException e) {
        e.printStackTrace ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="187" endline="190">
public ChildMenuItem (JInternalFrame frame) {
    super (frame.getTitle ());
    this.frame = frame;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/contrib/CTXWindowMenu.java" startline="197" endline="199">
public JInternalFrame getFrame () {
    return frame;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="37" endline="39">
public RectangleFigure () {
    this (new Point (0, 0), new Point (0, 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="41" endline="43">
public RectangleFigure (Point origin, Point corner) {
    basicDisplayBox (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="45" endline="48">
public void basicDisplayBox (Point origin, Point corner) {
    fDisplayBox = new Rectangle (origin);
    fDisplayBox.add (corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="50" endline="54">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="56" endline="62">
public Rectangle displayBox () {
    return new Rectangle (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="64" endline="66">
protected void basicMoveBy (int x, int y) {
    fDisplayBox.translate (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="68" endline="71">
public void drawBackground (Graphics g) {
    Rectangle r = displayBox ();
    g.fillRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="73" endline="76">
public void drawFrame (Graphics g) {
    Rectangle r = displayBox ();
    g.drawRect (r.x, r.y, r.width - 1, r.height - 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="80" endline="86">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fDisplayBox.x);
    dw.writeInt (fDisplayBox.y);
    dw.writeInt (fDisplayBox.width);
    dw.writeInt (fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RectangleFigure.java" startline="88" endline="95">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fDisplayBox = new Rectangle (dr.readInt (), dr.readInt (), dr.readInt (), dr.readInt ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="27" endline="29">
public FontSizeHandle (Figure owner, Locator l) {
    super (owner, l);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="31" endline="34">
public void invokeStart (int x, int y, DrawingView view) {
    setUndoActivity (createUndoActivity (view));
    getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (owner ()));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="36" endline="42">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    TextFigure textOwner = (TextFigure) owner ();
    FontSizeHandle.UndoActivity activity = (FontSizeHandle.UndoActivity) getUndoActivity ();
    int newSize = activity.getFont ().getSize () + y - anchorY;
    textOwner.setFont (new Font (activity.getFont ().getName (), activity.getFont ().getStyle (), newSize));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="44" endline="54">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    TextFigure textOwner = (TextFigure) owner ();
    FontSizeHandle.UndoActivity activity = (FontSizeHandle.UndoActivity) getUndoActivity ();
    if (textOwner.getFont ().getSize () == activity.getOldFontSize ()) {
        setUndoActivity (null);
    } else {
        activity.setFont (textOwner.getFont ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="56" endline="64">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.yellow);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="69" endline="72">
protected Undoable createUndoActivity (DrawingView newView) {
    TextFigure textOwner = (TextFigure) owner ();
    return new FontSizeHandle.UndoActivity (newView, textOwner.getFont ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="78" endline="84">
public UndoActivity (DrawingView newView, Font newFont) {
    super (newView);
    setFont (newFont);
    setOldFontSize (getFont ().getSize ());
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="86" endline="92">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    swapFont ();
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="94" endline="101">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    swapFont ();
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="103" endline="109">
protected void swapFont () {
    setOldFontSize (replaceFontSize ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        ((TextFigure) fe.nextFigure ()).setFont (getFont ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="111" endline="115">
private int replaceFontSize () {
    int tempFontSize = getFont ().getSize ();
    setFont (new Font (getFont ().getName (), getFont ().getStyle (), getOldFontSize ()));
    return tempFontSize;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="116" endline="118">
protected void setFont (Font newFont) {
    myFont = newFont;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="120" endline="122">
public Font getFont () {
    return myFont;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="124" endline="126">
protected void setOldFontSize (int newOldFontSize) {
    myOldFontSize = newOldFontSize;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FontSizeHandle.java" startline="128" endline="130">
public int getOldFontSize () {
    return myOldFontSize;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="38" endline="40">
public ArrowTip () {
    this (0.40, 8, 8);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="45" endline="49">
public ArrowTip (double angle, double outerRadius, double innerRadius) {
    setAngle (angle);
    setOuterRadius (outerRadius);
    setInnerRadius (innerRadius);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="54" endline="57">
public Polygon outline (int x1, int y1, int x2, int y2) {
    double dir = Math.PI / 2 - Math.atan2 (x2 - x1, y2 - y1);
    return outline (x1, y1, dir);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="59" endline="68">
private Polygon outline (int x, int y, double direction) {
    Polygon shape = new Polygon ();
    shape.addPoint (x, y);
    addPointRelative (shape, x, y, getOuterRadius (), direction - getAngle ());
    addPointRelative (shape, x, y, getInnerRadius (), direction);
    addPointRelative (shape, x, y, getOuterRadius (), direction + getAngle ());
    shape.addPoint (x, y);
    return shape;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="70" endline="74">
private void addPointRelative (Polygon shape, int x, int y, double radius, double angle) {
    shape.addPoint (x + (int) (radius * Math.cos (angle)), y + (int) (radius * Math.sin (angle)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="79" endline="84">
public void write (StorableOutput dw) {
    dw.writeDouble (getAngle ());
    dw.writeDouble (getOuterRadius ());
    dw.writeDouble (getInnerRadius ());
    super.write (dw);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="89" endline="94">
public void read (StorableInput dr) throws IOException {
    setAngle (dr.readDouble ());
    setOuterRadius (dr.readDouble ());
    setInnerRadius (dr.readDouble ());
    super.read (dr);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="102" endline="104">
protected void setAngle (double newAngle) {
    fAngle = newAngle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="112" endline="114">
protected double getAngle () {
    return fAngle;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="119" endline="121">
protected void setInnerRadius (double newInnerRadius) {
    fInnerRadius = newInnerRadius;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="126" endline="128">
protected double getInnerRadius () {
    return fInnerRadius;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="133" endline="135">
protected void setOuterRadius (double newOuterRadius) {
    fOuterRadius = newOuterRadius;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ArrowTip.java" startline="140" endline="142">
protected double getOuterRadius () {
    return fOuterRadius;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="37" endline="38">
public BorderDecorator () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="40" endline="42">
public BorderDecorator (Figure figure) {
    super (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="48" endline="50">
protected void initialize () {
    setBorderOffset (new Point (3, 3));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="52" endline="54">
public void setBorderOffset (Point newBorderOffset) {
    myBorderOffset = newBorderOffset;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="56" endline="63">
public Point getBorderOffset () {
    if (myBorderOffset == null) {
        return new Point (0, 0);
    } else {
        return myBorderOffset;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="68" endline="77">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    super.draw (g);
    g.setColor (Color.white);
    g.drawLine (r.x, r.y, r.x, r.y + r.height);
    g.drawLine (r.x, r.y, r.x + r.width, r.y);
    g.setColor (Color.gray);
    g.drawLine (r.x + r.width, r.y, r.x + r.width, r.y + r.height);
    g.drawLine (r.x, r.y + r.height, r.x + r.width, r.y + r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="82" endline="86">
public Rectangle displayBox () {
    Rectangle r = getDecoratedFigure ().displayBox ();
    r.grow (getBorderOffset ().x, getBorderOffset ().y);
    return r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="91" endline="95">
public void figureInvalidated (FigureChangeEvent e) {
    Rectangle rect = e.getInvalidatedRectangle ();
    rect.grow (getBorderOffset ().x, getBorderOffset ().y);
    super.figureInvalidated (new FigureChangeEvent (this, rect, e));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderDecorator.java" startline="97" endline="105">
public Insets connectionInsets () {
    Insets i = super.connectionInsets ();
    i.top -= getBorderOffset ().y;
    i.bottom -= getBorderOffset ().y;
    i.left -= getBorderOffset ().x;
    i.right -= getBorderOffset ().x;
    return i;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="37" endline="39">
public ScribbleTool (DrawingEditor newDrawingEditor) {
    super (newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="41" endline="43">
public void activate () {
    super.activate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="45" endline="55">
public void deactivate () {
    super.deactivate ();
    if (fScribble != null) {
        if (fScribble.size ().width < 4 || fScribble.size ().height < 4) {
            getActiveDrawing ().remove (fScribble);
            setUndoActivity (null);
        }
        fScribble = null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="57" endline="68">
private void point (int x, int y) {
    if (fScribble == null) {
        fScribble = new PolyLineFigure (x, y);
        setAddedFigure (view ().add (fScribble));
    } else if (fLastX != x || fLastY != y) {
        fScribble.addPoint (x, y);
    }

    fLastX = x;
    fLastY = y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="70" endline="85">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    if (e.getClickCount () >= 2) {
        setUndoActivity (createUndoActivity ());
        getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
    } else {
        point (e.getX (), e.getY ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="87" endline="91">
public void mouseDrag (MouseEvent e, int x, int y) {
    if (fScribble != null) {
        point (e.getX (), e.getY ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="93" endline="99">
public void mouseUp (MouseEvent e, int x, int y) {
    super.mouseUp (e, x, y);
    if (e.getClickCount () >= 2) {
        editor ().toolDone ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="105" endline="107">
protected Figure getAddedFigure () {
    return myAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="109" endline="111">
private void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ScribbleTool.java" startline="116" endline="118">
protected Undoable createUndoActivity () {
    return new PasteCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="29" endline="32">
public ElbowHandle (LineConnection owner, int segment) {
    super (owner);
    fSegment = segment;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="34" endline="37">
public void invokeStart (int x, int y, DrawingView view) {
    fLastX = x;
    fLastY = y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="39" endline="62">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    LineConnection line = ownerConnection ();
    Point p1 = line.pointAt (fSegment);
    Point p2 = line.pointAt (fSegment + 1);
    int ddx = x - fLastX;
    int ddy = y - fLastY;
    Point np1;
    Point np2;
    if (isVertical (p1, p2)) {
        int cx = constrainX (p1.x + ddx);
        np1 = new Point (cx, p1.y);
        np2 = new Point (cx, p2.y);
    } else {
        int cy = constrainY (p1.y + ddy);
        np1 = new Point (p1.x, cy);
        np2 = new Point (p2.x, cy);
    }
    line.setPointAt (np1, fSegment);
    line.setPointAt (np2, fSegment + 1);
    fLastX = x;
    fLastY = y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="64" endline="66">
private boolean isVertical (Point p1, Point p2) {
    return p1.x == p2.x;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="68" endline="74">
public Point locate () {
    LineConnection line = ownerConnection ();
    int segment = Math.min (fSegment, line.pointCount () - 2);
    Point p1 = line.pointAt (segment);
    Point p2 = line.pointAt (segment + 1);
    return new Point ((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="76" endline="84">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.yellow);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="86" endline="109">
private int constrainX (int x) {
    LineConnection line = ownerConnection ();
    Figure startFigure = line.getStartConnector ().owner ();
    Figure endFigure = line.getEndConnector ().owner ();
    Rectangle start = startFigure.displayBox ();
    Rectangle end = endFigure.displayBox ();
    Insets i1 = startFigure.connectionInsets ();
    Insets i2 = endFigure.connectionInsets ();
    int r1x, r1width, r2x, r2width;
    r1x = start.x + i1.left;
    r1width = start.width - i1.left - i1.right - 1;
    r2x = end.x + i2.left;
    r2width = end.width - i2.left - i2.right - 1;
    if (fSegment == 0) {
        x = Geom.range (r1x, r1x + r1width, x);
    }
    if (fSegment == line.pointCount () - 2) {
        x = Geom.range (r2x, r2x + r2width, x);
    }
    return x;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="111" endline="133">
private int constrainY (int y) {
    LineConnection line = ownerConnection ();
    Figure startFigure = line.getStartConnector ().owner ();
    Figure endFigure = line.getEndConnector ().owner ();
    Rectangle start = startFigure.displayBox ();
    Rectangle end = endFigure.displayBox ();
    Insets i1 = startFigure.connectionInsets ();
    Insets i2 = endFigure.connectionInsets ();
    int r1y, r1height, r2y, r2height;
    r1y = start.y + i1.top;
    r1height = start.height - i1.top - i1.bottom - 1;
    r2y = end.y + i2.top;
    r2height = end.height - i2.top - i2.bottom - 1;
    if (fSegment == 0) {
        y = Geom.range (r1y, r1y + r1height, y);
    }
    if (fSegment == line.pointCount () - 2) {
        y = Geom.range (r2y, r2y + r2height, y);
    }
    return y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowHandle.java" startline="135" endline="137">
private LineConnection ownerConnection () {
    return (LineConnection) owner ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ShortestDistanceConnector.java" startline="37" endline="39">
public ShortestDistanceConnector () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ShortestDistanceConnector.java" startline="41" endline="43">
public ShortestDistanceConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ShortestDistanceConnector.java" startline="45" endline="47">
public Point findStart (ConnectionFigure connection) {
    return findPoint (connection, true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ShortestDistanceConnector.java" startline="49" endline="51">
public Point findEnd (ConnectionFigure connection) {
    return findPoint (connection, false);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ShortestDistanceConnector.java" startline="53" endline="156">
protected Point findPoint (ConnectionFigure connection, boolean getStart) {
    Figure startFigure = connection.getStartConnector ().owner ();
    Figure endFigure = connection.getEndConnector ().owner ();
    Rectangle r1 = startFigure.displayBox ();
    Rectangle r2 = endFigure.displayBox ();
    Insets i1 = startFigure.connectionInsets ();
    Insets i2 = endFigure.connectionInsets ();
    Point p1, p2;
    Point start = null, end = null, s = null, e = null;
    long len2 = Long.MAX_VALUE, l2;
    int x1, x2, y1, y2;
    int xmin, xmax, ymin, ymax;
    int r1x, r1width, r2x, r2width, r1y, r1height, r2y, r2height;
    r1x = r1.x + i1.left;
    r1width = r1.width - i1.left - i1.right - 1;
    r2x = r2.x + i2.left;
    r2width = r2.width - i2.left - i2.right - 1;
    if (r1x + r1width < r2x) {
        x1 = r1x + r1width;
        x2 = r2x;
    } else if (r1x > r2x + r2width) {
        x1 = r1x;
        x2 = r2x + r2width;
    } else {
        xmax = Math.max (r1x, r2x);
        xmin = Math.min (r1x + r1width, r2x + r2width);
        x1 = x2 = (xmax + xmin) / 2;
    }

    r1y = r1.y + i1.top;
    r1height = r1.height - i1.top - i1.bottom - 1;
    r2y = r2.y + i2.top;
    r2height = r2.height - i2.top - i2.bottom - 1;
    if (r1y + r1height < r2y) {
        y1 = r1y + r1height;
        y2 = r2y;
    } else if (r1y > r2y + r2height) {
        y1 = r1y;
        y2 = r2y + r2height;
    } else {
        ymax = Math.max (r1y, r2y);
        ymin = Math.min (r1y + r1height, r2y + r2height);
        y1 = y2 = (ymax + ymin) / 2;
    }

    for (int i = 0;
    i < 4; i ++) {
        switch (i) {
            case 0 :
                p1 = Geom.east (r1);
                p2 = Geom.west (r2);
                s = new Point (p1.x, y1);
                e = new Point (p2.x, y2);
                break;
            case 1 :
                p1 = Geom.west (r1);
                p2 = Geom.east (r2);
                s = new Point (p1.x, y1);
                e = new Point (p2.x, y2);
                break;
            case 2 :
                p1 = Geom.north (r1);
                p2 = Geom.south (r2);
                s = new Point (x1, p1.y);
                e = new Point (x2, p2.y);
                break;
            case 3 :
                p1 = Geom.south (r1);
                p2 = Geom.north (r2);
                s = new Point (x1, p1.y);
                e = new Point (x2, p2.y);
                break;
        }
        l2 = Geom.length2 (s.x, s.y, e.x, e.y);
        if (l2 < len2) {
            start = s;
            end = e;
            len2 = l2;
        }
    }
    if (getStart) {
        return start;
    }
    return end;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineLocator.java" startline="29" endline="31">
public PolyLineLocator (int index) {
    fIndex = index;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineLocator.java" startline="33" endline="40">
public Point locate (Figure owner) {
    PolyLineFigure plf = (PolyLineFigure) owner;
    if (fIndex < plf.pointCount ()) {
        return ((PolyLineFigure) owner).pointAt (fIndex);
    }
    return new Point (0, 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="35" endline="38">
public InsertImageCommand (String name, String newImageName, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
    myImageName = newImageName;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="40" endline="45">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    ((InsertImageCommand.UndoActivity) getUndoActivity ()).insertImage ();
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="50" endline="52">
protected Undoable createUndoActivity () {
    return new InsertImageCommand.UndoActivity (view (), myImageName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="67" endline="72">
UndoActivity (DrawingView newDrawingView, String newAffectedImageName) {
    super (newDrawingView);
    myAffectedImageName = newAffectedImageName;
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="74" endline="76">
protected void setImageFigure (ImageFigure newImageFigure) {
    myAffectedImageFigure = new WeakReference (newImageFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="78" endline="89">
protected ImageFigure getImageFigure () {
    if ((myAffectedImageFigure == null) || (myAffectedImageFigure.get () == null)) {
        Image image = Iconkit.instance ().registerAndLoadImage ((Component) getDrawingView (), myAffectedImageName);
        setImageFigure (new ImageFigure (image, myAffectedImageName, getDrawingView ().lastClick ()));
    }
    return (ImageFigure) myAffectedImageFigure.get ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="91" endline="101">
public boolean undo () {
    if (super.undo ()) {
        getDrawingView ().clearSelection ();
        getDrawingView ().drawing ().orphan (getImageFigure ());
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="103" endline="111">
public boolean redo () {
    if (isRedoable ()) {
        insertImage ();
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/InsertImageCommand.java" startline="113" endline="117">
protected void insertImage () {
    getDrawingView ().add (getImageFigure ());
    getDrawingView ().clearSelection ();
    getDrawingView ().addToSelection (getImageFigure ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="36" endline="39">
public PolyLineHandle (PolyLineFigure owner, Locator l, int index) {
    super (owner, l);
    fIndex = index;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="41" endline="45">
public void invokeStart (int x, int y, DrawingView view) {
    setUndoActivity (createUndoActivity (view, fIndex));
    getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (owner ()));
    ((PolyLineHandle.UndoActivity) getUndoActivity ()).setOldPoint (new Point (x, y));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="47" endline="50">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    int fIndex = ((PolyLineHandle.UndoActivity) getUndoActivity ()).getPointIndex ();
    myOwner ().setPointAt (new Point (x, y), fIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="52" endline="56">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    if ((x == anchorX) && (y == anchorY)) {
        setUndoActivity (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="58" endline="60">
private PolyLineFigure myOwner () {
    return (PolyLineFigure) owner ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="65" endline="67">
protected Undoable createUndoActivity (DrawingView newView, int newPointIndex) {
    return new PolyLineHandle.UndoActivity (newView, newPointIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="73" endline="78">
public UndoActivity (DrawingView newView, int newPointIndex) {
    super (newView);
    setUndoable (true);
    setRedoable (true);
    setPointIndex (newPointIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="80" endline="86">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    return movePointToOldLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="88" endline="95">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    return movePointToOldLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="97" endline="108">
protected boolean movePointToOldLocation () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    PolyLineFigure figure = (PolyLineFigure) fe.nextFigure ();
    Point backupPoint = figure.pointAt (getPointIndex ());
    figure.setPointAt (getOldPoint (), getPointIndex ());
    setOldPoint (backupPoint);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="110" endline="112">
public void setOldPoint (Point newOldPoint) {
    myOldPoint = newOldPoint;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="114" endline="116">
public Point getOldPoint () {
    return myOldPoint;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="118" endline="120">
public void setPointIndex (int newPointIndex) {
    myPointIndex = newPointIndex;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineHandle.java" startline="122" endline="124">
public int getPointIndex () {
    return myPointIndex;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupFigure.java" startline="38" endline="40">
public boolean canConnect () {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupFigure.java" startline="46" endline="54">
public Rectangle displayBox () {
    FigureEnumeration fe = figures ();
    Rectangle r = fe.nextFigure ().displayBox ();
    while (fe.hasNextFigure ()) {
        r.add (fe.nextFigure ().displayBox ());
    }
    return r;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupFigure.java" startline="56" endline="59">
public void basicDisplayBox (Point origin, Point corner) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupFigure.java" startline="61" endline="63">
public FigureEnumeration decompose () {
    return new FigureEnumerator (fFigures);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupFigure.java" startline="68" endline="75">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    handles.add (new GroupHandle (this, RelativeLocator.northWest ()));
    handles.add (new GroupHandle (this, RelativeLocator.northEast ()));
    handles.add (new GroupHandle (this, RelativeLocator.southWest ()));
    handles.add (new GroupHandle (this, RelativeLocator.southEast ()));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupFigure.java" startline="80" endline="86">
public void setAttribute (String name, Object value) {
    super.setAttribute (name, value);
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (name, value);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="34" endline="36">
public GroupCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="38" endline="44">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    ((GroupCommand.UndoActivity) getUndoActivity ()).groupFigures ();
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="46" endline="48">
public boolean isExecutableWithView () {
    return view ().selectionCount () > 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="53" endline="55">
protected Undoable createUndoActivity () {
    return new GroupCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="58" endline="62">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="64" endline="93">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    getDrawingView ().drawing ().orphanAll (getAffectedFigures ());
    List affectedFigures = CollectionsFactory.current ().createList ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        getDrawingView ().drawing ().addAll (currentFigure.figures ());
        getDrawingView ().addToSelectionAll (currentFigure.figures ());
        FigureEnumeration groupedFigures = currentFigure.figures ();
        while (groupedFigures.hasNextFigure ()) {
            affectedFigures.add (groupedFigures.nextFigure ());
        }
    }
    setAffectedFigures (new FigureEnumerator (affectedFigures));
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="95" endline="103">
public boolean redo () {
    if (isRedoable ()) {
        groupFigures ();
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupCommand.java" startline="105" endline="120">
public void groupFigures () {
    getDrawingView ().drawing ().orphanAll (getAffectedFigures ());
    getDrawingView ().clearSelection ();
    GroupFigure group = new GroupFigure ();
    group.addAll (getAffectedFigures ());
    Figure figure = getDrawingView ().drawing ().add (group);
    getDrawingView ().addToSelection (figure);
    List affectedFigures = CollectionsFactory.current ().createList ();
    affectedFigures.add (figure);
    setAffectedFigures (new FigureEnumerator (affectedFigures));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="58" endline="58">
protected AttributeFigure () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="64" endline="75">
public void draw (Graphics g) {
    Color fill = getFillColor ();
    if (! ColorMap.isTransparent (fill)) {
        g.setColor (fill);
        drawBackground (g);
    }
    Color frame = getFrameColor ();
    if (! ColorMap.isTransparent (frame)) {
        g.setColor (frame);
        drawFrame (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="81" endline="82">
protected void drawBackground (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="88" endline="89">
protected void drawFrame (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="96" endline="98">
public Color getFillColor () {
    return (Color) getAttribute (FigureAttributeConstant.FILL_COLOR);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="105" endline="107">
public Color getFrameColor () {
    return (Color) getAttribute (FigureAttributeConstant.FRAME_COLOR);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="111" endline="120">
private static void initializeAttributes () {
    fgDefaultAttributes = new FigureAttributes ();
    fgDefaultAttributes.set (FigureAttributeConstant.FRAME_COLOR, Color.black);
    fgDefaultAttributes.set (FigureAttributeConstant.FILL_COLOR, new Color (0x70DB93));
    fgDefaultAttributes.set (FigureAttributeConstant.TEXT_COLOR, Color.black);
    fgDefaultAttributes.set (FigureAttributeConstant.ARROW_MODE, new Integer (0));
    fgDefaultAttributes.set (FigureAttributeConstant.FONT_NAME, "Helvetica");
    fgDefaultAttributes.set (FigureAttributeConstant.FONT_SIZE, new Integer (12));
    fgDefaultAttributes.set (FigureAttributeConstant.FONT_STYLE, new Integer (Font.PLAIN));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="126" endline="132">
public static Object setDefaultAttribute (String name, Object value) {
    Object currentValue = getDefaultAttribute (name);
    fgDefaultAttributes.set (FigureAttributeConstant.getConstant (name), value);
    return currentValue;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="144" endline="155">
public static Object initDefaultAttribute (String name, Object value) {
    Object currentValue = getDefaultAttribute (name);
    if (currentValue != null) {
        return currentValue;
    }
    fgDefaultAttributes.set (FigureAttributeConstant.getConstant (name), value);
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="161" endline="166">
public static Object getDefaultAttribute (String name) {
    if (fgDefaultAttributes == null) {
        initializeAttributes ();
    }
    return fgDefaultAttributes.get (FigureAttributeConstant.getConstant (name));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="168" endline="173">
public static Object getDefaultAttribute (FigureAttributeConstant attributeConstant) {
    if (fgDefaultAttributes == null) {
        initializeAttributes ();
    }
    return fgDefaultAttributes.get (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="180" endline="182">
public Object getAttribute (String name) {
    return getAttribute (FigureAttributeConstant.getConstant (name));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="184" endline="191">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    if (fAttributes != null) {
        if (fAttributes.hasDefined (attributeConstant)) {
            return fAttributes.get (attributeConstant);
        }
    }
    return getDefaultAttribute (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="196" endline="198">
public void setAttribute (String name, Object value) {
    setAttribute (FigureAttributeConstant.getConstant (name), value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="200" endline="206">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    if (fAttributes == null) {
        fAttributes = new FigureAttributes ();
    }
    fAttributes.set (attributeConstant, value);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="211" endline="220">
public void write (StorableOutput dw) {
    super.write (dw);
    if (fAttributes == null) {
        dw.writeString ("no_attributes");
    } else {
        dw.writeString ("attributes");
        fAttributes.write (dw);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="225" endline="232">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    String s = dr.readString ();
    if (s.toLowerCase ().equals ("attributes")) {
        fAttributes = new FigureAttributes ();
        fAttributes.read (dr);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AttributeFigure.java" startline="234" endline="247">
private void writeObject (ObjectOutputStream o) throws IOException {
    Object associatedMenu = getAttribute (Figure.POPUP_MENU);
    if (associatedMenu != null) {
        setAttribute (Figure.POPUP_MENU, null);
    }
    o.defaultWriteObject ();
    if (associatedMenu != null) {
        setAttribute (Figure.POPUP_MENU, associatedMenu);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="32" endline="35">
public LineFigure () {
    addPoint (0, 0);
    addPoint (0, 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="40" endline="42">
public Point startPoint () {
    return pointAt (0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="47" endline="49">
public Point endPoint () {
    return pointAt (1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="54" endline="56">
public void startPoint (int x, int y) {
    setPointAt (new Point (x, y), 0);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="61" endline="63">
public void endPoint (int x, int y) {
    setPointAt (new Point (x, y), 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="68" endline="71">
public void setPoints (Point start, Point end) {
    setPointAt (start, 0);
    setPointAt (end, 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineFigure.java" startline="73" endline="75">
public void basicDisplayBox (Point origin, Point corner) {
    setPoints (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="36" endline="38">
public ElbowConnection () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="40" endline="43">
public void updateConnection () {
    super.updateConnection ();
    updatePoints ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="45" endline="46">
public void layoutConnection () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="51" endline="62">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList (fPoints.size () * 2);
    handles.add (new ChangeConnectionStartHandle (this));
    for (int i = 1;
    i < fPoints.size () - 1; i ++) {
        handles.add (new NullHandle (this, locator (i)));
    }
    handles.add (new ChangeConnectionEndHandle (this));
    for (int i = 0;
    i < fPoints.size () - 1; i ++) {
        handles.add (new ElbowHandle (this, i));
    }
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="64" endline="66">
public Locator connectedTextLocator (Figure f) {
    return new ElbowTextLocator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="68" endline="96">
protected void updatePoints () {
    willChange ();
    Point start = startPoint ();
    Point end = endPoint ();
    fPoints.clear ();
    fPoints.add (start);
    if (start.x == end.x || start.y == end.y) {
        fPoints.add (end);
    } else {
        Rectangle r1 = getStartConnector ().owner ().displayBox ();
        Rectangle r2 = getEndConnector ().owner ().displayBox ();
        int dir = Geom.direction (r1.x + r1.width / 2, r1.y + r1.height / 2, r2.x + r2.width / 2, r2.y + r2.height / 2);
        if (dir == Geom.NORTH || dir == Geom.SOUTH) {
            fPoints.add (new Point (start.x, (start.y + end.y) / 2));
            fPoints.add (new Point (end.x, (start.y + end.y) / 2));
        } else {
            fPoints.add (new Point ((start.x + end.x) / 2, start.y));
            fPoints.add (new Point ((start.x + end.x) / 2, end.y));
        }
        fPoints.add (end);
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ElbowConnection.java" startline="100" endline="103">
public Point locate (Figure owner) {
    Point p = owner.center ();
    return new Point (p.x, p.y - 10);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="48" endline="50">
public PolyLineFigure () {
    this (4);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="52" endline="54">
public PolyLineFigure (int size) {
    fPoints = CollectionsFactory.current ().createList (size);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="56" endline="59">
public PolyLineFigure (int x, int y) {
    fPoints = CollectionsFactory.current ().createList ();
    fPoints.add (new Point (x, y));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="61" endline="76">
public Rectangle displayBox () {
    Iterator iter = points ();
    if (iter.hasNext ()) {
        Rectangle r = new Rectangle ((Point) iter.next ());
        while (iter.hasNext ()) {
            r.add ((Point) iter.next ());
        }
        return r;
    } else {
        return new Rectangle ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="78" endline="80">
public boolean isEmpty () {
    return (size ().width < 3) && (size ().height < 3);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="82" endline="88">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList (fPoints.size ());
    for (int i = 0;
    i < fPoints.size (); i ++) {
        handles.add (new PolyLineHandle (this, locator (i), i));
    }
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="90" endline="91">
public void basicDisplayBox (Point origin, Point corner) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="96" endline="99">
public void addPoint (int x, int y) {
    fPoints.add (new Point (x, y));
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="101" endline="103">
public Iterator points () {
    return fPoints.iterator ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="105" endline="107">
public int pointCount () {
    return fPoints.size ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="109" endline="114">
protected void basicMoveBy (int dx, int dy) {
    Iterator iter = points ();
    while (iter.hasNext ()) {
        ((Point) iter.next ()).translate (dx, dy);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="119" endline="123">
public void setPointAt (Point p, int i) {
    willChange ();
    fPoints.set (i, p);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="128" endline="131">
public void insertPointAt (Point p, int i) {
    fPoints.add (i, p);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="133" endline="137">
public void removePointAt (int i) {
    willChange ();
    fPoints.remove (i);
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="143" endline="149">
public int splitSegment (int x, int y) {
    int i = findSegment (x, y);
    if (i != - 1) {
        insertPointAt (new Point (x, y), i + 1);
    }
    return i + 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="151" endline="153">
public Point pointAt (int i) {
    return (Point) fPoints.get (i);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="160" endline="169">
public boolean joinSegments (int x, int y) {
    for (int i = 1;
    i < fPoints.size () - 1; i ++) {
        Point p = pointAt (i);
        if (Geom.length (x, y, p.x, p.y) < 3) {
            removePointAt (i);
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="171" endline="173">
public Connector connectorAt (int x, int y) {
    return new PolyLineConnector (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="178" endline="180">
public void setStartDecoration (LineDecoration l) {
    fStartDecoration = l;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="185" endline="187">
public LineDecoration getStartDecoration () {
    return fStartDecoration;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="192" endline="194">
public void setEndDecoration (LineDecoration l) {
    fEndDecoration = l;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="199" endline="201">
public LineDecoration getEndDecoration () {
    return fEndDecoration;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="203" endline="212">
public void draw (Graphics g) {
    g.setColor (getFrameColor ());
    Point p1, p2;
    for (int i = 0;
    i < fPoints.size () - 1; i ++) {
        p1 = pointAt (i);
        p2 = pointAt (i + 1);
        drawLine (g, p1.x, p1.y, p2.x, p2.y);
    }
    decorate (g);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="218" endline="220">
protected void drawLine (Graphics g, int x1, int y1, int x2, int y2) {
    g.drawLine (x1, y1, x2, y2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="222" endline="237">
public boolean containsPoint (int x, int y) {
    Rectangle bounds = displayBox ();
    bounds.grow (4, 4);
    if (! bounds.contains (x, y)) {
        return false;
    }
    for (int i = 0;
    i < fPoints.size () - 1; i ++) {
        Point p1 = pointAt (i);
        Point p2 = pointAt (i + 1);
        if (Geom.lineContainsPoint (p1.x, p1.y, p2.x, p2.y, x, y)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="244" endline="253">
public int findSegment (int x, int y) {
    for (int i = 0;
    i < fPoints.size () - 1; i ++) {
        Point p1 = pointAt (i);
        Point p2 = pointAt (i + 1);
        if (Geom.lineContainsPoint (p1.x, p1.y, p2.x, p2.y, x, y)) {
            return i;
        }
    }
    return - 1;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="255" endline="266">
private void decorate (Graphics g) {
    if (getStartDecoration () != null) {
        Point p1 = pointAt (0);
        Point p2 = pointAt (1);
        getStartDecoration ().draw (g, p1.x, p1.y, p2.x, p2.y);
    }
    if (getEndDecoration () != null) {
        Point p3 = pointAt (fPoints.size () - 2);
        Point p4 = pointAt (fPoints.size () - 1);
        getEndDecoration ().draw (g, p4.x, p4.y, p3.x, p3.y);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="275" endline="277">
public Object getAttribute (String name) {
    return getAttribute (FigureAttributeConstant.getConstant (name));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="284" endline="299">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    if (attributeConstant.equals (FigureAttributeConstant.FRAME_COLOR)) {
        return getFrameColor ();
    } else if (attributeConstant.equals (FigureAttributeConstant.ARROW_MODE)) {
        int value = 0;
        if (getStartDecoration () != null) {
            value |= ARROW_TIP_START;
        }
        if (getEndDecoration () != null) {
            value |= ARROW_TIP_END;
        }
        return new Integer (value);
    }

    return super.getAttribute (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="308" endline="310">
public void setAttribute (String name, Object value) {
    setAttribute (FigureAttributeConstant.getConstant (name), value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="317" endline="344">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    if (attributeConstant.equals (FigureAttributeConstant.FRAME_COLOR)) {
        setFrameColor ((Color) value);
        changed ();
    } else if (attributeConstant.equals (FigureAttributeConstant.ARROW_MODE)) {
        Integer intObj = (Integer) value;
        if (intObj != null) {
            int decoration = intObj.intValue ();
            if ((decoration & ARROW_TIP_START) != 0) {
                setStartDecoration (new ArrowTip ());
            } else {
                setStartDecoration (null);
            }
            if ((decoration & ARROW_TIP_END) != 0) {
                setEndDecoration (new ArrowTip ());
            } else {
                setEndDecoration (null);
            }
        }
        changed ();
    } else {
        super.setAttribute (attributeConstant, value);
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="346" endline="358">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fPoints.size ());
    Iterator iter = points ();
    while (iter.hasNext ()) {
        Point p = (Point) iter.next ();
        dw.writeInt (p.x);
        dw.writeInt (p.y);
    }
    dw.writeStorable (fStartDecoration);
    dw.writeStorable (fEndDecoration);
    dw.writeColor (fFrameColor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="360" endline="372">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    int size = dr.readInt ();
    fPoints = CollectionsFactory.current ().createList (size);
    for (int i = 0;
    i < size; i ++) {
        int x = dr.readInt ();
        int y = dr.readInt ();
        fPoints.add (new Point (x, y));
    }
    setStartDecoration ((LineDecoration) dr.readStorable ());
    setEndDecoration ((LineDecoration) dr.readStorable ());
    fFrameColor = dr.readColor ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="377" endline="379">
public static Locator locator (int pointIndex) {
    return new PolyLineLocator (pointIndex);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="381" endline="383">
protected Color getFrameColor () {
    return fFrameColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="385" endline="387">
protected void setFrameColor (Color c) {
    fFrameColor = c;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineFigure.java" startline="392" endline="402">
protected Rectangle invalidateRectangle (Rectangle r) {
    Rectangle parentR = super.invalidateRectangle (r);
    if (getStartDecoration () != null) {
        parentR.add (getStartDecoration ().displayBox ());
    }
    if (getEndDecoration () != null) {
        parentR.add (getEndDecoration ().displayBox ());
    }
    return parentR;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="58" endline="65">
public TextFigure () {
    fOriginX = 0;
    fOriginY = 0;
    fFont = createCurrentFont ();
    setAttribute (FigureAttributeConstant.FILL_COLOR, ColorMap.color ("None"));
    fText = new String ("");
    fSizeIsDirty = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="67" endline="74">
public void moveBy (int x, int y) {
    willChange ();
    basicMoveBy (x, y);
    if (getLocator () != null) {
        getLocator ().moveBy (x, y);
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="76" endline="79">
protected void basicMoveBy (int x, int y) {
    fOriginX += x;
    fOriginY += y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="81" endline="84">
public void basicDisplayBox (Point newOrigin, Point newCorner) {
    fOriginX = newOrigin.x;
    fOriginY = newOrigin.y;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="86" endline="89">
public Rectangle displayBox () {
    Dimension extent = textExtent ();
    return new Rectangle (fOriginX, fOriginY, extent.width, extent.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="91" endline="93">
public Rectangle textDisplayBox () {
    return displayBox ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="98" endline="100">
public boolean readOnly () {
    return fIsReadOnly;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="105" endline="107">
public void setReadOnly (boolean isReadOnly) {
    fIsReadOnly = isReadOnly;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="112" endline="114">
public Font getFont () {
    return fFont;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="124" endline="126">
public Figure getRepresentingFigure () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="131" endline="136">
public void setFont (Font newFont) {
    willChange ();
    fFont = newFont;
    markDirty ();
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="141" endline="144">
public void changed () {
    super.changed ();
    updateLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="152" endline="154">
public Object getAttribute (String name) {
    return getAttribute (FigureAttributeConstant.getConstant (name));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="160" endline="172">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    Font font = getFont ();
    if (attributeConstant.equals (FigureAttributeConstant.FONT_SIZE)) {
        return new Integer (font.getSize ());
    }
    if (attributeConstant.equals (FigureAttributeConstant.FONT_STYLE)) {
        return new Integer (font.getStyle ());
    }
    if (attributeConstant.equals (FigureAttributeConstant.FONT_NAME)) {
        return font.getName ();
    }
    return super.getAttribute (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="180" endline="182">
public void setAttribute (String name, Object value) {
    setAttribute (FigureAttributeConstant.getConstant (name), value);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="188" endline="212">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    Font font = getFont ();
    if (attributeConstant.equals (FigureAttributeConstant.FONT_SIZE)) {
        Integer s = (Integer) value;
        setFont (new Font (font.getName (), font.getStyle (), s.intValue ()));
    } else if (attributeConstant.equals (FigureAttributeConstant.FONT_STYLE)) {
        Integer s = (Integer) value;
        int style = font.getStyle ();
        if (s.intValue () == Font.PLAIN) {
            style = font.PLAIN;
        } else {
            style = style ^ s.intValue ();
        }
        setFont (new Font (font.getName (), style, font.getSize ()));
    } else if (attributeConstant.equals (FigureAttributeConstant.FONT_NAME)) {
        String n = (String) value;
        setFont (new Font (n, font.getStyle (), font.getSize ()));
    } else {
        super.setAttribute (attributeConstant, value);
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="217" endline="219">
public String getText () {
    return fText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="224" endline="231">
public void setText (String newText) {
    if (! newText.equals (fText)) {
        willChange ();
        fText = new String (newText);
        markDirty ();
        changed ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="236" endline="238">
public boolean acceptsTyping () {
    return ! fIsReadOnly;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="240" endline="243">
public void drawBackground (Graphics g) {
    Rectangle r = displayBox ();
    g.fillRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="245" endline="250">
public void drawFrame (Graphics g) {
    g.setFont (fFont);
    g.setColor ((Color) getAttribute (FigureAttributeConstant.TEXT_COLOR));
    FontMetrics metrics = g.getFontMetrics (fFont);
    g.drawString (fText, fOriginX, fOriginY + metrics.getAscent ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="252" endline="261">
protected Dimension textExtent () {
    if (! fSizeIsDirty) {
        return new Dimension (fWidth, fHeight);
    }
    FontMetrics metrics = Toolkit.getDefaultToolkit ().getFontMetrics (fFont);
    fWidth = metrics.stringWidth (fText);
    fHeight = metrics.getHeight ();
    fSizeIsDirty = false;
    return new Dimension (metrics.stringWidth (fText), metrics.getHeight ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="263" endline="265">
protected void markDirty () {
    fSizeIsDirty = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="270" endline="277">
public int overlayColumns () {
    int length = getText ().length ();
    int columns = 20;
    if (length != 0) {
        columns = getText ().length () + 3;
    }
    return columns;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="279" endline="286">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    handles.add (new NullHandle (this, RelativeLocator.northWest ()));
    handles.add (new NullHandle (this, RelativeLocator.northEast ()));
    handles.add (new NullHandle (this, RelativeLocator.southEast ()));
    handles.add (new FontSizeHandle (this, RelativeLocator.southWest ()));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="288" endline="299">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fOriginX);
    dw.writeInt (fOriginY);
    dw.writeString (fText);
    dw.writeString (fFont.getName ());
    dw.writeInt (fFont.getStyle ());
    dw.writeInt (fFont.getSize ());
    dw.writeBoolean (fIsReadOnly);
    dw.writeStorable (getObservedFigure ());
    dw.writeStorable (getLocator ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="301" endline="315">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    markDirty ();
    fOriginX = dr.readInt ();
    fOriginY = dr.readInt ();
    fText = dr.readString ();
    fFont = new Font (dr.readString (), dr.readInt (), dr.readInt ());
    fIsReadOnly = dr.readBoolean ();
    setObservedFigure ((Figure) dr.readStorable ());
    if (getObservedFigure () != null) {
        getObservedFigure ().addFigureChangeListener (this);
    }
    setLocator ((OffsetLocator) dr.readStorable ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="317" endline="324">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    if (getObservedFigure () != null) {
        getObservedFigure ().addFigureChangeListener (this);
    }
    markDirty ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="326" endline="335">
public void connect (Figure figure) {
    if (getObservedFigure () != null) {
        getObservedFigure ().removeFigureChangeListener (this);
    }
    setObservedFigure (figure);
    setLocator (new OffsetLocator (getObservedFigure ().connectedTextLocator (this)));
    getObservedFigure ().addFigureChangeListener (this);
    updateLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="337" endline="339">
public void figureChanged (FigureChangeEvent e) {
    updateLocation ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="341" endline="346">
public void figureRemoved (FigureChangeEvent e) {
    if (listener () != null) {
        Rectangle rect = invalidateRectangle (displayBox ());
        listener ().figureRemoved (new FigureChangeEvent (this, rect, e));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="348" endline="348">
public void figureRequestRemove (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="349" endline="349">
public void figureInvalidated (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="350" endline="350">
public void figureRequestUpdate (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="356" endline="368">
protected void updateLocation () {
    if (getLocator () != null) {
        Point p = getLocator ().locate (getObservedFigure ());
        p.x -= size ().width / 2 + fOriginX;
        p.y -= size ().height / 2 + fOriginY;
        if (p.x != 0 || p.y != 0) {
            willChange ();
            basicMoveBy (p.x, p.y);
            changed ();
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="370" endline="373">
public void release () {
    super.release ();
    disconnect (getObservedFigure ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="378" endline="384">
public void disconnect (Figure disconnectFigure) {
    if (disconnectFigure != null) {
        disconnectFigure.removeFigureChangeListener (this);
    }
    setLocator (null);
    setObservedFigure (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="386" endline="388">
protected void setObservedFigure (Figure newObservedFigure) {
    fObservedFigure = newObservedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="390" endline="392">
public Figure getObservedFigure () {
    return fObservedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="394" endline="396">
protected void setLocator (OffsetLocator newLocator) {
    fLocator = newLocator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="398" endline="400">
protected OffsetLocator getLocator () {
    return fLocator;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="402" endline="404">
public TextHolder getTextHolder () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="409" endline="411">
static public Font createCurrentFont () {
    return new Font (fgCurrentFontName, fgCurrentFontStyle, fgCurrentFontSize);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="416" endline="418">
static public void setCurrentFontName (String name) {
    fgCurrentFontName = name;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="423" endline="425">
static public void setCurrentFontSize (int size) {
    fgCurrentFontSize = size;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextFigure.java" startline="430" endline="432">
static public void setCurrentFontStyle (int style) {
    fgCurrentFontStyle = style;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="42" endline="45">
public RoundRectangleFigure () {
    this (new Point (0, 0), new Point (0, 0));
    fArcWidth = fArcHeight = DEFAULT_ARC;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="47" endline="50">
public RoundRectangleFigure (Point origin, Point corner) {
    basicDisplayBox (origin, corner);
    fArcWidth = fArcHeight = DEFAULT_ARC;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="52" endline="55">
public void basicDisplayBox (Point origin, Point corner) {
    fDisplayBox = new Rectangle (origin);
    fDisplayBox.add (corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="60" endline="65">
public void setArc (int width, int height) {
    willChange ();
    fArcWidth = width;
    fArcHeight = height;
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="70" endline="72">
public Point getArc () {
    return new Point (fArcWidth, fArcHeight);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="74" endline="81">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    handles.add (new RadiusHandle (this));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="83" endline="89">
public Rectangle displayBox () {
    return new Rectangle (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="91" endline="93">
protected void basicMoveBy (int x, int y) {
    fDisplayBox.translate (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="95" endline="98">
public void drawBackground (Graphics g) {
    Rectangle r = displayBox ();
    g.fillRoundRect (r.x, r.y, r.width - 1, r.height - 1, fArcWidth, fArcHeight);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="100" endline="103">
public void drawFrame (Graphics g) {
    Rectangle r = displayBox ();
    g.drawRoundRect (r.x, r.y, r.width - 1, r.height - 1, fArcWidth, fArcHeight);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="105" endline="107">
public Insets connectionInsets () {
    return new Insets (fArcHeight / 2, fArcWidth / 2, fArcHeight / 2, fArcWidth / 2);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="109" endline="111">
public Connector connectorAt (int x, int y) {
    return new ShortestDistanceConnector (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="113" endline="121">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fDisplayBox.x);
    dw.writeInt (fDisplayBox.y);
    dw.writeInt (fDisplayBox.width);
    dw.writeInt (fDisplayBox.height);
    dw.writeInt (fArcWidth);
    dw.writeInt (fArcHeight);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RoundRectangleFigure.java" startline="123" endline="132">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fDisplayBox = new Rectangle (dr.readInt (), dr.readInt (), dr.readInt (), dr.readInt ());
    fArcWidth = dr.readInt ();
    fArcHeight = dr.readInt ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="30" endline="32">
public RadiusHandle (RoundRectangleFigure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="34" endline="39">
public void invokeStart (int x, int y, DrawingView view) {
    setUndoActivity (createUndoActivity (view));
    getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (owner ()));
    ((RadiusHandle.UndoActivity) getUndoActivity ()).setOldRadius (((RoundRectangleFigure) owner ()).getArc ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="41" endline="50">
public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    int dx = x - anchorX;
    int dy = y - anchorY;
    RoundRectangleFigure owner = (RoundRectangleFigure) owner ();
    Rectangle r = owner.displayBox ();
    Point originalRadius = ((RadiusHandle.UndoActivity) getUndoActivity ()).getOldRadius ();
    int rx = Geom.range (0, r.width, 2 * (originalRadius.x / 2 + dx));
    int ry = Geom.range (0, r.height, 2 * (originalRadius.y / 2 + dy));
    owner.setArc (rx, ry);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="52" endline="59">
public void invokeEnd (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Point currentRadius = ((RoundRectangleFigure) owner ()).getArc ();
    Point originalRadius = ((RadiusHandle.UndoActivity) getUndoActivity ()).getOldRadius ();
    if ((currentRadius.x == originalRadius.x) && (currentRadius.y == originalRadius.y)) {
        setUndoActivity (null);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="61" endline="66">
public Point locate () {
    RoundRectangleFigure owner = (RoundRectangleFigure) owner ();
    Point radius = owner.getArc ();
    Rectangle r = owner.displayBox ();
    return new Point (r.x + radius.x / 2 + OFFSET, r.y + radius.y / 2 + OFFSET);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="68" endline="76">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.yellow);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="81" endline="83">
protected Undoable createUndoActivity (DrawingView newView) {
    return new RadiusHandle.UndoActivity (newView);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="88" endline="92">
public UndoActivity (DrawingView newView) {
    super (newView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="94" endline="100">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    return resetRadius ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="102" endline="109">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    return resetRadius ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="111" endline="121">
protected boolean resetRadius () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    RoundRectangleFigure currentFigure = (RoundRectangleFigure) fe.nextFigure ();
    Point figureRadius = currentFigure.getArc ();
    currentFigure.setArc (getOldRadius ().x, getOldRadius ().y);
    setOldRadius (figureRadius);
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="123" endline="125">
protected void setOldRadius (Point newOldRadius) {
    myOldRadius = newOldRadius;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/RadiusHandle.java" startline="127" endline="129">
public Point getOldRadius () {
    return myOldRadius;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="45" endline="49">
public LineConnection () {
    super (4);
    setStartDecoration (new ArrowTip ());
    setEndDecoration (new ArrowTip ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="55" endline="57">
public boolean canConnect () {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="63" endline="70">
protected void basicMoveBy (int dx, int dy) {
    for (int i = 1;
    i < fPoints.size () - 1; i ++) {
        pointAt (i).translate (dx, dy);
    }
    updateConnection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="75" endline="81">
public void connectStart (Connector newStartConnector) {
    setStartConnector (newStartConnector);
    if (newStartConnector != null) {
        startFigure ().addDependendFigure (this);
        startFigure ().addFigureChangeListener (this);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="86" endline="93">
public void connectEnd (Connector newEndConnector) {
    setEndConnector (newEndConnector);
    if (newEndConnector != null) {
        endFigure ().addDependendFigure (this);
        endFigure ().addFigureChangeListener (this);
        handleConnect (startFigure (), endFigure ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="98" endline="102">
public void disconnectStart () {
    startFigure ().removeFigureChangeListener (this);
    startFigure ().removeDependendFigure (this);
    setStartConnector (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="107" endline="112">
public void disconnectEnd () {
    handleDisconnect (startFigure (), endFigure ());
    endFigure ().removeFigureChangeListener (this);
    endFigure ().removeDependendFigure (this);
    setEndConnector (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="118" endline="121">
public boolean connectsSame (ConnectionFigure other) {
    return other.getStartConnector () == getStartConnector () && other.getEndConnector () == getEndConnector ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="127" endline="127">
protected void handleDisconnect (Figure start, Figure end) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="133" endline="133">
protected void handleConnect (Figure start, Figure end) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="138" endline="143">
public Figure startFigure () {
    if (getStartConnector () != null) {
        return getStartConnector ().owner ();
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="148" endline="153">
public Figure endFigure () {
    if (getEndConnector () != null) {
        return getEndConnector ().owner ();
    }
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="155" endline="157">
protected void setStartConnector (Connector newStartConnector) {
    myStartConnector = newStartConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="162" endline="164">
public Connector getStartConnector () {
    return myStartConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="166" endline="168">
protected void setEndConnector (Connector newEndConnector) {
    myEndConnector = newEndConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="173" endline="175">
public Connector getEndConnector () {
    return myEndConnector;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="180" endline="182">
public boolean canConnect (Figure start, Figure end) {
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="187" endline="196">
public void startPoint (int x, int y) {
    willChange ();
    if (fPoints.size () == 0) {
        fPoints.add (new Point (x, y));
    } else {
        fPoints.set (0, new Point (x, y));
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="201" endline="210">
public void endPoint (int x, int y) {
    willChange ();
    if (fPoints.size () < 2) {
        fPoints.add (new Point (x, y));
    } else {
        fPoints.set (fPoints.size () - 1, new Point (x, y));
    }
    changed ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="215" endline="218">
public Point startPoint () {
    Point p = pointAt (0);
    return new Point (p.x, p.y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="223" endline="231">
public Point endPoint () {
    if (fPoints.size () > 0) {
        Point p = pointAt (fPoints.size () - 1);
        return new Point (p.x, p.y);
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="238" endline="246">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList (fPoints.size ());
    handles.add (new ChangeConnectionStartHandle (this));
    for (int i = 1;
    i < fPoints.size () - 1; i ++) {
        handles.add (new PolyLineHandle (this, locator (i), i));
    }
    handles.add (new ChangeConnectionEndHandle (this));
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="251" endline="254">
public void setPointAt (Point p, int i) {
    super.setPointAt (p, i);
    layoutConnection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="259" endline="262">
public void insertPointAt (Point p, int i) {
    super.insertPointAt (p, i);
    layoutConnection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="267" endline="270">
public void removePointAt (int i) {
    super.removePointAt (i);
    layoutConnection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="275" endline="290">
public void updateConnection () {
    if (getStartConnector () != null) {
        Point start = getStartConnector ().findStart (this);
        if (start != null) {
            startPoint (start.x, start.y);
        }
    }
    if (getEndConnector () != null) {
        Point end = getEndConnector ().findEnd (this);
        if (end != null) {
            endPoint (end.x, end.y);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="296" endline="298">
public void layoutConnection () {
    updateConnection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="300" endline="302">
public void figureChanged (FigureChangeEvent e) {
    updateConnection ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="304" endline="305">
public void figureRemoved (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="307" endline="308">
public void figureRequestRemove (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="310" endline="311">
public void figureInvalidated (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="313" endline="314">
public void figureRequestUpdate (FigureChangeEvent e) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="316" endline="325">
public void release () {
    super.release ();
    handleDisconnect (startFigure (), endFigure ());
    if (getStartConnector () != null) {
        startFigure ().removeFigureChangeListener (this);
    }
    if (getEndConnector () != null) {
        endFigure ().removeFigureChangeListener (this);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="327" endline="331">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getStartConnector ());
    dw.writeStorable (getEndConnector ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="333" endline="346">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    Connector start = (Connector) dr.readStorable ();
    if (start != null) {
        connectStart (start);
    }
    Connector end = (Connector) dr.readStorable ();
    if (end != null) {
        connectEnd (end);
    }
    if ((start != null) && (end != null)) {
        updateConnection ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="348" endline="359">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    if (getStartConnector () != null) {
        connectStart (getStartConnector ());
    }
    if (getEndConnector () != null) {
        connectEnd (getEndConnector ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/LineConnection.java" startline="361" endline="363">
public void visit (FigureVisitor visitor) {
    visitor.visitFigure (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="31" endline="33">
public ConnectedTextTool (DrawingEditor editor, Figure prototype) {
    super (editor, prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="39" endline="50">
public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    if (getTypingTarget () != null) {
        TextHolder textHolder = getTypingTarget ();
        setConnectedFigure (drawing ().findFigureInsideWithout (x, y, textHolder.getRepresentingFigure ()));
        if ((getConnectedFigure () != null) && (textHolder != null) && (getConnectedFigure ().getTextHolder () != textHolder)) {
            textHolder.connect (getConnectedFigure ().getDecoratedFigure ());
            getConnectedFigure ().addDependendFigure (getAddedFigure ());
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="52" endline="60">
protected void endEdit () {
    super.endEdit ();
    if ((getUndoActivity () != null) && (getUndoActivity () instanceof ConnectedTextTool.UndoActivity)) {
        ((ConnectedTextTool.UndoActivity) getUndoActivity ()).setConnectedFigure (getConnectedFigure ());
    } else if ((getConnectedFigure () != null) && isDeleteTextFigure ()) {
        getConnectedFigure ().removeDependendFigure (getAddedFigure ());
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="62" endline="64">
protected void setConnectedFigure (Figure pressedFigure) {
    myConnectedFigure = pressedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="66" endline="68">
public Figure getConnectedFigure () {
    return myConnectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="74" endline="77">
public void activate () {
    super.activate ();
    setConnectedFigure (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="79" endline="82">
protected Undoable createDeleteUndoActivity () {
    FigureTransferCommand cmd = new DeleteCommand ("Delete", editor ());
    return new DeleteUndoActivity (cmd, getConnectedFigure ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="87" endline="89">
protected Undoable createUndoActivity () {
    return new ConnectedTextTool.UndoActivity (view (), getTypingTarget ().getText ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="94" endline="96">
public UndoActivity (DrawingView newDrawingView, String newOriginalText) {
    super (newDrawingView, newOriginalText);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="102" endline="124">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        if (currentFigure.getTextHolder () != null) {
            if (! isValidText (getOriginalText ())) {
                currentFigure.getTextHolder ().disconnect (getConnectedFigure ());
            } else if (! isValidText (getBackupText ())) {
                currentFigure.getTextHolder ().connect (getConnectedFigure ());
            }

        }
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="130" endline="151">
public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        if (currentFigure.getTextHolder () != null) {
            if (! isValidText (getBackupText ())) {
                currentFigure.getTextHolder ().disconnect (getConnectedFigure ());
            } else if (! isValidText (getOriginalText ())) {
                currentFigure.getTextHolder ().connect (getConnectedFigure ());
            }

        }
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="153" endline="155">
public void setConnectedFigure (Figure newConnectedFigure) {
    myConnectedFigure = newConnectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="157" endline="159">
public Figure getConnectedFigure () {
    return myConnectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="168" endline="171">
public DeleteUndoActivity (FigureTransferCommand cmd, Figure newConnectedFigure) {
    super (cmd);
    setConnectedFigure (newConnectedFigure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="173" endline="187">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        if (currentFigure.getTextHolder () != null) {
            currentFigure.getTextHolder ().connect (getConnectedFigure ().getDecoratedFigure ());
        }
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="189" endline="203">
public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        if (currentFigure.getTextHolder () != null) {
            currentFigure.getTextHolder ().disconnect (getConnectedFigure ().getDecoratedFigure ());
        }
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="205" endline="207">
public void setConnectedFigure (Figure newConnectedFigure) {
    myConnectedFigure = newConnectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ConnectedTextTool.java" startline="209" endline="211">
public Figure getConnectedFigure () {
    return myConnectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ChopEllipseConnector.java" startline="33" endline="34">
public ChopEllipseConnector () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ChopEllipseConnector.java" startline="36" endline="38">
public ChopEllipseConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ChopEllipseConnector.java" startline="40" endline="44">
protected Point chop (Figure target, Point from) {
    Rectangle r = target.displayBox ();
    double angle = Geom.pointToAngle (r, from);
    return Geom.ovalAngleToPoint (r, angle);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="33" endline="35">
public UngroupCommand (String name, DrawingEditor newDrawingEditor) {
    super (name, newDrawingEditor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="37" endline="46">
public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    view ().clearSelection ();
    ((UngroupCommand.UndoActivity) getUndoActivity ()).ungroupFigures ();
    view ().checkDamage ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="48" endline="61">
public boolean isExecutableWithView () {
    FigureEnumeration fe = view ().selection ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        currentFigure = currentFigure.getDecoratedFigure ();
        if (! (currentFigure instanceof GroupFigure)) {
            return false;
        }
    }
    return view ().selectionCount () > 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="66" endline="68">
protected Undoable createUndoActivity () {
    return new UngroupCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="71" endline="75">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="77" endline="94">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    FigureEnumeration groupFigures = getAffectedFigures ();
    while (groupFigures.hasNextFigure ()) {
        Figure groupFigure = groupFigures.nextFigure ();
        getDrawingView ().drawing ().orphanAll (groupFigure.figures ());
        Figure figure = getDrawingView ().drawing ().add (groupFigure);
        getDrawingView ().addToSelection (figure);
    }
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="96" endline="105">
public boolean redo () {
    if (isRedoable ()) {
        getDrawingView ().drawing ().orphanAll (getAffectedFigures ());
        getDrawingView ().clearSelection ();
        ungroupFigures ();
        return true;
    }
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/UngroupCommand.java" startline="107" endline="116">
protected void ungroupFigures () {
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure selected = fe.nextFigure ();
        Figure group = getDrawingView ().drawing ().orphan (selected);
        getDrawingView ().drawing ().addAll (group.figures ());
        getDrawingView ().addToSelectionAll (group.figures ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupHandle.java" startline="25" endline="27">
public GroupHandle (Figure owner, Locator locator) {
    super (owner, locator);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/GroupHandle.java" startline="32" endline="40">
public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.black);
    g.drawRect (r.x, r.y, r.width, r.height);
    r.grow (- 1, - 1);
    g.setColor (Color.white);
    g.drawRect (r.x, r.y, r.width, r.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="46" endline="48">
public FigureAttributes () {
    fMap = CollectionsFactory.current ().createMap ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="54" endline="56">
public Object get (FigureAttributeConstant attributeConstant) {
    return fMap.get (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="62" endline="69">
public void set (FigureAttributeConstant attributeConstant, Object value) {
    if (value != null) {
        fMap.put (attributeConstant, value);
    } else {
        fMap.remove (attributeConstant);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="74" endline="76">
public boolean hasDefined (FigureAttributeConstant attributeConstant) {
    return fMap.containsKey (attributeConstant);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="81" endline="90">
public Object clone () {
    try {
        FigureAttributes a = (FigureAttributes) super.clone ();
        a.fMap = CollectionsFactory.current ().createMap (fMap);
        return a;
    } catch (CloneNotSupportedException e) {
        throw new InternalError ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="101" endline="139">
public void read (StorableInput dr) throws IOException {
    String s = dr.readString ();
    if (! s.toLowerCase ().equals ("attributes")) {
        throw new IOException ("Attributes expected");
    }
    fMap = CollectionsFactory.current ().createMap ();
    int size = dr.readInt ();
    for (int i = 0;
    i < size; i ++) {
        String key = dr.readString ();
        String valtype = dr.readString ();
        Object val = null;
        if (valtype.equals ("Color")) {
            val = new Color (dr.readInt (), dr.readInt (), dr.readInt ());
        } else if (valtype.equals ("Boolean")) {
            val = new Boolean (dr.readString ());
        } else if (valtype.equals ("String")) {
            val = dr.readString ();
        } else if (valtype.equals ("Int")) {
            val = new Integer (dr.readInt ());
        } else if (valtype.equals ("Storable")) {
            val = dr.readStorable ();
        } else if (valtype.equals (Figure.POPUP_MENU)) {
            continue;
        } else if (valtype.equals ("UNKNOWN")) {
            continue;
        }

        FigureAttributeConstant attributeConstant = FigureAttributeConstant.getConstant (key);
        set (attributeConstant, val);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="150" endline="194">
public void write (StorableOutput dw) {
    dw.writeString ("attributes");
    dw.writeInt (fMap.size ());
    Iterator iter = fMap.keySet ().iterator ();
    while (iter.hasNext ()) {
        FigureAttributeConstant fac = (FigureAttributeConstant) iter.next ();
        String attributeName = fac.getName ();
        Object attributeValue = fMap.get (fac);
        dw.writeString (attributeName);
        if (attributeValue instanceof String) {
            dw.writeString ("String");
            dw.writeString ((String) attributeValue);
        } else if (attributeValue instanceof Color) {
            writeColor (dw, "Color", (Color) attributeValue);
        } else if (attributeValue instanceof Boolean) {
            dw.writeString ("Boolean");
            if (((Boolean) attributeValue).booleanValue ()) {
                dw.writeString ("TRUE");
            } else {
                dw.writeString ("FALSE");
            }
        } else if (attributeValue instanceof Integer) {
            dw.writeString ("Int");
            dw.writeInt (((Integer) attributeValue).intValue ());
        } else if (attributeValue instanceof Storable) {
            dw.writeString ("Storable");
            dw.writeStorable ((Storable) attributeValue);
        } else if (attributeValue instanceof javax.swing.JPopupMenu) {
            dw.writeString (Figure.POPUP_MENU);
        } else {
            System.err.println ("Unknown attribute: " + attributeValue);
            dw.writeString ("UNKNOWN");
        }

    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="196" endline="203">
public static void writeColor (StorableOutput dw, String colorName, Color color) {
    if (color != null) {
        dw.writeString (colorName);
        dw.writeInt (color.getRed ());
        dw.writeInt (color.getGreen ());
        dw.writeInt (color.getBlue ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/FigureAttributes.java" startline="205" endline="207">
public static Color readColor (StorableInput dr) throws IOException {
    return new Color (dr.readInt (), dr.readInt (), dr.readInt ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="31" endline="33">
public BorderTool (DrawingEditor editor) {
    super (editor);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="42" endline="55">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    if ((e.getModifiers () & InputEvent.CTRL_MASK) == 0) {
        super.mouseDown (e, x, y);
    } else {
        Figure target = drawing ().findFigure (x, y);
        if ((target != null) && (target != target.getDecoratedFigure ())) {
            view ().addToSelection (target);
            reverseAction (target);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="60" endline="69">
public void action (Figure figure) {
    setUndoActivity (createUndoActivity ());
    List l = CollectionsFactory.current ().createList ();
    l.add (figure);
    l.add (new BorderDecorator (figure));
    getUndoActivity ().setAffectedFigures (new FigureEnumerator (l));
    ((BorderTool.UndoActivity) getUndoActivity ()).replaceAffectedFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="74" endline="81">
public void reverseAction (Figure figure) {
    setUndoActivity (createUndoActivity ());
    List l = CollectionsFactory.current ().createList ();
    l.add (figure);
    l.add (((DecoratorFigure) figure).peelDecoration ());
    getUndoActivity ().setAffectedFigures (new FigureEnumerator (l));
    ((BorderTool.UndoActivity) getUndoActivity ()).replaceAffectedFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="86" endline="88">
protected Undoable createUndoActivity () {
    return new BorderTool.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="91" endline="95">
public UndoActivity (DrawingView newDrawingView) {
    super (newDrawingView);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="97" endline="103">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    return replaceAffectedFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="105" endline="111">
public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    return replaceAffectedFigures ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/BorderTool.java" startline="113" endline="132">
public boolean replaceAffectedFigures () {
    FigureEnumeration fe = getAffectedFigures ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    Figure oldFigure = fe.nextFigure ();
    if (! fe.hasNextFigure ()) {
        return false;
    }
    Figure replaceFigure = fe.nextFigure ();
    replaceFigure = getDrawingView ().drawing ().replace (oldFigure, replaceFigure);
    List l = CollectionsFactory.current ().createList ();
    l.add (replaceFigure);
    l.add (oldFigure);
    setAffectedFigures (new FigureEnumerator (l));
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="36" endline="38">
protected void basicMoveBy (int dx, int dy) {
    myDisplayBox.translate (dx, dy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="51" endline="54">
public void basicDisplayBox (Point origin, Point corner) {
    myDisplayBox = new Rectangle (origin);
    myDisplayBox.add (corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="60" endline="62">
public Rectangle displayBox () {
    return myDisplayBox;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="68" endline="70">
public void draw (Graphics g) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="80" endline="82">
public HandleEnumeration handles () {
    return HandleEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="87" endline="89">
public boolean isEmpty () {
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="94" endline="96">
public FigureEnumeration figures () {
    return FigureEnumerator.getEmptyEnumeration ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="101" endline="104">
public Figure findFigureInside (int x, int y) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="109" endline="111">
public Object clone () {
    return super.clone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="116" endline="119">
public boolean includes (Figure figure) {
    return false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="125" endline="127">
public FigureEnumeration decompose () {
    return new SingleFigureEnumerator (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="134" endline="136">
public void release () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="143" endline="145">
public void invalidate () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="155" endline="158">
public Object getAttribute (String name) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="166" endline="169">
public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="176" endline="178">
public void setAttribute (String name, Object value) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullFigure.java" startline="183" endline="185">
public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineConnector.java" startline="34" endline="36">
public PolyLineConnector () {
    super ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineConnector.java" startline="41" endline="43">
public PolyLineConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/PolyLineConnector.java" startline="45" endline="89">
protected Point chop (Figure target, Point from) {
    PolyLineFigure p = (PolyLineFigure) owner ();
    Point ctr = p.center ();
    int cx = - 1;
    int cy = - 1;
    long len = Long.MAX_VALUE;
    for (int i = 0;
    i < p.pointCount () - 1; i ++) {
        Point p1 = p.pointAt (i);
        Point p2 = p.pointAt (i + 1);
        Point chop = Geom.intersect (p1.x, p1.y, p2.x, p2.y, from.x, from.y, ctr.x, ctr.y);
        if (chop != null) {
            long cl = Geom.length2 (chop.x, chop.y, from.x, from.y);
            if (cl < len) {
                len = cl;
                cx = chop.x;
                cy = chop.y;
            }
        }
    }
    {
        for (int i = 0;
        i < p.pointCount (); i ++) {
            Point pp = p.pointAt (i);
            long l = Geom.length2 (pp.x, pp.y, from.x, from.y);
            if (l < len) {
                len = l;
                cx = pp.x;
                cy = pp.y;
            }
        }
    } return new Point (cx, cy);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="46" endline="48">
public TextTool (DrawingEditor newDrawingEditor, Figure prototype) {
    super (newDrawingEditor, prototype);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="54" endline="82">
public void mouseDown (MouseEvent e, int x, int y) {
    setView ((DrawingView) e.getSource ());
    if (getTypingTarget () != null) {
        editor ().toolDone ();
        return;
    }
    TextHolder textHolder = null;
    Figure pressedFigure = drawing ().findFigureInside (x, y);
    if (pressedFigure != null) {
        textHolder = pressedFigure.getTextHolder ();
        setSelectedFigure (pressedFigure);
    }
    if ((textHolder != null) && textHolder.acceptsTyping ()) {
        beginEdit (textHolder);
    } else {
        super.mouseDown (e, x, y);
        view ().checkDamage ();
        beginEdit (getCreatedFigure ().getTextHolder ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="84" endline="85">
public void mouseDrag (MouseEvent e, int x, int y) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="87" endline="91">
public void mouseUp (MouseEvent e, int x, int y) {
    if (! isActive ()) {
        editor ().toolDone ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="96" endline="99">
public void deactivate () {
    endEdit ();
    super.deactivate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="104" endline="108">
public void activate () {
    super.activate ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="116" endline="118">
public boolean isActive () {
    return (getTypingTarget () != null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="120" endline="133">
protected void beginEdit (TextHolder figure) {
    if (getFloatingTextField () == null) {
        setFloatingTextField (createFloatingTextField ());
    }
    if (figure != getTypingTarget () && getTypingTarget () != null) {
        endEdit ();
    }
    getFloatingTextField ().createOverlay ((Container) view (), figure.getFont ());
    getFloatingTextField ().setBounds (fieldBounds (figure), figure.getText ());
    setTypingTarget (figure);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="135" endline="174">
protected void endEdit () {
    if (getTypingTarget () != null) {
        if (getAddedFigure () != null) {
            if (! isDeleteTextFigure ()) {
                setUndoActivity (createPasteUndoActivity ());
                getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
                getTypingTarget ().setText (getFloatingTextField ().getText ());
            }
        } else if (isDeleteTextFigure ()) {
            setUndoActivity (createDeleteUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getSelectedFigure ()));
            getUndoActivity ().redo ();
        } else {
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getTypingTarget ().getRepresentingFigure ()));
            getTypingTarget ().setText (getFloatingTextField ().getText ());
            ((TextTool.UndoActivity) getUndoActivity ()).setBackupText (getTypingTarget ().getText ());
        }

        setTypingTarget (null);
        getFloatingTextField ().endOverlay ();
    } else {
        setUndoActivity (null);
    }
    setAddedFigure (null);
    setCreatedFigure (null);
    setSelectedFigure (null);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="176" endline="178">
protected boolean isDeleteTextFigure () {
    return getFloatingTextField ().getText ().length () == 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="180" endline="185">
private Rectangle fieldBounds (TextHolder figure) {
    Rectangle box = figure.textDisplayBox ();
    int nChars = figure.overlayColumns ();
    Dimension d = getFloatingTextField ().getPreferredSize (nChars);
    return new Rectangle (box.x, box.y, d.width, d.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="187" endline="189">
protected void setTypingTarget (TextHolder newTypingTarget) {
    myTypingTarget = newTypingTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="191" endline="193">
protected TextHolder getTypingTarget () {
    return myTypingTarget;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="195" endline="197">
private void setSelectedFigure (Figure newSelectedFigure) {
    mySelectedFigure = newSelectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="199" endline="201">
protected Figure getSelectedFigure () {
    return mySelectedFigure;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="203" endline="205">
private FloatingTextField createFloatingTextField () {
    return new FloatingTextField ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="207" endline="209">
private void setFloatingTextField (FloatingTextField newFloatingTextField) {
    myTextField = newFloatingTextField;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="211" endline="213">
protected FloatingTextField getFloatingTextField () {
    return myTextField;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="215" endline="218">
protected Undoable createDeleteUndoActivity () {
    FigureTransferCommand cmd = new DeleteCommand ("Delete", editor ());
    return new DeleteCommand.UndoActivity (cmd);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="220" endline="222">
protected Undoable createPasteUndoActivity () {
    return new PasteCommand.UndoActivity (view ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="227" endline="229">
protected Undoable createUndoActivity () {
    return new TextTool.UndoActivity (view (), getTypingTarget ().getText ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="235" endline="240">
public UndoActivity (DrawingView newDrawingView, String newOriginalText) {
    super (newDrawingView);
    setOriginalText (newOriginalText);
    setUndoable (true);
    setRedoable (true);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="246" endline="255">
public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    setText (getOriginalText ());
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="261" endline="270">
public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    setText (getBackupText ());
    return true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="272" endline="274">
protected boolean isValidText (String toBeChecked) {
    return ((toBeChecked != null) && (toBeChecked.length () > 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="276" endline="284">
protected void setText (String newText) {
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        if (currentFigure.getTextHolder () != null) {
            currentFigure.getTextHolder ().setText (newText);
        }
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="286" endline="288">
public void setBackupText (String newBackupText) {
    myBackupText = newBackupText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="290" endline="292">
public String getBackupText () {
    return myBackupText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="294" endline="296">
public void setOriginalText (String newOriginalText) {
    myOriginalText = newOriginalText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/TextTool.java" startline="298" endline="300">
public String getOriginalText () {
    return myOriginalText;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullConnector.java" startline="20" endline="22">
private NullConnector () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NullConnector.java" startline="24" endline="26">
public NullConnector (Figure owner) {
    super (owner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="42" endline="46">
public ImageFigure () {
    fFileName = null;
    fImage = null;
    fDisplayBox = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="48" endline="53">
public ImageFigure (Image image, String fileName, Point origin) {
    fFileName = fileName;
    fImage = image;
    basicDisplayBox (origin, new Point (origin.x + fImage.getWidth (this), origin.y + fImage.getHeight (this)));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="55" endline="58">
public void basicDisplayBox (Point origin, Point corner) {
    fDisplayBox = new Rectangle (origin);
    fDisplayBox.add (corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="60" endline="64">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="66" endline="72">
public Rectangle displayBox () {
    return new Rectangle (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="74" endline="76">
protected void basicMoveBy (int x, int y) {
    fDisplayBox.translate (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="78" endline="88">
public void draw (Graphics g) {
    if (fImage == null) {
        fImage = Iconkit.instance ().getImage (fFileName);
    }
    if (fImage != null) {
        g.drawImage (fImage, fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height, this);
    } else {
        drawGhost (g);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="90" endline="93">
private void drawGhost (Graphics g) {
    g.setColor (Color.gray);
    g.fillRect (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="98" endline="106">
public boolean imageUpdate (Image img, int flags, int x, int y, int w, int h) {
    if ((flags & (FRAMEBITS | ALLBITS)) != 0) {
        invalidate ();
        if (listener () != null) {
            listener ().figureRequestUpdate (new FigureChangeEvent (this));
        }
    }
    return (flags & (ALLBITS | ABORT)) == 0;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="113" endline="115">
public void release () {
    fImage.flush ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="121" endline="128">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fDisplayBox.x);
    dw.writeInt (fDisplayBox.y);
    dw.writeInt (fDisplayBox.width);
    dw.writeInt (fDisplayBox.height);
    dw.writeString (fFileName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="135" endline="144">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fDisplayBox = new Rectangle (dr.readInt (), dr.readInt (), dr.readInt (), dr.readInt ());
    fFileName = dr.readString ();
    Iconkit.instance ().registerImage (fFileName);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/ImageFigure.java" startline="146" endline="152">
private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    Iconkit.instance ().registerImage (fFileName);
    fImage = null;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="35" endline="36">
public AbstractLineDecoration () {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="42" endline="62">
public void draw (Graphics g, int x1, int y1, int x2, int y2) {
    Polygon p = outline (x1, y1, x2, y2);
    myBounds = p.getBounds ();
    if (getFillColor () == null) {
        g.fillPolygon (p.xpoints, p.ypoints, p.npoints);
    } else {
        Color drawColor = g.getColor ();
        g.setColor (getFillColor ());
        g.fillPolygon (p.xpoints, p.ypoints, p.npoints);
        g.setColor (drawColor);
    }
    if (getBorderColor () != getFillColor ()) {
        Color drawColor = g.getColor ();
        g.setColor (getBorderColor ());
        g.drawPolygon (p.xpoints, p.ypoints, p.npoints);
        g.setColor (drawColor);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="70" endline="77">
public Rectangle displayBox () {
    if (myBounds != null) {
        return myBounds;
    } else {
        return new Rectangle (0, 0);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="87" endline="101">
public void write (StorableOutput dw) {
    if (getFillColor () != null) {
        FigureAttributes.writeColor (dw, FigureAttributeConstant.FILL_COLOR.getName (), getFillColor ());
    } else {
        dw.writeString ("no" + FigureAttributeConstant.FILL_COLOR.getName ());
    }
    if (getBorderColor () != null) {
        FigureAttributes.writeColor (dw, FigureAttributeConstant.FRAME_COLOR.getName (), getBorderColor ());
    } else {
        dw.writeString ("no" + FigureAttributeConstant.FRAME_COLOR.getName ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="106" endline="118">
public void read (StorableInput dr) throws IOException {
    String fillColorId = dr.readString ();
    if (fillColorId.equals (FigureAttributeConstant.FRAME_COLOR.getName ())) {
        setFillColor (FigureAttributes.readColor (dr));
    }
    String borderColorId = dr.readString ();
    if (borderColorId.equals ("BorderColor") || borderColorId.equals (FigureAttributeConstant.FRAME_COLOR.getName ())) {
        setBorderColor (FigureAttributes.readColor (dr));
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="123" endline="125">
public void setFillColor (Color fillColor) {
    fFillColor = fillColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="130" endline="132">
public Color getFillColor () {
    return fFillColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="137" endline="139">
public void setBorderColor (Color borderColor) {
    fBorderColor = borderColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/AbstractLineDecoration.java" startline="144" endline="146">
public Color getBorderColor () {
    return fBorderColor;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NumberTextFigure.java" startline="33" endline="35">
public int overlayColumns () {
    return Math.max (4, getText ().length ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NumberTextFigure.java" startline="41" endline="50">
public int getValue () {
    int value = 0;
    try {
        value = Integer.parseInt (getText ());
    } catch (NumberFormatException e) {
        value = 0;
    }
    return value;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NumberTextFigure.java" startline="55" endline="57">
public void setValue (int value) {
    setText (Integer.toString (value));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/NumberTextFigure.java" startline="67" endline="69">
public Figure getRepresentingFigure () {
    return this;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="36" endline="38">
public EllipseFigure () {
    this (new Point (0, 0), new Point (0, 0));
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="40" endline="42">
public EllipseFigure (Point origin, Point corner) {
    basicDisplayBox (origin, corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="44" endline="48">
public HandleEnumeration handles () {
    List handles = CollectionsFactory.current ().createList ();
    BoxHandleKit.addHandles (this, handles);
    return new HandleEnumerator (handles);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="50" endline="53">
public void basicDisplayBox (Point origin, Point corner) {
    fDisplayBox = new Rectangle (origin);
    fDisplayBox.add (corner);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="55" endline="61">
public Rectangle displayBox () {
    return new Rectangle (fDisplayBox.x, fDisplayBox.y, fDisplayBox.width, fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="63" endline="65">
protected void basicMoveBy (int x, int y) {
    fDisplayBox.translate (x, y);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="67" endline="70">
public void drawBackground (Graphics g) {
    Rectangle r = displayBox ();
    g.fillOval (r.x, r.y, r.width - 1, r.height - 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="72" endline="75">
public void drawFrame (Graphics g) {
    Rectangle r = displayBox ();
    g.drawOval (r.x, r.y, r.width - 1, r.height - 1);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="77" endline="82">
public Insets connectionInsets () {
    Rectangle r = fDisplayBox;
    int cx = r.width / 2;
    int cy = r.height / 2;
    return new Insets (cy, cx, cy, cx);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="84" endline="86">
public Connector connectorAt (int x, int y) {
    return new ChopEllipseConnector (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="88" endline="94">
public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fDisplayBox.x);
    dw.writeInt (fDisplayBox.y);
    dw.writeInt (fDisplayBox.width);
    dw.writeInt (fDisplayBox.height);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/figures/EllipseFigure.java" startline="96" endline="103">
public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fDisplayBox = new Rectangle (dr.readInt (), dr.readInt (), dr.readInt (), dr.readInt ());
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="66" endline="92">
public void init () {
    createIconkit ();
    getVersionControlStrategy ().assertCompatibleVersion ();
    setUndoManager (new UndoManager ());
    getContentPane ().setLayout (new BorderLayout ());
    fView = createDrawingView ();
    JPanel attributes = createAttributesPanel ();
    createAttributeChoices (attributes);
    getContentPane ().add ("North", attributes);
    JPanel toolPanel = createToolPalette ();
    createTools (toolPanel);
    getContentPane ().add ("West", toolPanel);
    getContentPane ().add ("Center", (Component) view ());
    JPanel buttonPalette = createButtonPanel ();
    createButtons (buttonPalette);
    getContentPane ().add ("South", buttonPalette);
    initDrawing ();
    setupAttributes ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="94" endline="95">
public void addViewChangeListener (ViewChangeListener vsl) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="97" endline="98">
public void removeViewChangeListener (ViewChangeListener vsl) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="100" endline="102">
protected Iconkit createIconkit () {
    return new Iconkit (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="122" endline="126">
protected JPanel createAttributesPanel () {
    JPanel panel = new JPanel ();
    panel.setLayout (new PaletteLayout (2, new Point (2, 2), false));
    return panel;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="132" endline="158">
protected void createAttributeChoices (JPanel panel) {
    panel.add (new JLabel ("Fill"));
    fFillColor = createColorChoice (FigureAttributeConstant.FILL_COLOR);
    panel.add (fFillColor);
    panel.add (new JLabel ("Text"));
    fTextColor = createColorChoice (FigureAttributeConstant.TEXT_COLOR);
    panel.add (fTextColor);
    panel.add (new JLabel ("Pen"));
    fFrameColor = createColorChoice (FigureAttributeConstant.FRAME_COLOR);
    panel.add (fFrameColor);
    panel.add (new JLabel ("Arrow"));
    CommandChoice choice = new CommandChoice ();
    fArrowChoice = choice;
    FigureAttributeConstant arrowMode = FigureAttributeConstant.ARROW_MODE;
    choice.addItem (new ChangeAttributeCommand ("none", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_NONE), this));
    choice.addItem (new ChangeAttributeCommand ("at Start", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_START), this));
    choice.addItem (new ChangeAttributeCommand ("at End", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_END), this));
    choice.addItem (new ChangeAttributeCommand ("at Both", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_BOTH), this));
    panel.add (fArrowChoice);
    panel.add (new JLabel ("Font"));
    fFontChoice = createFontChoice ();
    panel.add (fFontChoice);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="163" endline="175">
protected JComboBox createColorChoice (FigureAttributeConstant attribute) {
    CommandChoice choice = new CommandChoice ();
    for (int i = 0;
    i < ColorMap.size (); i ++) choice.addItem (new ChangeAttributeCommand (ColorMap.name (i), attribute, ColorMap.color (i), this));

    return choice;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="181" endline="188">
protected JComboBox createFontChoice () {
    CommandChoice choice = new CommandChoice ();
    String fonts [] = Toolkit.getDefaultToolkit ().getFontList ();
    for (int i = 0;
    i < fonts.length; i ++) {
        choice.addItem (new ChangeAttributeCommand (fonts [i], FigureAttributeConstant.FONT_NAME, fonts [i], this));
    }
    return choice;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="193" endline="197">
protected JPanel createButtonPanel () {
    JPanel panel = new JPanel ();
    panel.setLayout (new PaletteLayout (2, new Point (2, 2), false));
    return panel;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="204" endline="276">
protected void createButtons (JPanel panel) {
    panel.add (new Filler (24, 20));
    JComboBox drawingChoice = new JComboBox ();
    drawingChoice.addItem (fgUntitled);
    String param = getParameter ("DRAWINGS");
    if (param == null) {
        param = "";
    }
    StringTokenizer st = new StringTokenizer (param);
    while (st.hasMoreTokens ()) {
        drawingChoice.addItem (st.nextToken ());
    }
    if (drawingChoice.getItemCount () > 1) {
        panel.add (drawingChoice);
    } else {
        panel.add (new JLabel (fgUntitled));
    }
    drawingChoice.addItemListener (new ItemListener () {
        public void itemStateChanged (ItemEvent e) {
            if (e.getStateChange () == ItemEvent.SELECTED) {
                loadDrawing ((String) e.getItem ());
            }
        }}

    );
    panel.add (new Filler (6, 20));
    JButton button;
    button = new CommandButton (new DeleteCommand ("Delete", this));
    panel.add (button);
    button = new CommandButton (new DuplicateCommand ("Duplicate", this));
    panel.add (button);
    button = new CommandButton (new GroupCommand ("Group", this));
    panel.add (button);
    button = new CommandButton (new UngroupCommand ("Ungroup", this));
    panel.add (button);
    button = new JButton ("Help");
    button.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            showHelp ();
        }}

    );
    panel.add (button);
    fUpdateButton = new JButton ("Simple Update");
    fUpdateButton.addActionListener (new ActionListener () {
        public void actionPerformed (ActionEvent event) {
            if (fSimpleUpdate) {
                setBufferedDisplayUpdate ();
            } else {
                setSimpleDisplayUpdate ();
            }
        }}

    );
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="228" endline="232">
public void itemStateChanged (ItemEvent e) {
    if (e.getStateChange () == ItemEvent.SELECTED) {
        loadDrawing ((String) e.getItem ());
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="254" endline="256">
public void actionPerformed (ActionEvent event) {
    showHelp ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="264" endline="271">
public void actionPerformed (ActionEvent event) {
    if (fSimpleUpdate) {
        setBufferedDisplayUpdate ();
    } else {
        setSimpleDisplayUpdate ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="281" endline="285">
protected JPanel createToolPalette () {
    JPanel palette = new JPanel ();
    palette.setLayout (new PaletteLayout (2, new Point (2, 2)));
    return palette;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="293" endline="298">
protected void createTools (JPanel palette) {
    Tool tool = createSelectionTool ();
    fDefaultToolButton = createToolButton (IMAGES + "SEL", "Selection Tool", tool);
    palette.add (fDefaultToolButton);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="304" endline="306">
protected Tool createSelectionTool () {
    return new SelectionTool (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="311" endline="313">
protected ToolButton createToolButton (String iconName, String toolName, Tool tool) {
    return new ToolButton (this, iconName, toolName, tool);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="321" endline="323">
protected Drawing createDrawing () {
    return new StandardDrawing ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="331" endline="333">
protected DrawingView createDrawingView () {
    return new StandardDrawingView (this, 410, 370);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="339" endline="343">
public void paletteUserSelected (PaletteButton button) {
    ToolButton toolButton = (ToolButton) button;
    setTool (toolButton.tool (), toolButton.name ());
    setSelected (toolButton);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="349" endline="356">
public void paletteUserOver (PaletteButton button, boolean inside) {
    if (inside) {
        showStatus (button.name ());
    } else if (fSelectedToolButton != null) {
        showStatus (fSelectedToolButton.name ());
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="362" endline="364">
public Drawing drawing () {
    return fDrawing;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="370" endline="372">
public Tool tool () {
    return fTool;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="378" endline="380">
public DrawingView view () {
    return fView;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="382" endline="384">
public DrawingView [] views () {
    return new DrawingView [] {view ()};
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="390" endline="393">
public void toolDone () {
    setTool (fDefaultToolButton.tool (), fDefaultToolButton.name ());
    setSelected (fDefaultToolButton);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="400" endline="402">
public void figureSelectionChanged (DrawingView view) {
    setupAttributes ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="404" endline="405">
public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="407" endline="411">
private void initDrawing () {
    fDrawing = createDrawing ();
    view ().setDrawing (fDrawing);
    toolDone ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="413" endline="422">
private void setTool (Tool t, String name) {
    if (fTool != null) {
        fTool.deactivate ();
    }
    fTool = t;
    if (fTool != null) {
        showStatus (name);
        fTool.activate ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="424" endline="432">
private void setSelected (ToolButton button) {
    if (fSelectedToolButton != null) {
        fSelectedToolButton.reset ();
    }
    fSelectedToolButton = button;
    if (fSelectedToolButton != null) {
        fSelectedToolButton.select ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="434" endline="445">
protected void loadDrawing (String param) {
    if (param == fgUntitled) {
        fDrawing.release ();
        initDrawing ();
        return;
    }
    String filename = getParameter (param);
    if (filename != null) {
        readDrawing (filename);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="447" endline="459">
private void readDrawing (String filename) {
    toolDone ();
    String type = guessType (filename);
    if (type.equals ("storable")) {
        readFromStorableInput (filename);
    } else if (type.equals ("serialized")) {
        readFromObjectInput (filename);
    } else {
        showStatus ("Unknown file type");
    }

}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="461" endline="475">
private void readFromStorableInput (String filename) {
    try {
        URL url = new URL (getCodeBase (), filename);
        InputStream stream = url.openStream ();
        StorableInput input = new StorableInput (stream);
        fDrawing.release ();
        fDrawing = (Drawing) input.readStorable ();
        view ().setDrawing (fDrawing);
    } catch (IOException e) {
        initDrawing ();
        showStatus ("Error:" + e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="477" endline="494">
private void readFromObjectInput (String filename) {
    try {
        URL url = new URL (getCodeBase (), filename);
        InputStream stream = url.openStream ();
        ObjectInput input = new ObjectInputStream (stream);
        fDrawing.release ();
        fDrawing = (Drawing) input.readObject ();
        view ().setDrawing (fDrawing);
    } catch (IOException e) {
        initDrawing ();
        showStatus ("Error: " + e);
    } catch (ClassNotFoundException e) {
        initDrawing ();
        showStatus ("Class not found: " + e);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="496" endline="504">
private String guessType (String file) {
    if (file.endsWith (".draw")) {
        return "storable";
    }
    if (file.endsWith (".ser")) {
        return "serialized";
    }
    return "unknown";
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="506" endline="532">
private void setupAttributes () {
    Color frameColor = (Color) AttributeFigure.getDefaultAttribute (FigureAttributeConstant.FRAME_COLOR);
    Color fillColor = (Color) AttributeFigure.getDefaultAttribute (FigureAttributeConstant.FILL_COLOR);
    Color textColor = (Color) AttributeFigure.getDefaultAttribute (FigureAttributeConstant.TEXT_COLOR);
    Integer arrowMode = (Integer) AttributeFigure.getDefaultAttribute (FigureAttributeConstant.ARROW_MODE);
    String fontName = (String) AttributeFigure.getDefaultAttribute (FigureAttributeConstant.FONT_NAME);
    FigureEnumeration fe = view ().selection ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        frameColor = (Color) f.getAttribute (FigureAttributeConstant.FRAME_COLOR);
        fillColor = (Color) f.getAttribute (FigureAttributeConstant.FILL_COLOR);
        textColor = (Color) f.getAttribute (FigureAttributeConstant.TEXT_COLOR);
        arrowMode = (Integer) f.getAttribute (FigureAttributeConstant.ARROW_MODE);
        fontName = (String) f.getAttribute (FigureAttributeConstant.FONT_NAME);
    }
    fFrameColor.setSelectedIndex (ColorMap.colorIndex (frameColor));
    fFillColor.setSelectedIndex (ColorMap.colorIndex (fillColor));
    if (arrowMode != null) {
        fArrowChoice.setSelectedIndex (arrowMode.intValue ());
    }
    if (fontName != null) {
        fFontChoice.setSelectedItem (fontName);
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="534" endline="538">
protected void setSimpleDisplayUpdate () {
    view ().setDisplayUpdate (new SimpleUpdateStrategy ());
    fUpdateButton.setText ("Simple Update");
    fSimpleUpdate = true;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="540" endline="544">
protected void setBufferedDisplayUpdate () {
    view ().setDisplayUpdate (new BufferedUpdateStrategy ());
    fUpdateButton.setText ("Buffered Update");
    fSimpleUpdate = false;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="550" endline="560">
protected void showHelp () {
    try {
        String appletPath = getClass ().getName ().replace ('.', '/');
        URL url = new URL (getCodeBase (), appletPath + "Help.html");
        getAppletContext ().showDocument (url, "Help");
    } catch (IOException e) {
        showStatus ("Help file not found");
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="562" endline="564">
protected void setUndoManager (UndoManager newUndoManager) {
    myUndoManager = newUndoManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="566" endline="568">
public UndoManager getUndoManager () {
    return myUndoManager;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="570" endline="572">
protected VersionControlStrategy getVersionControlStrategy () {
    return new StandardVersionControlStrategy (this);
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="582" endline="587">
public String [] getRequiredVersions () {
    String [] requiredVersions = new String [1];
    requiredVersions [0] = VersionManagement.getPackageVersion (DrawApplet.class.getPackage ());
    return requiredVersions;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="592" endline="597">
private void startSleeper () {
    if (fSleeper == null) {
        fSleeper = new SleeperThread (this);
    }
    fSleeper.start ();
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="599" endline="603">
private void stopSleeper () {
    if (fSleeper != null) {
        fSleeper.stop ();
    }
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="611" endline="613">
SleeperThread (JApplet applet) {
    fApplet = applet;
}
</source>
<source file="/home/jeff/git/MutationInjectionFramework/testdata/ToolTest/JHotDraw/src/CH/ifa/draw/applet/DrawApplet.java" startline="615" endline="625">
public void run () {
    try {
        for (;;) {
            fApplet.showStatus ("loading icons...");
            sleep (50);
        }
    } catch (InterruptedException e) {
        return;
    }
}
</source>
